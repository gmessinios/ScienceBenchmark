[
  {
    "db_id": "concert_singer",
    "question": "How many singers do we have?",
    "question_toks": [
      "How",
      "many",
      "singers",
      "do",
      "we",
      "have",
      "?"
    ],
    "query": "SELECT count(*) FROM singer",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What is the total number of singers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "singers",
      "?"
    ],
    "query": "SELECT count(*) FROM singer",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "question_toks": [
      "Show",
      "name",
      ",",
      "country",
      ",",
      "age",
      "for",
      "all",
      "singers",
      "ordered",
      "by",
      "age",
      "from",
      "the",
      "oldest",
      "to",
      "the",
      "youngest",
      "."
    ],
    "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "country",
      ",",
      "age",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "desc"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names, countries, and ages for every singer in descending order of age?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      ",",
      "countries",
      ",",
      "and",
      "ages",
      "for",
      "every",
      "singer",
      "in",
      "descending",
      "order",
      "of",
      "age",
      "?"
    ],
    "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "country",
      ",",
      "age",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "desc"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What is the average, minimum, and maximum age of all singers from France?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      ",",
      "minimum",
      ",",
      "and",
      "maximum",
      "age",
      "of",
      "all",
      "singers",
      "from",
      "France",
      "?"
    ],
    "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "from",
      "singer",
      "where",
      "country",
      "=",
      "\"France\""
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What is the average, minimum, and maximum age for all French singers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      ",",
      "minimum",
      ",",
      "and",
      "maximum",
      "age",
      "for",
      "all",
      "French",
      "singers",
      "?"
    ],
    "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "from",
      "singer",
      "where",
      "country",
      "=",
      "\"France\""
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show the name and the release year of the song by the youngest singer.",
    "question_toks": [
      "Show",
      "the",
      "name",
      "and",
      "the",
      "release",
      "year",
      "of",
      "the",
      "song",
      "by",
      "the",
      "youngest",
      "singer",
      "."
    ],
    "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "song_name",
      ",",
      "song_release_year",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names and release years for all the songs of the youngest singer?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "release",
      "years",
      "for",
      "all",
      "the",
      "songs",
      "of",
      "the",
      "youngest",
      "singer",
      "?"
    ],
    "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "song_name",
      ",",
      "song_release_year",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are all distinct countries where singers above age 20 are from?",
    "question_toks": [
      "What",
      "are",
      "all",
      "distinct",
      "countries",
      "where",
      "singers",
      "above",
      "age",
      "20",
      "are",
      "from",
      "?"
    ],
    "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "20"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are  the different countries with singers above age 20?",
    "question_toks": [
      "What",
      "are",
      " ",
      "the",
      "different",
      "countries",
      "with",
      "singers",
      "above",
      "age",
      "20",
      "?"
    ],
    "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "20"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show all countries and the number of singers in each country.",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "."
    ],
    "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "country"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "How many singers are from each country?",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "country"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "List all song names by singers above the average age.",
    "question_toks": [
      "List",
      "all",
      "song",
      "names",
      "by",
      "singers",
      "above",
      "the",
      "average",
      "age",
      "."
    ],
    "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "song_name",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "singer",
      ")"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are all the song names by singers who are older than average?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "song",
      "names",
      "by",
      "singers",
      "who",
      "are",
      "older",
      "than",
      "average",
      "?"
    ],
    "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "song_name",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "singer",
      ")"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "question_toks": [
      "Show",
      "location",
      "and",
      "name",
      "for",
      "all",
      "stadiums",
      "with",
      "a",
      "capacity",
      "between",
      "5000",
      "and",
      "10000",
      "."
    ],
    "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5000.0,
          10000.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "location",
      ",",
      "name",
      "from",
      "stadium",
      "where",
      "capacity",
      "between",
      "5000",
      "and",
      "10000"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
    "question_toks": [
      "What",
      "are",
      "the",
      "locations",
      "and",
      "names",
      "of",
      "all",
      "stations",
      "with",
      "capacity",
      "between",
      "5000",
      "and",
      "10000",
      "?"
    ],
    "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5000.0,
          10000.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "location",
      ",",
      "name",
      "from",
      "stadium",
      "where",
      "capacity",
      "between",
      "5000",
      "and",
      "10000"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What is the average and the maximum capacity of all stadiums?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "and",
      "the",
      "maximum",
      "capacity",
      "of",
      "all",
      "stadiums",
      "?"
    ],
    "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "stadium"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What is the average and maximum capacities for all stations?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "and",
      "maximum",
      "capacities",
      "for",
      "all",
      "stations",
      "?"
    ],
    "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "stadium"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What is the name and capacity for the stadium with highest average attendance?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "capacity",
      "for",
      "the",
      "stadium",
      "with",
      "highest",
      "average",
      "attendance",
      "?"
    ],
    "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "capacity",
      "from",
      "stadium",
      "order",
      "by",
      "average",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What is the name and capacity for the stadium with the highest average attendance?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "capacity",
      "for",
      "the",
      "stadium",
      "with",
      "the",
      "highest",
      "average",
      "attendance",
      "?"
    ],
    "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "capacity",
      "from",
      "stadium",
      "order",
      "by",
      "average",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "How many concerts are there in year 2014 or 2015?",
    "question_toks": [
      "How",
      "many",
      "concerts",
      "are",
      "there",
      "in",
      "year",
      "2014",
      "or",
      "2015",
      "?"
    ],
    "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "year",
      "=",
      "2014",
      "or",
      "year",
      "=",
      "2015"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "How many concerts occurred in 2014 or 2015?",
    "question_toks": [
      "How",
      "many",
      "concerts",
      "occurred",
      "in",
      "2014",
      "or",
      "2015",
      "?"
    ],
    "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "year",
      "=",
      "2014",
      "or",
      "year",
      "=",
      "2015"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show the stadium name and the number of concerts in each stadium.",
    "question_toks": [
      "Show",
      "the",
      "stadium",
      "name",
      "and",
      "the",
      "number",
      "of",
      "concerts",
      "in",
      "each",
      "stadium",
      "."
    ],
    "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "group",
      "by",
      "t1.stadium_id"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "For each stadium, how many concerts play there?",
    "question_toks": [
      "For",
      "each",
      "stadium",
      ",",
      "how",
      "many",
      "concerts",
      "play",
      "there",
      "?"
    ],
    "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "group",
      "by",
      "t1.stadium_id"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "question_toks": [
      "Show",
      "the",
      "stadium",
      "name",
      "and",
      "capacity",
      "with",
      "most",
      "number",
      "of",
      "concerts",
      "in",
      "year",
      "2014",
      "or",
      "after",
      "."
    ],
    "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          5,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "t2.capacity",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "where",
      "t1.year",
      ">=",
      "2014",
      "group",
      "by",
      "t2.stadium_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What is the name and capacity of the stadium  with the most concerts after 2014?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "the",
      "stadium",
      " ",
      "with",
      "the",
      "most",
      "concerts",
      "after",
      "2014",
      "?"
    ],
    "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          5,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "t2.capacity",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "where",
      "t1.year",
      ">=",
      "2014",
      "group",
      "by",
      "t2.stadium_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Which year has most number of concerts?",
    "question_toks": [
      "Which",
      "year",
      "has",
      "most",
      "number",
      "of",
      "concerts",
      "?"
    ],
    "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "year",
      "from",
      "concert",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What is the year that had the most concerts?",
    "question_toks": [
      "What",
      "is",
      "the",
      "year",
      "that",
      "had",
      "the",
      "most",
      "concerts",
      "?"
    ],
    "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "year",
      "from",
      "concert",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show the stadium names without any concert.",
    "question_toks": [
      "Show",
      "the",
      "stadium",
      "names",
      "without",
      "any",
      "concert",
      "."
    ],
    "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      18,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "stadium",
      "where",
      "stadium_id",
      "not",
      "in",
      "(",
      "select",
      "stadium_id",
      "from",
      "concert",
      ")"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names of the stadiums without any concerts?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "stadiums",
      "without",
      "any",
      "concerts",
      "?"
    ],
    "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      18,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "stadium",
      "where",
      "stadium_id",
      "not",
      "in",
      "(",
      "select",
      "stadium_id",
      "from",
      "concert",
      ")"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
    "question_toks": [
      "Show",
      "countries",
      "where",
      "a",
      "singer",
      "above",
      "age",
      "40",
      "and",
      "a",
      "singer",
      "below",
      "30",
      "are",
      "from",
      "."
    ],
    "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          40.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            4,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            30.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "40",
      "intersect",
      "select",
      "country",
      "from",
      "singer",
      "where",
      "age",
      "<",
      "30"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
    "question_toks": [
      "Show",
      "names",
      "for",
      "all",
      "stadiums",
      "except",
      "for",
      "stadiums",
      "having",
      "a",
      "concert",
      "in",
      "year",
      "2014",
      "."
    ],
    "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2014.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "stadium",
      "except",
      "select",
      "t2.name",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "where",
      "t1.year",
      "=",
      "2014"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names of all stadiums that did not have a concert in 2014?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "stadiums",
      "that",
      "did",
      "not",
      "have",
      "a",
      "concert",
      "in",
      "2014",
      "?"
    ],
    "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2014.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "stadium",
      "except",
      "select",
      "t2.name",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "where",
      "t1.year",
      "=",
      "2014"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Show the name and theme for all concerts and the number of singers in each concert.",
    "question_toks": [
      "Show",
      "the",
      "name",
      "and",
      "theme",
      "for",
      "all",
      "concerts",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "concert",
      "."
    ],
    "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.concert_name",
      ",",
      "t2.theme",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "concert",
      "as",
      "t2",
      "on",
      "t1.concert_id",
      "=",
      "t2.concert_id",
      "group",
      "by",
      "t2.concert_id"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names, themes, and number of singers for each and every concert?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      ",",
      "themes",
      ",",
      "and",
      "number",
      "of",
      "singers",
      "for",
      "each",
      "and",
      "every",
      "concert",
      "?"
    ],
    "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.concert_name",
      ",",
      "t2.theme",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "concert",
      "as",
      "t2",
      "on",
      "t1.concert_id",
      "=",
      "t2.concert_id",
      "group",
      "by",
      "t2.concert_id"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "List singer names and number of concerts for each singer.",
    "question_toks": [
      "List",
      "singer",
      "names",
      "and",
      "number",
      "of",
      "concerts",
      "for",
      "each",
      "singer",
      "."
    ],
    "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id",
      "group",
      "by",
      "t2.singer_id"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names of the singers and number of concerts for each person?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "and",
      "number",
      "of",
      "concerts",
      "for",
      "each",
      "person",
      "?"
    ],
    "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id",
      "group",
      "by",
      "t2.singer_id"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "List all singer names in concerts in year 2014.",
    "question_toks": [
      "List",
      "all",
      "singer",
      "names",
      "in",
      "concerts",
      "in",
      "year",
      "2014",
      "."
    ],
    "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id",
      "join",
      "concert",
      "as",
      "t3",
      "on",
      "t1.concert_id",
      "=",
      "t3.concert_id",
      "where",
      "t3.year",
      "=",
      "2014"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names of the singers who performed in a concert in 2014?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "who",
      "performed",
      "in",
      "a",
      "concert",
      "in",
      "2014",
      "?"
    ],
    "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id",
      "join",
      "concert",
      "as",
      "t3",
      "on",
      "t1.concert_id",
      "=",
      "t3.concert_id",
      "where",
      "t3.year",
      "=",
      "2014"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "question_toks": [
      "what",
      "is",
      "the",
      "name",
      "and",
      "nation",
      "of",
      "the",
      "singer",
      "who",
      "have",
      "a",
      "song",
      "having",
      "'",
      "Hey",
      "'",
      "in",
      "its",
      "name",
      "?"
    ],
    "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"%Hey%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "country",
      "from",
      "singer",
      "where",
      "song_name",
      "like",
      "\"%Hey%\""
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "country",
      "of",
      "origin",
      "of",
      "every",
      "singer",
      "who",
      "has",
      "a",
      "song",
      "with",
      "the",
      "word",
      "'",
      "Hey",
      "'",
      "in",
      "its",
      "title",
      "?"
    ],
    "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"%Hey%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "country",
      "from",
      "singer",
      "where",
      "song_name",
      "like",
      "\"%Hey%\""
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "location",
      "of",
      "the",
      "stadiums",
      "which",
      "some",
      "concerts",
      "happened",
      "in",
      "the",
      "years",
      "of",
      "both",
      "2014",
      "and",
      "2015",
      "."
    ],
    "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2015.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "t2.location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "where",
      "t1.year",
      "=",
      "2014",
      "intersect",
      "select",
      "t2.name",
      ",",
      "t2.location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "where",
      "t1.year",
      "=",
      "2015"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "locations",
      "of",
      "the",
      "stadiums",
      "that",
      "had",
      "concerts",
      "that",
      "occurred",
      "in",
      "both",
      "2014",
      "and",
      "2015",
      "?"
    ],
    "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2015.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "t2.location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "where",
      "t1.year",
      "=",
      "2014",
      "intersect",
      "select",
      "t2.name",
      ",",
      "t2.location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "where",
      "t1.year",
      "=",
      "2015"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "Find the number of concerts happened in the stadium with the highest capacity.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "concerts",
      "happened",
      "in",
      "the",
      "stadium",
      "with",
      "the",
      "highest",
      "capacity",
      "."
    ],
    "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "order",
      "by",
      "t2.capacity",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "concert_singer",
    "question": "What are the number of concerts that occurred in the stadium with the largest capacity?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "concerts",
      "that",
      "occurred",
      "in",
      "the",
      "stadium",
      "with",
      "the",
      "largest",
      "capacity",
      "?"
    ],
    "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "order",
      "by",
      "t2.capacity",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the number of pets whose weight is heavier than 10.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "pets",
      "whose",
      "weight",
      "is",
      "heavier",
      "than",
      "10",
      "."
    ],
    "query": "SELECT count(*) FROM pets WHERE weight  >  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "pets",
      "where",
      "weight",
      ">",
      "10"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "How many pets have a greater weight than 10?",
    "question_toks": [
      "How",
      "many",
      "pets",
      "have",
      "a",
      "greater",
      "weight",
      "than",
      "10",
      "?"
    ],
    "query": "SELECT count(*) FROM pets WHERE weight  >  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "pets",
      "where",
      "weight",
      ">",
      "10"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the weight of the youngest dog.",
    "question_toks": [
      "Find",
      "the",
      "weight",
      "of",
      "the",
      "youngest",
      "dog",
      "."
    ],
    "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "How much does the youngest dog weigh?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "youngest",
      "dog",
      "weigh",
      "?"
    ],
    "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
    "question_toks": [
      "Find",
      "the",
      "maximum",
      "weight",
      "for",
      "each",
      "type",
      "of",
      "pet",
      ".",
      "List",
      "the",
      "maximum",
      "weight",
      "and",
      "pet",
      "type",
      "."
    ],
    "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "List the maximum weight and type for each type of pet.",
    "question_toks": [
      "List",
      "the",
      "maximum",
      "weight",
      "and",
      "type",
      "for",
      "each",
      "type",
      "of",
      "pet",
      "."
    ],
    "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find number of pets owned by students who are older than 20.",
    "question_toks": [
      "Find",
      "number",
      "of",
      "pets",
      "owned",
      "by",
      "students",
      "who",
      "are",
      "older",
      "than",
      "20",
      "."
    ],
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "where",
      "t1.age",
      ">",
      "20"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "How many pets are owned by students that have an age greater than 20?",
    "question_toks": [
      "How",
      "many",
      "pets",
      "are",
      "owned",
      "by",
      "students",
      "that",
      "have",
      "an",
      "age",
      "greater",
      "than",
      "20",
      "?"
    ],
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "where",
      "t1.age",
      ">",
      "20"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the number of dog pets that are raised by female students (with sex F).",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "dog",
      "pets",
      "that",
      "are",
      "raised",
      "by",
      "female",
      "students",
      "(",
      "with",
      "sex",
      "F",
      ")",
      "."
    ],
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"F\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t2.petid",
      "=",
      "t3.petid",
      "where",
      "t1.sex",
      "=",
      "\"F\"",
      "and",
      "t3.pettype",
      "=",
      "\"dog\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "How many dog pets are raised by female students?",
    "question_toks": [
      "How",
      "many",
      "dog",
      "pets",
      "are",
      "raised",
      "by",
      "female",
      "students",
      "?"
    ],
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"F\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t2.petid",
      "=",
      "t3.petid",
      "where",
      "t1.sex",
      "=",
      "\"F\"",
      "and",
      "t3.pettype",
      "=",
      "\"dog\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the number of distinct type of pets.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "distinct",
      "type",
      "of",
      "pets",
      "."
    ],
    "query": "SELECT count(DISTINCT pettype) FROM pets",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "pettype",
      ")",
      "from",
      "pets"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "How many different types of pet are there?",
    "question_toks": [
      "How",
      "many",
      "different",
      "types",
      "of",
      "pet",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(DISTINCT pettype) FROM pets",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "pettype",
      ")",
      "from",
      "pets"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the first name of students who have cat or dog pet.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "of",
      "students",
      "who",
      "have",
      "cat",
      "or",
      "dog",
      "pet",
      "."
    ],
    "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\"",
      "or",
      "t3.pettype",
      "=",
      "\"dog\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What are the first names of every student who has a cat or dog as a pet?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "every",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "or",
      "dog",
      "as",
      "a",
      "pet",
      "?"
    ],
    "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\"",
      "or",
      "t3.pettype",
      "=",
      "\"dog\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the name of students who have both cat and dog pets.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "students",
      "who",
      "have",
      "both",
      "cat",
      "and",
      "dog",
      "pets",
      "."
    ],
    "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"dog\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\"",
      "intersect",
      "select",
      "t1.fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"dog\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What are the students' first names who have both cats and dogs as pets?",
    "question_toks": [
      "What",
      "are",
      "the",
      "students",
      "'",
      "first",
      "names",
      "who",
      "have",
      "both",
      "cats",
      "and",
      "dogs",
      "as",
      "pets",
      "?"
    ],
    "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"dog\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\"",
      "intersect",
      "select",
      "t1.fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"dog\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the major and age of students who do not have a cat pet.",
    "question_toks": [
      "Find",
      "the",
      "major",
      "and",
      "age",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "a",
      "cat",
      "pet",
      "."
    ],
    "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ],
                "and",
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "major",
      ",",
      "age",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\"",
      ")"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
    "question_toks": [
      "What",
      "major",
      "is",
      "every",
      "student",
      "who",
      "does",
      "not",
      "own",
      "a",
      "cat",
      "as",
      "a",
      "pet",
      ",",
      "and",
      "also",
      "how",
      "old",
      "are",
      "they",
      "?"
    ],
    "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ],
                "and",
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "major",
      ",",
      "age",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\"",
      ")"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the id of students who do not have a cat pet.",
    "question_toks": [
      "Find",
      "the",
      "i",
      "d",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "a",
      "cat",
      "pet",
      "."
    ],
    "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"cat\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "stuid",
      "from",
      "student",
      "except",
      "select",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What are the ids of the students who do not own cats as pets?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "the",
      "students",
      "who",
      "do",
      "not",
      "own",
      "cats",
      "as",
      "pets",
      "?"
    ],
    "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"cat\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "stuid",
      "from",
      "student",
      "except",
      "select",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "age",
      "of",
      "students",
      "who",
      "have",
      "a",
      "dog",
      "but",
      "do",
      "not",
      "have",
      "a",
      "cat",
      "as",
      "a",
      "pet",
      "."
    ],
    "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ],
                "and",
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.fname",
      ",",
      "t1.age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"dog\"",
      "and",
      "t1.stuid",
      "not",
      "in",
      "(",
      "select",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\"",
      ")"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What is the first name of every student who has a dog but does not have a cat?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "of",
      "every",
      "student",
      "who",
      "has",
      "a",
      "dog",
      "but",
      "does",
      "not",
      "have",
      "a",
      "cat",
      "?"
    ],
    "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ],
                "and",
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.fname",
      ",",
      "t1.age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"dog\"",
      "and",
      "t1.stuid",
      "not",
      "in",
      "(",
      "select",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\"",
      ")"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the type and weight of the youngest pet.",
    "question_toks": [
      "Find",
      "the",
      "type",
      "and",
      "weight",
      "of",
      "the",
      "youngest",
      "pet",
      "."
    ],
    "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "pettype",
      ",",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What type of pet is the youngest animal, and how much does it weigh?",
    "question_toks": [
      "What",
      "type",
      "of",
      "pet",
      "is",
      "the",
      "youngest",
      "animal",
      ",",
      "and",
      "how",
      "much",
      "does",
      "it",
      "weigh",
      "?"
    ],
    "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "pettype",
      ",",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the id and weight of all pets whose age is older than 1.",
    "question_toks": [
      "Find",
      "the",
      "i",
      "d",
      "and",
      "weight",
      "of",
      "all",
      "pets",
      "whose",
      "age",
      "is",
      "older",
      "than",
      "1",
      "."
    ],
    "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "petid",
      ",",
      "weight",
      "from",
      "pets",
      "where",
      "pet_age",
      ">",
      "1"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What is the id and weight of every pet who is older than 1?",
    "question_toks": [
      "What",
      "is",
      "the",
      "i",
      "d",
      "and",
      "weight",
      "of",
      "every",
      "pet",
      "who",
      "is",
      "older",
      "than",
      "1",
      "?"
    ],
    "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "petid",
      ",",
      "weight",
      "from",
      "pets",
      "where",
      "pet_age",
      ">",
      "1"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the average and maximum age for each type of pet.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "and",
      "maximum",
      "age",
      "for",
      "each",
      "type",
      "of",
      "pet",
      "."
    ],
    "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "pet_age",
      ")",
      ",",
      "max",
      "(",
      "pet_age",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What is the average and maximum age for each pet type?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "and",
      "maximum",
      "age",
      "for",
      "each",
      "pet",
      "type",
      "?"
    ],
    "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "pet_age",
      ")",
      ",",
      "max",
      "(",
      "pet_age",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the average weight for each pet type.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "weight",
      "for",
      "each",
      "pet",
      "type",
      "."
    ],
    "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What is the average weight for each type of pet?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "weight",
      "for",
      "each",
      "type",
      "of",
      "pet",
      "?"
    ],
    "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the first name and age of students who have a pet.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "age",
      "of",
      "students",
      "who",
      "have",
      "a",
      "pet",
      "."
    ],
    "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.fname",
      ",",
      "t1.age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What are the different first names and ages of the students who do have pets?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "first",
      "names",
      "and",
      "ages",
      "of",
      "the",
      "students",
      "who",
      "do",
      "have",
      "pets",
      "?"
    ],
    "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.fname",
      ",",
      "t1.age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
    "question_toks": [
      "Find",
      "the",
      "i",
      "d",
      "of",
      "the",
      "pet",
      "owned",
      "by",
      "student",
      "whose",
      "last",
      "name",
      "is",
      "\u2018",
      "Smith",
      "\u2019",
      "."
    ],
    "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Smith\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.petid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "where",
      "t1.lname",
      "=",
      "\"Smith\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
    "question_toks": [
      "What",
      "is",
      "the",
      "i",
      "d",
      "of",
      "the",
      "pet",
      "owned",
      "by",
      "the",
      "student",
      "whose",
      "last",
      "name",
      "is",
      "'",
      "Smith",
      "'",
      "?"
    ],
    "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Smith\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.petid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "where",
      "t1.lname",
      "=",
      "\"Smith\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the number of pets for each student who has any pet and student id.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "pets",
      "for",
      "each",
      "student",
      "who",
      "has",
      "any",
      "pet",
      "and",
      "student",
      "i",
      "d."
    ],
    "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "group",
      "by",
      "t1.stuid"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "For students who have pets, how many pets does each student have?",
    "question_toks": [
      "For",
      "students",
      "who",
      "have",
      "pets",
      ",",
      "how",
      "many",
      "pets",
      "does",
      "each",
      "student",
      "have",
      "?"
    ],
    "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "group",
      "by",
      "t1.stuid"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the first name and gender of student who have more than one pet.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "gender",
      "of",
      "student",
      "who",
      "have",
      "more",
      "than",
      "one",
      "pet",
      "."
    ],
    "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.fname",
      ",",
      "t1.sex",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "group",
      "by",
      "t1.stuid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What is the first name and gender of the all the students who have more than one pet?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "gender",
      "of",
      "the",
      "all",
      "the",
      "students",
      "who",
      "have",
      "more",
      "than",
      "one",
      "pet",
      "?"
    ],
    "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.fname",
      ",",
      "t1.sex",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "group",
      "by",
      "t1.stuid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the last name of the student who has a cat that is age 3.",
    "question_toks": [
      "Find",
      "the",
      "last",
      "name",
      "of",
      "the",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "that",
      "is",
      "age",
      "3",
      "."
    ],
    "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          3.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.lname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pet_age",
      "=",
      "3",
      "and",
      "t3.pettype",
      "=",
      "\"cat\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What is the last name of the student who has a cat that is 3 years old?",
    "question_toks": [
      "What",
      "is",
      "the",
      "last",
      "name",
      "of",
      "the",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "that",
      "is",
      "3",
      "years",
      "old",
      "?"
    ],
    "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          3.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.lname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pet_age",
      "=",
      "3",
      "and",
      "t3.pettype",
      "=",
      "\"cat\""
    ]
  },
  {
    "db_id": "pets_1",
    "question": "Find the average age of students who do not have any pet.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "age",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "pet",
      "."
    ],
    "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      ")"
    ]
  },
  {
    "db_id": "pets_1",
    "question": "What is the average age for all students who do not own any pets?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "for",
      "all",
      "students",
      "who",
      "do",
      "not",
      "own",
      "any",
      "pets",
      "?"
    ],
    "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      ")"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many continents are there?",
    "question_toks": [
      "How",
      "many",
      "continents",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM CONTINENTS;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of continents?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "continents",
      "?"
    ],
    "query": "SELECT count(*) FROM CONTINENTS;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
    "question_toks": [
      "How",
      "many",
      "countries",
      "does",
      "each",
      "continent",
      "have",
      "?",
      "List",
      "the",
      "continent",
      "i",
      "d",
      ",",
      "continent",
      "name",
      "and",
      "the",
      "number",
      "of",
      "countries",
      "."
    ],
    "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.contid",
      ",",
      "t1.continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1.contid",
      "=",
      "t2.continent",
      "group",
      "by",
      "t1.contid",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "For each continent, list its id, name, and how many countries it has?",
    "question_toks": [
      "For",
      "each",
      "continent",
      ",",
      "list",
      "its",
      "i",
      "d",
      ",",
      "name",
      ",",
      "and",
      "how",
      "many",
      "countries",
      "it",
      "has",
      "?"
    ],
    "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.contid",
      ",",
      "t1.continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1.contid",
      "=",
      "t2.continent",
      "group",
      "by",
      "t1.contid",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many countries are listed?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "are",
      "listed",
      "?"
    ],
    "query": "SELECT count(*) FROM COUNTRIES;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many countries exist?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "exist",
      "?"
    ],
    "query": "SELECT count(*) FROM COUNTRIES;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many models does each car maker produce? List maker full name, id and the number.",
    "question_toks": [
      "How",
      "many",
      "models",
      "does",
      "each",
      "car",
      "maker",
      "produce",
      "?",
      "List",
      "maker",
      "full",
      "name",
      ",",
      "i",
      "d",
      "and",
      "the",
      "number",
      "."
    ],
    "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.fullname",
      ",",
      "t1.id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "group",
      "by",
      "t1.id",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the full name of each car maker, along with its id and how many models it produces?",
    "question_toks": [
      "What",
      "is",
      "the",
      "full",
      "name",
      "of",
      "each",
      "car",
      "maker",
      ",",
      "along",
      "with",
      "its",
      "i",
      "d",
      "and",
      "how",
      "many",
      "models",
      "it",
      "produces",
      "?"
    ],
    "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.fullname",
      ",",
      "t1.id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "group",
      "by",
      "t1.id",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Which model of the car has the minimum horsepower?",
    "question_toks": [
      "Which",
      "model",
      "of",
      "the",
      "car",
      "has",
      "the",
      "minimum",
      "horsepower",
      "?"
    ],
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "order",
      "by",
      "t2.horsepower",
      "asc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the model of the car with the smallest amount of horsepower?",
    "question_toks": [
      "What",
      "is",
      "the",
      "model",
      "of",
      "the",
      "car",
      "with",
      "the",
      "smallest",
      "amount",
      "of",
      "horsepower",
      "?"
    ],
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "order",
      "by",
      "t2.horsepower",
      "asc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Find the model of the car whose weight is below the average weight.",
    "question_toks": [
      "Find",
      "the",
      "model",
      "of",
      "the",
      "car",
      "whose",
      "weight",
      "is",
      "below",
      "the",
      "average",
      "weight",
      "."
    ],
    "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "where",
      "t2.weight",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "weight",
      ")",
      "from",
      "cars_data",
      ")"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the model for the car with a weight smaller than the average?",
    "question_toks": [
      "What",
      "is",
      "the",
      "model",
      "for",
      "the",
      "car",
      "with",
      "a",
      "weight",
      "smaller",
      "than",
      "the",
      "average",
      "?"
    ],
    "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "where",
      "t2.weight",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "weight",
      ")",
      "from",
      "cars_data",
      ")"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Find the name of the makers that produced some cars in the year of 1970?",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "makers",
      "that",
      "produced",
      "some",
      "cars",
      "in",
      "the",
      "year",
      "of",
      "1970",
      "?"
    ],
    "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"1970\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2.model",
      "=",
      "t3.model",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t3.makeid",
      "=",
      "t4.id",
      "where",
      "t4.year",
      "=",
      "\"1970\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the name of the different car makers who produced a car in 1970?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "different",
      "car",
      "makers",
      "who",
      "produced",
      "a",
      "car",
      "in",
      "1970",
      "?"
    ],
    "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"1970\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2.model",
      "=",
      "t3.model",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t3.makeid",
      "=",
      "t4.id",
      "where",
      "t4.year",
      "=",
      "\"1970\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Find the make and production time of the cars that were produced in the earliest year?",
    "question_toks": [
      "Find",
      "the",
      "make",
      "and",
      "production",
      "time",
      "of",
      "the",
      "cars",
      "that",
      "were",
      "produced",
      "in",
      "the",
      "earliest",
      "year",
      "?"
    ],
    "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.make",
      ",",
      "t1.year",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.makeid",
      "where",
      "t1.year",
      "=",
      "(",
      "select",
      "min",
      "(",
      "year",
      ")",
      "from",
      "cars_data",
      ")",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the maker of the carr produced in the earliest year and what year was it?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maker",
      "of",
      "the",
      "carr",
      "produced",
      "in",
      "the",
      "earliest",
      "year",
      "and",
      "what",
      "year",
      "was",
      "it",
      "?"
    ],
    "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.make",
      ",",
      "t1.year",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.makeid",
      "where",
      "t1.year",
      "=",
      "(",
      "select",
      "min",
      "(",
      "year",
      ")",
      "from",
      "cars_data",
      ")",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Which distinct car models are the produced after 1980?",
    "question_toks": [
      "Which",
      "distinct",
      "car",
      "models",
      "are",
      "the",
      "produced",
      "after",
      "1980",
      "?"
    ],
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.model",
      "=",
      "t2.model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2.makeid",
      "=",
      "t3.id",
      "where",
      "t3.year",
      ">",
      "1980",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the different models for the cards produced after 1980?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "models",
      "for",
      "the",
      "cards",
      "produced",
      "after",
      "1980",
      "?"
    ],
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.model",
      "=",
      "t2.model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2.makeid",
      "=",
      "t3.id",
      "where",
      "t3.year",
      ">",
      "1980",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many car makers are there in each continents? List the continent name and the count.",
    "question_toks": [
      "How",
      "many",
      "car",
      "makers",
      "are",
      "there",
      "in",
      "each",
      "continents",
      "?",
      "List",
      "the",
      "continent",
      "name",
      "and",
      "the",
      "count",
      "."
    ],
    "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1.contid",
      "=",
      "t2.continent",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2.countryid",
      "=",
      "t3.country",
      "group",
      "by",
      "t1.continent",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the name of each continent and how many car makers are there in each one?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "each",
      "continent",
      "and",
      "how",
      "many",
      "car",
      "makers",
      "are",
      "there",
      "in",
      "each",
      "one",
      "?"
    ],
    "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1.contid",
      "=",
      "t2.continent",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2.countryid",
      "=",
      "t3.country",
      "group",
      "by",
      "t1.continent",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Which of the countries has the most car makers? List the country name.",
    "question_toks": [
      "Which",
      "of",
      "the",
      "countries",
      "has",
      "the",
      "most",
      "car",
      "makers",
      "?",
      "List",
      "the",
      "country",
      "name",
      "."
    ],
    "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.countryname",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1.country",
      "=",
      "t2.countryid",
      "group",
      "by",
      "t1.country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the name of the country with the most car makers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "country",
      "with",
      "the",
      "most",
      "car",
      "makers",
      "?"
    ],
    "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.countryname",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1.country",
      "=",
      "t2.countryid",
      "group",
      "by",
      "t1.country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many car models are produced by each maker? List the count and the maker full name.",
    "question_toks": [
      "How",
      "many",
      "car",
      "models",
      "are",
      "produced",
      "by",
      "each",
      "maker",
      "?",
      "List",
      "the",
      "count",
      "and",
      "the",
      "maker",
      "full",
      "name",
      "."
    ],
    "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2.fullname",
      ",",
      "t2.id",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.maker",
      "=",
      "t2.id",
      "group",
      "by",
      "t2.id",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "car",
      "models",
      "that",
      "are",
      "produced",
      "by",
      "each",
      "maker",
      "and",
      "what",
      "is",
      "the",
      "i",
      "d",
      "and",
      "full",
      "name",
      "of",
      "each",
      "maker",
      "?"
    ],
    "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2.fullname",
      ",",
      "t2.id",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.maker",
      "=",
      "t2.id",
      "group",
      "by",
      "t2.id",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
    "question_toks": [
      "What",
      "is",
      "the",
      "accelerate",
      "of",
      "the",
      "car",
      "make",
      "amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "?"
    ],
    "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"amc hornet sportabout (sw)\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.accelerate",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.makeid",
      "where",
      "t2.make",
      "=",
      "\"amc hornet sportabout (sw)\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "car",
      "accelerate",
      "that",
      "makes",
      "amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "?"
    ],
    "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"amc hornet sportabout (sw)\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.accelerate",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.makeid",
      "where",
      "t2.make",
      "=",
      "\"amc hornet sportabout (sw)\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many car makers are there in france?",
    "question_toks": [
      "How",
      "many",
      "car",
      "makers",
      "are",
      "there",
      "in",
      "france",
      "?"
    ],
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"france\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1.country",
      "=",
      "t2.countryid",
      "where",
      "t2.countryname",
      "=",
      "\"france\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of makers of care in France?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "makers",
      "of",
      "care",
      "in",
      "France",
      "?"
    ],
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"france\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1.country",
      "=",
      "t2.countryid",
      "where",
      "t2.countryname",
      "=",
      "\"france\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many car models are produced in the usa?",
    "question_toks": [
      "How",
      "many",
      "car",
      "models",
      "are",
      "produced",
      "in",
      "the",
      "usa",
      "?"
    ],
    "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"usa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.maker",
      "=",
      "t2.id",
      "join",
      "countries",
      "as",
      "t3",
      "on",
      "t2.country",
      "=",
      "t3.countryid",
      "where",
      "t3.countryname",
      "=",
      "\"usa\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the count of the car models produced in the United States?",
    "question_toks": [
      "What",
      "is",
      "the",
      "count",
      "of",
      "the",
      "car",
      "models",
      "produced",
      "in",
      "the",
      "United",
      "States",
      "?"
    ],
    "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"usa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.maker",
      "=",
      "t2.id",
      "join",
      "countries",
      "as",
      "t3",
      "on",
      "t2.country",
      "=",
      "t3.countryid",
      "where",
      "t3.countryname",
      "=",
      "\"usa\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "miles",
      "per",
      "gallon(mpg",
      ")",
      "of",
      "the",
      "cars",
      "with",
      "4",
      "cylinders",
      "?"
    ],
    "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "4",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "miles",
      "per",
      "gallon",
      "of",
      "all",
      "the",
      "cards",
      "with",
      "4",
      "cylinders",
      "?"
    ],
    "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "4",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the smallest weight of the car produced with 4 cylinders on 1974?",
    "question_toks": [
      "What",
      "is",
      "the",
      "smallest",
      "weight",
      "of",
      "the",
      "car",
      "produced",
      "with",
      "4",
      "cylinders",
      "on",
      "1974",
      "?"
    ],
    "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1974.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "weight",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "4",
      "and",
      "year",
      "=",
      "1974",
      "order",
      "by",
      "weight",
      "asc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the minimu weight of the car with 4 cylinders produced in 1974?",
    "question_toks": [
      "What",
      "is",
      "the",
      "minimu",
      "weight",
      "of",
      "the",
      "car",
      "with",
      "4",
      "cylinders",
      "produced",
      "in",
      "1974",
      "?"
    ],
    "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1974.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "weight",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "4",
      "and",
      "year",
      "=",
      "1974",
      "order",
      "by",
      "weight",
      "asc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are all the makers and models?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "makers",
      "and",
      "models",
      "?"
    ],
    "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "maker",
      ",",
      "model",
      "from",
      "model_list",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the makers and models?",
    "question_toks": [
      "What",
      "are",
      "the",
      "makers",
      "and",
      "models",
      "?"
    ],
    "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "maker",
      ",",
      "model",
      "from",
      "model_list",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the countries having at least one car maker? List name and id.",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "having",
      "at",
      "least",
      "one",
      "car",
      "maker",
      "?",
      "List",
      "name",
      "and",
      "i",
      "d."
    ],
    "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.countryname",
      ",",
      "t1.countryid",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "group",
      "by",
      "t1.countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the names and ids of all countries with at least one car maker?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ids",
      "of",
      "all",
      "countries",
      "with",
      "at",
      "least",
      "one",
      "car",
      "maker",
      "?"
    ],
    "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.countryname",
      ",",
      "t1.countryid",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "group",
      "by",
      "t1.countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of the cars with horsepower more than 150?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "the",
      "cars",
      "with",
      "horsepower",
      "more",
      "than",
      "150",
      "?"
    ],
    "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          150.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "horsepower",
      ">",
      "150",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of cars with a horsepower greater than 150?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "cars",
      "with",
      "a",
      "horsepower",
      "greater",
      "than",
      "150",
      "?"
    ],
    "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          150.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "horsepower",
      ">",
      "150",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the average weight of cars each year?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "weight",
      "of",
      "cars",
      "each",
      "year",
      "?"
    ],
    "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "year",
      "from",
      "cars_data",
      "group",
      "by",
      "year",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the average weight and year for each year?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "weight",
      "and",
      "year",
      "for",
      "each",
      "year",
      "?"
    ],
    "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "year",
      "from",
      "cars_data",
      "group",
      "by",
      "year",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Which countries in europe have at least 3 car manufacturers?",
    "question_toks": [
      "Which",
      "countries",
      "in",
      "europe",
      "have",
      "at",
      "least",
      "3",
      "car",
      "manufacturers",
      "?"
    ],
    "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"europe\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "continents",
      "as",
      "t2",
      "on",
      "t1.continent",
      "=",
      "t2.contid",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t1.countryid",
      "=",
      "t3.country",
      "where",
      "t2.continent",
      "=",
      "\"europe\"",
      "group",
      "by",
      "t1.countryname",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "3",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the names of all European countries with at least 3 manufacturers?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "European",
      "countries",
      "with",
      "at",
      "least",
      "3",
      "manufacturers",
      "?"
    ],
    "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"europe\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "continents",
      "as",
      "t2",
      "on",
      "t1.continent",
      "=",
      "t2.contid",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t1.countryid",
      "=",
      "t3.country",
      "where",
      "t2.continent",
      "=",
      "\"europe\"",
      "group",
      "by",
      "t1.countryname",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "3",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "horsepower",
      "and",
      "the",
      "make",
      "of",
      "the",
      "car",
      "models",
      "with",
      "3",
      "cylinders",
      "?"
    ],
    "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.horsepower",
      ",",
      "t1.make",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "where",
      "t2.cylinders",
      "=",
      "3",
      "order",
      "by",
      "t2.horsepower",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "question_toks": [
      "What",
      "is",
      "the",
      "largest",
      "amount",
      "of",
      "horsepower",
      "for",
      "the",
      "models",
      "with",
      "3",
      "cylinders",
      "and",
      "what",
      "make",
      "is",
      "it",
      "?"
    ],
    "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.horsepower",
      ",",
      "t1.make",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "where",
      "t2.cylinders",
      "=",
      "3",
      "order",
      "by",
      "t2.horsepower",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "question_toks": [
      "Which",
      "model",
      "saves",
      "the",
      "most",
      "gasoline",
      "?",
      "That",
      "is",
      "to",
      "say",
      ",",
      "have",
      "the",
      "maximum",
      "miles",
      "per",
      "gallon",
      "."
    ],
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "order",
      "by",
      "t2.mpg",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the car wmodel with the highest mpg?",
    "question_toks": [
      "What",
      "is",
      "the",
      "car",
      "wmodel",
      "with",
      "the",
      "highest",
      "mpg",
      "?"
    ],
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "order",
      "by",
      "t2.mpg",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the average horsepower of the cars before 1980?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "horsepower",
      "of",
      "the",
      "cars",
      "before",
      "1980",
      "?"
    ],
    "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "<",
      "1980",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the average horsepower for all cards produced before 1980?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "horsepower",
      "for",
      "all",
      "cards",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "<",
      "1980",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the average edispl of the cars of model volvo?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "edispl",
      "of",
      "the",
      "cars",
      "of",
      "model",
      "volvo",
      "?"
    ],
    "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "t2.edispl",
      ")",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "where",
      "t1.model",
      "=",
      "\"volvo\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the average edispl for all volvos?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "edispl",
      "for",
      "all",
      "volvos",
      "?"
    ],
    "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "t2.edispl",
      ")",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "where",
      "t1.model",
      "=",
      "\"volvo\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the maximum accelerate for different number of cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "accelerate",
      "for",
      "different",
      "number",
      "of",
      "cylinders",
      "?"
    ],
    "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "accelerate",
      ")",
      ",",
      "cylinders",
      "from",
      "cars_data",
      "group",
      "by",
      "cylinders",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the maximum accelerate for all the different cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "accelerate",
      "for",
      "all",
      "the",
      "different",
      "cylinders",
      "?"
    ],
    "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "accelerate",
      ")",
      ",",
      "cylinders",
      "from",
      "cars_data",
      "group",
      "by",
      "cylinders",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Which model has the most version(make) of cars?",
    "question_toks": [
      "Which",
      "model",
      "has",
      "the",
      "most",
      "version(make",
      ")",
      "of",
      "cars",
      "?"
    ],
    "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          14,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "model",
      "from",
      "car_names",
      "group",
      "by",
      "model",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What model has the most different versions?",
    "question_toks": [
      "What",
      "model",
      "has",
      "the",
      "most",
      "different",
      "versions",
      "?"
    ],
    "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          14,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "model",
      "from",
      "car_names",
      "group",
      "by",
      "model",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many cars have more than 4 cylinders?",
    "question_toks": [
      "How",
      "many",
      "cars",
      "have",
      "more",
      "than",
      "4",
      "cylinders",
      "?"
    ],
    "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "4",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of cars with more than 4 cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "cars",
      "with",
      "more",
      "than",
      "4",
      "cylinders",
      "?"
    ],
    "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "4",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "how many cars were produced in 1980?",
    "question_toks": [
      "how",
      "many",
      "cars",
      "were",
      "produced",
      "in",
      "1980",
      "?"
    ],
    "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "=",
      "1980",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "In 1980, how many cars were made?",
    "question_toks": [
      "In",
      "1980",
      ",",
      "how",
      "many",
      "cars",
      "were",
      "made",
      "?"
    ],
    "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "=",
      "1980",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many car models were produced by the maker with full name American Motor Company?",
    "question_toks": [
      "How",
      "many",
      "car",
      "models",
      "were",
      "produced",
      "by",
      "the",
      "maker",
      "with",
      "full",
      "name",
      "American",
      "Motor",
      "Company",
      "?"
    ],
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"American Motor Company\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "where",
      "t1.fullname",
      "=",
      "\"American Motor Company\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of car models created by the car maker American Motor Company?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "car",
      "models",
      "created",
      "by",
      "the",
      "car",
      "maker",
      "American",
      "Motor",
      "Company",
      "?"
    ],
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"American Motor Company\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "where",
      "t1.fullname",
      "=",
      "\"American Motor Company\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Which makers designed more than 3 car models? List full name and the id.",
    "question_toks": [
      "Which",
      "makers",
      "designed",
      "more",
      "than",
      "3",
      "car",
      "models",
      "?",
      "List",
      "full",
      "name",
      "and",
      "the",
      "i",
      "d."
    ],
    "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.fullname",
      ",",
      "t1.id",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "group",
      "by",
      "t1.id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the names and ids of all makers with more than 3 models?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ids",
      "of",
      "all",
      "makers",
      "with",
      "more",
      "than",
      "3",
      "models",
      "?"
    ],
    "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.fullname",
      ",",
      "t1.id",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "group",
      "by",
      "t1.id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "question_toks": [
      "Which",
      "distinctive",
      "models",
      "are",
      "produced",
      "by",
      "maker",
      "with",
      "the",
      "full",
      "name",
      "General",
      "Motors",
      "or",
      "weighing",
      "more",
      "than",
      "3500",
      "?"
    ],
    "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"General Motors\"",
          null
        ],
        "or",
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t2.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.model",
      "=",
      "t2.model",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2.maker",
      "=",
      "t3.id",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t1.makeid",
      "=",
      "t4.id",
      "where",
      "t3.fullname",
      "=",
      "\"General Motors\"",
      "or",
      "t4.weight",
      ">",
      "3500",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "models",
      "created",
      "by",
      "either",
      "the",
      "car",
      "maker",
      "General",
      "Motors",
      "or",
      "weighed",
      "more",
      "than",
      "3500",
      "?"
    ],
    "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"General Motors\"",
          null
        ],
        "or",
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t2.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.model",
      "=",
      "t2.model",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2.maker",
      "=",
      "t3.id",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t1.makeid",
      "=",
      "t4.id",
      "where",
      "t3.fullname",
      "=",
      "\"General Motors\"",
      "or",
      "t4.weight",
      ">",
      "3500",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
    "question_toks": [
      "In",
      "which",
      "years",
      "cars",
      "were",
      "produced",
      "weighing",
      "no",
      "less",
      "than",
      "3000",
      "and",
      "no",
      "more",
      "than",
      "4000",
      "?"
    ],
    "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3000.0,
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          4000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.year",
      "from",
      "cars_data",
      "as",
      "t1",
      "where",
      "t1.weight",
      ">",
      "3000",
      "and",
      "t1.weight",
      "<",
      "4000",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "years",
      "in",
      "which",
      "there",
      "were",
      "cars",
      "produced",
      "that",
      "weighed",
      "less",
      "than",
      "4000",
      "and",
      "also",
      "cars",
      "that",
      "weighted",
      "more",
      "than",
      "3000",
      "?"
    ],
    "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3000.0,
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          4000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.year",
      "from",
      "cars_data",
      "as",
      "t1",
      "where",
      "t1.weight",
      ">",
      "3000",
      "and",
      "t1.weight",
      "<",
      "4000",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the horsepower of the car with the largest accelerate?",
    "question_toks": [
      "What",
      "is",
      "the",
      "horsepower",
      "of",
      "the",
      "car",
      "with",
      "the",
      "largest",
      "accelerate",
      "?"
    ],
    "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.horsepower",
      "from",
      "cars_data",
      "as",
      "t1",
      "order",
      "by",
      "t1.accelerate",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the horsepower of the car with the greatest accelerate?",
    "question_toks": [
      "What",
      "is",
      "the",
      "horsepower",
      "of",
      "the",
      "car",
      "with",
      "the",
      "greatest",
      "accelerate",
      "?"
    ],
    "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.horsepower",
      "from",
      "cars_data",
      "as",
      "t1",
      "order",
      "by",
      "t1.accelerate",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "question_toks": [
      "For",
      "model",
      "volvo",
      ",",
      "how",
      "many",
      "cylinders",
      "does",
      "the",
      "car",
      "with",
      "the",
      "least",
      "accelerate",
      "have",
      "?"
    ],
    "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.cylinders",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.makeid",
      "where",
      "t2.model",
      "=",
      "\"volvo\"",
      "order",
      "by",
      "t1.accelerate",
      "asc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "question_toks": [
      "For",
      "a",
      "volvo",
      "model",
      ",",
      "how",
      "many",
      "cylinders",
      "does",
      "the",
      "version",
      "with",
      "least",
      "accelerate",
      "have",
      "?"
    ],
    "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.cylinders",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.makeid",
      "where",
      "t2.model",
      "=",
      "\"volvo\"",
      "order",
      "by",
      "t1.accelerate",
      "asc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
    "question_toks": [
      "How",
      "many",
      "cars",
      "have",
      "a",
      "larger",
      "accelerate",
      "than",
      "the",
      "car",
      "with",
      "the",
      "largest",
      "horsepower",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      22,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
              "desc",
              [
                [
                  0,
                  [
                    0,
                    20,
                    false
                  ],
                  null
                ]
              ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "accelerate",
      ">",
      "(",
      "select",
      "accelerate",
      "from",
      "cars_data",
      "order",
      "by",
      "horsepower",
      "desc",
      "limit",
      "1",
      ")",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "cars",
      "with",
      "a",
      "greater",
      "accelerate",
      "than",
      "the",
      "one",
      "with",
      "the",
      "most",
      "horsepower",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      22,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
              "desc",
              [
                [
                  0,
                  [
                    0,
                    20,
                    false
                  ],
                  null
                ]
              ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "accelerate",
      ">",
      "(",
      "select",
      "accelerate",
      "from",
      "cars_data",
      "order",
      "by",
      "horsepower",
      "desc",
      "limit",
      "1",
      ")",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many countries has more than 2 car makers?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "has",
      "more",
      "than",
      "2",
      "car",
      "makers",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
    "sql": {
      "from": {
        "table_units": [
          [
            "sql",
            {
              "from": {
                "table_units": [
                  [
                    "table_unit",
                    1
                  ],
                  [
                    "table_unit",
                    2
                  ]
                ],
                "conds": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        3,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              },
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        3,
                        false
                      ],
                      null
                    ]
                  ],
                  [
                    3,
                    [
                      0,
                      [
                        0,
                        0,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "where": [],
              "groupBy": [
                [
                  0,
                  3,
                  false
                ]
              ],
              "having": [
                [
                  false,
                  3,
                  [
                    0,
                    [
                      3,
                      0,
                      false
                    ],
                    null
                  ],
                  2.0,
                  null
                ]
              ],
              "orderBy": [],
              "limit": null,
              "intersect": null,
              "union": null,
              "except": null
            }
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1.countryid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "group",
      "by",
      "t1.countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2",
      ")",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of countries with more than 2 car makers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "countries",
      "with",
      "more",
      "than",
      "2",
      "car",
      "makers",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
    "sql": {
      "from": {
        "table_units": [
          [
            "sql",
            {
              "from": {
                "table_units": [
                  [
                    "table_unit",
                    1
                  ],
                  [
                    "table_unit",
                    2
                  ]
                ],
                "conds": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        3,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              },
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        3,
                        false
                      ],
                      null
                    ]
                  ],
                  [
                    3,
                    [
                      0,
                      [
                        0,
                        0,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "where": [],
              "groupBy": [
                [
                  0,
                  3,
                  false
                ]
              ],
              "having": [
                [
                  false,
                  3,
                  [
                    0,
                    [
                      3,
                      0,
                      false
                    ],
                    null
                  ],
                  2.0,
                  null
                ]
              ],
              "orderBy": [],
              "limit": null,
              "intersect": null,
              "union": null,
              "except": null
            }
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1.countryid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "group",
      "by",
      "t1.countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2",
      ")",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "How many cars has over 6 cylinders?",
    "question_toks": [
      "How",
      "many",
      "cars",
      "has",
      "over",
      "6",
      "cylinders",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          6.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "6",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the number of carsw ith over 6 cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "carsw",
      "ith",
      "over",
      "6",
      "cylinders",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          6.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "6",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
    "question_toks": [
      "For",
      "the",
      "cars",
      "with",
      "4",
      "cylinders",
      ",",
      "which",
      "model",
      "has",
      "the",
      "largest",
      "horsepower",
      "?"
    ],
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "where",
      "t2.cylinders",
      "=",
      "4",
      "order",
      "by",
      "t2.horsepower",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
    "question_toks": [
      "For",
      "all",
      "of",
      "the",
      "4",
      "cylinder",
      "cars",
      ",",
      "which",
      "model",
      "has",
      "the",
      "most",
      "horsepower",
      "?"
    ],
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "where",
      "t2.cylinders",
      "=",
      "4",
      "order",
      "by",
      "t2.horsepower",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
    "question_toks": [
      "Among",
      "the",
      "cars",
      "with",
      "more",
      "than",
      "lowest",
      "horsepower",
      ",",
      "which",
      "ones",
      "do",
      "not",
      "have",
      "more",
      "than",
      "3",
      "cylinders",
      "?",
      "List",
      "the",
      "car",
      "makeid",
      "and",
      "make",
      "name",
      "."
    ],
    "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      20,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ],
        "and",
        [
          false,
          6,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.makeid",
      ",",
      "t2.make",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.makeid",
      "where",
      "t1.horsepower",
      ">",
      "(",
      "select",
      "min",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      ")",
      "and",
      "t1.cylinders",
      "<=",
      "3",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders?",
    "question_toks": [
      "Among",
      "the",
      "cars",
      "that",
      "do",
      "not",
      "have",
      "the",
      "minimum",
      "horsepower",
      ",",
      "what",
      "are",
      "the",
      "make",
      "ids",
      "and",
      "names",
      "of",
      "al",
      "those",
      "with",
      "less",
      "than",
      "4",
      "cylinders",
      "?"
    ],
    "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <  4;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      20,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.makeid",
      ",",
      "t2.make",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.makeid",
      "where",
      "t1.horsepower",
      ">",
      "(",
      "select",
      "min",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      ")",
      "and",
      "t1.cylinders",
      "<",
      "4",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "miles",
      "per",
      "gallon",
      "of",
      "the",
      "car",
      "with",
      "8",
      "cylinders",
      "or",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          8.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "mpg",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "8",
      "or",
      "year",
      "<",
      "1980",
      "order",
      "by",
      "mpg",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "mpg",
      "of",
      "the",
      "cars",
      "that",
      "had",
      "8",
      "cylinders",
      "or",
      "that",
      "were",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          8.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "mpg",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "8",
      "or",
      "year",
      "<",
      "1980",
      "order",
      "by",
      "mpg",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
    "question_toks": [
      "Which",
      "models",
      "are",
      "lighter",
      "than",
      "3500",
      "but",
      "not",
      "built",
      "by",
      "the",
      "'",
      "Ford",
      "Motor",
      "Company",
      "'",
      "?"
    ],
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ],
        "and",
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Ford Motor Company\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.model",
      "=",
      "t2.model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2.makeid",
      "=",
      "t3.id",
      "join",
      "car_makers",
      "as",
      "t4",
      "on",
      "t1.maker",
      "=",
      "t4.id",
      "where",
      "t3.weight",
      "<",
      "3500",
      "and",
      "t4.fullname",
      "!=",
      "\"Ford Motor Company\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "models",
      "wthat",
      "are",
      "lighter",
      "than",
      "3500",
      "but",
      "were",
      "not",
      "built",
      "by",
      "the",
      "Ford",
      "Motor",
      "Company",
      "?"
    ],
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ],
        "and",
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Ford Motor Company\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.model",
      "=",
      "t2.model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2.makeid",
      "=",
      "t3.id",
      "join",
      "car_makers",
      "as",
      "t4",
      "on",
      "t1.maker",
      "=",
      "t4.id",
      "where",
      "t3.weight",
      "<",
      "3500",
      "and",
      "t4.fullname",
      "!=",
      "\"Ford Motor Company\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the name of the countries where there is not a single car maker?",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "of",
      "the",
      "countries",
      "where",
      "there",
      "is",
      "not",
      "a",
      "single",
      "car",
      "maker",
      "?"
    ],
    "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "countryname",
      "from",
      "countries",
      "except",
      "select",
      "t1.countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the names of the countries with no car makers?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "countries",
      "with",
      "no",
      "car",
      "makers",
      "?"
    ],
    "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "countryname",
      "from",
      "countries",
      "except",
      "select",
      "t1.countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.",
    "question_toks": [
      "Which",
      "are",
      "the",
      "car",
      "makers",
      "which",
      "produce",
      "at",
      "least",
      "2",
      "models",
      "and",
      "more",
      "than",
      "3",
      "car",
      "makes",
      "?",
      "List",
      "the",
      "i",
      "d",
      "and",
      "the",
      "maker",
      "."
    ],
    "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              4
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ],
              [
                0,
                11,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  12,
                  false
                ],
                null
              ],
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [
          [
            0,
            6,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            3.0,
            null
          ]
        ],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.id",
      ",",
      "t1.maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "group",
      "by",
      "t1.id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2",
      "intersect",
      "select",
      "t1.id",
      ",",
      "t1.maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2.model",
      "=",
      "t3.model",
      "group",
      "by",
      "t1.id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "makers",
      "of",
      "all",
      "car",
      "makers",
      "that",
      "produce",
      "at",
      "least",
      "2",
      "models",
      "and",
      "make",
      "more",
      "than",
      "3",
      "cars",
      "?"
    ],
    "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              4
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ],
              [
                0,
                11,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  12,
                  false
                ],
                null
              ],
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [
          [
            0,
            6,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            3.0,
            null
          ]
        ],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.id",
      ",",
      "t1.maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "group",
      "by",
      "t1.id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2",
      "intersect",
      "select",
      "t1.id",
      ",",
      "t1.maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2.model",
      "=",
      "t3.model",
      "group",
      "by",
      "t1.id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "question_toks": [
      "What",
      "are",
      "the",
      "i",
      "d",
      "and",
      "names",
      "of",
      "the",
      "countries",
      "which",
      "have",
      "more",
      "than",
      "3",
      "car",
      "makers",
      "or",
      "produce",
      "the",
      "'",
      "fiat",
      "'",
      "model",
      "?"
    ],
    "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ],
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"fiat\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "query_toks": [
      "select",
      "t1.countryid",
      ",",
      "t1.countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "group",
      "by",
      "t1.countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      "union",
      "select",
      "t1.countryid",
      ",",
      "t1.countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "join",
      "model_list",
      "as",
      "t3",
      "on",
      "t2.id",
      "=",
      "t3.maker",
      "where",
      "t3.model",
      "=",
      "\"fiat\"",
      ";"
    ]
  },
  {
    "db_id": "car_1",
    "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "names",
      "of",
      "all",
      "countries",
      "that",
      "either",
      "have",
      "more",
      "than",
      "3",
      "car",
      "makers",
      "or",
      "produce",
      "fiats",
      "?"
    ],
    "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ],
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"fiat\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "query_toks": [
      "select",
      "t1.countryid",
      ",",
      "t1.countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "group",
      "by",
      "t1.countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      "union",
      "select",
      "t1.countryid",
      ",",
      "t1.countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "join",
      "model_list",
      "as",
      "t3",
      "on",
      "t2.id",
      "=",
      "t3.maker",
      "where",
      "t3.model",
      "=",
      "\"fiat\"",
      ";"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which country does Airline \"JetBlue Airways\" belong to?",
    "question_toks": [
      "Which",
      "country",
      "does",
      "Airline",
      "\"",
      "JetBlue",
      "Airways",
      "\"",
      "belong",
      "to",
      "?"
    ],
    "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "\"JetBlue Airways\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What country is Jetblue Airways affiliated with?",
    "question_toks": [
      "What",
      "country",
      "is",
      "Jetblue",
      "Airways",
      "affiliated",
      "with",
      "?"
    ],
    "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "\"JetBlue Airways\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "abbreviation",
      "of",
      "Airline",
      "\"",
      "JetBlue",
      "Airways",
      "\"",
      "?"
    ],
    "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "\"JetBlue Airways\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which abbreviation corresponds to Jetblue Airways?",
    "question_toks": [
      "Which",
      "abbreviation",
      "corresponds",
      "to",
      "Jetblue",
      "Airways",
      "?"
    ],
    "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "\"JetBlue Airways\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "List all airline names and their abbreviations in \"USA\".",
    "question_toks": [
      "List",
      "all",
      "airline",
      "names",
      "and",
      "their",
      "abbreviations",
      "in",
      "\"",
      "USA",
      "\"",
      "."
    ],
    "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airline",
      ",",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "\"USA\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are the airline names and abbreviations for airlines in the USA?",
    "question_toks": [
      "What",
      "are",
      "the",
      "airline",
      "names",
      "and",
      "abbreviations",
      "for",
      "airlines",
      "in",
      "the",
      "USA",
      "?"
    ],
    "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airline",
      ",",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "\"USA\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "List the airport code and name in the city of Anthony.",
    "question_toks": [
      "List",
      "the",
      "airport",
      "code",
      "and",
      "name",
      "in",
      "the",
      "city",
      "of",
      "Anthony",
      "."
    ],
    "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Anthony\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airportcode",
      ",",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "\"Anthony\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Give the airport code and airport name corresonding to the city Anthony.",
    "question_toks": [
      "Give",
      "the",
      "airport",
      "code",
      "and",
      "airport",
      "name",
      "corresonding",
      "to",
      "the",
      "city",
      "Anthony",
      "."
    ],
    "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Anthony\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airportcode",
      ",",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "\"Anthony\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many airlines do we have?",
    "question_toks": [
      "How",
      "many",
      "airlines",
      "do",
      "we",
      "have",
      "?"
    ],
    "query": "SELECT count(*) FROM AIRLINES",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What is the total number of airlines?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "airlines",
      "?"
    ],
    "query": "SELECT count(*) FROM AIRLINES",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many airports do we have?",
    "question_toks": [
      "How",
      "many",
      "airports",
      "do",
      "we",
      "have",
      "?"
    ],
    "query": "SELECT count(*) FROM AIRPORTS",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airports"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of  airports.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      " ",
      "airports",
      "."
    ],
    "query": "SELECT count(*) FROM AIRPORTS",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airports"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many flights do we have?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "do",
      "we",
      "have",
      "?"
    ],
    "query": "SELECT count(*) FROM FLIGHTS",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of flights.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "flights",
      "."
    ],
    "query": "SELECT count(*) FROM FLIGHTS",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airline has abbreviation 'UAL'?",
    "question_toks": [
      "Which",
      "airline",
      "has",
      "abbreviation",
      "'",
      "UAL",
      "'",
      "?"
    ],
    "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"UAL\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airline",
      "from",
      "airlines",
      "where",
      "abbreviation",
      "=",
      "\"UAL\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Give the airline with abbreviation 'UAL'.",
    "question_toks": [
      "Give",
      "the",
      "airline",
      "with",
      "abbreviation",
      "'",
      "UAL",
      "'",
      "."
    ],
    "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"UAL\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airline",
      "from",
      "airlines",
      "where",
      "abbreviation",
      "=",
      "\"UAL\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many airlines are from USA?",
    "question_toks": [
      "How",
      "many",
      "airlines",
      "are",
      "from",
      "USA",
      "?"
    ],
    "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "\"USA\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of airlines in the USA.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "airlines",
      "in",
      "the",
      "USA",
      "."
    ],
    "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "\"USA\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which city and country is the Alton airport at?",
    "question_toks": [
      "Which",
      "city",
      "and",
      "country",
      "is",
      "the",
      "Alton",
      "airport",
      "at",
      "?"
    ],
    "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Alton\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "city",
      ",",
      "country",
      "from",
      "airports",
      "where",
      "airportname",
      "=",
      "\"Alton\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Give the city and country for the Alton airport.",
    "question_toks": [
      "Give",
      "the",
      "city",
      "and",
      "country",
      "for",
      "the",
      "Alton",
      "airport",
      "."
    ],
    "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Alton\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "city",
      ",",
      "country",
      "from",
      "airports",
      "where",
      "airportname",
      "=",
      "\"Alton\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What is the airport name for airport 'AKO'?",
    "question_toks": [
      "What",
      "is",
      "the",
      "airport",
      "name",
      "for",
      "airport",
      "'",
      "AKO",
      "'",
      "?"
    ],
    "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"AKO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "=",
      "\"AKO\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Return the name of the airport with code 'AKO'.",
    "question_toks": [
      "Return",
      "the",
      "name",
      "of",
      "the",
      "airport",
      "with",
      "code",
      "'",
      "AKO",
      "'",
      "."
    ],
    "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"AKO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "=",
      "\"AKO\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are airport names at City 'Aberdeen'?",
    "question_toks": [
      "What",
      "are",
      "airport",
      "names",
      "at",
      "City",
      "'",
      "Aberdeen",
      "'",
      "?"
    ],
    "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are the names of airports in Aberdeen?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "airports",
      "in",
      "Aberdeen",
      "?"
    ],
    "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many flights depart from 'APG'?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "depart",
      "from",
      "'",
      "APG",
      "'",
      "?"
    ],
    "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "\"APG\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Count the number of flights departing from 'APG'.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "flights",
      "departing",
      "from",
      "'",
      "APG",
      "'",
      "."
    ],
    "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "\"APG\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many flights have destination ATO?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "have",
      "destination",
      "ATO",
      "?"
    ],
    "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ATO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "\"ATO\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Count the number of flights into ATO.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "flights",
      "into",
      "ATO",
      "."
    ],
    "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ATO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "\"ATO\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many flights depart from City Aberdeen?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "depart",
      "from",
      "City",
      "Aberdeen",
      "?"
    ],
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.sourceairport",
      "=",
      "t2.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of flights departing from Aberdeen.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "flights",
      "departing",
      "from",
      "Aberdeen",
      "."
    ],
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.sourceairport",
      "=",
      "t2.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many flights arriving in Aberdeen city?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "arriving",
      "in",
      "Aberdeen",
      "city",
      "?"
    ],
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.destairport",
      "=",
      "t2.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of flights arriving in Aberdeen.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "flights",
      "arriving",
      "in",
      "Aberdeen",
      "."
    ],
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.destairport",
      "=",
      "t2.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "depart",
      "from",
      "City",
      "'",
      "Aberdeen",
      "'",
      "and",
      "have",
      "destination",
      "City",
      "'",
      "Ashley",
      "'",
      "?"
    ],
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Ashley\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.destairport",
      "=",
      "t2.airportcode",
      "join",
      "airports",
      "as",
      "t3",
      "on",
      "t1.sourceairport",
      "=",
      "t3.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Ashley\"",
      "and",
      "t3.city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many flights fly from Aberdeen to Ashley?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "fly",
      "from",
      "Aberdeen",
      "to",
      "Ashley",
      "?"
    ],
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Ashley\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.destairport",
      "=",
      "t2.airportcode",
      "join",
      "airports",
      "as",
      "t3",
      "on",
      "t1.sourceairport",
      "=",
      "t3.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Ashley\"",
      "and",
      "t3.city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many flights does airline 'JetBlue Airways' have?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "does",
      "airline",
      "'",
      "JetBlue",
      "Airways",
      "'",
      "have",
      "?"
    ],
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t1.airline",
      "=",
      "t2.uid",
      "where",
      "t2.airline",
      "=",
      "\"JetBlue Airways\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Give the number of Jetblue Airways flights.",
    "question_toks": [
      "Give",
      "the",
      "number",
      "of",
      "Jetblue",
      "Airways",
      "flights",
      "."
    ],
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t1.airline",
      "=",
      "t2.uid",
      "where",
      "t2.airline",
      "=",
      "\"JetBlue Airways\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "question_toks": [
      "How",
      "many",
      "'",
      "United",
      "Airlines",
      "'",
      "flights",
      "go",
      "to",
      "Airport",
      "'",
      "ASY",
      "'",
      "?"
    ],
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ASY\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2.airline",
      "=",
      "t1.uid",
      "where",
      "t1.airline",
      "=",
      "\"United Airlines\"",
      "and",
      "t2.destairport",
      "=",
      "\"ASY\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Count the number of United Airlines flights arriving in ASY Airport.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flights",
      "arriving",
      "in",
      "ASY",
      "Airport",
      "."
    ],
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ASY\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2.airline",
      "=",
      "t1.uid",
      "where",
      "t1.airline",
      "=",
      "\"United Airlines\"",
      "and",
      "t2.destairport",
      "=",
      "\"ASY\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "question_toks": [
      "How",
      "many",
      "'",
      "United",
      "Airlines",
      "'",
      "flights",
      "depart",
      "from",
      "Airport",
      "'",
      "AHD",
      "'",
      "?"
    ],
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2.airline",
      "=",
      "t1.uid",
      "where",
      "t1.airline",
      "=",
      "\"United Airlines\"",
      "and",
      "t2.sourceairport",
      "=",
      "\"AHD\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of United Airlines flights leaving from AHD Airport.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flights",
      "leaving",
      "from",
      "AHD",
      "Airport",
      "."
    ],
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2.airline",
      "=",
      "t1.uid",
      "where",
      "t1.airline",
      "=",
      "\"United Airlines\"",
      "and",
      "t2.sourceairport",
      "=",
      "\"AHD\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many United Airlines flights go to City 'Aberdeen'?",
    "question_toks": [
      "How",
      "many",
      "United",
      "Airlines",
      "flights",
      "go",
      "to",
      "City",
      "'",
      "Aberdeen",
      "'",
      "?"
    ],
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.destairport",
      "=",
      "t2.airportcode",
      "join",
      "airlines",
      "as",
      "t3",
      "on",
      "t3.uid",
      "=",
      "t1.airline",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\"",
      "and",
      "t3.airline",
      "=",
      "\"United Airlines\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flights",
      "that",
      "arrive",
      "in",
      "Aberdeen",
      "."
    ],
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.destairport",
      "=",
      "t2.airportcode",
      "join",
      "airlines",
      "as",
      "t3",
      "on",
      "t3.uid",
      "=",
      "t1.airline",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\"",
      "and",
      "t3.airline",
      "=",
      "\"United Airlines\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which city has most number of arriving flights?",
    "question_toks": [
      "Which",
      "city",
      "has",
      "most",
      "number",
      "of",
      "arriving",
      "flights",
      "?"
    ],
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.airportcode",
      "=",
      "t2.destairport",
      "group",
      "by",
      "t1.city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which city has the most frequent destination airport?",
    "question_toks": [
      "Which",
      "city",
      "has",
      "the",
      "most",
      "frequent",
      "destination",
      "airport",
      "?"
    ],
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.airportcode",
      "=",
      "t2.destairport",
      "group",
      "by",
      "t1.city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which city has most number of departing flights?",
    "question_toks": [
      "Which",
      "city",
      "has",
      "most",
      "number",
      "of",
      "departing",
      "flights",
      "?"
    ],
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.airportcode",
      "=",
      "t2.sourceairport",
      "group",
      "by",
      "t1.city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which city is the most frequent source airport?",
    "question_toks": [
      "Which",
      "city",
      "is",
      "the",
      "most",
      "frequent",
      "source",
      "airport",
      "?"
    ],
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.airportcode",
      "=",
      "t2.sourceairport",
      "group",
      "by",
      "t1.city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What is the code of airport that has the highest number of flights?",
    "question_toks": [
      "What",
      "is",
      "the",
      "code",
      "of",
      "airport",
      "that",
      "has",
      "the",
      "highest",
      "number",
      "of",
      "flights",
      "?"
    ],
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.airportcode",
      "=",
      "t2.destairport",
      "or",
      "t1.airportcode",
      "=",
      "t2.sourceairport",
      "group",
      "by",
      "t1.airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What is the airport code of the airport with the most flights?",
    "question_toks": [
      "What",
      "is",
      "the",
      "airport",
      "code",
      "of",
      "the",
      "airport",
      "with",
      "the",
      "most",
      "flights",
      "?"
    ],
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.airportcode",
      "=",
      "t2.destairport",
      "or",
      "t1.airportcode",
      "=",
      "t2.sourceairport",
      "group",
      "by",
      "t1.airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What is the code of airport that has fewest number of flights?",
    "question_toks": [
      "What",
      "is",
      "the",
      "code",
      "of",
      "airport",
      "that",
      "has",
      "fewest",
      "number",
      "of",
      "flights",
      "?"
    ],
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.airportcode",
      "=",
      "t2.destairport",
      "or",
      "t1.airportcode",
      "=",
      "t2.sourceairport",
      "group",
      "by",
      "t1.airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Give the code of the airport with the least flights.",
    "question_toks": [
      "Give",
      "the",
      "code",
      "of",
      "the",
      "airport",
      "with",
      "the",
      "least",
      "flights",
      "."
    ],
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.airportcode",
      "=",
      "t2.destairport",
      "or",
      "t1.airportcode",
      "=",
      "t2.sourceairport",
      "group",
      "by",
      "t1.airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airline has most number of flights?",
    "question_toks": [
      "Which",
      "airline",
      "has",
      "most",
      "number",
      "of",
      "flights",
      "?"
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "group",
      "by",
      "t1.airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What airline serves the most flights?",
    "question_toks": [
      "What",
      "airline",
      "serves",
      "the",
      "most",
      "flights",
      "?"
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "group",
      "by",
      "t1.airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "question_toks": [
      "Find",
      "the",
      "abbreviation",
      "and",
      "country",
      "of",
      "the",
      "airline",
      "that",
      "has",
      "fewest",
      "number",
      "of",
      "flights",
      "?"
    ],
    "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.abbreviation",
      ",",
      "t1.country",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "group",
      "by",
      "t1.airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "question_toks": [
      "What",
      "is",
      "the",
      "abbreviation",
      "of",
      "the",
      "airilne",
      "has",
      "the",
      "fewest",
      "flights",
      "and",
      "what",
      "country",
      "is",
      "it",
      "in",
      "?"
    ],
    "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.abbreviation",
      ",",
      "t1.country",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "group",
      "by",
      "t1.airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "question_toks": [
      "What",
      "are",
      "airlines",
      "that",
      "have",
      "some",
      "flight",
      "departing",
      "from",
      "airport",
      "'",
      "AHD",
      "'",
      "?"
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.sourceairport",
      "=",
      "\"AHD\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have a flight with source airport AHD?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "a",
      "flight",
      "with",
      "source",
      "airport",
      "AHD",
      "?"
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.sourceairport",
      "=",
      "\"AHD\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are airlines that have flights arriving at airport 'AHD'?",
    "question_toks": [
      "What",
      "are",
      "airlines",
      "that",
      "have",
      "flights",
      "arriving",
      "at",
      "airport",
      "'",
      "AHD",
      "'",
      "?"
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.destairport",
      "=",
      "\"AHD\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have a flight with destination airport AHD?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "a",
      "flight",
      "with",
      "destination",
      "airport",
      "AHD",
      "?"
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.destairport",
      "=",
      "\"AHD\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "flights",
      "from",
      "both",
      "airports",
      "'",
      "APG",
      "'",
      "and",
      "'",
      "CVO",
      "'",
      "."
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"CVO\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.sourceairport",
      "=",
      "\"APG\"",
      "intersect",
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.sourceairport",
      "=",
      "\"CVO\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "departing",
      "flights",
      "from",
      "both",
      "APG",
      "and",
      "CVO",
      "airports",
      "?"
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"CVO\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.sourceairport",
      "=",
      "\"APG\"",
      "intersect",
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.sourceairport",
      "=",
      "\"CVO\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "flights",
      "from",
      "airport",
      "'",
      "CVO",
      "'",
      "but",
      "not",
      "from",
      "'",
      "APG",
      "'",
      "."
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"CVO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"APG\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.sourceairport",
      "=",
      "\"CVO\"",
      "except",
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.sourceairport",
      "=",
      "\"APG\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have departures from CVO but not from APG airports?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "departures",
      "from",
      "CVO",
      "but",
      "not",
      "from",
      "APG",
      "airports",
      "?"
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"CVO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"APG\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.sourceairport",
      "=",
      "\"CVO\"",
      "except",
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "where",
      "t2.sourceairport",
      "=",
      "\"APG\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Find all airlines that have at least 10 flights.",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "at",
      "least",
      "10",
      "flights",
      "."
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "group",
      "by",
      "t1.airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have at least 10 flights?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "at",
      "least",
      "10",
      "flights",
      "?"
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "group",
      "by",
      "t1.airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Find all airlines that have fewer than 200 flights.",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "fewer",
      "than",
      "200",
      "flights",
      "."
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "group",
      "by",
      "t1.airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "200"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have less than 200 flights?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "less",
      "than",
      "200",
      "flights",
      "?"
    ],
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1.uid",
      "=",
      "t2.airline",
      "group",
      "by",
      "t1.airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "200"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are flight numbers of Airline \"United Airlines\"?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "Airline",
      "\"",
      "United",
      "Airlines",
      "\"",
      "?"
    ],
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t2.uid",
      "=",
      "t1.airline",
      "where",
      "t2.airline",
      "=",
      "\"United Airlines\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which flight numbers correspond to United Airlines flights?",
    "question_toks": [
      "Which",
      "flight",
      "numbers",
      "correspond",
      "to",
      "United",
      "Airlines",
      "flights",
      "?"
    ],
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t2.uid",
      "=",
      "t1.airline",
      "where",
      "t2.airline",
      "=",
      "\"United Airlines\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights departing from Airport \"APG\"?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "departing",
      "from",
      "Airport",
      "\"",
      "APG",
      "\"",
      "?"
    ],
    "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "\"APG\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights leaving from APG.",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "leaving",
      "from",
      "APG",
      "."
    ],
    "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "\"APG\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "arriving",
      "at",
      "Airport",
      "\"",
      "APG",
      "\"",
      "?"
    ],
    "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "\"APG\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights landing at APG.",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "landing",
      "at",
      "APG",
      "."
    ],
    "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "\"APG\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "departing",
      "from",
      "City",
      "\"",
      "Aberdeen",
      "\"",
      "?"
    ],
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.sourceairport",
      "=",
      "t2.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights leaving from Aberdeen.",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "leaving",
      "from",
      "Aberdeen",
      "."
    ],
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.sourceairport",
      "=",
      "t2.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "arriving",
      "at",
      "City",
      "\"",
      "Aberdeen",
      "\"",
      "?"
    ],
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.destairport",
      "=",
      "t2.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights arriving in Aberdeen.",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "arriving",
      "in",
      "Aberdeen",
      "."
    ],
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.destairport",
      "=",
      "t2.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "flights",
      "landing",
      "in",
      "the",
      "city",
      "of",
      "Aberdeen",
      "or",
      "Abilene",
      "."
    ],
    "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Abilene\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.destairport",
      "=",
      "t2.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\"",
      "or",
      "t2.city",
      "=",
      "\"Abilene\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "How many flights land in Aberdeen or Abilene?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "land",
      "in",
      "Aberdeen",
      "or",
      "Abilene",
      "?"
    ],
    "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Abilene\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1.destairport",
      "=",
      "t2.airportcode",
      "where",
      "t2.city",
      "=",
      "\"Aberdeen\"",
      "or",
      "t2.city",
      "=",
      "\"Abilene\""
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Find the name of airports which do not have any flight in and out.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "airports",
      "which",
      "do",
      "not",
      "have",
      "any",
      "flight",
      "in",
      "and",
      "out",
      "."
    ],
    "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
              "from": {
                "table_units": [
                  [
                    "table_unit",
                    2
                  ]
                ],
                "conds": []
              },
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        13,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "where": [],
              "groupBy": [],
              "having": [],
              "orderBy": [],
              "limit": null,
              "intersect": null,
              "union": null,
              "except": null
            },
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "not",
      "in",
      "(",
      "select",
      "sourceairport",
      "from",
      "flights",
      "union",
      "select",
      "destairport",
      "from",
      "flights",
      ")"
    ]
  },
  {
    "db_id": "flight_2",
    "question": "Which airports do not have departing or arriving flights?",
    "question_toks": [
      "Which",
      "airports",
      "do",
      "not",
      "have",
      "departing",
      "or",
      "arriving",
      "flights",
      "?"
    ],
    "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
              "from": {
                "table_units": [
                  [
                    "table_unit",
                    2
                  ]
                ],
                "conds": []
              },
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        13,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "where": [],
              "groupBy": [],
              "having": [],
              "orderBy": [],
              "limit": null,
              "intersect": null,
              "union": null,
              "except": null
            },
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "not",
      "in",
      "(",
      "select",
      "sourceairport",
      "from",
      "flights",
      "union",
      "select",
      "destairport",
      "from",
      "flights",
      ")"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "How many employees are there?",
    "question_toks": [
      "How",
      "many",
      "employees",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM employee",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "employee"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Count the number of employees",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "employees"
    ],
    "query": "SELECT count(*) FROM employee",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "employee"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Sort employee names by their age in ascending order.",
    "question_toks": [
      "Sort",
      "employee",
      "names",
      "by",
      "their",
      "age",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "SELECT name FROM employee ORDER BY age",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "employee",
      "order",
      "by",
      "age"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "List the names of employees and sort in ascending order of age.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "employees",
      "and",
      "sort",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "query": "SELECT name FROM employee ORDER BY age",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "employee",
      "order",
      "by",
      "age"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What is the number of employees from each city?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "employees",
      "from",
      "each",
      "city",
      "?"
    ],
    "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "city",
      "from",
      "employee",
      "group",
      "by",
      "city"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Count the number of employees for each city.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "employees",
      "for",
      "each",
      "city",
      "."
    ],
    "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "city",
      "from",
      "employee",
      "group",
      "by",
      "city"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which cities do more than one employee under age 30 come from?",
    "question_toks": [
      "Which",
      "cities",
      "do",
      "more",
      "than",
      "one",
      "employee",
      "under",
      "age",
      "30",
      "come",
      "from",
      "?"
    ],
    "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          30.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "city",
      "from",
      "employee",
      "where",
      "age",
      "<",
      "30",
      "group",
      "by",
      "city",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the cities that have more than one employee under age 30.",
    "question_toks": [
      "Find",
      "the",
      "cities",
      "that",
      "have",
      "more",
      "than",
      "one",
      "employee",
      "under",
      "age",
      "30",
      "."
    ],
    "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          30.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "city",
      "from",
      "employee",
      "where",
      "age",
      "<",
      "30",
      "group",
      "by",
      "city",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the number of shops in each location.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "shops",
      "in",
      "each",
      "location",
      "."
    ],
    "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "location",
      "from",
      "shop",
      "group",
      "by",
      "location"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "How many shops are there in each location?",
    "question_toks": [
      "How",
      "many",
      "shops",
      "are",
      "there",
      "in",
      "each",
      "location",
      "?"
    ],
    "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "location",
      "from",
      "shop",
      "group",
      "by",
      "location"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the manager name and district of the shop whose number of products is the largest.",
    "question_toks": [
      "Find",
      "the",
      "manager",
      "name",
      "and",
      "district",
      "of",
      "the",
      "shop",
      "whose",
      "number",
      "of",
      "products",
      "is",
      "the",
      "largest",
      "."
    ],
    "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "manager_name",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What are the manager name and district of the shop that sells the largest number of products?",
    "question_toks": [
      "What",
      "are",
      "the",
      "manager",
      "name",
      "and",
      "district",
      "of",
      "the",
      "shop",
      "that",
      "sells",
      "the",
      "largest",
      "number",
      "of",
      "products",
      "?"
    ],
    "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "manager_name",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "find the minimum and maximum number of products of all stores.",
    "question_toks": [
      "find",
      "the",
      "minimum",
      "and",
      "maximum",
      "number",
      "of",
      "products",
      "of",
      "all",
      "stores",
      "."
    ],
    "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "min",
      "(",
      "number_products",
      ")",
      ",",
      "max",
      "(",
      "number_products",
      ")",
      "from",
      "shop"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What are the minimum and maximum number of products across all the shops?",
    "question_toks": [
      "What",
      "are",
      "the",
      "minimum",
      "and",
      "maximum",
      "number",
      "of",
      "products",
      "across",
      "all",
      "the",
      "shops",
      "?"
    ],
    "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "min",
      "(",
      "number_products",
      ")",
      ",",
      "max",
      "(",
      "number_products",
      ")",
      "from",
      "shop"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Return the name, location and district of all shops in descending order of number of products.",
    "question_toks": [
      "Return",
      "the",
      "name",
      ",",
      "location",
      "and",
      "district",
      "of",
      "all",
      "shops",
      "in",
      "descending",
      "order",
      "of",
      "number",
      "of",
      "products",
      "."
    ],
    "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "location",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "question_toks": [
      "Sort",
      "all",
      "the",
      "shops",
      "by",
      "number",
      "products",
      "in",
      "descending",
      "order",
      ",",
      "and",
      "return",
      "the",
      "name",
      ",",
      "location",
      "and",
      "district",
      "of",
      "each",
      "shop",
      "."
    ],
    "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "location",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the names of stores whose number products is more than the average number of products.",
    "question_toks": [
      "Find",
      "the",
      "names",
      "of",
      "stores",
      "whose",
      "number",
      "products",
      "is",
      "more",
      "than",
      "the",
      "average",
      "number",
      "of",
      "products",
      "."
    ],
    "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "number_products",
      ")",
      "from",
      "shop",
      ")"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which shops' number products is above the average? Give me the shop names.",
    "question_toks": [
      "Which",
      "shops",
      "'",
      "number",
      "products",
      "is",
      "above",
      "the",
      "average",
      "?",
      "Give",
      "me",
      "the",
      "shop",
      "names",
      "."
    ],
    "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "number_products",
      ")",
      "from",
      "shop",
      ")"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "find the name of employee who was awarded the most times in the evaluation.",
    "question_toks": [
      "find",
      "the",
      "name",
      "of",
      "employee",
      "who",
      "was",
      "awarded",
      "the",
      "most",
      "times",
      "in",
      "the",
      "evaluation",
      "."
    ],
    "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1.employee_id",
      "=",
      "t2.employee_id",
      "group",
      "by",
      "t2.employee_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which employee received the most awards in evaluations? Give me the employee name.",
    "question_toks": [
      "Which",
      "employee",
      "received",
      "the",
      "most",
      "awards",
      "in",
      "evaluations",
      "?",
      "Give",
      "me",
      "the",
      "employee",
      "name",
      "."
    ],
    "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1.employee_id",
      "=",
      "t2.employee_id",
      "group",
      "by",
      "t2.employee_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the name of the employee who got the highest one time bonus.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "employee",
      "who",
      "got",
      "the",
      "highest",
      "one",
      "time",
      "bonus",
      "."
    ],
    "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1.employee_id",
      "=",
      "t2.employee_id",
      "order",
      "by",
      "t2.bonus",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which employee received the biggest bonus? Give me the employee name.",
    "question_toks": [
      "Which",
      "employee",
      "received",
      "the",
      "biggest",
      "bonus",
      "?",
      "Give",
      "me",
      "the",
      "employee",
      "name",
      "."
    ],
    "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1.employee_id",
      "=",
      "t2.employee_id",
      "order",
      "by",
      "t2.bonus",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the names of employees who never won any award in the evaluation.",
    "question_toks": [
      "Find",
      "the",
      "names",
      "of",
      "employees",
      "who",
      "never",
      "won",
      "any",
      "award",
      "in",
      "the",
      "evaluation",
      "."
    ],
    "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      15,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "employee",
      "where",
      "employee_id",
      "not",
      "in",
      "(",
      "select",
      "employee_id",
      "from",
      "evaluation",
      ")"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What are the names of the employees who never received any evaluation?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "employees",
      "who",
      "never",
      "received",
      "any",
      "evaluation",
      "?"
    ],
    "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      15,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "employee",
      "where",
      "employee_id",
      "not",
      "in",
      "(",
      "select",
      "employee_id",
      "from",
      "evaluation",
      ")"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What is the name of the shop that is hiring the largest number of employees?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "shop",
      "that",
      "is",
      "hiring",
      "the",
      "largest",
      "number",
      "of",
      "employees",
      "?"
    ],
    "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "group",
      "by",
      "t1.shop_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which shop has the most employees? Give me the shop name.",
    "question_toks": [
      "Which",
      "shop",
      "has",
      "the",
      "most",
      "employees",
      "?",
      "Give",
      "me",
      "the",
      "shop",
      "name",
      "."
    ],
    "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "group",
      "by",
      "t1.shop_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the name of the shops that do not hire any employee.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "shops",
      "that",
      "do",
      "not",
      "hire",
      "any",
      "employee",
      "."
    ],
    "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "shop_id",
      "not",
      "in",
      "(",
      "select",
      "shop_id",
      "from",
      "hiring",
      ")"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which shops run with no employees? Find the shop names",
    "question_toks": [
      "Which",
      "shops",
      "run",
      "with",
      "no",
      "employees",
      "?",
      "Find",
      "the",
      "shop",
      "names"
    ],
    "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "shop_id",
      "not",
      "in",
      "(",
      "select",
      "shop_id",
      "from",
      "hiring",
      ")"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the number of employees hired in each shop; show the shop name as well.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "employees",
      "hired",
      "in",
      "each",
      "shop",
      ";",
      "show",
      "the",
      "shop",
      "name",
      "as",
      "well",
      "."
    ],
    "query": "SELECT count(*) ,  T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T2.name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2.name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "group",
      "by",
      "t2.name"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "For each shop, return the number of employees working there and the name of the shop.",
    "question_toks": [
      "For",
      "each",
      "shop",
      ",",
      "return",
      "the",
      "number",
      "of",
      "employees",
      "working",
      "there",
      "and",
      "the",
      "name",
      "of",
      "the",
      "shop",
      "."
    ],
    "query": "SELECT count(*) ,  T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T2.name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2.name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "group",
      "by",
      "t2.name"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What is total bonus given in all evaluations?",
    "question_toks": [
      "What",
      "is",
      "total",
      "bonus",
      "given",
      "in",
      "all",
      "evaluations",
      "?"
    ],
    "query": "SELECT sum(bonus) FROM evaluation",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "bonus",
      ")",
      "from",
      "evaluation"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the total amount of bonus given in all the evaluations.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "amount",
      "of",
      "bonus",
      "given",
      "in",
      "all",
      "the",
      "evaluations",
      "."
    ],
    "query": "SELECT sum(bonus) FROM evaluation",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "bonus",
      ")",
      "from",
      "evaluation"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Give me all the information about hiring.",
    "question_toks": [
      "Give",
      "me",
      "all",
      "the",
      "information",
      "about",
      "hiring",
      "."
    ],
    "query": "SELECT * FROM hiring",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "hiring"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What is all the information about hiring?",
    "question_toks": [
      "What",
      "is",
      "all",
      "the",
      "information",
      "about",
      "hiring",
      "?"
    ],
    "query": "SELECT * FROM hiring",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "hiring"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "question_toks": [
      "Which",
      "district",
      "has",
      "both",
      "stores",
      "with",
      "less",
      "than",
      "3000",
      "products",
      "and",
      "stores",
      "with",
      "more",
      "than",
      "10000",
      "products",
      "?"
    ],
    "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            10000.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      "<",
      "3000",
      "intersect",
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "10000"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "question_toks": [
      "Find",
      "the",
      "districts",
      "in",
      "which",
      "there",
      "are",
      "both",
      "shops",
      "selling",
      "less",
      "than",
      "3000",
      "products",
      "and",
      "shops",
      "selling",
      "more",
      "than",
      "10000",
      "products",
      "."
    ],
    "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            10000.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      "<",
      "3000",
      "intersect",
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "10000"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "How many different store locations are there?",
    "question_toks": [
      "How",
      "many",
      "different",
      "store",
      "locations",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(DISTINCT LOCATION) FROM shop",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "location",
      ")",
      "from",
      "shop"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Count the number of distinct store locations.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "distinct",
      "store",
      "locations",
      "."
    ],
    "query": "SELECT count(DISTINCT LOCATION) FROM shop",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "location",
      ")",
      "from",
      "shop"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many documents do we have?",
    "question_toks": [
      "How",
      "many",
      "documents",
      "do",
      "we",
      "have",
      "?"
    ],
    "query": "SELECT count(*) FROM Documents",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of documents.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "documents",
      "."
    ],
    "query": "SELECT count(*) FROM Documents",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "List document IDs, document names, and document descriptions for all documents.",
    "question_toks": [
      "List",
      "document",
      "IDs",
      ",",
      "document",
      "names",
      ",",
      "and",
      "document",
      "descriptions",
      "for",
      "all",
      "documents",
      "."
    ],
    "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "from",
      "documents"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids, names, and descriptions for all documents?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      ",",
      "names",
      ",",
      "and",
      "descriptions",
      "for",
      "all",
      "documents",
      "?"
    ],
    "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "from",
      "documents"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document name and template id for document with description with the letter 'w' in it?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "name",
      "and",
      "template",
      "i",
      "d",
      "for",
      "document",
      "with",
      "description",
      "with",
      "the",
      "letter",
      "'",
      "w",
      "'",
      "in",
      "it",
      "?"
    ],
    "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"%w%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_name",
      ",",
      "template_id",
      "from",
      "documents",
      "where",
      "document_description",
      "like",
      "\"%w%\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the names and template ids for documents that contain the letter w in their description.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "template",
      "ids",
      "for",
      "documents",
      "that",
      "contain",
      "the",
      "letter",
      "w",
      "in",
      "their",
      "description",
      "."
    ],
    "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"%w%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_name",
      ",",
      "template_id",
      "from",
      "documents",
      "where",
      "document_description",
      "like",
      "\"%w%\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "i",
      "d",
      ",",
      "template",
      "i",
      "d",
      "and",
      "description",
      "for",
      "document",
      "named",
      "\"",
      "Robbin",
      "CV",
      "\"",
      "?"
    ],
    "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Robbin CV\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      ",",
      "template_id",
      ",",
      "document_description",
      "from",
      "documents",
      "where",
      "document_name",
      "=",
      "\"Robbin CV\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
    "question_toks": [
      "Return",
      "the",
      "document",
      "i",
      "d",
      ",",
      "template",
      "i",
      "d",
      ",",
      "and",
      "description",
      "for",
      "the",
      "document",
      "with",
      "the",
      "name",
      "Robbin",
      "CV",
      "."
    ],
    "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Robbin CV\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      ",",
      "template_id",
      ",",
      "document_description",
      "from",
      "documents",
      "where",
      "document_name",
      "=",
      "\"Robbin CV\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many different templates do all document use?",
    "question_toks": [
      "How",
      "many",
      "different",
      "templates",
      "do",
      "all",
      "document",
      "use",
      "?"
    ],
    "query": "SELECT count(DISTINCT template_id) FROM Documents",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "template_id",
      ")",
      "from",
      "documents"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of different templates used for documents.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "different",
      "templates",
      "used",
      "for",
      "documents",
      "."
    ],
    "query": "SELECT count(DISTINCT template_id) FROM Documents",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "template_id",
      ")",
      "from",
      "documents"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many documents are using the template with type code 'PPT'?",
    "question_toks": [
      "How",
      "many",
      "documents",
      "are",
      "using",
      "the",
      "template",
      "with",
      "type",
      "code",
      "'",
      "PPT",
      "'",
      "?"
    ],
    "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "where",
      "t2.template_type_code",
      "=",
      "\"PPT\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of documents that use the PPT template type.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "documents",
      "that",
      "use",
      "the",
      "PPT",
      "template",
      "type",
      "."
    ],
    "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "where",
      "t2.template_type_code",
      "=",
      "\"PPT\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template ids and number of documents using each template.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "ids",
      "and",
      "number",
      "of",
      "documents",
      "using",
      "each",
      "template",
      "."
    ],
    "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "group",
      "by",
      "template_id"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are all different template ids used for documents, and how many times were each of them used?",
    "question_toks": [
      "What",
      "are",
      "all",
      "different",
      "template",
      "ids",
      "used",
      "for",
      "documents",
      ",",
      "and",
      "how",
      "many",
      "times",
      "were",
      "each",
      "of",
      "them",
      "used",
      "?"
    ],
    "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "group",
      "by",
      "template_id"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the id and type code for the template used by the most documents?",
    "question_toks": [
      "What",
      "is",
      "the",
      "i",
      "d",
      "and",
      "type",
      "code",
      "for",
      "the",
      "template",
      "used",
      "by",
      "the",
      "most",
      "documents",
      "?"
    ],
    "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.template_id",
      ",",
      "t2.template_type_code",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "group",
      "by",
      "t1.template_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the id and type code of the template that is used for the greatest number of documents.",
    "question_toks": [
      "Return",
      "the",
      "i",
      "d",
      "and",
      "type",
      "code",
      "of",
      "the",
      "template",
      "that",
      "is",
      "used",
      "for",
      "the",
      "greatest",
      "number",
      "of",
      "documents",
      "."
    ],
    "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.template_id",
      ",",
      "t2.template_type_code",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "group",
      "by",
      "t1.template_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show ids for all templates that are used by more than one document.",
    "question_toks": [
      "Show",
      "ids",
      "for",
      "all",
      "templates",
      "that",
      "are",
      "used",
      "by",
      "more",
      "than",
      "one",
      "document",
      "."
    ],
    "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_id",
      "from",
      "documents",
      "group",
      "by",
      "template_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the template ids of any templates used in more than a single document?",
    "question_toks": [
      "What",
      "are",
      "the",
      "template",
      "ids",
      "of",
      "any",
      "templates",
      "used",
      "in",
      "more",
      "than",
      "a",
      "single",
      "document",
      "?"
    ],
    "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_id",
      "from",
      "documents",
      "group",
      "by",
      "template_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show ids for all templates not used by any document.",
    "question_toks": [
      "Show",
      "ids",
      "for",
      "all",
      "templates",
      "not",
      "used",
      "by",
      "any",
      "document",
      "."
    ],
    "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "template_id",
      "from",
      "templates",
      "except",
      "select",
      "template_id",
      "from",
      "documents"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids for templates that are not used in any documents?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "for",
      "templates",
      "that",
      "are",
      "not",
      "used",
      "in",
      "any",
      "documents",
      "?"
    ],
    "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "template_id",
      "from",
      "templates",
      "except",
      "select",
      "template_id",
      "from",
      "documents"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates do we have?",
    "question_toks": [
      "How",
      "many",
      "templates",
      "do",
      "we",
      "have",
      "?"
    ],
    "query": "SELECT count(*) FROM Templates",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of templates.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "templates",
      "."
    ],
    "query": "SELECT count(*) FROM Templates",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show template ids, version numbers, and template type codes for all templates.",
    "question_toks": [
      "Show",
      "template",
      "ids",
      ",",
      "version",
      "numbers",
      ",",
      "and",
      "template",
      "type",
      "codes",
      "for",
      "all",
      "templates",
      "."
    ],
    "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids, version numbers, and type codes for each template?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      ",",
      "version",
      "numbers",
      ",",
      "and",
      "type",
      "codes",
      "for",
      "each",
      "template",
      "?"
    ],
    "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all distinct template type codes for all templates.",
    "question_toks": [
      "Show",
      "all",
      "distinct",
      "template",
      "type",
      "codes",
      "for",
      "all",
      "templates",
      "."
    ],
    "query": "SELECT DISTINCT template_type_code FROM Templates",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "template_type_code",
      "from",
      "templates"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "codes",
      "?"
    ],
    "query": "SELECT DISTINCT template_type_code FROM Templates",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "template_type_code",
      "from",
      "templates"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids of templates with template type code PP or PPT?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "templates",
      "with",
      "template",
      "type",
      "code",
      "PP",
      "or",
      "PPT",
      "?"
    ],
    "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PP\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_id",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "\"PP\"",
      "or",
      "template_type_code",
      "=",
      "\"PPT\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the ids of templates that have the code PP or PPT.",
    "question_toks": [
      "Return",
      "the",
      "ids",
      "of",
      "templates",
      "that",
      "have",
      "the",
      "code",
      "PP",
      "or",
      "PPT",
      "."
    ],
    "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PP\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_id",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "\"PP\"",
      "or",
      "template_type_code",
      "=",
      "\"PPT\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates have template type code CV?",
    "question_toks": [
      "How",
      "many",
      "templates",
      "have",
      "template",
      "type",
      "code",
      "CV",
      "?"
    ],
    "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"CV\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "\"CV\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of templates of the type CV.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "templates",
      "of",
      "the",
      "type",
      "CV",
      "."
    ],
    "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"CV\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "\"CV\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the version number and template type code for the template with version number later than 5?",
    "question_toks": [
      "What",
      "is",
      "the",
      "version",
      "number",
      "and",
      "template",
      "type",
      "code",
      "for",
      "the",
      "template",
      "with",
      "version",
      "number",
      "later",
      "than",
      "5",
      "?"
    ],
    "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates",
      "where",
      "version_number",
      ">",
      "5"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "question_toks": [
      "Return",
      "the",
      "version",
      "numbers",
      "and",
      "template",
      "type",
      "codes",
      "of",
      "templates",
      "with",
      "a",
      "version",
      "number",
      "greater",
      "than",
      "5",
      "."
    ],
    "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates",
      "where",
      "version_number",
      ">",
      "5"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and number of templates for each.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "and",
      "number",
      "of",
      "templates",
      "for",
      "each",
      "."
    ],
    "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes, and how many templates correspond to each?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "codes",
      ",",
      "and",
      "how",
      "many",
      "templates",
      "correspond",
      "to",
      "each",
      "?"
    ],
    "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Which template type code has most number of templates?",
    "question_toks": [
      "Which",
      "template",
      "type",
      "code",
      "has",
      "most",
      "number",
      "of",
      "templates",
      "?"
    ],
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the type code of the template type that the most templates belong to.",
    "question_toks": [
      "Return",
      "the",
      "type",
      "code",
      "of",
      "the",
      "template",
      "type",
      "that",
      "the",
      "most",
      "templates",
      "belong",
      "to",
      "."
    ],
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes with less than three templates.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "with",
      "less",
      "than",
      "three",
      "templates",
      "."
    ],
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "3"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the codes of template types that have fewer than 3 templates?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "template",
      "types",
      "that",
      "have",
      "fewer",
      "than",
      "3",
      "templates",
      "?"
    ],
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "3"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What the smallest version number and its template type code?",
    "question_toks": [
      "What",
      "the",
      "smallest",
      "version",
      "number",
      "and",
      "its",
      "template",
      "type",
      "code",
      "?"
    ],
    "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "min",
      "(",
      "version_number",
      ")",
      ",",
      "template_type_code",
      "from",
      "templates"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the lowest version number, along with its corresponding template type code.",
    "question_toks": [
      "Return",
      "the",
      "lowest",
      "version",
      "number",
      ",",
      "along",
      "with",
      "its",
      "corresponding",
      "template",
      "type",
      "code",
      "."
    ],
    "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "min",
      "(",
      "version_number",
      ")",
      ",",
      "template_type_code",
      "from",
      "templates"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the template type code of the template used by document with the name \"Data base\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "template",
      "type",
      "code",
      "of",
      "the",
      "template",
      "used",
      "by",
      "document",
      "with",
      "the",
      "name",
      "\"",
      "Data",
      "base",
      "\"",
      "?"
    ],
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Data base\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "where",
      "t2.document_name",
      "=",
      "\"Data base\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the template type code of the template that is used by a document named Data base.",
    "question_toks": [
      "Return",
      "the",
      "template",
      "type",
      "code",
      "of",
      "the",
      "template",
      "that",
      "is",
      "used",
      "by",
      "a",
      "document",
      "named",
      "Data",
      "base",
      "."
    ],
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Data base\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "where",
      "t2.document_name",
      "=",
      "\"Data base\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all document names using templates with template type code BK.",
    "question_toks": [
      "Show",
      "all",
      "document",
      "names",
      "using",
      "templates",
      "with",
      "template",
      "type",
      "code",
      "BK",
      "."
    ],
    "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"BK\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.document_name",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "where",
      "t1.template_type_code",
      "=",
      "\"BK\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the names of documents that use templates with the code BK?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "documents",
      "that",
      "use",
      "templates",
      "with",
      "the",
      "code",
      "BK",
      "?"
    ],
    "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"BK\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.document_name",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "where",
      "t1.template_type_code",
      "=",
      "\"BK\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and the number of documents using each type.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "documents",
      "using",
      "each",
      "type",
      "."
    ],
    "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "group",
      "by",
      "t1.template_type_code"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes, and how many documents use each type?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "codes",
      ",",
      "and",
      "how",
      "many",
      "documents",
      "use",
      "each",
      "type",
      "?"
    ],
    "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "group",
      "by",
      "t1.template_type_code"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Which template type code is used by most number of documents?",
    "question_toks": [
      "Which",
      "template",
      "type",
      "code",
      "is",
      "used",
      "by",
      "most",
      "number",
      "of",
      "documents",
      "?"
    ],
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "group",
      "by",
      "t1.template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the code of the template type that is most commonly used in documents.",
    "question_toks": [
      "Return",
      "the",
      "code",
      "of",
      "the",
      "template",
      "type",
      "that",
      "is",
      "most",
      "commonly",
      "used",
      "in",
      "documents",
      "."
    ],
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id",
      "group",
      "by",
      "t1.template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes that are not used by any document.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "that",
      "are",
      "not",
      "used",
      "by",
      "any",
      "document",
      "."
    ],
    "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "except",
      "select",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the codes of template types that are not used for any document?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "template",
      "types",
      "that",
      "are",
      "not",
      "used",
      "for",
      "any",
      "document",
      "?"
    ],
    "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "except",
      "select",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.template_id",
      "=",
      "t2.template_id"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and descriptions.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "and",
      "descriptions",
      "."
    ],
    "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_code",
      ",",
      "template_type_description",
      "from",
      "ref_template_types"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the type codes and descriptions for all template types?",
    "question_toks": [
      "What",
      "are",
      "the",
      "type",
      "codes",
      "and",
      "descriptions",
      "for",
      "all",
      "template",
      "types",
      "?"
    ],
    "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_code",
      ",",
      "template_type_description",
      "from",
      "ref_template_types"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the template type descriptions for template type code \"AD\".",
    "question_toks": [
      "What",
      "is",
      "the",
      "template",
      "type",
      "descriptions",
      "for",
      "template",
      "type",
      "code",
      "\"",
      "AD",
      "\"",
      "."
    ],
    "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"AD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_description",
      "from",
      "ref_template_types",
      "where",
      "template_type_code",
      "=",
      "\"AD\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the template type description of the template type with the code AD.",
    "question_toks": [
      "Return",
      "the",
      "template",
      "type",
      "description",
      "of",
      "the",
      "template",
      "type",
      "with",
      "the",
      "code",
      "AD",
      "."
    ],
    "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"AD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_description",
      "from",
      "ref_template_types",
      "where",
      "template_type_code",
      "=",
      "\"AD\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the template type code for template type description \"Book\".",
    "question_toks": [
      "What",
      "is",
      "the",
      "template",
      "type",
      "code",
      "for",
      "template",
      "type",
      "description",
      "\"",
      "Book",
      "\"",
      "."
    ],
    "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Book\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_code",
      "from",
      "ref_template_types",
      "where",
      "template_type_description",
      "=",
      "\"Book\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the type code of the template type with the description \"Book\".",
    "question_toks": [
      "Return",
      "the",
      "type",
      "code",
      "of",
      "the",
      "template",
      "type",
      "with",
      "the",
      "description",
      "\"",
      "Book",
      "\"",
      "."
    ],
    "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Book\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "template_type_code",
      "from",
      "ref_template_types",
      "where",
      "template_type_description",
      "=",
      "\"Book\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the distinct template type descriptions for the templates ever used by any document?",
    "question_toks": [
      "What",
      "are",
      "the",
      "distinct",
      "template",
      "type",
      "descriptions",
      "for",
      "the",
      "templates",
      "ever",
      "used",
      "by",
      "any",
      "document",
      "?"
    ],
    "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.template_type_description",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1.template_type_code",
      "=",
      "t2.template_type_code",
      "join",
      "documents",
      "as",
      "t3",
      "on",
      "t2.template_id",
      "=",
      "t3.template_id"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the different descriptions for templates that have been used in a document.",
    "question_toks": [
      "Return",
      "the",
      "different",
      "descriptions",
      "for",
      "templates",
      "that",
      "have",
      "been",
      "used",
      "in",
      "a",
      "document",
      "."
    ],
    "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.template_type_description",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1.template_type_code",
      "=",
      "t2.template_type_code",
      "join",
      "documents",
      "as",
      "t3",
      "on",
      "t2.template_id",
      "=",
      "t3.template_id"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the template ids with template type description \"Presentation\".",
    "question_toks": [
      "What",
      "are",
      "the",
      "template",
      "ids",
      "with",
      "template",
      "type",
      "description",
      "\"",
      "Presentation",
      "\"",
      "."
    ],
    "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Presentation\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.template_id",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1.template_type_code",
      "=",
      "t2.template_type_code",
      "where",
      "t1.template_type_description",
      "=",
      "\"Presentation\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the ids corresponding to templates with the description 'Presentation'.",
    "question_toks": [
      "Return",
      "the",
      "ids",
      "corresponding",
      "to",
      "templates",
      "with",
      "the",
      "description",
      "'",
      "Presentation",
      "'",
      "."
    ],
    "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Presentation\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.template_id",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1.template_type_code",
      "=",
      "t2.template_type_code",
      "where",
      "t1.template_type_description",
      "=",
      "\"Presentation\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many paragraphs in total?",
    "question_toks": [
      "How",
      "many",
      "paragraphs",
      "in",
      "total",
      "?"
    ],
    "query": "SELECT count(*) FROM Paragraphs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of paragraphs.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "paragraphs",
      "."
    ],
    "query": "SELECT count(*) FROM Paragraphs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many paragraphs for the document with name 'Summer Show'?",
    "question_toks": [
      "How",
      "many",
      "paragraphs",
      "for",
      "the",
      "document",
      "with",
      "name",
      "'",
      "Summer",
      "Show",
      "'",
      "?"
    ],
    "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Summer Show\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.document_id",
      "=",
      "t2.document_id",
      "where",
      "t2.document_name",
      "=",
      "\"Summer Show\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of paragraphs in the document named 'Summer Show'.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "the",
      "document",
      "named",
      "'",
      "Summer",
      "Show",
      "'",
      "."
    ],
    "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Summer Show\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.document_id",
      "=",
      "t2.document_id",
      "where",
      "t2.document_name",
      "=",
      "\"Summer Show\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show paragraph details for paragraph with text 'Korea'.",
    "question_toks": [
      "Show",
      "paragraph",
      "details",
      "for",
      "paragraph",
      "with",
      "text",
      "'",
      "Korea",
      "'",
      "."
    ],
    "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Korea\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "other_details",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "\"Korea\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the details for the paragraph that includes the text 'Korea'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "details",
      "for",
      "the",
      "paragraph",
      "that",
      "includes",
      "the",
      "text",
      "'",
      "Korea",
      "'",
      "?"
    ],
    "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Korea\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "other_details",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "\"Korea\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "question_toks": [
      "Show",
      "all",
      "paragraph",
      "ids",
      "and",
      "texts",
      "for",
      "the",
      "document",
      "with",
      "name",
      "'",
      "Welcome",
      "to",
      "NY",
      "'",
      "."
    ],
    "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Welcome to NY\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.paragraph_id",
      ",",
      "t1.paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.document_id",
      "=",
      "t2.document_id",
      "where",
      "t2.document_name",
      "=",
      "\"Welcome to NY\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "texts",
      "of",
      "paragraphs",
      "in",
      "the",
      "document",
      "titled",
      "'",
      "Welcome",
      "to",
      "NY",
      "'",
      "?"
    ],
    "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Welcome to NY\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.paragraph_id",
      ",",
      "t1.paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.document_id",
      "=",
      "t2.document_id",
      "where",
      "t2.document_name",
      "=",
      "\"Welcome to NY\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all paragraph texts for the document \"Customer reviews\".",
    "question_toks": [
      "Show",
      "all",
      "paragraph",
      "texts",
      "for",
      "the",
      "document",
      "\"",
      "Customer",
      "reviews",
      "\"",
      "."
    ],
    "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Customer reviews\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.document_id",
      "=",
      "t2.document_id",
      "where",
      "t2.document_name",
      "=",
      "\"Customer reviews\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "paragraph",
      "texts",
      "for",
      "the",
      "document",
      "with",
      "the",
      "name",
      "'",
      "Customer",
      "reviews",
      "'",
      "?"
    ],
    "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Customer reviews\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.document_id",
      "=",
      "t2.document_id",
      "where",
      "t2.document_name",
      "=",
      "\"Customer reviews\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "question_toks": [
      "Show",
      "all",
      "document",
      "ids",
      "and",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "each",
      "document",
      ".",
      "Order",
      "by",
      "document",
      "i",
      "d."
    ],
    "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "document_id"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "question_toks": [
      "Return",
      "the",
      "different",
      "document",
      "ids",
      "along",
      "with",
      "the",
      "number",
      "of",
      "paragraphs",
      "corresponding",
      "to",
      "each",
      ",",
      "ordered",
      "by",
      "i",
      "d."
    ],
    "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "document_id"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all document ids, names and the number of paragraphs in each document.",
    "question_toks": [
      "Show",
      "all",
      "document",
      "ids",
      ",",
      "names",
      "and",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "each",
      "document",
      "."
    ],
    "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.document_id",
      ",",
      "t2.document_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.document_id",
      "=",
      "t2.document_id",
      "group",
      "by",
      "t1.document_id"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "names",
      "of",
      "each",
      "document",
      ",",
      "as",
      "well",
      "as",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "each",
      "?"
    ],
    "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.document_id",
      ",",
      "t2.document_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.document_id",
      "=",
      "t2.document_id",
      "group",
      "by",
      "t1.document_id"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "List all document ids with at least two paragraphs.",
    "question_toks": [
      "List",
      "all",
      "document",
      "ids",
      "with",
      "at",
      "least",
      "two",
      "paragraphs",
      "."
    ],
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids of documents that have 2 or more paragraphs?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "documents",
      "that",
      "have",
      "2",
      "or",
      "more",
      "paragraphs",
      "?"
    ],
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id and name with greatest number of paragraphs?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "i",
      "d",
      "and",
      "name",
      "with",
      "greatest",
      "number",
      "of",
      "paragraphs",
      "?"
    ],
    "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.document_id",
      ",",
      "t2.document_name",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.document_id",
      "=",
      "t2.document_id",
      "group",
      "by",
      "t1.document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the id and name of the document with the most paragraphs.",
    "question_toks": [
      "Return",
      "the",
      "i",
      "d",
      "and",
      "name",
      "of",
      "the",
      "document",
      "with",
      "the",
      "most",
      "paragraphs",
      "."
    ],
    "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.document_id",
      ",",
      "t2.document_name",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1.document_id",
      "=",
      "t2.document_id",
      "group",
      "by",
      "t1.document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id with least number of paragraphs?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "i",
      "d",
      "with",
      "least",
      "number",
      "of",
      "paragraphs",
      "?"
    ],
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the id of the document with the fewest paragraphs.",
    "question_toks": [
      "Return",
      "the",
      "i",
      "d",
      "of",
      "the",
      "document",
      "with",
      "the",
      "fewest",
      "paragraphs",
      "."
    ],
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id with 1 to 2 paragraphs?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "i",
      "d",
      "with",
      "1",
      "to",
      "2",
      "paragraphs",
      "?"
    ],
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          1,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          2.0
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "between",
      "1",
      "and",
      "2"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Give the ids of documents that have between one and two paragraphs.",
    "question_toks": [
      "Give",
      "the",
      "ids",
      "of",
      "documents",
      "that",
      "have",
      "between",
      "one",
      "and",
      "two",
      "paragraphs",
      "."
    ],
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          1,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          2.0
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "between",
      "1",
      "and",
      "2"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "question_toks": [
      "Show",
      "the",
      "document",
      "i",
      "d",
      "with",
      "paragraph",
      "text",
      "'",
      "Brazil",
      "'",
      "and",
      "'",
      "Ireland",
      "'",
      "."
    ],
    "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  15,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            "\"Ireland\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "\"Brazil\"",
      "intersect",
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "\"Ireland\""
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "documents",
      "that",
      "contain",
      "the",
      "paragraph",
      "text",
      "'",
      "Brazil",
      "'",
      "and",
      "'",
      "Ireland",
      "'",
      "?"
    ],
    "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  15,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            "\"Ireland\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "\"Brazil\"",
      "intersect",
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "\"Ireland\""
    ]
  },
  {
    "db_id": "course_teach",
    "question": "How many teachers are there?",
    "question_toks": [
      "How",
      "many",
      "teachers",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM teacher",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What is the total count of teachers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "count",
      "of",
      "teachers",
      "?"
    ],
    "query": "SELECT count(*) FROM teacher",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "List the names of teachers in ascending order of age.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "teachers",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "query": "SELECT Name FROM teacher ORDER BY Age ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers ordered by ascending age?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "ordered",
      "by",
      "ascending",
      "age",
      "?"
    ],
    "query": "SELECT Name FROM teacher ORDER BY Age ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the age and hometown of teachers?",
    "question_toks": [
      "What",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?"
    ],
    "query": "SELECT Age ,  Hometown FROM teacher",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "age",
      ",",
      "hometown",
      "from",
      "teacher"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What is the age and hometown of every teacher?",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?"
    ],
    "query": "SELECT Age ,  Hometown FROM teacher",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "age",
      ",",
      "hometown",
      "from",
      "teacher"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "List the name of teachers whose hometown is not \"Little Lever Urban District\".",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "teachers",
      "whose",
      "hometown",
      "is",
      "not",
      "\"",
      "Little",
      "Lever",
      "Urban",
      "District",
      "\"",
      "."
    ],
    "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Little Lever Urban District\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "hometown",
      "!=",
      "\"Little Lever Urban District\""
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers whose hometown is not \"Little Lever Urban District\"?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "whose",
      "hometown",
      "is",
      "not",
      "\"",
      "Little",
      "Lever",
      "Urban",
      "District",
      "\"",
      "?"
    ],
    "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Little Lever Urban District\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "hometown",
      "!=",
      "\"Little Lever Urban District\""
    ]
  },
  {
    "db_id": "course_teach",
    "question": "Show the name of teachers aged either 32 or 33?",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "teachers",
      "aged",
      "either",
      "32",
      "or",
      "33",
      "?"
    ],
    "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          32.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          33.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "age",
      "=",
      "32",
      "or",
      "age",
      "=",
      "33"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers who are aged either 32 or 33?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "who",
      "are",
      "aged",
      "either",
      "32",
      "or",
      "33",
      "?"
    ],
    "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          32.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          33.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "age",
      "=",
      "32",
      "or",
      "age",
      "=",
      "33"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What is the hometown of the youngest teacher?",
    "question_toks": [
      "What",
      "is",
      "the",
      "hometown",
      "of",
      "the",
      "youngest",
      "teacher",
      "?"
    ],
    "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "hometown",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "Where is the youngest teacher from?",
    "question_toks": [
      "Where",
      "is",
      "the",
      "youngest",
      "teacher",
      "from",
      "?"
    ],
    "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "hometown",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "Show different hometown of teachers and the number of teachers from each hometown.",
    "question_toks": [
      "Show",
      "different",
      "hometown",
      "of",
      "teachers",
      "and",
      "the",
      "number",
      "of",
      "teachers",
      "from",
      "each",
      "hometown",
      "."
    ],
    "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "hometown",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher",
      "group",
      "by",
      "hometown"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "For each hometown, how many teachers are there?",
    "question_toks": [
      "For",
      "each",
      "hometown",
      ",",
      "how",
      "many",
      "teachers",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "hometown",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher",
      "group",
      "by",
      "hometown"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "List the most common hometown of teachers.",
    "question_toks": [
      "List",
      "the",
      "most",
      "common",
      "hometown",
      "of",
      "teachers",
      "."
    ],
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What is the most commmon hometowns for teachers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "commmon",
      "hometowns",
      "for",
      "teachers",
      "?"
    ],
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "Show the hometowns shared by at least two teachers.",
    "question_toks": [
      "Show",
      "the",
      "hometowns",
      "shared",
      "by",
      "at",
      "least",
      "two",
      "teachers",
      "."
    ],
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the towns from which at least two teachers come from?",
    "question_toks": [
      "What",
      "are",
      "the",
      "towns",
      "from",
      "which",
      "at",
      "least",
      "two",
      "teachers",
      "come",
      "from",
      "?"
    ],
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "Show names of teachers and the courses they are arranged to teach.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teachers",
      "and",
      "the",
      "courses",
      "they",
      "are",
      "arranged",
      "to",
      "teach",
      "."
    ],
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t3.name",
      ",",
      "t2.course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1.teacher_id",
      "=",
      "t3.teacher_id"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What is the name of each teacher and what course they teach?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "each",
      "teacher",
      "and",
      "what",
      "course",
      "they",
      "teach",
      "?"
    ],
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t3.name",
      ",",
      "t2.course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1.teacher_id",
      "=",
      "t3.teacher_id"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teachers",
      "and",
      "the",
      "courses",
      "they",
      "are",
      "arranged",
      "to",
      "teach",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "of",
      "the",
      "teacher",
      "'s",
      "name",
      "."
    ],
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t3.name",
      ",",
      "t2.course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1.teacher_id",
      "=",
      "t3.teacher_id",
      "order",
      "by",
      "t3.name"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "and",
      "the",
      "courses",
      "they",
      "teach",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "by",
      "the",
      "name",
      "of",
      "the",
      "teacher",
      "?"
    ],
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t3.name",
      ",",
      "t2.course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1.teacher_id",
      "=",
      "t3.teacher_id",
      "order",
      "by",
      "t3.name"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "Show the name of the teacher for the math course.",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "the",
      "teacher",
      "for",
      "the",
      "math",
      "course",
      "."
    ],
    "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Math\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t3.name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1.teacher_id",
      "=",
      "t3.teacher_id",
      "where",
      "t2.course",
      "=",
      "\"Math\""
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the people who teach math courses?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "people",
      "who",
      "teach",
      "math",
      "courses",
      "?"
    ],
    "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Math\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t3.name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1.teacher_id",
      "=",
      "t3.teacher_id",
      "where",
      "t2.course",
      "=",
      "\"Math\""
    ]
  },
  {
    "db_id": "course_teach",
    "question": "Show names of teachers and the number of courses they teach.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teachers",
      "and",
      "the",
      "number",
      "of",
      "courses",
      "they",
      "teach",
      "."
    ],
    "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1.teacher_id",
      "=",
      "t2.teacher_id",
      "group",
      "by",
      "t2.name"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers and how many courses do they teach?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "and",
      "how",
      "many",
      "courses",
      "do",
      "they",
      "teach",
      "?"
    ],
    "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1.teacher_id",
      "=",
      "t2.teacher_id",
      "group",
      "by",
      "t2.name"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "Show names of teachers that teach at least two courses.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teachers",
      "that",
      "teach",
      "at",
      "least",
      "two",
      "courses",
      "."
    ],
    "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1.teacher_id",
      "=",
      "t2.teacher_id",
      "group",
      "by",
      "t2.name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers who teach at least two courses?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "who",
      "teach",
      "at",
      "least",
      "two",
      "courses",
      "?"
    ],
    "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1.teacher_id",
      "=",
      "t2.teacher_id",
      "group",
      "by",
      "t2.name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "List the names of teachers who have not been arranged to teach courses.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "teachers",
      "who",
      "have",
      "not",
      "been",
      "arranged",
      "to",
      "teach",
      "courses",
      "."
    ],
    "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "teacher_id",
      "not",
      "in",
      "(",
      "select",
      "teacher_id",
      "from",
      "course_arrange",
      ")"
    ]
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers whose courses have not been arranged?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "whose",
      "courses",
      "have",
      "not",
      "been",
      "arranged",
      "?"
    ],
    "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "teacher_id",
      "not",
      "in",
      "(",
      "select",
      "teacher_id",
      "from",
      "course_arrange",
      ")"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "How many visitors below age 30 are there?",
    "question_toks": [
      "How",
      "many",
      "visitors",
      "below",
      "age",
      "30",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM visitor WHERE age  <  30",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          30.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "visitor",
      "where",
      "age",
      "<",
      "30"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
    "question_toks": [
      "Find",
      "the",
      "names",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "and",
      "order",
      "the",
      "results",
      "by",
      "the",
      "level",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      ">",
      "4",
      "order",
      "by",
      "level_of_membership",
      "desc"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "What is the average age of the visitors whose membership level is not higher than 4?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "not",
      "higher",
      "than",
      "4",
      "?"
    ],
    "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          6,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      "<=",
      "4"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "and",
      "sort",
      "by",
      "their",
      "age",
      "from",
      "old",
      "to",
      "young",
      "."
    ],
    "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "level_of_membership",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      ">",
      "4",
      "order",
      "by",
      "age",
      "desc"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "Find the id and name of the museum that has the most staff members?",
    "question_toks": [
      "Find",
      "the",
      "i",
      "d",
      "and",
      "name",
      "of",
      "the",
      "museum",
      "that",
      "has",
      "the",
      "most",
      "staff",
      "members",
      "?"
    ],
    "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "museum_id",
      ",",
      "name",
      "from",
      "museum",
      "order",
      "by",
      "num_of_staff",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "Find the average number of staff working for the museums that were open before 2009.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "number",
      "of",
      "staff",
      "working",
      "for",
      "the",
      "museums",
      "that",
      "were",
      "open",
      "before",
      "2009",
      "."
    ],
    "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2009.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "num_of_staff",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      "<",
      "2009"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "question_toks": [
      "What",
      "are",
      "the",
      "opening",
      "year",
      "and",
      "staff",
      "number",
      "of",
      "the",
      "museum",
      "named",
      "Plaza",
      "Museum",
      "?"
    ],
    "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Plaza Museum\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "num_of_staff",
      ",",
      "open_year",
      "from",
      "museum",
      "where",
      "name",
      "=",
      "\"Plaza Museum\""
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "question_toks": [
      "find",
      "the",
      "names",
      "of",
      "museums",
      "which",
      "have",
      "more",
      "staff",
      "than",
      "the",
      "minimum",
      "staff",
      "number",
      "of",
      "all",
      "museums",
      "opened",
      "after",
      "2010",
      "."
    ],
    "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      3,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                3,
                [
                  0,
                  [
                    0,
                    4,
                    false
                  ],
                  null
                ],
                2010.0,
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "museum",
      "where",
      "num_of_staff",
      ">",
      "(",
      "select",
      "min",
      "(",
      "num_of_staff",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      ">",
      "2010",
      ")"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "find the id, name and age for visitors who visited some museums more than once.",
    "question_toks": [
      "find",
      "the",
      "i",
      "d",
      ",",
      "name",
      "and",
      "age",
      "for",
      "visitors",
      "who",
      "visited",
      "some",
      "museums",
      "more",
      "than",
      "once",
      "."
    ],
    "query": "SELECT T1.id ,  T1.name ,  T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id GROUP BY T1.id HAVING count(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.id",
      ",",
      "t1.name",
      ",",
      "t1.age",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.visitor_id",
      "group",
      "by",
      "t1.id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "question_toks": [
      "What",
      "are",
      "the",
      "i",
      "d",
      ",",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "visitors",
      "who",
      "have",
      "spent",
      "the",
      "largest",
      "amount",
      "of",
      "money",
      "in",
      "total",
      "in",
      "all",
      "museum",
      "tickets",
      "?"
    ],
    "query": "SELECT T2.visitor_id ,  T1.name ,  T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id GROUP BY T2.visitor_id ORDER BY sum(T2.Total_spent) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.visitor_id",
      ",",
      "t1.name",
      ",",
      "t1.level_of_membership",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.visitor_id",
      "group",
      "by",
      "t2.visitor_id",
      "order",
      "by",
      "sum",
      "(",
      "t2.total_spent",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "What are the id and name of the museum visited most times?",
    "question_toks": [
      "What",
      "are",
      "the",
      "i",
      "d",
      "and",
      "name",
      "of",
      "the",
      "museum",
      "visited",
      "most",
      "times",
      "?"
    ],
    "query": "SELECT T2.Museum_ID ,  T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.museum_id",
      ",",
      "t1.name",
      "from",
      "museum",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1.museum_id",
      "=",
      "t2.museum_id",
      "group",
      "by",
      "t2.museum_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "What is the name of the museum that had no visitor yet?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "museum",
      "that",
      "had",
      "no",
      "visitor",
      "yet",
      "?"
    ],
    "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "museum",
      "where",
      "museum_id",
      "not",
      "in",
      "(",
      "select",
      "museum_id",
      "from",
      "visit",
      ")"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "Find the name and age of the visitor who bought the most tickets at once.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "age",
      "of",
      "the",
      "visitor",
      "who",
      "bought",
      "the",
      "most",
      "tickets",
      "at",
      "once",
      "."
    ],
    "query": "SELECT T1.name ,  T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id ORDER BY T2.num_of_ticket DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      ",",
      "t1.age",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.visitor_id",
      "order",
      "by",
      "t2.num_of_ticket",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "What are the average and maximum number of tickets bought in all visits?",
    "question_toks": [
      "What",
      "are",
      "the",
      "average",
      "and",
      "maximum",
      "number",
      "of",
      "tickets",
      "bought",
      "in",
      "all",
      "visits",
      "?"
    ],
    "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "num_of_ticket",
      ")",
      ",",
      "max",
      "(",
      "num_of_ticket",
      ")",
      "from",
      "visit"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "What is the total ticket expense of the visitors whose membership level is 1?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "ticket",
      "expense",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "1",
      "?"
    ],
    "query": "SELECT sum(T2.Total_spent) FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id WHERE T1.Level_of_membership  =  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "t2.total_spent",
      ")",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.visitor_id",
      "where",
      "t1.level_of_membership",
      "=",
      "1"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "visitor",
      "who",
      "visited",
      "both",
      "a",
      "museum",
      "opened",
      "before",
      "2009",
      "and",
      "a",
      "museum",
      "opened",
      "after",
      "2011",
      "?"
    ],
    "query": "SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID  =  T2.Museum_ID WHERE T3.open_year  <  2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id  =  T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID  =  T2.Museum_ID WHERE T3.open_year  >  2011",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2009.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            2011.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.visitor_id",
      "join",
      "museum",
      "as",
      "t3",
      "on",
      "t3.museum_id",
      "=",
      "t2.museum_id",
      "where",
      "t3.open_year",
      "<",
      "2009",
      "intersect",
      "select",
      "t1.name",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.visitor_id",
      "join",
      "museum",
      "as",
      "t3",
      "on",
      "t3.museum_id",
      "=",
      "t2.museum_id",
      "where",
      "t3.open_year",
      ">",
      "2011"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "Find the number of visitors who did not visit any museum opened after 2010.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "visitors",
      "who",
      "did",
      "not",
      "visit",
      "any",
      "museum",
      "opened",
      "after",
      "2010",
      "."
    ],
    "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT T2.visitor_id FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID  =  T2.Museum_ID WHERE T1.open_year  >  2010)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      10,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                3,
                [
                  0,
                  [
                    0,
                    4,
                    false
                  ],
                  null
                ],
                2010.0,
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "visitor",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "t2.visitor_id",
      "from",
      "museum",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1.museum_id",
      "=",
      "t2.museum_id",
      "where",
      "t1.open_year",
      ">",
      "2010",
      ")"
    ]
  },
  {
    "db_id": "museum_visit",
    "question": "How many museums were opened after 2013 or before 2008?",
    "question_toks": [
      "How",
      "many",
      "museums",
      "were",
      "opened",
      "after",
      "2013",
      "or",
      "before",
      "2008",
      "?"
    ],
    "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      ">",
      "2013",
      "or",
      "open_year",
      "<",
      "2008"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the total number of players.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "players",
      "."
    ],
    "query": "SELECT count(*) FROM players",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "players"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "How many players are there?",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM players",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "players"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the total number of matches.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "matches",
      "."
    ],
    "query": "SELECT count(*) FROM matches",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Count the number of matches.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "matches",
      "."
    ],
    "query": "SELECT count(*) FROM matches",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "List the first name and birth date of all players from the country with code USA.",
    "question_toks": [
      "List",
      "the",
      "first",
      "name",
      "and",
      "birth",
      "date",
      "of",
      "all",
      "players",
      "from",
      "the",
      "country",
      "with",
      "code",
      "USA",
      "."
    ],
    "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "birth_date",
      "from",
      "players",
      "where",
      "country_code",
      "=",
      "\"USA\""
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the first names and birth dates of players from the USA?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "players",
      "from",
      "the",
      "USA",
      "?"
    ],
    "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "birth_date",
      "from",
      "players",
      "where",
      "country_code",
      "=",
      "\"USA\""
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the average age of losers and winners of all matches.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "age",
      "of",
      "losers",
      "and",
      "winners",
      "of",
      "all",
      "matches",
      "."
    ],
    "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "from",
      "matches"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the average ages of losers and winners across matches?",
    "question_toks": [
      "What",
      "are",
      "the",
      "average",
      "ages",
      "of",
      "losers",
      "and",
      "winners",
      "across",
      "matches",
      "?"
    ],
    "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "from",
      "matches"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the average rank of winners in all matches.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "rank",
      "of",
      "winners",
      "in",
      "all",
      "matches",
      "."
    ],
    "query": "SELECT avg(winner_rank) FROM matches",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "winner_rank",
      ")",
      "from",
      "matches"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What is the average rank for winners in all matches?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "rank",
      "for",
      "winners",
      "in",
      "all",
      "matches",
      "?"
    ],
    "query": "SELECT avg(winner_rank) FROM matches",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "winner_rank",
      ")",
      "from",
      "matches"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the highest rank of losers in all matches.",
    "question_toks": [
      "Find",
      "the",
      "highest",
      "rank",
      "of",
      "losers",
      "in",
      "all",
      "matches",
      "."
    ],
    "query": "SELECT min(loser_rank) FROM matches",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "min",
      "(",
      "loser_rank",
      ")",
      "from",
      "matches"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What is the best rank of losers across all matches?",
    "question_toks": [
      "What",
      "is",
      "the",
      "best",
      "rank",
      "of",
      "losers",
      "across",
      "all",
      "matches",
      "?"
    ],
    "query": "SELECT min(loser_rank) FROM matches",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "min",
      "(",
      "loser_rank",
      ")",
      "from",
      "matches"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "find the number of distinct country codes of all players.",
    "question_toks": [
      "find",
      "the",
      "number",
      "of",
      "distinct",
      "country",
      "codes",
      "of",
      "all",
      "players",
      "."
    ],
    "query": "SELECT count(DISTINCT country_code) FROM players",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "country_code",
      ")",
      "from",
      "players"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "How many distinct countries do players come from?",
    "question_toks": [
      "How",
      "many",
      "distinct",
      "countries",
      "do",
      "players",
      "come",
      "from",
      "?"
    ],
    "query": "SELECT count(DISTINCT country_code) FROM players",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "country_code",
      ")",
      "from",
      "players"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the number of distinct name of losers.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "distinct",
      "name",
      "of",
      "losers",
      "."
    ],
    "query": "SELECT count(DISTINCT loser_name) FROM matches",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                15,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "loser_name",
      ")",
      "from",
      "matches"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "How many different loser names are there?",
    "question_toks": [
      "How",
      "many",
      "different",
      "loser",
      "names",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(DISTINCT loser_name) FROM matches",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                15,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "loser_name",
      ")",
      "from",
      "matches"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the name of tourney that has more than 10 matches.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "tourney",
      "that",
      "has",
      "more",
      "than",
      "10",
      "matches",
      "."
    ],
    "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          27,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "tourney_name",
      "from",
      "matches",
      "group",
      "by",
      "tourney_name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the names of tournaments that have more than 10 matches?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "tournaments",
      "that",
      "have",
      "more",
      "than",
      "10",
      "matches",
      "?"
    ],
    "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          27,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "tourney_name",
      "from",
      "matches",
      "group",
      "by",
      "tourney_name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "List the names of all winners who played in both 2013 and 2016.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "all",
      "winners",
      "who",
      "played",
      "in",
      "both",
      "2013",
      "and",
      "2016",
      "."
    ],
    "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            2016.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "2013",
      "intersect",
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "2016"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the names of players who won in both 2013 and 2016?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "players",
      "who",
      "won",
      "in",
      "both",
      "2013",
      "and",
      "2016",
      "?"
    ],
    "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            2016.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "2013",
      "intersect",
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "2016"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "List the number of all matches who played in years of 2013 or 2016.",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "all",
      "matches",
      "who",
      "played",
      "in",
      "years",
      "of",
      "2013",
      "or",
      "2016",
      "."
    ],
    "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "2013",
      "or",
      "year",
      "=",
      "2016"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "How many matches were played in 2013 or 2016?",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "2013",
      "or",
      "2016",
      "?"
    ],
    "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "2013",
      "or",
      "year",
      "=",
      "2016"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "code",
      "and",
      "first",
      "name",
      "of",
      "the",
      "players",
      "who",
      "won",
      "in",
      "both",
      "tourney",
      "WTA",
      "Championships",
      "and",
      "Australian",
      "Open",
      "?"
    ],
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            "\"Australian Open\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.country_code",
      ",",
      "t1.first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.winner_id",
      "where",
      "t2.tourney_name",
      "=",
      "\"WTA Championships\"",
      "intersect",
      "select",
      "t1.country_code",
      ",",
      "t1.first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.winner_id",
      "where",
      "t2.tourney_name",
      "=",
      "\"Australian Open\""
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "and",
      "country",
      "codes",
      "for",
      "players",
      "who",
      "won",
      "both",
      "the",
      "WTA",
      "Championships",
      "and",
      "the",
      "Australian",
      "Open",
      "?"
    ],
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            "\"Australian Open\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.country_code",
      ",",
      "t1.first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.winner_id",
      "where",
      "t2.tourney_name",
      "=",
      "\"WTA Championships\"",
      "intersect",
      "select",
      "t1.country_code",
      ",",
      "t1.first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.winner_id",
      "where",
      "t2.tourney_name",
      "=",
      "\"Australian Open\""
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the first name and country code of the oldest player.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "oldest",
      "player",
      "."
    ],
    "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "country_code",
      "from",
      "players",
      "order",
      "by",
      "birth_date",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What is the first name and country code of the oldest player?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "oldest",
      "player",
      "?"
    ],
    "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "country_code",
      "from",
      "players",
      "order",
      "by",
      "birth_date",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "List the first and last name of all players in the order of birth date.",
    "question_toks": [
      "List",
      "the",
      "first",
      "and",
      "last",
      "name",
      "of",
      "all",
      "players",
      "in",
      "the",
      "order",
      "of",
      "birth",
      "date",
      "."
    ],
    "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "order",
      "by",
      "birth_date"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the full names of all players, sorted by birth date?",
    "question_toks": [
      "What",
      "are",
      "the",
      "full",
      "names",
      "of",
      "all",
      "players",
      ",",
      "sorted",
      "by",
      "birth",
      "date",
      "?"
    ],
    "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "order",
      "by",
      "birth_date"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
    "question_toks": [
      "List",
      "the",
      "first",
      "and",
      "last",
      "name",
      "of",
      "all",
      "players",
      "who",
      "are",
      "left",
      "/",
      "L",
      "hand",
      "in",
      "the",
      "order",
      "of",
      "birth",
      "date",
      "."
    ],
    "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "where",
      "hand",
      "=",
      "\"L\"",
      "order",
      "by",
      "birth_date"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the full names of all left handed players, in order of birth date?",
    "question_toks": [
      "What",
      "are",
      "the",
      "full",
      "names",
      "of",
      "all",
      "left",
      "handed",
      "players",
      ",",
      "in",
      "order",
      "of",
      "birth",
      "date",
      "?"
    ],
    "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "where",
      "hand",
      "=",
      "\"L\"",
      "order",
      "by",
      "birth_date"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the first name and country code of the player who did the most number of tours.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "player",
      "who",
      "did",
      "the",
      "most",
      "number",
      "of",
      "tours",
      "."
    ],
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.country_code",
      ",",
      "t1.first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.player_id",
      "order",
      "by",
      "t2.tours",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What is the first name and country code of the player with the most tours?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "player",
      "with",
      "the",
      "most",
      "tours",
      "?"
    ],
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.country_code",
      ",",
      "t1.first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.player_id",
      "order",
      "by",
      "t2.tours",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the year that has the most number of matches.",
    "question_toks": [
      "Find",
      "the",
      "year",
      "that",
      "has",
      "the",
      "most",
      "number",
      "of",
      "matches",
      "."
    ],
    "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Which year had the most matches?",
    "question_toks": [
      "Which",
      "year",
      "had",
      "the",
      "most",
      "matches",
      "?"
    ],
    "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the name and rank points of the winner who won the most times.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "rank",
      "points",
      "of",
      "the",
      "winner",
      "who",
      "won",
      "the",
      "most",
      "times",
      "."
    ],
    "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          34,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "winner_name",
      ",",
      "winner_rank_points",
      "from",
      "matches",
      "group",
      "by",
      "winner_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "won",
      "the",
      "most",
      "matches",
      ",",
      "and",
      "how",
      "many",
      "rank",
      "points",
      "does",
      "this",
      "player",
      "have",
      "?"
    ],
    "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          34,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "winner_name",
      ",",
      "winner_rank_points",
      "from",
      "matches",
      "group",
      "by",
      "winner_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "the",
      "highest",
      "rank",
      "points",
      "and",
      "participated",
      "in",
      "the",
      "Australian",
      "Open",
      "tourney",
      "."
    ],
    "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Australian Open\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "\"Australian Open\"",
      "order",
      "by",
      "winner_rank_points",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "winner",
      "with",
      "the",
      "most",
      "rank",
      "points",
      "who",
      "participated",
      "in",
      "the",
      "Australian",
      "Open",
      "tournament",
      "?"
    ],
    "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Australian Open\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "\"Australian Open\"",
      "order",
      "by",
      "winner_rank_points",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "question_toks": [
      "find",
      "the",
      "names",
      "of",
      "loser",
      "and",
      "winner",
      "who",
      "played",
      "in",
      "the",
      "match",
      "with",
      "greatest",
      "number",
      "of",
      "minutes",
      "."
    ],
    "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "winner_name",
      ",",
      "loser_name",
      "from",
      "matches",
      "order",
      "by",
      "minutes",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the names of the winner and loser who played in the longest match?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "winner",
      "and",
      "loser",
      "who",
      "played",
      "in",
      "the",
      "longest",
      "match",
      "?"
    ],
    "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "winner_name",
      ",",
      "loser_name",
      "from",
      "matches",
      "order",
      "by",
      "minutes",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the average ranking for each player and their first name.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "ranking",
      "for",
      "each",
      "player",
      "and",
      "their",
      "first",
      "name",
      "."
    ],
    "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "ranking",
      ")",
      ",",
      "t1.first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.player_id",
      "group",
      "by",
      "t1.first_name"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the first names of all players, and their average rankings?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "all",
      "players",
      ",",
      "and",
      "their",
      "average",
      "rankings",
      "?"
    ],
    "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "ranking",
      ")",
      ",",
      "t1.first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.player_id",
      "group",
      "by",
      "t1.first_name"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the total ranking points for each player and their first name.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "ranking",
      "points",
      "for",
      "each",
      "player",
      "and",
      "their",
      "first",
      "name",
      "."
    ],
    "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "ranking_points",
      ")",
      ",",
      "t1.first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.player_id",
      "group",
      "by",
      "t1.first_name"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the first names of all players, and their total ranking points?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "all",
      "players",
      ",",
      "and",
      "their",
      "total",
      "ranking",
      "points",
      "?"
    ],
    "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "ranking_points",
      ")",
      ",",
      "t1.first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.player_id",
      "group",
      "by",
      "t1.first_name"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "find the number of players for each country.",
    "question_toks": [
      "find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "country",
      "."
    ],
    "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "How many players are from each country?",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "find the code of the country where has the greatest number of players.",
    "question_toks": [
      "find",
      "the",
      "code",
      "of",
      "the",
      "country",
      "where",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "players",
      "."
    ],
    "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What is the code of the country with the most players?",
    "question_toks": [
      "What",
      "is",
      "the",
      "code",
      "of",
      "the",
      "country",
      "with",
      "the",
      "most",
      "players",
      "?"
    ],
    "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the codes of countries that have more than 50 players.",
    "question_toks": [
      "Find",
      "the",
      "codes",
      "of",
      "countries",
      "that",
      "have",
      "more",
      "than",
      "50",
      "players",
      "."
    ],
    "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "50"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the codes of countries with more than 50 players?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "countries",
      "with",
      "more",
      "than",
      "50",
      "players",
      "?"
    ],
    "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "50"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the total number of tours for each ranking date.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "tours",
      "for",
      "each",
      "ranking",
      "date",
      "."
    ],
    "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "from",
      "rankings",
      "group",
      "by",
      "ranking_date"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "How many total tours were there for each ranking date?",
    "question_toks": [
      "How",
      "many",
      "total",
      "tours",
      "were",
      "there",
      "for",
      "each",
      "ranking",
      "date",
      "?"
    ],
    "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "from",
      "rankings",
      "group",
      "by",
      "ranking_date"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the number of matches happened in each year.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "matches",
      "happened",
      "in",
      "each",
      "year",
      "."
    ],
    "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "How many matches were played in each year?",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?"
    ],
    "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the name and rank of the 3 youngest winners across all matches.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "rank",
      "of",
      "the",
      "3",
      "youngest",
      "winners",
      "across",
      "all",
      "matches",
      "."
    ],
    "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "winner_name",
      ",",
      "winner_rank",
      "from",
      "matches",
      "order",
      "by",
      "winner_age",
      "limit",
      "3"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What are the names and ranks of the three youngest winners across all matches?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ranks",
      "of",
      "the",
      "three",
      "youngest",
      "winners",
      "across",
      "all",
      "matches",
      "?"
    ],
    "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "winner_name",
      ",",
      "winner_rank",
      "from",
      "matches",
      "order",
      "by",
      "winner_age",
      "limit",
      "3"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "How many different winners both participated in the WTA Championships and were left handed?",
    "question_toks": [
      "How",
      "many",
      "different",
      "winners",
      "both",
      "participated",
      "in",
      "the",
      "WTA",
      "Championships",
      "and",
      "were",
      "left",
      "handed",
      "?"
    ],
    "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "winner_name",
      ")",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "\"WTA Championships\"",
      "and",
      "winner_hand",
      "=",
      "\"L\""
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the number of left handed winners who participated in the WTA Championships.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "left",
      "handed",
      "winners",
      "who",
      "participated",
      "in",
      "the",
      "WTA",
      "Championships",
      "."
    ],
    "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "winner_name",
      ")",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "\"WTA Championships\"",
      "and",
      "winner_hand",
      "=",
      "\"L\""
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      ",",
      "country",
      "code",
      "and",
      "birth",
      "date",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "the",
      "highest",
      "rank",
      "points",
      "in",
      "all",
      "matches",
      "."
    ],
    "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      ",",
      "t1.country_code",
      ",",
      "t1.birth_date",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.winner_id",
      "order",
      "by",
      "t2.winner_rank_points",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      ",",
      "country",
      "code",
      ",",
      "and",
      "birth",
      "date",
      "of",
      "the",
      "player",
      "with",
      "the",
      "most",
      "winner",
      "rank",
      "points",
      "across",
      "all",
      "matches",
      "?"
    ],
    "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      ",",
      "t1.country_code",
      ",",
      "t1.birth_date",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1.player_id",
      "=",
      "t2.winner_id",
      "order",
      "by",
      "t2.winner_rank_points",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "Find the number of players for each hand type.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "hand",
      "type",
      "."
    ],
    "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "hand",
      "from",
      "players",
      "group",
      "by",
      "hand"
    ]
  },
  {
    "db_id": "wta_1",
    "question": "How many players are there for each hand type?",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?"
    ],
    "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "hand",
      "from",
      "players",
      "group",
      "by",
      "hand"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "How many ships ended up being 'Captured'?",
    "question_toks": [
      "How",
      "many",
      "ships",
      "ended",
      "up",
      "being",
      "'",
      "Captured",
      "'",
      "?"
    ],
    "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Captured\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "ship",
      "where",
      "disposition_of_ship",
      "=",
      "\"Captured\""
    ]
  },
  {
    "db_id": "battle_death",
    "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
    "question_toks": [
      "List",
      "the",
      "name",
      "and",
      "tonnage",
      "ordered",
      "by",
      "in",
      "descending",
      "alphaetical",
      "order",
      "for",
      "the",
      "names",
      "."
    ],
    "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "tonnage",
      "from",
      "ship",
      "order",
      "by",
      "name",
      "desc"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "List the name, date and result of each battle.",
    "question_toks": [
      "List",
      "the",
      "name",
      ",",
      "date",
      "and",
      "result",
      "of",
      "each",
      "battle",
      "."
    ],
    "query": "SELECT name ,  date FROM battle",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "date",
      "from",
      "battle"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "What is maximum and minimum death toll caused each time?",
    "question_toks": [
      "What",
      "is",
      "maximum",
      "and",
      "minimum",
      "death",
      "toll",
      "caused",
      "each",
      "time",
      "?"
    ],
    "query": "SELECT max(killed) ,  min(killed) FROM death",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "killed",
      ")",
      ",",
      "min",
      "(",
      "killed",
      ")",
      "from",
      "death"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "What is the average number of injuries caused each time?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "number",
      "of",
      "injuries",
      "caused",
      "each",
      "time",
      "?"
    ],
    "query": "SELECT avg(injured) FROM death",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "injured",
      ")",
      "from",
      "death"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "death",
      "and",
      "injury",
      "situations",
      "caused",
      "by",
      "the",
      "ship",
      "with",
      "tonnage",
      "'",
      "t",
      "'",
      "?"
    ],
    "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"t\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.killed",
      ",",
      "t1.injured",
      "from",
      "death",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1.caused_by_ship_id",
      "=",
      "t2.id",
      "where",
      "t2.tonnage",
      "=",
      "\"t\""
    ]
  },
  {
    "db_id": "battle_death",
    "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "results",
      "of",
      "the",
      "battles",
      "when",
      "the",
      "bulgarian",
      "commander",
      "is",
      "not",
      "'",
      "Boril",
      "'"
    ],
    "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Boril\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "result",
      "from",
      "battle",
      "where",
      "bulgarian_commander",
      "!=",
      "\"Boril\""
    ]
  },
  {
    "db_id": "battle_death",
    "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "ids",
      "and",
      "names",
      "of",
      "the",
      "battles",
      "that",
      "lost",
      "any",
      "'",
      "Brig",
      "'",
      "type",
      "shipes",
      "?"
    ],
    "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Brig\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.id",
      ",",
      "t1.name",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.lost_in_battle",
      "where",
      "t2.ship_type",
      "=",
      "\"Brig\""
    ]
  },
  {
    "db_id": "battle_death",
    "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "names",
      "of",
      "the",
      "battles",
      "that",
      "led",
      "to",
      "more",
      "than",
      "10",
      "people",
      "killed",
      "in",
      "total",
      "."
    ],
    "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              4,
              17,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.id",
      ",",
      "t1.name",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.lost_in_battle",
      "join",
      "death",
      "as",
      "t3",
      "on",
      "t2.id",
      "=",
      "t3.caused_by_ship_id",
      "group",
      "by",
      "t1.id",
      "having",
      "sum",
      "(",
      "t3.killed",
      ")",
      ">",
      "10"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "What is the ship id and name that caused most total injuries?",
    "question_toks": [
      "What",
      "is",
      "the",
      "ship",
      "i",
      "d",
      "and",
      "name",
      "that",
      "caused",
      "most",
      "total",
      "injuries",
      "?"
    ],
    "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.id",
      ",",
      "t2.name",
      "from",
      "death",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1.caused_by_ship_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t2.id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "distinct",
      "battle",
      "names",
      "which",
      "are",
      "between",
      "bulgarian",
      "commander",
      "'",
      "Kaloyan",
      "'",
      "and",
      "latin",
      "commander",
      "'",
      "Baldwin",
      "I",
      "'",
      "?"
    ],
    "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Kaloyan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Baldwin I\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "battle",
      "where",
      "bulgarian_commander",
      "=",
      "\"Kaloyan\"",
      "and",
      "latin_commander",
      "=",
      "\"Baldwin I\""
    ]
  },
  {
    "db_id": "battle_death",
    "question": "How many different results are there for the battles?",
    "question_toks": [
      "How",
      "many",
      "different",
      "results",
      "are",
      "there",
      "for",
      "the",
      "battles",
      "?"
    ],
    "query": "SELECT count(DISTINCT RESULT) FROM battle",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "result",
      ")",
      "from",
      "battle"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "How many battles did not lose any ship with tonnage '225'?",
    "question_toks": [
      "How",
      "many",
      "battles",
      "did",
      "not",
      "lose",
      "any",
      "ship",
      "with",
      "tonnage",
      "'",
      "225",
      "'",
      "?"
    ],
    "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      7,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"225\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "battle",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "lost_in_battle",
      "from",
      "ship",
      "where",
      "tonnage",
      "=",
      "\"225\"",
      ")",
      ";"
    ]
  },
  {
    "db_id": "battle_death",
    "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "question_toks": [
      "List",
      "the",
      "name",
      "and",
      "date",
      "the",
      "battle",
      "that",
      "has",
      "lost",
      "the",
      "ship",
      "named",
      "'",
      "Lettice",
      "'",
      "and",
      "the",
      "ship",
      "named",
      "'",
      "HMS",
      "Atalanta",
      "'"
    ],
    "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Lettice\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            "\"HMS Atalanta\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      ",",
      "t1.date",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.lost_in_battle",
      "where",
      "t2.name",
      "=",
      "\"Lettice\"",
      "intersect",
      "select",
      "t1.name",
      ",",
      "t1.date",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.lost_in_battle",
      "where",
      "t2.name",
      "=",
      "\"HMS Atalanta\""
    ]
  },
  {
    "db_id": "battle_death",
    "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "question_toks": [
      "Show",
      "names",
      ",",
      "results",
      "and",
      "bulgarian",
      "commanders",
      "of",
      "the",
      "battles",
      "with",
      "no",
      "ships",
      "lost",
      "in",
      "the",
      "'",
      "English",
      "Channel",
      "'",
      "."
    ],
    "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"English Channel\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "result",
      ",",
      "bulgarian_commander",
      "from",
      "battle",
      "except",
      "select",
      "t1.name",
      ",",
      "t1.result",
      ",",
      "t1.bulgarian_commander",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.lost_in_battle",
      "where",
      "t2.location",
      "=",
      "\"English Channel\""
    ]
  },
  {
    "db_id": "battle_death",
    "question": "What are the notes of the death events which has substring 'East'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "notes",
      "of",
      "the",
      "death",
      "events",
      "which",
      "has",
      "substring",
      "'",
      "East",
      "'",
      "?"
    ],
    "query": "SELECT note FROM death WHERE note LIKE '%East%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"%East%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "note",
      "from",
      "death",
      "where",
      "note",
      "like",
      "\"%East%\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "what are all the addresses including line 1 and line 2?",
    "question_toks": [
      "what",
      "are",
      "all",
      "the",
      "addresses",
      "including",
      "line",
      "1",
      "and",
      "line",
      "2",
      "?"
    ],
    "query": "SELECT line_1 ,  line_2 FROM addresses",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "line_1",
      ",",
      "line_2",
      "from",
      "addresses"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first and second line for all addresses?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "and",
      "second",
      "line",
      "for",
      "all",
      "addresses",
      "?"
    ],
    "query": "SELECT line_1 ,  line_2 FROM addresses",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "line_1",
      ",",
      "line_2",
      "from",
      "addresses"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many courses in total are listed?",
    "question_toks": [
      "How",
      "many",
      "courses",
      "in",
      "total",
      "are",
      "listed",
      "?"
    ],
    "query": "SELECT count(*) FROM Courses",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "courses"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many courses are there?",
    "question_toks": [
      "How",
      "many",
      "courses",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM Courses",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "courses"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How is the math course described?",
    "question_toks": [
      "How",
      "is",
      "the",
      "math",
      "course",
      "described",
      "?"
    ],
    "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"math\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "course_description",
      "from",
      "courses",
      "where",
      "course_name",
      "=",
      "\"math\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the descriptions for all the math courses?",
    "question_toks": [
      "What",
      "are",
      "the",
      "descriptions",
      "for",
      "all",
      "the",
      "math",
      "courses",
      "?"
    ],
    "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"math\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "course_description",
      "from",
      "courses",
      "where",
      "course_name",
      "=",
      "\"math\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the zip code of the address in the city Port Chelsea?",
    "question_toks": [
      "What",
      "is",
      "the",
      "zip",
      "code",
      "of",
      "the",
      "address",
      "in",
      "the",
      "city",
      "Port",
      "Chelsea",
      "?"
    ],
    "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Port Chelsea\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "zip_postcode",
      "from",
      "addresses",
      "where",
      "city",
      "=",
      "\"Port Chelsea\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the zip code for Port Chelsea?",
    "question_toks": [
      "What",
      "is",
      "the",
      "zip",
      "code",
      "for",
      "Port",
      "Chelsea",
      "?"
    ],
    "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Port Chelsea\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "zip_postcode",
      "from",
      "addresses",
      "where",
      "city",
      "=",
      "\"Port Chelsea\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Which department offers the most number of degrees? List department name and id.",
    "question_toks": [
      "Which",
      "department",
      "offers",
      "the",
      "most",
      "number",
      "of",
      "degrees",
      "?",
      "List",
      "department",
      "name",
      "and",
      "i",
      "d."
    ],
    "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.department_name",
      ",",
      "t1.department_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "departments",
      "as",
      "t2",
      "on",
      "t1.department_id",
      "=",
      "t2.department_id",
      "group",
      "by",
      "t1.department_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "For each department id, what is the name of the department with the most number of degrees?",
    "question_toks": [
      "For",
      "each",
      "department",
      "i",
      "d",
      ",",
      "what",
      "is",
      "the",
      "name",
      "of",
      "the",
      "department",
      "with",
      "the",
      "most",
      "number",
      "of",
      "degrees",
      "?"
    ],
    "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.department_name",
      ",",
      "t1.department_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "departments",
      "as",
      "t2",
      "on",
      "t1.department_id",
      "=",
      "t2.department_id",
      "group",
      "by",
      "t1.department_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many departments offer any degree?",
    "question_toks": [
      "How",
      "many",
      "departments",
      "offer",
      "any",
      "degree",
      "?"
    ],
    "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "department_id",
      ")",
      "from",
      "degree_programs"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many different departments offer degrees?",
    "question_toks": [
      "How",
      "many",
      "different",
      "departments",
      "offer",
      "degrees",
      "?"
    ],
    "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "department_id",
      ")",
      "from",
      "degree_programs"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many different degree names are offered?",
    "question_toks": [
      "How",
      "many",
      "different",
      "degree",
      "names",
      "are",
      "offered",
      "?"
    ],
    "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                20,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "degree_summary_name",
      ")",
      "from",
      "degree_programs"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many different degrees are offered?",
    "question_toks": [
      "How",
      "many",
      "different",
      "degrees",
      "are",
      "offered",
      "?"
    ],
    "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                20,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "degree_summary_name",
      ")",
      "from",
      "degree_programs"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many degrees does the engineering department offer?",
    "question_toks": [
      "How",
      "many",
      "degrees",
      "does",
      "the",
      "engineering",
      "department",
      "offer",
      "?"
    ],
    "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"engineer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "departments",
      "as",
      "t1",
      "join",
      "degree_programs",
      "as",
      "t2",
      "on",
      "t1.department_id",
      "=",
      "t2.department_id",
      "where",
      "t1.department_name",
      "=",
      "\"engineer\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many degrees does the engineering department have?",
    "question_toks": [
      "How",
      "many",
      "degrees",
      "does",
      "the",
      "engineering",
      "department",
      "have",
      "?"
    ],
    "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"engineer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "departments",
      "as",
      "t1",
      "join",
      "degree_programs",
      "as",
      "t2",
      "on",
      "t1.department_id",
      "=",
      "t2.department_id",
      "where",
      "t1.department_name",
      "=",
      "\"engineer\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and descriptions of all the sections?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "descriptions",
      "of",
      "all",
      "the",
      "sections",
      "?"
    ],
    "query": "SELECT section_name ,  section_description FROM Sections",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "section_name",
      ",",
      "section_description",
      "from",
      "sections"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and descriptions for all the sections?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "descriptions",
      "for",
      "all",
      "the",
      "sections",
      "?"
    ],
    "query": "SELECT section_name ,  section_description FROM Sections",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "section_name",
      ",",
      "section_description",
      "from",
      "sections"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and id of courses having at most 2 sections?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "i",
      "d",
      "of",
      "courses",
      "having",
      "at",
      "most",
      "2",
      "sections",
      "?"
    ],
    "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          6,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.course_name",
      ",",
      "t1.course_id",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "sections",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id",
      "group",
      "by",
      "t1.course_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<=",
      "2"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and ids of every course with less than 2 sections?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ids",
      "of",
      "every",
      "course",
      "with",
      "less",
      "than",
      "2",
      "sections",
      "?"
    ],
    "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          6,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.course_name",
      ",",
      "t1.course_id",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "sections",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id",
      "group",
      "by",
      "t1.course_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<=",
      "2"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "List the section_name in reversed lexicographical order.",
    "question_toks": [
      "List",
      "the",
      "section_name",
      "in",
      "reversed",
      "lexicographical",
      "order",
      "."
    ],
    "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "section_name",
      "from",
      "sections",
      "order",
      "by",
      "section_name",
      "desc"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names of the sections in reverse alphabetical order?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "sections",
      "in",
      "reverse",
      "alphabetical",
      "order",
      "?"
    ],
    "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "section_name",
      "from",
      "sections",
      "order",
      "by",
      "section_name",
      "desc"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the semester which most student registered in? Show both the name and the id.",
    "question_toks": [
      "What",
      "is",
      "the",
      "semester",
      "which",
      "most",
      "student",
      "registered",
      "in",
      "?",
      "Show",
      "both",
      "the",
      "name",
      "and",
      "the",
      "i",
      "d."
    ],
    "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          28,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.semester_name",
      ",",
      "t1.semester_id",
      "from",
      "semesters",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.semester_id",
      "=",
      "t2.semester_id",
      "group",
      "by",
      "t1.semester_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "For each semester, what is the name and id of the one with the most students registered?",
    "question_toks": [
      "For",
      "each",
      "semester",
      ",",
      "what",
      "is",
      "the",
      "name",
      "and",
      "i",
      "d",
      "of",
      "the",
      "one",
      "with",
      "the",
      "most",
      "students",
      "registered",
      "?"
    ],
    "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          28,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.semester_name",
      ",",
      "t1.semester_id",
      "from",
      "semesters",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.semester_id",
      "=",
      "t2.semester_id",
      "group",
      "by",
      "t1.semester_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the description of the department whose name has the substring the computer?",
    "question_toks": [
      "What",
      "is",
      "the",
      "description",
      "of",
      "the",
      "department",
      "whose",
      "name",
      "has",
      "the",
      "substring",
      "the",
      "computer",
      "?"
    ],
    "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%computer%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "department_description",
      "from",
      "departments",
      "where",
      "department_name",
      "like",
      "\"%computer%\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the department description for the one whose name has the word computer?",
    "question_toks": [
      "What",
      "is",
      "the",
      "department",
      "description",
      "for",
      "the",
      "one",
      "whose",
      "name",
      "has",
      "the",
      "word",
      "computer",
      "?"
    ],
    "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%computer%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "department_description",
      "from",
      "departments",
      "where",
      "department_name",
      "like",
      "\"%computer%\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
    "question_toks": [
      "Who",
      "are",
      "enrolled",
      "in",
      "2",
      "degree",
      "programs",
      "in",
      "one",
      "semester",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "last",
      "name",
      "and",
      "the",
      "i",
      "d."
    ],
    "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          32,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      ",",
      "t1.middle_name",
      ",",
      "t1.last_name",
      ",",
      "t1.student_id",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.student_id",
      "group",
      "by",
      "t1.student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "2"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "names",
      ",",
      "along",
      "with",
      "the",
      "ids",
      ",",
      "of",
      "all",
      "students",
      "who",
      "enrolled",
      "in",
      "2",
      "degree",
      "programs",
      "in",
      "one",
      "semester",
      "?"
    ],
    "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          32,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      ",",
      "t1.middle_name",
      ",",
      "t1.last_name",
      ",",
      "t1.student_id",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.student_id",
      "group",
      "by",
      "t1.student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "2"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "question_toks": [
      "Who",
      "is",
      "enrolled",
      "in",
      "a",
      "Bachelor",
      "degree",
      "program",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      ",",
      "last",
      "name",
      "."
    ],
    "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Bachelor\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.first_name",
      ",",
      "t1.middle_name",
      ",",
      "t1.last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.student_id",
      "join",
      "degree_programs",
      "as",
      "t3",
      "on",
      "t2.degree_program_id",
      "=",
      "t3.degree_program_id",
      "where",
      "t3.degree_summary_name",
      "=",
      "\"Bachelor\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "names",
      "for",
      "everybody",
      "enrolled",
      "in",
      "a",
      "Bachelors",
      "program",
      "?"
    ],
    "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Bachelor\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.first_name",
      ",",
      "t1.middle_name",
      ",",
      "t1.last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.student_id",
      "join",
      "degree_programs",
      "as",
      "t3",
      "on",
      "t2.degree_program_id",
      "=",
      "t3.degree_program_id",
      "where",
      "t3.degree_summary_name",
      "=",
      "\"Bachelor\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the kind of program which most number of students are enrolled in?",
    "question_toks": [
      "Find",
      "the",
      "kind",
      "of",
      "program",
      "which",
      "most",
      "number",
      "of",
      "students",
      "are",
      "enrolled",
      "in",
      "?"
    ],
    "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          20,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.degree_program_id",
      "=",
      "t2.degree_program_id",
      "group",
      "by",
      "t1.degree_summary_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the degree summary name that has the most number of students enrolled?",
    "question_toks": [
      "What",
      "is",
      "the",
      "degree",
      "summary",
      "name",
      "that",
      "has",
      "the",
      "most",
      "number",
      "of",
      "students",
      "enrolled",
      "?"
    ],
    "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          20,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.degree_program_id",
      "=",
      "t2.degree_program_id",
      "group",
      "by",
      "t1.degree_summary_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "question_toks": [
      "Find",
      "the",
      "program",
      "which",
      "most",
      "number",
      "of",
      "students",
      "are",
      "enrolled",
      "in",
      ".",
      "List",
      "both",
      "the",
      "i",
      "d",
      "and",
      "the",
      "summary",
      "."
    ],
    "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.degree_program_id",
      ",",
      "t1.degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.degree_program_id",
      "=",
      "t2.degree_program_id",
      "group",
      "by",
      "t1.degree_program_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the program id and the summary of the degree that has the most students enrolled?",
    "question_toks": [
      "What",
      "is",
      "the",
      "program",
      "i",
      "d",
      "and",
      "the",
      "summary",
      "of",
      "the",
      "degree",
      "that",
      "has",
      "the",
      "most",
      "students",
      "enrolled",
      "?"
    ],
    "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.degree_program_id",
      ",",
      "t1.degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.degree_program_id",
      "=",
      "t2.degree_program_id",
      "group",
      "by",
      "t1.degree_program_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Which semesters do not have any student enrolled? List the semester name.",
    "question_toks": [
      "Which",
      "semesters",
      "do",
      "not",
      "have",
      "any",
      "student",
      "enrolled",
      "?",
      "List",
      "the",
      "semester",
      "name",
      "."
    ],
    "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "semester_name",
      "from",
      "semesters",
      "where",
      "semester_id",
      "not",
      "in",
      "(",
      "select",
      "semester_id",
      "from",
      "student_enrolment",
      ")"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the name of the semester with no students enrolled?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "semester",
      "with",
      "no",
      "students",
      "enrolled",
      "?"
    ],
    "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "semester_name",
      "from",
      "semesters",
      "where",
      "semester_id",
      "not",
      "in",
      "(",
      "select",
      "semester_id",
      "from",
      "student_enrolment",
      ")"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are all the course names of the courses which ever have students enrolled in?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "course",
      "names",
      "of",
      "the",
      "courses",
      "which",
      "ever",
      "have",
      "students",
      "enrolled",
      "in",
      "?"
    ],
    "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names of all courses that have some students enrolled?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "courses",
      "that",
      "have",
      "some",
      "students",
      "enrolled",
      "?"
    ],
    "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What's the name of the course with most number of enrollments?",
    "question_toks": [
      "What",
      "'s",
      "the",
      "name",
      "of",
      "the",
      "course",
      "with",
      "most",
      "number",
      "of",
      "enrollments",
      "?"
    ],
    "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id",
      "group",
      "by",
      "t1.course_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the name of the course with the most students enrolled?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "course",
      "with",
      "the",
      "most",
      "students",
      "enrolled",
      "?"
    ],
    "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1.course_id",
      "=",
      "t2.course_id",
      "group",
      "by",
      "t1.course_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "question_toks": [
      "Find",
      "the",
      "last",
      "name",
      "of",
      "the",
      "students",
      "who",
      "currently",
      "live",
      "in",
      "the",
      "state",
      "of",
      "North",
      "Carolina",
      "but",
      "have",
      "not",
      "registered",
      "in",
      "any",
      "degree",
      "program",
      "."
    ],
    "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NorthCarolina\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  32,
                  false
                ],
                null
              ],
              [
                0,
                47,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  37,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "t1.last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1.current_address_id",
      "=",
      "t2.address_id",
      "where",
      "t2.state_province_county",
      "=",
      "\"NorthCarolina\"",
      "except",
      "select",
      "distinct",
      "t3.last_name",
      "from",
      "students",
      "as",
      "t3",
      "join",
      "student_enrolment",
      "as",
      "t4",
      "on",
      "t3.student_id",
      "=",
      "t4.student_id"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "name",
      "of",
      "the",
      "students",
      "who",
      "live",
      "in",
      "North",
      "Carolina",
      "but",
      "have",
      "not",
      "registered",
      "in",
      "any",
      "degree",
      "programs",
      "?"
    ],
    "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NorthCarolina\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  32,
                  false
                ],
                null
              ],
              [
                0,
                47,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  37,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "t1.last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1.current_address_id",
      "=",
      "t2.address_id",
      "where",
      "t2.state_province_county",
      "=",
      "\"NorthCarolina\"",
      "except",
      "select",
      "distinct",
      "t3.last_name",
      "from",
      "students",
      "as",
      "t3",
      "join",
      "student_enrolment",
      "as",
      "t4",
      "on",
      "t3.student_id",
      "=",
      "t4.student_id"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Show the date and id of the transcript with at least 2 course results.",
    "question_toks": [
      "Show",
      "the",
      "date",
      "and",
      "i",
      "d",
      "of",
      "the",
      "transcript",
      "with",
      "at",
      "least",
      "2",
      "course",
      "results",
      "."
    ],
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.transcript_date",
      ",",
      "t1.transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1.transcript_id",
      "=",
      "t2.transcript_id",
      "group",
      "by",
      "t1.transcript_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the date and id of the transcript with at least 2 courses listed?",
    "question_toks": [
      "What",
      "is",
      "the",
      "date",
      "and",
      "i",
      "d",
      "of",
      "the",
      "transcript",
      "with",
      "at",
      "least",
      "2",
      "courses",
      "listed",
      "?"
    ],
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.transcript_date",
      ",",
      "t1.transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1.transcript_id",
      "=",
      "t2.transcript_id",
      "group",
      "by",
      "t1.transcript_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
    "question_toks": [
      "What",
      "is",
      "the",
      "phone",
      "number",
      "of",
      "the",
      "man",
      "with",
      "the",
      "first",
      "name",
      "Timmothy",
      "and",
      "the",
      "last",
      "name",
      "Ward",
      "?"
    ],
    "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"Timmothy\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"Ward\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "cell_mobile_number",
      "from",
      "students",
      "where",
      "first_name",
      "=",
      "\"Timmothy\"",
      "and",
      "last_name",
      "=",
      "\"Ward\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the mobile phone number of the student named Timothy Ward?",
    "question_toks": [
      "What",
      "is",
      "the",
      "mobile",
      "phone",
      "number",
      "of",
      "the",
      "student",
      "named",
      "Timothy",
      "Ward",
      "?"
    ],
    "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"Timmothy\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"Ward\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "cell_mobile_number",
      "from",
      "students",
      "where",
      "first_name",
      "=",
      "\"Timmothy\"",
      "and",
      "last_name",
      "=",
      "\"Ward\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Who is the first student to register? List the first name, middle name and last name.",
    "question_toks": [
      "Who",
      "is",
      "the",
      "first",
      "student",
      "to",
      "register",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_first_registered",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first, middle, and last name of the first student to register?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "name",
      "of",
      "the",
      "first",
      "student",
      "to",
      "register",
      "?"
    ],
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_first_registered",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "question_toks": [
      "Who",
      "is",
      "the",
      "earliest",
      "graduate",
      "of",
      "the",
      "school",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_left",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first, middle, and last name of the earliest school graduate?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "name",
      "of",
      "the",
      "earliest",
      "school",
      "graduate",
      "?"
    ],
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_left",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Whose permanent address is different from his or her current address? List his or her first name.",
    "question_toks": [
      "Whose",
      "permanent",
      "address",
      "is",
      "different",
      "from",
      "his",
      "or",
      "her",
      "current",
      "address",
      "?",
      "List",
      "his",
      "or",
      "her",
      "first",
      "name",
      "."
    ],
    "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          [
            0,
            34,
            false
          ],
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "current_address_id",
      "!=",
      "permanent_address_id"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first name of the student whose permanent address is different from his or her current one?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "of",
      "the",
      "student",
      "whose",
      "permanent",
      "address",
      "is",
      "different",
      "from",
      "his",
      "or",
      "her",
      "current",
      "one",
      "?"
    ],
    "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          [
            0,
            34,
            false
          ],
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "current_address_id",
      "!=",
      "permanent_address_id"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Which address holds the most number of students currently? List the address id and all lines.",
    "question_toks": [
      "Which",
      "address",
      "holds",
      "the",
      "most",
      "number",
      "of",
      "students",
      "currently",
      "?",
      "List",
      "the",
      "address",
      "i",
      "d",
      "and",
      "all",
      "lines",
      "."
    ],
    "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            6
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.address_id",
      ",",
      "t1.line_1",
      ",",
      "t1.line_2",
      "from",
      "addresses",
      "as",
      "t1",
      "join",
      "students",
      "as",
      "t2",
      "on",
      "t1.address_id",
      "=",
      "t2.current_address_id",
      "group",
      "by",
      "t1.address_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the id, line 1, and line 2 of the address with the most students?",
    "question_toks": [
      "What",
      "is",
      "the",
      "i",
      "d",
      ",",
      "line",
      "1",
      ",",
      "and",
      "line",
      "2",
      "of",
      "the",
      "address",
      "with",
      "the",
      "most",
      "students",
      "?"
    ],
    "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            6
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.address_id",
      ",",
      "t1.line_1",
      ",",
      "t1.line_2",
      "from",
      "addresses",
      "as",
      "t1",
      "join",
      "students",
      "as",
      "t2",
      "on",
      "t1.address_id",
      "=",
      "t2.current_address_id",
      "group",
      "by",
      "t1.address_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "On average, when were the transcripts printed?",
    "question_toks": [
      "On",
      "average",
      ",",
      "when",
      "were",
      "the",
      "transcripts",
      "printed",
      "?"
    ],
    "query": "SELECT avg(transcript_date) FROM Transcripts",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "transcript_date",
      ")",
      "from",
      "transcripts"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the average transcript date?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "transcript",
      "date",
      "?"
    ],
    "query": "SELECT avg(transcript_date) FROM Transcripts",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "transcript_date",
      ")",
      "from",
      "transcripts"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "When is the first transcript released? List the date and details.",
    "question_toks": [
      "When",
      "is",
      "the",
      "first",
      "transcript",
      "released",
      "?",
      "List",
      "the",
      "date",
      "and",
      "details",
      "."
    ],
    "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                54,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "transcript_date",
      ",",
      "other_details",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the earliest date of a transcript release, and what details can you tell me?",
    "question_toks": [
      "What",
      "is",
      "the",
      "earliest",
      "date",
      "of",
      "a",
      "transcript",
      "release",
      ",",
      "and",
      "what",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "?"
    ],
    "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                54,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "transcript_date",
      ",",
      "other_details",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many transcripts are released?",
    "question_toks": [
      "How",
      "many",
      "transcripts",
      "are",
      "released",
      "?"
    ],
    "query": "SELECT count(*) FROM Transcripts",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "transcripts"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many transcripts are listed?",
    "question_toks": [
      "How",
      "many",
      "transcripts",
      "are",
      "listed",
      "?"
    ],
    "query": "SELECT count(*) FROM Transcripts",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "transcripts"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the last transcript release date?",
    "question_toks": [
      "What",
      "is",
      "the",
      "last",
      "transcript",
      "release",
      "date",
      "?"
    ],
    "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "transcript_date",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "When was the last transcript released?",
    "question_toks": [
      "When",
      "was",
      "the",
      "last",
      "transcript",
      "released",
      "?"
    ],
    "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "transcript_date",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "question_toks": [
      "How",
      "many",
      "times",
      "at",
      "most",
      "can",
      "a",
      "course",
      "enrollment",
      "result",
      "show",
      "in",
      "different",
      "transcripts",
      "?",
      "Also",
      "show",
      "the",
      "course",
      "enrollment",
      "i",
      "d."
    ],
    "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                55,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          55,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "student_course_id",
      "from",
      "transcript_contents",
      "group",
      "by",
      "student_course_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "number",
      "of",
      "times",
      "that",
      "a",
      "course",
      "shows",
      "up",
      "in",
      "different",
      "transcripts",
      "and",
      "what",
      "is",
      "that",
      "course",
      "'s",
      "enrollment",
      "i",
      "d",
      "?"
    ],
    "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                55,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          55,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "student_course_id",
      "from",
      "transcript_contents",
      "group",
      "by",
      "student_course_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Show the date of the transcript which shows the least number of results, also list the id.",
    "question_toks": [
      "Show",
      "the",
      "date",
      "of",
      "the",
      "transcript",
      "which",
      "shows",
      "the",
      "least",
      "number",
      "of",
      "results",
      ",",
      "also",
      "list",
      "the",
      "i",
      "d."
    ],
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.transcript_date",
      ",",
      "t1.transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1.transcript_id",
      "=",
      "t2.transcript_id",
      "group",
      "by",
      "t1.transcript_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the date and id of the transcript with the least number of results?",
    "question_toks": [
      "What",
      "is",
      "the",
      "date",
      "and",
      "i",
      "d",
      "of",
      "the",
      "transcript",
      "with",
      "the",
      "least",
      "number",
      "of",
      "results",
      "?"
    ],
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.transcript_date",
      ",",
      "t1.transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1.transcript_id",
      "=",
      "t2.transcript_id",
      "group",
      "by",
      "t1.transcript_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "question_toks": [
      "Find",
      "the",
      "semester",
      "when",
      "both",
      "Master",
      "students",
      "and",
      "Bachelor",
      "students",
      "got",
      "enrolled",
      "in",
      "."
    ],
    "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Master\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  46,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            "\"Bachelor\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t2.semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.degree_program_id",
      "=",
      "t2.degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "\"Master\"",
      "intersect",
      "select",
      "distinct",
      "t2.semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.degree_program_id",
      "=",
      "t2.degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "\"Bachelor\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "question_toks": [
      "What",
      "is",
      "the",
      "i",
      "d",
      "of",
      "the",
      "semester",
      "that",
      "had",
      "both",
      "Masters",
      "and",
      "Bachelors",
      "students",
      "enrolled",
      "?"
    ],
    "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Master\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  46,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            "\"Bachelor\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t2.semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.degree_program_id",
      "=",
      "t2.degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "\"Master\"",
      "intersect",
      "select",
      "distinct",
      "t2.semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1.degree_program_id",
      "=",
      "t2.degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "\"Bachelor\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many different addresses do the students currently live?",
    "question_toks": [
      "How",
      "many",
      "different",
      "addresses",
      "do",
      "the",
      "students",
      "currently",
      "live",
      "?"
    ],
    "query": "SELECT count(DISTINCT current_address_id) FROM Students",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                33,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "current_address_id",
      ")",
      "from",
      "students"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the different addresses that have students living there?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "addresses",
      "that",
      "have",
      "students",
      "living",
      "there",
      "?"
    ],
    "query": "SELECT count(DISTINCT current_address_id) FROM Students",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                33,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "current_address_id",
      ")",
      "from",
      "students"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "List all the student details in reversed lexicographical order.",
    "question_toks": [
      "List",
      "all",
      "the",
      "student",
      "details",
      "in",
      "reversed",
      "lexicographical",
      "order",
      "."
    ],
    "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "other_student_details",
      "from",
      "students",
      "order",
      "by",
      "other_student_details",
      "desc"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "question_toks": [
      "What",
      "other",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "about",
      "students",
      "in",
      "reverse",
      "alphabetical",
      "order",
      "?"
    ],
    "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "other_student_details",
      "from",
      "students",
      "order",
      "by",
      "other_student_details",
      "desc"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Describe the section h.",
    "question_toks": [
      "Describe",
      "the",
      "section",
      "h."
    ],
    "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"h\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "section_description",
      "from",
      "sections",
      "where",
      "section_name",
      "=",
      "\"h\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the description for the section named h?",
    "question_toks": [
      "What",
      "is",
      "the",
      "description",
      "for",
      "the",
      "section",
      "named",
      "h",
      "?"
    ],
    "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"h\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "section_description",
      "from",
      "sections",
      "where",
      "section_name",
      "=",
      "\"h\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "of",
      "the",
      "students",
      "who",
      "permanently",
      "live",
      "in",
      "the",
      "country",
      "Haiti",
      "or",
      "have",
      "the",
      "cell",
      "phone",
      "number",
      "09700166582",
      "."
    ],
    "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Haiti\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  35,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            "\"09700166582\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1.permanent_address_id",
      "=",
      "t2.address_id",
      "where",
      "t2.country",
      "=",
      "\"Haiti\"",
      "union",
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "cell_mobile_number",
      "=",
      "\"09700166582\""
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "the",
      "students",
      "who",
      "live",
      "in",
      "Haiti",
      "permanently",
      "or",
      "have",
      "the",
      "cell",
      "phone",
      "number",
      "09700166582",
      "?"
    ],
    "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Haiti\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  35,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            "\"09700166582\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1.permanent_address_id",
      "=",
      "t2.address_id",
      "where",
      "t2.country",
      "=",
      "\"Haiti\"",
      "union",
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "cell_mobile_number",
      "=",
      "\"09700166582\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "List the title of all cartoons in alphabetical order.",
    "question_toks": [
      "List",
      "the",
      "title",
      "of",
      "all",
      "cartoons",
      "in",
      "alphabetical",
      "order",
      "."
    ],
    "query": "SELECT Title FROM Cartoon ORDER BY title",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "title",
      "from",
      "cartoon",
      "order",
      "by",
      "title"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the titles of the cartoons sorted alphabetically?",
    "question_toks": [
      "What",
      "are",
      "the",
      "titles",
      "of",
      "the",
      "cartoons",
      "sorted",
      "alphabetically",
      "?"
    ],
    "query": "SELECT Title FROM Cartoon ORDER BY title",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "title",
      "from",
      "cartoon",
      "order",
      "by",
      "title"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "List all cartoon directed by \"Ben Jones\".",
    "question_toks": [
      "List",
      "all",
      "cartoon",
      "directed",
      "by",
      "\"",
      "Ben",
      "Jones",
      "\"",
      "."
    ],
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "\"Ben Jones\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the names of all cartoons directed by Ben Jones?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "\"Ben Jones\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "How many cartoons were written by \"Joseph Kuhr\"?",
    "question_toks": [
      "How",
      "many",
      "cartoons",
      "were",
      "written",
      "by",
      "\"",
      "Joseph",
      "Kuhr",
      "\"",
      "?"
    ],
    "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Joseph Kuhr\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cartoon",
      "where",
      "written_by",
      "=",
      "\"Joseph Kuhr\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the number of cartoones written by Joseph Kuhr?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "cartoones",
      "written",
      "by",
      "Joseph",
      "Kuhr",
      "?"
    ],
    "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Joseph Kuhr\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cartoon",
      "where",
      "written_by",
      "=",
      "\"Joseph Kuhr\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "list all cartoon titles and their directors ordered by their air date",
    "question_toks": [
      "list",
      "all",
      "cartoon",
      "titles",
      "and",
      "their",
      "directors",
      "ordered",
      "by",
      "their",
      "air",
      "date"
    ],
    "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "title",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the name and directors of all the cartoons that are ordered by air date?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "directors",
      "of",
      "all",
      "the",
      "cartoons",
      "that",
      "are",
      "ordered",
      "by",
      "air",
      "date",
      "?"
    ],
    "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "title",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "question_toks": [
      "List",
      "the",
      "title",
      "of",
      "all",
      "cartoon",
      "directed",
      "by",
      "\"",
      "Ben",
      "Jones",
      "\"",
      "or",
      "\"",
      "Brandon",
      "Vietti",
      "\"",
      "."
    ],
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Brandon Vietti\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "\"Ben Jones\"",
      "or",
      "directed_by",
      "=",
      "\"Brandon Vietti\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "question_toks": [
      "What",
      "are",
      "the",
      "titles",
      "of",
      "all",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "or",
      "Brandon",
      "Vietti",
      "?"
    ],
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Brandon Vietti\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "\"Ben Jones\"",
      "or",
      "directed_by",
      "=",
      "\"Brandon Vietti\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "question_toks": [
      "Which",
      "country",
      "has",
      "the",
      "most",
      "of",
      "TV",
      "Channels",
      "?",
      "List",
      "the",
      "country",
      "and",
      "number",
      "of",
      "TV",
      "Channels",
      "it",
      "has",
      "."
    ],
    "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the country with the most number of TV Channels and how many does it have?",
    "question_toks": [
      "What",
      "is",
      "the",
      "country",
      "with",
      "the",
      "most",
      "number",
      "of",
      "TV",
      "Channels",
      "and",
      "how",
      "many",
      "does",
      "it",
      "have",
      "?"
    ],
    "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "List the number of different series names and contents in the TV Channel table.",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "different",
      "series",
      "names",
      "and",
      "contents",
      "in",
      "the",
      "TV",
      "Channel",
      "table",
      "."
    ],
    "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "distinct",
      "content",
      ")",
      "from",
      "tv_channel",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "How many different series and contents are listed in the TV Channel table?",
    "question_toks": [
      "How",
      "many",
      "different",
      "series",
      "and",
      "contents",
      "are",
      "listed",
      "in",
      "the",
      "TV",
      "Channel",
      "table",
      "?"
    ],
    "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "distinct",
      "content",
      ")",
      "from",
      "tv_channel",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "content",
      "of",
      "TV",
      "Channel",
      "with",
      "serial",
      "name",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "?"
    ],
    "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "content",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "\"Sky Radio\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the content of the series Sky Radio?",
    "question_toks": [
      "What",
      "is",
      "the",
      "content",
      "of",
      "the",
      "series",
      "Sky",
      "Radio",
      "?"
    ],
    "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "content",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "\"Sky Radio\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "Package",
      "Option",
      "of",
      "TV",
      "Channel",
      "with",
      "serial",
      "name",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "?"
    ],
    "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "\"Sky Radio\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "question_toks": [
      "What",
      "are",
      "the",
      "Package",
      "Options",
      "of",
      "the",
      "TV",
      "Channels",
      "whose",
      "series",
      "names",
      "are",
      "Sky",
      "Radio",
      "?"
    ],
    "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "\"Sky Radio\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "How many TV Channel using language English?",
    "question_toks": [
      "How",
      "many",
      "TV",
      "Channel",
      "using",
      "language",
      "English",
      "?"
    ],
    "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "where",
      "language",
      "=",
      "\"English\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "How many TV Channels use the English language?",
    "question_toks": [
      "How",
      "many",
      "TV",
      "Channels",
      "use",
      "the",
      "English",
      "language",
      "?"
    ],
    "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "where",
      "language",
      "=",
      "\"English\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "question_toks": [
      "List",
      "the",
      "language",
      "used",
      "least",
      "number",
      "of",
      "TV",
      "Channel",
      ".",
      "List",
      "language",
      "and",
      "number",
      "of",
      "TV",
      "Channel",
      "."
    ],
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
    "question_toks": [
      "What",
      "are",
      "the",
      "languages",
      "used",
      "by",
      "the",
      "least",
      "number",
      "of",
      "TV",
      "Channels",
      "and",
      "how",
      "many",
      "channels",
      "use",
      "it",
      "?"
    ],
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "1",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "List each language and the number of TV Channels using it.",
    "question_toks": [
      "List",
      "each",
      "language",
      "and",
      "the",
      "number",
      "of",
      "TV",
      "Channels",
      "using",
      "it",
      "."
    ],
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "For each language, list the number of TV Channels that use it.",
    "question_toks": [
      "For",
      "each",
      "language",
      ",",
      "list",
      "the",
      "number",
      "of",
      "TV",
      "Channels",
      "that",
      "use",
      "it",
      "."
    ],
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
    "question_toks": [
      "What",
      "is",
      "the",
      "TV",
      "Channel",
      "that",
      "shows",
      "the",
      "cartoon",
      "\"",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "!",
      "\"",
      "?",
      "List",
      "the",
      "TV",
      "Channel",
      "'s",
      "series",
      "name",
      "."
    ],
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"The Rise of the Blue Beetle!\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.title",
      "=",
      "\"The Rise of the Blue Beetle!\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "series",
      "name",
      "of",
      "the",
      "TV",
      "Channel",
      "that",
      "shows",
      "the",
      "cartoon",
      "\"",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "\"",
      "?"
    ],
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"The Rise of the Blue Beetle!\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.title",
      "=",
      "\"The Rise of the Blue Beetle!\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
    "question_toks": [
      "List",
      "the",
      "title",
      "of",
      "all",
      " ",
      "Cartoons",
      "showed",
      "on",
      "TV",
      "Channel",
      "with",
      "series",
      "name",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "."
    ],
    "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.title",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t1.series_name",
      "=",
      "\"Sky Radio\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "title",
      "of",
      "all",
      "the",
      "cartools",
      "that",
      "are",
      "on",
      "the",
      "TV",
      "Channel",
      "with",
      "the",
      "series",
      "name",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "?"
    ],
    "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.title",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t1.series_name",
      "=",
      "\"Sky Radio\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "List the Episode of all TV series sorted by rating.",
    "question_toks": [
      "List",
      "the",
      "Episode",
      "of",
      "all",
      "TV",
      "series",
      "sorted",
      "by",
      "rating",
      "."
    ],
    "query": "SELECT Episode FROM TV_series ORDER BY rating",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "episode",
      "from",
      "tv_series",
      "order",
      "by",
      "rating"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are all of the episodes ordered by ratings?",
    "question_toks": [
      "What",
      "are",
      "all",
      "of",
      "the",
      "episodes",
      "ordered",
      "by",
      "ratings",
      "?"
    ],
    "query": "SELECT Episode FROM TV_series ORDER BY rating",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "episode",
      "from",
      "tv_series",
      "order",
      "by",
      "rating"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
    "question_toks": [
      "List",
      "top",
      "3",
      "highest",
      "Rating",
      " ",
      "TV",
      "series",
      ".",
      "List",
      "the",
      "TV",
      "series",
      "'s",
      "Episode",
      "and",
      "Rating",
      "."
    ],
    "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "episode",
      ",",
      "rating",
      "from",
      "tv_series",
      "order",
      "by",
      "rating",
      "desc",
      "limit",
      "3",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "question_toks": [
      "What",
      "are",
      "3",
      "most",
      "highly",
      "rated",
      "episodes",
      "in",
      "the",
      "TV",
      "series",
      "table",
      "and",
      "what",
      "were",
      "those",
      "ratings",
      "?"
    ],
    "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "episode",
      ",",
      "rating",
      "from",
      "tv_series",
      "order",
      "by",
      "rating",
      "desc",
      "limit",
      "3",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is minimum and maximum share of TV series?",
    "question_toks": [
      "What",
      "is",
      "minimum",
      "and",
      "maximum",
      "share",
      "of",
      "TV",
      "series",
      "?"
    ],
    "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "tv_series",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the maximum and minimum share for the TV series?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "and",
      "minimum",
      "share",
      "for",
      "the",
      "TV",
      "series",
      "?"
    ],
    "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "tv_series",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "air",
      "date",
      "of",
      "TV",
      "series",
      "with",
      "Episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "?"
    ],
    "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "air_date",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "\"A Love of a Lifetime\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "When did the episode \"A Love of a Lifetime\" air?",
    "question_toks": [
      "When",
      "did",
      "the",
      "episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "air",
      "?"
    ],
    "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "air_date",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "\"A Love of a Lifetime\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "question_toks": [
      "What",
      "is",
      "Weekly",
      "Rank",
      "of",
      "TV",
      "series",
      "with",
      "Episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "?"
    ],
    "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "weekly_rank",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "\"A Love of a Lifetime\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "weekly",
      "rank",
      "for",
      "the",
      "episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "?"
    ],
    "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "weekly_rank",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "\"A Love of a Lifetime\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
    "question_toks": [
      "What",
      "is",
      "the",
      "TV",
      "Channel",
      "of",
      "TV",
      "series",
      "with",
      "Episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "?",
      "List",
      "the",
      "TV",
      "Channel",
      "'s",
      "series",
      "name",
      "."
    ],
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.episode",
      "=",
      "\"A Love of a Lifetime\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "series",
      "that",
      "has",
      "the",
      "episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "?"
    ],
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.episode",
      "=",
      "\"A Love of a Lifetime\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
    "question_toks": [
      "List",
      "the",
      "Episode",
      "of",
      "all",
      " ",
      "TV",
      "series",
      "showed",
      "on",
      "TV",
      "Channel",
      "with",
      "series",
      "name",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "."
    ],
    "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.episode",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t1.series_name",
      "=",
      "\"Sky Radio\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the episode for the TV series named \"Sky Radio\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "episode",
      "for",
      "the",
      "TV",
      "series",
      "named",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "?"
    ],
    "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.episode",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t1.series_name",
      "=",
      "\"Sky Radio\"",
      ";"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "Find the number of cartoons directed by each of the listed directors.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "cartoons",
      "directed",
      "by",
      "each",
      "of",
      "the",
      "listed",
      "directors",
      "."
    ],
    "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "group",
      "by",
      "directed_by"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "How many cartoons did each director create?",
    "question_toks": [
      "How",
      "many",
      "cartoons",
      "did",
      "each",
      "director",
      "create",
      "?"
    ],
    "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "group",
      "by",
      "directed_by"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "Find the production code and channel of the most recently aired cartoon.",
    "question_toks": [
      "Find",
      "the",
      "production",
      "code",
      "and",
      "channel",
      "of",
      "the",
      "most",
      "recently",
      "aired",
      "cartoon",
      "."
    ],
    "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the produdction code and channel of the most recent cartoon?",
    "question_toks": [
      "What",
      "is",
      "the",
      "produdction",
      "code",
      "and",
      "channel",
      "of",
      "the",
      "most",
      "recent",
      "cartoon",
      "?"
    ],
    "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "Find the package choice and series name of the TV channel that has high definition TV.",
    "question_toks": [
      "Find",
      "the",
      "package",
      "choice",
      "and",
      "series",
      "name",
      "of",
      "the",
      "TV",
      "channel",
      "that",
      "has",
      "high",
      "definition",
      "TV",
      "."
    ],
    "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"yes\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "package_option",
      ",",
      "series_name",
      "from",
      "tv_channel",
      "where",
      "hight_definition_tv",
      "=",
      "\"yes\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "question_toks": [
      "What",
      "are",
      "the",
      "package",
      "options",
      "and",
      "the",
      "name",
      "of",
      "the",
      "series",
      "for",
      "the",
      "TV",
      "Channel",
      "that",
      "supports",
      "high",
      "definition",
      "TV",
      "?"
    ],
    "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"yes\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "package_option",
      ",",
      "series_name",
      "from",
      "tv_channel",
      "where",
      "hight_definition_tv",
      "=",
      "\"yes\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question_toks": [
      "which",
      "countries",
      "'",
      "tv",
      "channels",
      "are",
      "playing",
      "some",
      "cartoon",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Todd Casey\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.written_by",
      "=",
      "\"Todd Casey\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "that",
      "have",
      "cartoons",
      "on",
      "TV",
      "that",
      "were",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Todd Casey\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.written_by",
      "=",
      "\"Todd Casey\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "question_toks": [
      "which",
      "countries",
      "'",
      "tv",
      "channels",
      "are",
      "not",
      "playing",
      "any",
      "cartoon",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            "\"Todd Casey\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "country",
      "from",
      "tv_channel",
      "except",
      "select",
      "t1.country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.written_by",
      "=",
      "\"Todd Casey\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the countries that are not playing cartoons written by Todd Casey?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "that",
      "are",
      "not",
      "playing",
      "cartoons",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            "\"Todd Casey\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "country",
      "from",
      "tv_channel",
      "except",
      "select",
      "t1.country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.written_by",
      "=",
      "\"Todd Casey\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "question_toks": [
      "Find",
      "the",
      "series",
      "name",
      "and",
      "country",
      "of",
      "the",
      "tv",
      "channel",
      "that",
      "is",
      "playing",
      "some",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "and",
      "Michael",
      "Chang",
      "?"
    ],
    "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Michael Chang\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.series_name",
      ",",
      "t1.country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.directed_by",
      "=",
      "\"Michael Chang\"",
      "intersect",
      "select",
      "t1.series_name",
      ",",
      "t1.country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.directed_by",
      "=",
      "\"Ben Jones\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "question_toks": [
      "What",
      "is",
      "the",
      "series",
      "name",
      "and",
      "country",
      "of",
      "all",
      "TV",
      "channels",
      "that",
      "are",
      "playing",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "and",
      "cartoons",
      "directed",
      "by",
      "Michael",
      "Chang",
      "?"
    ],
    "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Michael Chang\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.series_name",
      ",",
      "t1.country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.directed_by",
      "=",
      "\"Michael Chang\"",
      "intersect",
      "select",
      "t1.series_name",
      ",",
      "t1.country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.channel",
      "where",
      "t2.directed_by",
      "=",
      "\"Ben Jones\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "question_toks": [
      "find",
      "the",
      "pixel",
      "aspect",
      "ratio",
      "and",
      "nation",
      "of",
      "the",
      "tv",
      "channels",
      "that",
      "do",
      "not",
      "use",
      "English",
      "."
    ],
    "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "pixel_aspect_ratio_par",
      ",",
      "country",
      "from",
      "tv_channel",
      "where",
      "language",
      "!=",
      "\"English\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "question_toks": [
      "What",
      "is",
      "the",
      "pixel",
      "aspect",
      "ratio",
      "and",
      "country",
      "of",
      "origin",
      "for",
      "all",
      "TV",
      "channels",
      "that",
      "do",
      "not",
      "use",
      "English",
      "?"
    ],
    "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "pixel_aspect_ratio_par",
      ",",
      "country",
      "from",
      "tv_channel",
      "where",
      "language",
      "!=",
      "\"English\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "find id of the tv channels that from the countries where have more than two tv channels.",
    "question_toks": [
      "find",
      "i",
      "d",
      "of",
      "the",
      "tv",
      "channels",
      "that",
      "from",
      "the",
      "countries",
      "where",
      "have",
      "more",
      "than",
      "two",
      "tv",
      "channels",
      "."
    ],
    "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "id",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the ids of all tv channels that have more than 2 TV channels?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "all",
      "tv",
      "channels",
      "that",
      "have",
      "more",
      "than",
      "2",
      "TV",
      "channels",
      "?"
    ],
    "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "id",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "question_toks": [
      "find",
      "the",
      "i",
      "d",
      "of",
      "tv",
      "channels",
      "that",
      "do",
      "not",
      "play",
      "any",
      "cartoon",
      "directed",
      "by",
      "Ben",
      "Jones",
      "."
    ],
    "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  25,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "id",
      "from",
      "tv_channel",
      "except",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "\"Ben Jones\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "the",
      "TV",
      "channels",
      "that",
      "do",
      "not",
      "have",
      "any",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  25,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "id",
      "from",
      "tv_channel",
      "except",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "\"Ben Jones\""
    ]
  },
  {
    "db_id": "tvshow",
    "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
    "question_toks": [
      "find",
      "the",
      "package",
      "option",
      "of",
      "the",
      "tv",
      "channel",
      "that",
      "do",
      "not",
      "have",
      "any",
      "cartoon",
      "directed",
      "by",
      "Ben",
      "Jones",
      "."
    ],
    "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      25,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    21,
                    false
                  ],
                  null
                ],
                "\"Ben Jones\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "\"Ben Jones\"",
      ")"
    ]
  },
  {
    "db_id": "tvshow",
    "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
    "question_toks": [
      "What",
      "are",
      "the",
      "package",
      "options",
      "of",
      "all",
      "tv",
      "channels",
      "that",
      "are",
      "not",
      "playing",
      "any",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      25,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    21,
                    false
                  ],
                  null
                ],
                "\"Ben Jones\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "\"Ben Jones\"",
      ")"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "How many poker players are there?",
    "question_toks": [
      "How",
      "many",
      "poker",
      "players",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM poker_player",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "poker_player"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Count the number of poker players.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "poker",
      "players",
      "."
    ],
    "query": "SELECT count(*) FROM poker_player",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "poker_player"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "List the earnings of poker players in descending order.",
    "question_toks": [
      "List",
      "the",
      "earnings",
      "of",
      "poker",
      "players",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "earnings",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are the earnings of poker players, ordered descending by value?",
    "question_toks": [
      "What",
      "are",
      "the",
      "earnings",
      "of",
      "poker",
      "players",
      ",",
      "ordered",
      "descending",
      "by",
      "value",
      "?"
    ],
    "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "earnings",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "List the final tables made and the best finishes of poker players.",
    "question_toks": [
      "List",
      "the",
      "final",
      "tables",
      "made",
      "and",
      "the",
      "best",
      "finishes",
      "of",
      "poker",
      "players",
      "."
    ],
    "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "final_table_made",
      ",",
      "best_finish",
      "from",
      "poker_player"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are the final tables made and best finishes for all poker players?",
    "question_toks": [
      "What",
      "are",
      "the",
      "final",
      "tables",
      "made",
      "and",
      "best",
      "finishes",
      "for",
      "all",
      "poker",
      "players",
      "?"
    ],
    "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "final_table_made",
      ",",
      "best_finish",
      "from",
      "poker_player"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What is the average earnings of poker players?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "earnings",
      "of",
      "poker",
      "players",
      "?"
    ],
    "query": "SELECT avg(Earnings) FROM poker_player",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "earnings",
      ")",
      "from",
      "poker_player"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Return the average earnings across all poker players.",
    "question_toks": [
      "Return",
      "the",
      "average",
      "earnings",
      "across",
      "all",
      "poker",
      "players",
      "."
    ],
    "query": "SELECT avg(Earnings) FROM poker_player",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "earnings",
      ")",
      "from",
      "poker_player"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What is the money rank of the poker player with the highest earnings?",
    "question_toks": [
      "What",
      "is",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "highest",
      "earnings",
      "?"
    ],
    "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "money_rank",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Return the money rank of the player with the greatest earnings.",
    "question_toks": [
      "Return",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "player",
      "with",
      "the",
      "greatest",
      "earnings",
      "."
    ],
    "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "money_rank",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "number",
      "of",
      "final",
      "tables",
      "made",
      "among",
      "poker",
      "players",
      "with",
      "earnings",
      "less",
      "than",
      "200000",
      "?"
    ],
    "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          200000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "final_table_made",
      ")",
      "from",
      "poker_player",
      "where",
      "earnings",
      "<",
      "200000"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
    "question_toks": [
      "Return",
      "the",
      "maximum",
      "final",
      "tables",
      "made",
      "across",
      "all",
      "poker",
      "players",
      "who",
      "have",
      "earnings",
      "below",
      "200000",
      "."
    ],
    "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          200000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "final_table_made",
      ")",
      "from",
      "poker_player",
      "where",
      "earnings",
      "<",
      "200000"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of poker players?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "?"
    ],
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Return the names of all the poker players.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "all",
      "the",
      "poker",
      "players",
      "."
    ],
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of poker players whose earnings is higher than 300000?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "whose",
      "earnings",
      "is",
      "higher",
      "than",
      "300000",
      "?"
    ],
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "where",
      "t2.earnings",
      ">",
      "300000"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Give the names of poker players who have earnings above 300000.",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "who",
      "have",
      "earnings",
      "above",
      "300000",
      "."
    ],
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "where",
      "t2.earnings",
      ">",
      "300000"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "List the names of poker players ordered by the final tables made in ascending order.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "ordered",
      "by",
      "the",
      "final",
      "tables",
      "made",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "order",
      "by",
      "t2.final_table_made"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      ",",
      "ordered",
      "ascending",
      "by",
      "the",
      "number",
      "of",
      "final",
      "tables",
      "they",
      "have",
      "made",
      "?"
    ],
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "order",
      "by",
      "t2.final_table_made"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What is the birth date of the poker player with the lowest earnings?",
    "question_toks": [
      "What",
      "is",
      "the",
      "birth",
      "date",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "lowest",
      "earnings",
      "?"
    ],
    "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.birth_date",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "order",
      "by",
      "t2.earnings",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Return the birth date of the poker player with the lowest earnings.",
    "question_toks": [
      "Return",
      "the",
      "birth",
      "date",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "lowest",
      "earnings",
      "."
    ],
    "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.birth_date",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "order",
      "by",
      "t2.earnings",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What is the money rank of the tallest poker player?",
    "question_toks": [
      "What",
      "is",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "tallest",
      "poker",
      "player",
      "?"
    ],
    "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.money_rank",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "order",
      "by",
      "t1.height",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Return the money rank of the poker player with the greatest height.",
    "question_toks": [
      "Return",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "greatest",
      "height",
      "."
    ],
    "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.money_rank",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "order",
      "by",
      "t1.height",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What is the average earnings of poker players with height higher than 200?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "earnings",
      "of",
      "poker",
      "players",
      "with",
      "height",
      "higher",
      "than",
      "200",
      "?"
    ],
    "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "t2.earnings",
      ")",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "where",
      "t1.height",
      ">",
      "200"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Give average earnings of poker players who are taller than 200.",
    "question_toks": [
      "Give",
      "average",
      "earnings",
      "of",
      "poker",
      "players",
      "who",
      "are",
      "taller",
      "than",
      "200",
      "."
    ],
    "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "t2.earnings",
      ")",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "where",
      "t1.height",
      ">",
      "200"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of poker players in descending order of earnings?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "in",
      "descending",
      "order",
      "of",
      "earnings",
      "?"
    ],
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "order",
      "by",
      "t2.earnings",
      "desc"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Return the names of poker players sorted by their earnings descending.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "sorted",
      "by",
      "their",
      "earnings",
      "descending",
      "."
    ],
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1.people_id",
      "=",
      "t2.people_id",
      "order",
      "by",
      "t2.earnings",
      "desc"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are different nationalities of people and the corresponding number of people from each nation?",
    "question_toks": [
      "What",
      "are",
      "different",
      "nationalities",
      "of",
      "people",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "people",
      "from",
      "each",
      "nation",
      "?"
    ],
    "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "nationality",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "people",
      "group",
      "by",
      "nationality"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "How many people are there of each nationality?",
    "question_toks": [
      "How",
      "many",
      "people",
      "are",
      "there",
      "of",
      "each",
      "nationality",
      "?"
    ],
    "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "nationality",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "people",
      "group",
      "by",
      "nationality"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What is the most common nationality of people?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "common",
      "nationality",
      "of",
      "people",
      "?"
    ],
    "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Give the nationality that is most common across all people.",
    "question_toks": [
      "Give",
      "the",
      "nationality",
      "that",
      "is",
      "most",
      "common",
      "across",
      "all",
      "people",
      "."
    ],
    "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are the nationalities that are shared by at least two people?",
    "question_toks": [
      "What",
      "are",
      "the",
      "nationalities",
      "that",
      "are",
      "shared",
      "by",
      "at",
      "least",
      "two",
      "people",
      "?"
    ],
    "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Return the nationalities for which there are two or more people.",
    "question_toks": [
      "Return",
      "the",
      "nationalities",
      "for",
      "which",
      "there",
      "are",
      "two",
      "or",
      "more",
      "people",
      "."
    ],
    "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "List the names and birth dates of people in ascending alphabetical order of name.",
    "question_toks": [
      "List",
      "the",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "people",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "of",
      "name",
      "."
    ],
    "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "birth_date",
      "from",
      "people",
      "order",
      "by",
      "name",
      "asc"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "people",
      ",",
      "ordered",
      "by",
      "their",
      "names",
      "in",
      "alphabetical",
      "order",
      "?"
    ],
    "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "birth_date",
      "from",
      "people",
      "order",
      "by",
      "name",
      "asc"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Show names of people whose nationality is not \"Russia\".",
    "question_toks": [
      "Show",
      "names",
      "of",
      "people",
      "whose",
      "nationality",
      "is",
      "not",
      "\"",
      "Russia",
      "\"",
      "."
    ],
    "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Russia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "nationality",
      "!=",
      "\"Russia\""
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of people who are not from Russia?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "people",
      "who",
      "are",
      "not",
      "from",
      "Russia",
      "?"
    ],
    "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Russia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "nationality",
      "!=",
      "\"Russia\""
    ]
  },
  {
    "db_id": "poker_player",
    "question": "List the names of people that are not poker players.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "people",
      "that",
      "are",
      "not",
      "poker",
      "players",
      "."
    ],
    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      2,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "people_id",
      "not",
      "in",
      "(",
      "select",
      "people_id",
      "from",
      "poker_player",
      ")"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of people who do not play poker?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "people",
      "who",
      "do",
      "not",
      "play",
      "poker",
      "?"
    ],
    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      2,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "people_id",
      "not",
      "in",
      "(",
      "select",
      "people_id",
      "from",
      "poker_player",
      ")"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "How many distinct nationalities are there?",
    "question_toks": [
      "How",
      "many",
      "distinct",
      "nationalities",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(DISTINCT Nationality) FROM people",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                8,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "people"
    ]
  },
  {
    "db_id": "poker_player",
    "question": "Count the number of different nationalities.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "different",
      "nationalities",
      "."
    ],
    "query": "SELECT count(DISTINCT Nationality) FROM people",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                8,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "people"
    ]
  },
  {
    "db_id": "voter_1",
    "question": "How many states are there?",
    "question_toks": [
      "How",
      "many",
      "states",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM area_code_state",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "area_code_state"
    ]
  },
  {
    "db_id": "voter_1",
    "question": "List the contestant numbers and names, ordered by contestant name descending.",
    "question_toks": [
      "List",
      "the",
      "contestant",
      "numbers",
      "and",
      "names",
      ",",
      "ordered",
      "by",
      "contestant",
      "name",
      "descending",
      "."
    ],
    "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "contestant_number",
      ",",
      "contestant_name",
      "from",
      "contestants",
      "order",
      "by",
      "contestant_name",
      "desc"
    ]
  },
  {
    "db_id": "voter_1",
    "question": "List the vote ids, phone numbers and states of all votes.",
    "question_toks": [
      "List",
      "the",
      "vote",
      "ids",
      ",",
      "phone",
      "numbers",
      "and",
      "states",
      "of",
      "all",
      "votes",
      "."
    ],
    "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "vote_id",
      ",",
      "phone_number",
      ",",
      "state",
      "from",
      "votes"
    ]
  },
  {
    "db_id": "voter_1",
    "question": "What are the maximum and minimum values of area codes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "maximum",
      "and",
      "minimum",
      "values",
      "of",
      "area",
      "codes",
      "?"
    ],
    "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "area_code",
      ")",
      ",",
      "min",
      "(",
      "area_code",
      ")",
      "from",
      "area_code_state"
    ]
  },
  {
    "db_id": "voter_1",
    "question": "What is last date created of votes from the state 'CA'?",
    "question_toks": [
      "What",
      "is",
      "last",
      "date",
      "created",
      "of",
      "votes",
      "from",
      "the",
      "state",
      "'",
      "CA",
      "'",
      "?"
    ],
    "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"CA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "created",
      ")",
      "from",
      "votes",
      "where",
      "state",
      "=",
      "\"CA\""
    ]
  },
  {
    "db_id": "voter_1",
    "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "contestants",
      "whose",
      "names",
      "are",
      "not",
      "'",
      "Jessie",
      "Alloway",
      "'"
    ],
    "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Jessie Alloway\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "contestant_name",
      "from",
      "contestants",
      "where",
      "contestant_name",
      "!=",
      "\"Jessie Alloway\""
    ]
  },
  {
    "db_id": "voter_1",
    "question": "What are the distinct states and create time of all votes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "distinct",
      "states",
      "and",
      "create",
      "time",
      "of",
      "all",
      "votes",
      "?"
    ],
    "query": "SELECT DISTINCT state ,  created FROM votes",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "state",
      ",",
      "created",
      "from",
      "votes"
    ]
  },
  {
    "db_id": "voter_1",
    "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "contestant",
      "numbers",
      "and",
      "names",
      "of",
      "the",
      "contestants",
      "who",
      "had",
      "at",
      "least",
      "two",
      "votes",
      "?"
    ],
    "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.contestant_number",
      ",",
      "t1.contestant_name",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1.contestant_number",
      "=",
      "t2.contestant_number",
      "group",
      "by",
      "t1.contestant_number",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "voter_1",
    "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
    "question_toks": [
      "Of",
      "all",
      "the",
      "contestants",
      "who",
      "got",
      "voted",
      ",",
      "what",
      "is",
      "the",
      "contestant",
      "number",
      "and",
      "name",
      "of",
      "the",
      "contestant",
      "who",
      "got",
      "least",
      "votes",
      "?"
    ],
    "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.contestant_number",
      ",",
      "t1.contestant_name",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1.contestant_number",
      "=",
      "t2.contestant_number",
      "group",
      "by",
      "t1.contestant_number",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "voter_1",
    "question": "What are the number of votes from state 'NY' or 'CA'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "votes",
      "from",
      "state",
      "'",
      "NY",
      "'",
      "or",
      "'",
      "CA",
      "'",
      "?"
    ],
    "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NY\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"CA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "votes",
      "where",
      "state",
      "=",
      "\"NY\"",
      "or",
      "state",
      "=",
      "\"CA\""
    ]
  },
  {
    "db_id": "voter_1",
    "question": "How many contestants did not get voted?",
    "question_toks": [
      "How",
      "many",
      "contestants",
      "did",
      "not",
      "get",
      "voted",
      "?"
    ],
    "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "contestants",
      "where",
      "contestant_number",
      "not",
      "in",
      "(",
      "select",
      "contestant_number",
      "from",
      "votes",
      ")"
    ]
  },
  {
    "db_id": "voter_1",
    "question": "What is the area code in which the most voters voted?",
    "question_toks": [
      "What",
      "is",
      "the",
      "area",
      "code",
      "in",
      "which",
      "the",
      "most",
      "voters",
      "voted",
      "?"
    ],
    "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.area_code",
      "from",
      "area_code_state",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1.state",
      "=",
      "t2.state",
      "group",
      "by",
      "t1.area_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "voter_1",
    "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "create",
      "dates",
      ",",
      "states",
      ",",
      "and",
      "phone",
      "numbers",
      "of",
      "the",
      "votes",
      "that",
      "were",
      "for",
      "the",
      "contestant",
      "named",
      "'",
      "Tabatha",
      "Gehling",
      "'",
      "?"
    ],
    "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Tabatha Gehling\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.created",
      ",",
      "t2.state",
      ",",
      "t2.phone_number",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1.contestant_number",
      "=",
      "t2.contestant_number",
      "where",
      "t1.contestant_name",
      "=",
      "\"Tabatha Gehling\""
    ]
  },
  {
    "db_id": "voter_1",
    "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "question_toks": [
      "List",
      "the",
      "area",
      "codes",
      "in",
      "which",
      "voters",
      "voted",
      "both",
      "for",
      "the",
      "contestant",
      "'",
      "Tabatha",
      "Gehling",
      "'",
      "and",
      "the",
      "contestant",
      "'",
      "Kelly",
      "Clauss",
      "'",
      "."
    ],
    "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Tabatha Gehling\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                8,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ],
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            "\"Kelly Clauss\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t3.area_code",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1.contestant_number",
      "=",
      "t2.contestant_number",
      "join",
      "area_code_state",
      "as",
      "t3",
      "on",
      "t2.state",
      "=",
      "t3.state",
      "where",
      "t1.contestant_name",
      "=",
      "\"Tabatha Gehling\"",
      "intersect",
      "select",
      "t3.area_code",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1.contestant_number",
      "=",
      "t2.contestant_number",
      "join",
      "area_code_state",
      "as",
      "t3",
      "on",
      "t2.state",
      "=",
      "t3.state",
      "where",
      "t1.contestant_name",
      "=",
      "\"Kelly Clauss\""
    ]
  },
  {
    "db_id": "voter_1",
    "question": "Return the names the contestants whose names contain the substring 'Al'.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "the",
      "contestants",
      "whose",
      "names",
      "contain",
      "the",
      "substring",
      "'",
      "Al",
      "'",
      "."
    ],
    "query": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE \"%Al%\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"%Al%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "contestant_name",
      "from",
      "contestants",
      "where",
      "contestant_name",
      "like",
      "\"%Al%\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the names of all the countries that became independent after 1950?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "the",
      "countries",
      "that",
      "became",
      "independent",
      "after",
      "1950",
      "?"
    ],
    "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1950.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "indepyear",
      ">",
      "1950"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the names of the nations that were founded after 1950.",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "the",
      "nations",
      "that",
      "were",
      "founded",
      "after",
      "1950",
      "."
    ],
    "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1950.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "indepyear",
      ">",
      "1950"
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many countries have a republic as their form of government?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "have",
      "a",
      "republic",
      "as",
      "their",
      "form",
      "of",
      "government",
      "?"
    ],
    "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "\"Republic\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many countries have governments that are republics?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "have",
      "governments",
      "that",
      "are",
      "republics",
      "?"
    ],
    "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "\"Republic\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the total surface area of the countries in the Caribbean region?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "surface",
      "area",
      "of",
      "the",
      "countries",
      "in",
      "the",
      "Caribbean",
      "region",
      "?"
    ],
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Caribbean\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "\"Caribbean\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How much surface area do the countires in the Carribean cover together?",
    "question_toks": [
      "How",
      "much",
      "surface",
      "area",
      "do",
      "the",
      "countires",
      "in",
      "the",
      "Carribean",
      "cover",
      "together",
      "?"
    ],
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Caribbean\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "\"Caribbean\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which continent is Anguilla in?",
    "question_toks": [
      "Which",
      "continent",
      "is",
      "Anguilla",
      "in",
      "?"
    ],
    "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Anguilla\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "continent",
      "from",
      "country",
      "where",
      "name",
      "=",
      "\"Anguilla\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the continent name which Anguilla belongs to?",
    "question_toks": [
      "What",
      "is",
      "the",
      "continent",
      "name",
      "which",
      "Anguilla",
      "belongs",
      "to",
      "?"
    ],
    "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Anguilla\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "continent",
      "from",
      "country",
      "where",
      "name",
      "=",
      "\"Anguilla\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which region is the city Kabul located in?",
    "question_toks": [
      "Which",
      "region",
      "is",
      "the",
      "city",
      "Kabul",
      "located",
      "in",
      "?"
    ],
    "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kabul\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.name",
      "=",
      "\"Kabul\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What region is Kabul in?",
    "question_toks": [
      "What",
      "region",
      "is",
      "Kabul",
      "in",
      "?"
    ],
    "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kabul\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.name",
      "=",
      "\"Kabul\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which language is the most popular in Aruba?",
    "question_toks": [
      "Which",
      "language",
      "is",
      "the",
      "most",
      "popular",
      "in",
      "Aruba",
      "?"
    ],
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.name",
      "=",
      "\"Aruba\"",
      "order",
      "by",
      "percentage",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What language is predominantly spoken in Aruba?",
    "question_toks": [
      "What",
      "language",
      "is",
      "predominantly",
      "spoken",
      "in",
      "Aruba",
      "?"
    ],
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.name",
      "=",
      "\"Aruba\"",
      "order",
      "by",
      "percentage",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the population and life expectancies in Brazil?",
    "question_toks": [
      "What",
      "are",
      "the",
      "population",
      "and",
      "life",
      "expectancies",
      "in",
      "Brazil",
      "?"
    ],
    "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "name",
      "=",
      "\"Brazil\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give me Brazil\u2019s population and life expectancies.",
    "question_toks": [
      "Give",
      "me",
      "Brazil",
      "\u2019s",
      "population",
      "and",
      "life",
      "expectancies",
      "."
    ],
    "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "name",
      "=",
      "\"Brazil\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the region and population of Angola?",
    "question_toks": [
      "What",
      "are",
      "the",
      "region",
      "and",
      "population",
      "of",
      "Angola",
      "?"
    ],
    "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Angola\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "population",
      ",",
      "region",
      "from",
      "country",
      "where",
      "name",
      "=",
      "\"Angola\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What region does Angola belong to and what is its population?",
    "question_toks": [
      "What",
      "region",
      "does",
      "Angola",
      "belong",
      "to",
      "and",
      "what",
      "is",
      "its",
      "population",
      "?"
    ],
    "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Angola\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "population",
      ",",
      "region",
      "from",
      "country",
      "where",
      "name",
      "=",
      "\"Angola\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "expected",
      "life",
      "expectancy",
      "for",
      "countries",
      "in",
      "the",
      "region",
      "of",
      "Central",
      "Africa",
      "?"
    ],
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Central Africa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "\"Central Africa\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How long is the people\u2019s average life expectancy in Central Africa?",
    "question_toks": [
      "How",
      "long",
      "is",
      "the",
      "people",
      "\u2019s",
      "average",
      "life",
      "expectancy",
      "in",
      "Central",
      "Africa",
      "?"
    ],
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Central Africa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "\"Central Africa\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the name of country that has the shortest life expectancy in Asia?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "country",
      "that",
      "has",
      "the",
      "shortest",
      "life",
      "expectancy",
      "in",
      "Asia",
      "?"
    ],
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\"",
      "order",
      "by",
      "lifeexpectancy",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the name of the country in Asia with the lowest life expectancy.",
    "question_toks": [
      "Give",
      "the",
      "name",
      "of",
      "the",
      "country",
      "in",
      "Asia",
      "with",
      "the",
      "lowest",
      "life",
      "expectancy",
      "."
    ],
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\"",
      "order",
      "by",
      "lifeexpectancy",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the total population and maximum GNP in Asia?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "population",
      "and",
      "maximum",
      "GNP",
      "in",
      "Asia",
      "?"
    ],
    "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "max",
      "(",
      "gnp",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many people live in Asia, and what is the largest GNP among them?",
    "question_toks": [
      "How",
      "many",
      "people",
      "live",
      "in",
      "Asia",
      ",",
      "and",
      "what",
      "is",
      "the",
      "largest",
      "GNP",
      "among",
      "them",
      "?"
    ],
    "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "max",
      "(",
      "gnp",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the average life expectancy in African countries that are republics?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "life",
      "expectancy",
      "in",
      "African",
      "countries",
      "that",
      "are",
      "republics",
      "?"
    ],
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Africa\"",
      "and",
      "governmentform",
      "=",
      "\"Republic\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the average life expectancy for countries in Africa which are republics?",
    "question_toks": [
      "Give",
      "the",
      "average",
      "life",
      "expectancy",
      "for",
      "countries",
      "in",
      "Africa",
      "which",
      "are",
      "republics",
      "?"
    ],
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Africa\"",
      "and",
      "governmentform",
      "=",
      "\"Republic\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the total surface area of the continents Asia and Europe?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "surface",
      "area",
      "of",
      "the",
      "continents",
      "Asia",
      "and",
      "Europe",
      "?"
    ],
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\"",
      "or",
      "continent",
      "=",
      "\"Europe\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the total surface area covered by countries in Asia or Europe.",
    "question_toks": [
      "Give",
      "the",
      "total",
      "surface",
      "area",
      "covered",
      "by",
      "countries",
      "in",
      "Asia",
      "or",
      "Europe",
      "."
    ],
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\"",
      "or",
      "continent",
      "=",
      "\"Europe\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many people live in Gelderland district?",
    "question_toks": [
      "How",
      "many",
      "people",
      "live",
      "in",
      "Gelderland",
      "district",
      "?"
    ],
    "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Gelderland\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "city",
      "where",
      "district",
      "=",
      "\"Gelderland\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the total population of Gelderland district?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "population",
      "of",
      "Gelderland",
      "district",
      "?"
    ],
    "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Gelderland\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "city",
      "where",
      "district",
      "=",
      "\"Gelderland\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the average GNP and total population in all nations whose government is US territory?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "GNP",
      "and",
      "total",
      "population",
      "in",
      "all",
      "nations",
      "whose",
      "government",
      "is",
      "US",
      "territory",
      "?"
    ],
    "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"US Territory\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "gnp",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "\"US Territory\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the mean GNP and total population of nations which are considered US territory.",
    "question_toks": [
      "Give",
      "the",
      "mean",
      "GNP",
      "and",
      "total",
      "population",
      "of",
      "nations",
      "which",
      "are",
      "considered",
      "US",
      "territory",
      "."
    ],
    "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"US Territory\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "gnp",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "\"US Territory\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many unique languages are spoken in the world?",
    "question_toks": [
      "How",
      "many",
      "unique",
      "languages",
      "are",
      "spoken",
      "in",
      "the",
      "world",
      "?"
    ],
    "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "language",
      ")",
      "from",
      "countrylanguage"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the number of distinct languages used around the world?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "distinct",
      "languages",
      "used",
      "around",
      "the",
      "world",
      "?"
    ],
    "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "language",
      ")",
      "from",
      "countrylanguage"
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many type of governments are in Africa?",
    "question_toks": [
      "How",
      "many",
      "type",
      "of",
      "governments",
      "are",
      "in",
      "Africa",
      "?"
    ],
    "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "governmentform",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Africa\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many different forms of governments are there in Africa?",
    "question_toks": [
      "How",
      "many",
      "different",
      "forms",
      "of",
      "governments",
      "are",
      "there",
      "in",
      "Africa",
      "?"
    ],
    "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "governmentform",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Africa\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the total number of languages used in Aruba?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "languages",
      "used",
      "in",
      "Aruba",
      "?"
    ],
    "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "t2.language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.name",
      "=",
      "\"Aruba\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many languages are spoken in Aruba?",
    "question_toks": [
      "How",
      "many",
      "languages",
      "are",
      "spoken",
      "in",
      "Aruba",
      "?"
    ],
    "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "t2.language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.name",
      "=",
      "\"Aruba\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many official languages does Afghanistan have?",
    "question_toks": [
      "How",
      "many",
      "official",
      "languages",
      "does",
      "Afghanistan",
      "have",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.name",
      "=",
      "\"Afghanistan\"",
      "and",
      "isofficial",
      "=",
      "\"T\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many official languages are spoken in Afghanistan?",
    "question_toks": [
      "How",
      "many",
      "official",
      "languages",
      "are",
      "spoken",
      "in",
      "Afghanistan",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.name",
      "=",
      "\"Afghanistan\"",
      "and",
      "isofficial",
      "=",
      "\"T\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is name of the country that speaks the largest number of languages?",
    "question_toks": [
      "What",
      "is",
      "name",
      "of",
      "the",
      "country",
      "that",
      "speaks",
      "the",
      "largest",
      "number",
      "of",
      "languages",
      "?"
    ],
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "group",
      "by",
      "t1.name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the name of the nation that uses the greatest amount of languages.",
    "question_toks": [
      "Give",
      "the",
      "name",
      "of",
      "the",
      "nation",
      "that",
      "uses",
      "the",
      "greatest",
      "amount",
      "of",
      "languages",
      "."
    ],
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "group",
      "by",
      "t1.name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which continent has the most diverse languages?",
    "question_toks": [
      "Which",
      "continent",
      "has",
      "the",
      "most",
      "diverse",
      "languages",
      "?"
    ],
    "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.continent",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "group",
      "by",
      "t1.continent",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which continent speaks the most languages?",
    "question_toks": [
      "Which",
      "continent",
      "speaks",
      "the",
      "most",
      "languages",
      "?"
    ],
    "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.continent",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "group",
      "by",
      "t1.continent",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many countries speak both English and Dutch?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "speak",
      "both",
      "English",
      "and",
      "Dutch",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "sql",
            {
              "from": {
                "table_units": [
                  [
                    "table_unit",
                    2
                  ],
                  [
                    "table_unit",
                    3
                  ]
                ],
                "conds": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        8,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              },
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        9,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "where": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      24,
                      false
                    ],
                    null
                  ],
                  "\"English\"",
                  null
                ]
              ],
              "groupBy": [],
              "having": [],
              "orderBy": [],
              "limit": null,
              "intersect": {
                "from": {
                  "table_units": [
                    [
                      "table_unit",
                      2
                    ],
                    [
                      "table_unit",
                      3
                    ]
                  ],
                  "conds": [
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          8,
                          false
                        ],
                        null
                      ],
                      [
                        0,
                        23,
                        false
                      ],
                      null
                    ]
                  ]
                },
                "select": [
                  false,
                  [
                    [
                      0,
                      [
                        0,
                        [
                          0,
                          9,
                          false
                        ],
                        null
                      ]
                    ]
                  ]
                ],
                "where": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        24,
                        false
                      ],
                      null
                    ],
                    "\"Dutch\"",
                    null
                  ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
              },
              "union": null,
              "except": null
            }
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "intersect",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"Dutch\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the number of nations that use English and Dutch?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "nations",
      "that",
      "use",
      "English",
      "and",
      "Dutch",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "sql",
            {
              "from": {
                "table_units": [
                  [
                    "table_unit",
                    2
                  ],
                  [
                    "table_unit",
                    3
                  ]
                ],
                "conds": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        8,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              },
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        9,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "where": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      24,
                      false
                    ],
                    null
                  ],
                  "\"English\"",
                  null
                ]
              ],
              "groupBy": [],
              "having": [],
              "orderBy": [],
              "limit": null,
              "intersect": {
                "from": {
                  "table_units": [
                    [
                      "table_unit",
                      2
                    ],
                    [
                      "table_unit",
                      3
                    ]
                  ],
                  "conds": [
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          8,
                          false
                        ],
                        null
                      ],
                      [
                        0,
                        23,
                        false
                      ],
                      null
                    ]
                  ]
                },
                "select": [
                  false,
                  [
                    [
                      0,
                      [
                        0,
                        [
                          0,
                          9,
                          false
                        ],
                        null
                      ]
                    ]
                  ]
                ],
                "where": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        24,
                        false
                      ],
                      null
                    ],
                    "\"Dutch\"",
                    null
                  ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
              },
              "union": null,
              "except": null
            }
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "intersect",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"Dutch\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the names of nations speak both English and French?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "nations",
      "speak",
      "both",
      "English",
      "and",
      "French",
      "?"
    ],
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "intersect",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"French\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the names of nations that speak both English and French.",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "nations",
      "that",
      "speak",
      "both",
      "English",
      "and",
      "French",
      "."
    ],
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "intersect",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"French\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the names of nations where both English and French are official languages?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "nations",
      "where",
      "both",
      "English",
      "and",
      "French",
      "are",
      "official",
      "languages",
      "?"
    ],
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "and",
      "t2.isofficial",
      "=",
      "\"T\"",
      "intersect",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"French\"",
      "and",
      "t2.isofficial",
      "=",
      "\"T\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the names of countries with English and French as official languages.",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "countries",
      "with",
      "English",
      "and",
      "French",
      "as",
      "official",
      "languages",
      "."
    ],
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "and",
      "t2.isofficial",
      "=",
      "\"T\"",
      "intersect",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"French\"",
      "and",
      "t2.isofficial",
      "=",
      "\"T\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the number of distinct continents where Chinese is spoken?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "distinct",
      "continents",
      "where",
      "Chinese",
      "is",
      "spoken",
      "?"
    ],
    "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "continent",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"Chinese\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many continents speak Chinese?",
    "question_toks": [
      "How",
      "many",
      "continents",
      "speak",
      "Chinese",
      "?"
    ],
    "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "continent",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"Chinese\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the regions that use English or Dutch?",
    "question_toks": [
      "What",
      "are",
      "the",
      "regions",
      "that",
      "use",
      "English",
      "or",
      "Dutch",
      "?"
    ],
    "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Dutch\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "or",
      "t2.language",
      "=",
      "\"Dutch\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which regions speak Dutch or English?",
    "question_toks": [
      "Which",
      "regions",
      "speak",
      "Dutch",
      "or",
      "English",
      "?"
    ],
    "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Dutch\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "or",
      "t2.language",
      "=",
      "\"Dutch\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the countries where either English or Dutch is the official language?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "where",
      "either",
      "English",
      "or",
      "Dutch",
      "is",
      "the",
      "official",
      "language",
      "?"
    ],
    "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  0,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"Dutch\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "and",
      "isofficial",
      "=",
      "\"T\"",
      "union",
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"Dutch\"",
      "and",
      "isofficial",
      "=",
      "\"T\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which countries have either English or Dutch as an official language?",
    "question_toks": [
      "Which",
      "countries",
      "have",
      "either",
      "English",
      "or",
      "Dutch",
      "as",
      "an",
      "official",
      "language",
      "?"
    ],
    "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  0,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"Dutch\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "and",
      "isofficial",
      "=",
      "\"T\"",
      "union",
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"Dutch\"",
      "and",
      "isofficial",
      "=",
      "\"T\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which language is the most popular on the Asian continent?",
    "question_toks": [
      "Which",
      "language",
      "is",
      "the",
      "most",
      "popular",
      "on",
      "the",
      "Asian",
      "continent",
      "?"
    ],
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.continent",
      "=",
      "\"Asia\"",
      "group",
      "by",
      "t2.language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the language that is used by the largest number of Asian nations?",
    "question_toks": [
      "What",
      "is",
      "the",
      "language",
      "that",
      "is",
      "used",
      "by",
      "the",
      "largest",
      "number",
      "of",
      "Asian",
      "nations",
      "?"
    ],
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.continent",
      "=",
      "\"Asia\"",
      "group",
      "by",
      "t2.language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which languages are spoken by only one country in republic governments?",
    "question_toks": [
      "Which",
      "languages",
      "are",
      "spoken",
      "by",
      "only",
      "one",
      "country",
      "in",
      "republic",
      "governments",
      "?"
    ],
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.governmentform",
      "=",
      "\"Republic\"",
      "group",
      "by",
      "t2.language",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What languages are only used by a single country with a republic government?",
    "question_toks": [
      "What",
      "languages",
      "are",
      "only",
      "used",
      "by",
      "a",
      "single",
      "country",
      "with",
      "a",
      "republic",
      "government",
      "?"
    ],
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.governmentform",
      "=",
      "\"Republic\"",
      "group",
      "by",
      "t2.language",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Find the city with the largest population that uses English.",
    "question_toks": [
      "Find",
      "the",
      "city",
      "with",
      "the",
      "largest",
      "population",
      "that",
      "uses",
      "English",
      "."
    ],
    "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      ",",
      "t1.population",
      "from",
      "city",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.countrycode",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "order",
      "by",
      "t1.population",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the most populace city that speaks English?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "populace",
      "city",
      "that",
      "speaks",
      "English",
      "?"
    ],
    "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      ",",
      "t1.population",
      "from",
      "city",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.countrycode",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "order",
      "by",
      "t1.population",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Find the name, population and expected life length of asian country with the largest area?",
    "question_toks": [
      "Find",
      "the",
      "name",
      ",",
      "population",
      "and",
      "expected",
      "life",
      "length",
      "of",
      "asian",
      "country",
      "with",
      "the",
      "largest",
      "area",
      "?"
    ],
    "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\"",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      ",",
      "population",
      ",",
      "and",
      "life",
      "expectancy",
      "of",
      "the",
      "largest",
      "Asian",
      "country",
      "by",
      "land",
      "?"
    ],
    "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\"",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is average life expectancy in the countries where English is not the official language?",
    "question_toks": [
      "What",
      "is",
      "average",
      "life",
      "expectancy",
      "in",
      "the",
      "countries",
      "where",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "?"
    ],
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "and",
      "t2.isofficial",
      "=",
      "\"T\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the mean life expectancy of countries in which English is not the official language.",
    "question_toks": [
      "Give",
      "the",
      "mean",
      "life",
      "expectancy",
      "of",
      "countries",
      "in",
      "which",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "."
    ],
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      "and",
      "t2.isofficial",
      "=",
      "\"T\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the total number of people living in the nations that do not use English?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "people",
      "living",
      "in",
      "the",
      "nations",
      "that",
      "do",
      "not",
      "use",
      "English",
      "?"
    ],
    "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many people live in countries that do not speak English?",
    "question_toks": [
      "How",
      "many",
      "people",
      "live",
      "in",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "?"
    ],
    "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"English\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the official language spoken in the country whose head of state is Beatrix?",
    "question_toks": [
      "What",
      "is",
      "the",
      "official",
      "language",
      "spoken",
      "in",
      "the",
      "country",
      "whose",
      "head",
      "of",
      "state",
      "is",
      "Beatrix",
      "?"
    ],
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Beatrix\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.headofstate",
      "=",
      "\"Beatrix\"",
      "and",
      "t2.isofficial",
      "=",
      "\"T\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
    "question_toks": [
      "What",
      "is",
      "the",
      "official",
      "language",
      "used",
      "in",
      "the",
      "country",
      "the",
      "name",
      "of",
      "whose",
      "head",
      "of",
      "state",
      "is",
      "Beatrix",
      "."
    ],
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Beatrix\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t1.headofstate",
      "=",
      "\"Beatrix\"",
      "and",
      "t2.isofficial",
      "=",
      "\"T\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "unique",
      "official",
      "languages",
      "spoken",
      "in",
      "the",
      "countries",
      "that",
      "are",
      "founded",
      "before",
      "1930",
      "?"
    ],
    "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1930.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "t2.language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "indepyear",
      "<",
      "1930",
      "and",
      "t2.isofficial",
      "=",
      "\"T\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
    "question_toks": [
      "For",
      "the",
      "countries",
      "founded",
      "before",
      "1930",
      ",",
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "distinct",
      "official",
      "languages",
      "?"
    ],
    "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1930.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "t2.language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "indepyear",
      "<",
      "1930",
      "and",
      "t2.isofficial",
      "=",
      "\"T\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "that",
      "have",
      "greater",
      "surface",
      "area",
      "than",
      "any",
      "country",
      "in",
      "Europe",
      "?"
    ],
    "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Europe\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "surfacearea",
      ">",
      "(",
      "select",
      "min",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Europe\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which countries have greater area than that of any country in Europe?",
    "question_toks": [
      "Which",
      "countries",
      "have",
      "greater",
      "area",
      "than",
      "that",
      "of",
      "any",
      "country",
      "in",
      "Europe",
      "?"
    ],
    "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Europe\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "surfacearea",
      ">",
      "(",
      "select",
      "min",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Europe\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the African countries that have a  population less than any country in Asia?",
    "question_toks": [
      "What",
      "are",
      "the",
      "African",
      "countries",
      "that",
      "have",
      "a",
      " ",
      "population",
      "less",
      "than",
      "any",
      "country",
      "in",
      "Asia",
      "?"
    ],
    "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Asia\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Africa\"",
      "and",
      "population",
      "<",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which African countries have a smaller population than that of any country in Asia?",
    "question_toks": [
      "Which",
      "African",
      "countries",
      "have",
      "a",
      "smaller",
      "population",
      "than",
      "that",
      "of",
      "any",
      "country",
      "in",
      "Asia",
      "?"
    ],
    "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Asia\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Africa\"",
      "and",
      "population",
      "<",
      "(",
      "select",
      "min",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which Asian countries have a population that is larger than any country in Africa?",
    "question_toks": [
      "Which",
      "Asian",
      "countries",
      "have",
      "a",
      "population",
      "that",
      "is",
      "larger",
      "than",
      "any",
      "country",
      "in",
      "Africa",
      "?"
    ],
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Africa\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\"",
      "and",
      "population",
      ">",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Africa\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "question_toks": [
      "What",
      "are",
      "the",
      "Asian",
      "countries",
      "which",
      "have",
      "a",
      "population",
      "larger",
      "than",
      "that",
      "of",
      "any",
      "country",
      "in",
      "Africa",
      "?"
    ],
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Africa\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\"",
      "and",
      "population",
      ">",
      "(",
      "select",
      "min",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Africa\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the country codes for countries that do not speak English?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "codes",
      "for",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "?"
    ],
    "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "\"English\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Return the country codes for countries that do not speak English.",
    "question_toks": [
      "Return",
      "the",
      "country",
      "codes",
      "for",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "."
    ],
    "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "\"English\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the country codes of countries where people use languages other than English?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "codes",
      "of",
      "countries",
      "where",
      "people",
      "use",
      "languages",
      "other",
      "than",
      "English",
      "?"
    ],
    "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "!=",
      "\"English\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the country codes for countries in which people speak langauges that are not English.",
    "question_toks": [
      "Give",
      "the",
      "country",
      "codes",
      "for",
      "countries",
      "in",
      "which",
      "people",
      "speak",
      "langauges",
      "that",
      "are",
      "not",
      "English",
      "."
    ],
    "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "!=",
      "\"English\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "the",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "and",
      "whose",
      "government",
      "forms",
      "are",
      "not",
      "Republic",
      "?"
    ],
    "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "code",
      "from",
      "country",
      "where",
      "governmentform",
      "!=",
      "\"Republic\"",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "\"English\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
    "question_toks": [
      "Return",
      "the",
      "codes",
      "of",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "and",
      "do",
      "not",
      "have",
      "Republics",
      "for",
      "governments",
      "."
    ],
    "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "code",
      "from",
      "country",
      "where",
      "governmentform",
      "!=",
      "\"Republic\"",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "\"English\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which cities are in European countries where English is not the official language?",
    "question_toks": [
      "Which",
      "cities",
      "are",
      "in",
      "European",
      "countries",
      "where",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "?"
    ],
    "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t2.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t2.countrycode",
      "=",
      "t1.code",
      "where",
      "t1.continent",
      "=",
      "\"Europe\"",
      "and",
      "t1.name",
      "not",
      "in",
      "(",
      "select",
      "t3.name",
      "from",
      "country",
      "as",
      "t3",
      "join",
      "countrylanguage",
      "as",
      "t4",
      "on",
      "t3.code",
      "=",
      "t4.countrycode",
      "where",
      "t4.isofficial",
      "=",
      "\"T\"",
      "and",
      "t4.language",
      "=",
      "\"English\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the names of cities in Europe for which English is not the official language?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "cities",
      "in",
      "Europe",
      "for",
      "which",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "?"
    ],
    "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t2.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t2.countrycode",
      "=",
      "t1.code",
      "where",
      "t1.continent",
      "=",
      "\"Europe\"",
      "and",
      "t1.name",
      "not",
      "in",
      "(",
      "select",
      "t3.name",
      "from",
      "country",
      "as",
      "t3",
      "join",
      "countrylanguage",
      "as",
      "t4",
      "on",
      "t3.code",
      "=",
      "t4.countrycode",
      "where",
      "t4.isofficial",
      "=",
      "\"T\"",
      "and",
      "t4.language",
      "=",
      "\"English\"",
      ")"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Whic`h unique cities are in  Asian countries where Chinese is the official language?",
    "question_toks": [
      "Whic`h",
      "unique",
      "cities",
      "are",
      "in",
      " ",
      "Asian",
      "countries",
      "where",
      "Chinese",
      "is",
      "the",
      "official",
      "language",
      "?"
    ],
    "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t3.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "join",
      "city",
      "as",
      "t3",
      "on",
      "t1.code",
      "=",
      "t3.countrycode",
      "where",
      "t2.isofficial",
      "=",
      "\"T\"",
      "and",
      "t2.language",
      "=",
      "\"Chinese\"",
      "and",
      "t1.continent",
      "=",
      "\"Asia\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "question_toks": [
      "Return",
      "the",
      "different",
      "names",
      "of",
      "cities",
      "that",
      "are",
      "in",
      "Asia",
      "and",
      "for",
      "which",
      "Chinese",
      "is",
      "the",
      "official",
      "language",
      "."
    ],
    "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t3.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "join",
      "city",
      "as",
      "t3",
      "on",
      "t1.code",
      "=",
      "t3.countrycode",
      "where",
      "t2.isofficial",
      "=",
      "\"T\"",
      "and",
      "t2.language",
      "=",
      "\"Chinese\"",
      "and",
      "t1.continent",
      "=",
      "\"Asia\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the name, independence year, and surface area of the country with the smallest population?",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      ",",
      "independence",
      "year",
      ",",
      "and",
      "surface",
      "area",
      "of",
      "the",
      "country",
      "with",
      "the",
      "smallest",
      "population",
      "?"
    ],
    "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "surfacearea",
      ",",
      "indepyear",
      "from",
      "country",
      "order",
      "by",
      "population",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
    "question_toks": [
      "Give",
      "the",
      "name",
      ",",
      "year",
      "of",
      "independence",
      ",",
      "and",
      "surface",
      "area",
      "of",
      "the",
      "country",
      "that",
      "has",
      "the",
      "lowest",
      "population",
      "."
    ],
    "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "surfacearea",
      ",",
      "indepyear",
      "from",
      "country",
      "order",
      "by",
      "population",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the population, name and leader of the country with the largest area?",
    "question_toks": [
      "What",
      "are",
      "the",
      "population",
      ",",
      "name",
      "and",
      "leader",
      "of",
      "the",
      "country",
      "with",
      "the",
      "largest",
      "area",
      "?"
    ],
    "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "headofstate",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the name, population, and head of state for the country that has the largest area.",
    "question_toks": [
      "Give",
      "the",
      "name",
      ",",
      "population",
      ",",
      "and",
      "head",
      "of",
      "state",
      "for",
      "the",
      "country",
      "that",
      "has",
      "the",
      "largest",
      "area",
      "."
    ],
    "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "headofstate",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
    "question_toks": [
      "Return",
      "the",
      "country",
      "name",
      "and",
      "the",
      "numbers",
      "of",
      "languages",
      "spoken",
      "for",
      "each",
      "country",
      "that",
      "speaks",
      "at",
      "least",
      "3",
      "languages",
      "."
    ],
    "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >=  3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "t2.language",
      ")",
      ",",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "group",
      "by",
      "t1.name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "3"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "countries",
      "that",
      "speak",
      "more",
      "than",
      "2",
      "languages",
      ",",
      "as",
      "well",
      "as",
      "how",
      "many",
      "languages",
      "they",
      "speak",
      "?"
    ],
    "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "t2.language",
      ")",
      ",",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "group",
      "by",
      "t1.name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "cities",
      "in",
      "each",
      "district",
      "whose",
      "population",
      "is",
      "greater",
      "than",
      "the",
      "average",
      "population",
      "of",
      "cities",
      "?"
    ],
    "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      5,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "district",
      "from",
      "city",
      "where",
      "population",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "population",
      ")",
      "from",
      "city",
      ")",
      "group",
      "by",
      "district"
    ]
  },
  {
    "db_id": "world_1",
    "question": "How many cities in each district have a population that is above the average population across all cities?",
    "question_toks": [
      "How",
      "many",
      "cities",
      "in",
      "each",
      "district",
      "have",
      "a",
      "population",
      "that",
      "is",
      "above",
      "the",
      "average",
      "population",
      "across",
      "all",
      "cities",
      "?"
    ],
    "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      5,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "district",
      "from",
      "city",
      "where",
      "population",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "population",
      ")",
      "from",
      "city",
      ")",
      "group",
      "by",
      "district"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      "."
    ],
    "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "governmentform",
      "from",
      "country",
      "group",
      "by",
      "governmentform",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ">",
      "72"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?"
    ],
    "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "governmentform",
      "from",
      "country",
      "group",
      "by",
      "governmentform",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ">",
      "72"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
    "question_toks": [
      "Find",
      "the",
      "average",
      "life",
      "expectancy",
      "and",
      "total",
      "population",
      "for",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      "?"
    ],
    "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ",",
      "continent",
      "from",
      "country",
      "group",
      "by",
      "continent",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "<",
      "72"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "continents",
      "and",
      "the",
      "total",
      "popuation",
      "and",
      "average",
      "life",
      "expectancy",
      "corresponding",
      "to",
      "each",
      ",",
      "for",
      "continents",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "less",
      "than",
      "72",
      "?"
    ],
    "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ",",
      "continent",
      "from",
      "country",
      "group",
      "by",
      "continent",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "<",
      "72"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the names and areas of countries with the top 5 largest area?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "surfacearea",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "5"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Return the names and surface areas of the 5 largest countries.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      "."
    ],
    "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "surfacearea",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "5"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are names of countries with the top 3 largest population?",
    "question_toks": [
      "What",
      "are",
      "names",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "3",
      "largest",
      "population",
      "?"
    ],
    "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "3"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Return the names of the 3 most populated countries.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "the",
      "3",
      "most",
      "populated",
      "countries",
      "."
    ],
    "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "3"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the names of the nations with the 3 lowest populations?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "nations",
      "with",
      "the",
      "3",
      "lowest",
      "populations",
      "?"
    ],
    "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "asc",
      "limit",
      "3"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Return the names of the 3 countries with the fewest people.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "the",
      "3",
      "countries",
      "with",
      "the",
      "fewest",
      "people",
      "."
    ],
    "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "asc",
      "limit",
      "3"
    ]
  },
  {
    "db_id": "world_1",
    "question": "how many countries are in Asia?",
    "question_toks": [
      "how",
      "many",
      "countries",
      "are",
      "in",
      "Asia",
      "?"
    ],
    "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Count the number of countries in Asia.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "countries",
      "in",
      "Asia",
      "."
    ],
    "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Asia\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "countries",
      "that",
      "are",
      "in",
      "the",
      "continent",
      "of",
      "Europe",
      "and",
      "have",
      "a",
      "population",
      "of",
      "80000",
      "?"
    ],
    "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"80000\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Europe\"",
      "and",
      "population",
      "=",
      "\"80000\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "countries",
      "that",
      "are",
      "in",
      "Europe",
      "and",
      "have",
      "a",
      "population",
      "equal",
      "to",
      "80000",
      "."
    ],
    "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"80000\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"Europe\"",
      "and",
      "population",
      "=",
      "\"80000\""
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "population",
      "and",
      "average",
      "area",
      "of",
      "countries",
      "in",
      "the",
      "continent",
      "of",
      "North",
      "America",
      "whose",
      "area",
      "is",
      "bigger",
      "than",
      "3000",
      "\uff1f"
    ],
    "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"North America\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"North America\"",
      "and",
      "surfacearea",
      ">",
      "3000"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
    "question_toks": [
      "Give",
      "the",
      "total",
      "population",
      "and",
      "average",
      "surface",
      "area",
      "corresponding",
      "to",
      "countries",
      "in",
      "Noth",
      "America",
      "that",
      "have",
      "a",
      "surface",
      "area",
      "greater",
      "than",
      "3000",
      "."
    ],
    "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"North America\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"North America\"",
      "and",
      "surfacearea",
      ">",
      "3000"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the cities whose population is between 160000 and 900000?",
    "question_toks": [
      "What",
      "are",
      "the",
      "cities",
      "whose",
      "population",
      "is",
      "between",
      "160000",
      "and",
      "900000",
      "?"
    ],
    "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          160000.0,
          900000.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "160000",
      "and",
      "900000"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Return the names of cities that have a population between 160000 and 900000.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "cities",
      "that",
      "have",
      "a",
      "population",
      "between",
      "160000",
      "and",
      "900000",
      "."
    ],
    "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          160000.0,
          900000.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "160000",
      "and",
      "900000"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Which language is spoken by the largest number of countries?",
    "question_toks": [
      "Which",
      "language",
      "is",
      "spoken",
      "by",
      "the",
      "largest",
      "number",
      "of",
      "countries",
      "?"
    ],
    "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "language",
      "from",
      "countrylanguage",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Give the language that is spoken in the most countries.",
    "question_toks": [
      "Give",
      "the",
      "language",
      "that",
      "is",
      "spoken",
      "in",
      "the",
      "most",
      "countries",
      "."
    ],
    "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "language",
      "from",
      "countrylanguage",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the language spoken by the largest percentage of people in each country?",
    "question_toks": [
      "What",
      "is",
      "the",
      "language",
      "spoken",
      "by",
      "the",
      "largest",
      "percentage",
      "of",
      "people",
      "in",
      "each",
      "country",
      "?"
    ],
    "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "language",
      ",",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "group",
      "by",
      "countrycode"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "codes",
      "of",
      "the",
      "different",
      "countries",
      ",",
      "and",
      "what",
      "are",
      "the",
      "languages",
      "spoken",
      "by",
      "the",
      "greatest",
      "percentage",
      "of",
      "people",
      "for",
      "each",
      "?"
    ],
    "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "language",
      ",",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "group",
      "by",
      "countrycode"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "countries",
      "where",
      "Spanish",
      "is",
      "spoken",
      "by",
      "the",
      "largest",
      "percentage",
      "of",
      "people",
      "?"
    ],
    "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "\"Spanish\"",
      "group",
      "by",
      "countrycode"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "countries",
      "for",
      "which",
      "Spanish",
      "is",
      "the",
      "predominantly",
      "spoken",
      "language",
      "."
    ],
    "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "\"Spanish\"",
      "group",
      "by",
      "countrycode"
    ]
  },
  {
    "db_id": "world_1",
    "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "countries",
      "where",
      "Spanish",
      "is",
      "spoken",
      "by",
      "the",
      "largest",
      "percentage",
      "of",
      "people",
      "?"
    ],
    "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "\"Spanish\"",
      "group",
      "by",
      "countrycode"
    ]
  },
  {
    "db_id": "world_1",
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "question_toks": [
      "Return",
      "the",
      "codes",
      "of",
      "countries",
      "for",
      "which",
      "Spanish",
      "is",
      "the",
      "predominantly",
      "spoken",
      "language",
      "."
    ],
    "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "\"Spanish\"",
      "group",
      "by",
      "countrycode"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "How many conductors are there?",
    "question_toks": [
      "How",
      "many",
      "conductors",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM conductor",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "conductor"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Count the number of conductors.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "conductors",
      "."
    ],
    "query": "SELECT count(*) FROM conductor",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "conductor"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "List the names of conductors in ascending order of age.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "conductors",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "query": "SELECT Name FROM conductor ORDER BY Age ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "age",
      "asc"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors, ordered by age?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      ",",
      "ordered",
      "by",
      "age",
      "?"
    ],
    "query": "SELECT Name FROM conductor ORDER BY Age ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "age",
      "asc"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors whose nationalities are not \"USA\"?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "whose",
      "nationalities",
      "are",
      "not",
      "\"",
      "USA",
      "\"",
      "?"
    ],
    "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "conductor",
      "where",
      "nationality",
      "!=",
      "\"USA\""
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Return the names of conductors that do not have the nationality \"USA\".",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "conductors",
      "that",
      "do",
      "not",
      "have",
      "the",
      "nationality",
      "\"",
      "USA",
      "\"",
      "."
    ],
    "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "conductor",
      "where",
      "nationality",
      "!=",
      "\"USA\""
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
    "question_toks": [
      "What",
      "are",
      "the",
      "record",
      "companies",
      "of",
      "orchestras",
      "in",
      "descending",
      "order",
      "of",
      "years",
      "in",
      "which",
      "they",
      "were",
      "founded",
      "?"
    ],
    "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "order",
      "by",
      "year_of_founded",
      "desc"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "question_toks": [
      "Return",
      "the",
      "record",
      "companies",
      "of",
      "orchestras",
      ",",
      "sorted",
      "descending",
      "by",
      "the",
      "years",
      "in",
      "which",
      "they",
      "were",
      "founded",
      "."
    ],
    "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "order",
      "by",
      "year_of_founded",
      "desc"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What is the average attendance of shows?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "attendance",
      "of",
      "shows",
      "?"
    ],
    "query": "SELECT avg(Attendance) FROM SHOW",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "attendance",
      ")",
      "from",
      "show"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Return the average attendance across all shows.",
    "question_toks": [
      "Return",
      "the",
      "average",
      "attendance",
      "across",
      "all",
      "shows",
      "."
    ],
    "query": "SELECT avg(Attendance) FROM SHOW",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "attendance",
      ")",
      "from",
      "show"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
    "question_toks": [
      "What",
      "are",
      "the",
      "maximum",
      "and",
      "minimum",
      "share",
      "of",
      "performances",
      "whose",
      "type",
      "is",
      "not",
      "\"",
      "Live",
      "final",
      "\"",
      "."
    ],
    "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Live final\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "performance",
      "where",
      "type",
      "!=",
      "\"Live final\""
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
    "question_toks": [
      "Return",
      "the",
      "maximum",
      "and",
      "minimum",
      "shares",
      "for",
      "performances",
      "that",
      "do",
      "not",
      "have",
      "the",
      "type",
      "\"",
      "Live",
      "final",
      "\"",
      "."
    ],
    "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Live final\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "performance",
      "where",
      "type",
      "!=",
      "\"Live final\""
    ]
  },
  {
    "db_id": "orchestra",
    "question": "How many different nationalities do conductors have?",
    "question_toks": [
      "How",
      "many",
      "different",
      "nationalities",
      "do",
      "conductors",
      "have",
      "?"
    ],
    "query": "SELECT count(DISTINCT Nationality) FROM conductor",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                4,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "conductor"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Count the number of different nationalities of conductors.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "different",
      "nationalities",
      "of",
      "conductors",
      "."
    ],
    "query": "SELECT count(DISTINCT Nationality) FROM conductor",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                4,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "conductor"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "List names of conductors in descending order of years of work.",
    "question_toks": [
      "List",
      "names",
      "of",
      "conductors",
      "in",
      "descending",
      "order",
      "of",
      "years",
      "of",
      "work",
      "."
    ],
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      ",",
      "sorted",
      "descending",
      "by",
      "the",
      "number",
      "of",
      "years",
      "they",
      "have",
      "worked",
      "?"
    ],
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "List the name of the conductor with the most years of work.",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "with",
      "the",
      "most",
      "years",
      "of",
      "work",
      "."
    ],
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What is the name of the conductor who has worked the greatest number of years?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "who",
      "has",
      "worked",
      "the",
      "greatest",
      "number",
      "of",
      "years",
      "?"
    ],
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Show the names of conductors and the orchestras they have conducted.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "conductors",
      "and",
      "the",
      "orchestras",
      "they",
      "have",
      "conducted",
      "."
    ],
    "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      ",",
      "t2.orchestra",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1.conductor_id",
      "=",
      "t2.conductor_id"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "as",
      "well",
      "as",
      "the",
      "corresonding",
      "orchestras",
      "that",
      "they",
      "have",
      "conducted",
      "?"
    ],
    "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      ",",
      "t2.orchestra",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1.conductor_id",
      "=",
      "t2.conductor_id"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Show the names of conductors that have conducted more than one orchestras.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "conductors",
      "that",
      "have",
      "conducted",
      "more",
      "than",
      "one",
      "orchestras",
      "."
    ],
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1.conductor_id",
      "=",
      "t2.conductor_id",
      "group",
      "by",
      "t2.conductor_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors who have conducted at more than one orchestra?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "who",
      "have",
      "conducted",
      "at",
      "more",
      "than",
      "one",
      "orchestra",
      "?"
    ],
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1.conductor_id",
      "=",
      "t2.conductor_id",
      "group",
      "by",
      "t2.conductor_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Show the name of the conductor that has conducted the most number of orchestras.",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "that",
      "has",
      "conducted",
      "the",
      "most",
      "number",
      "of",
      "orchestras",
      "."
    ],
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1.conductor_id",
      "=",
      "t2.conductor_id",
      "group",
      "by",
      "t2.conductor_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What is the name of the conductor who has conducted the most orchestras?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "who",
      "has",
      "conducted",
      "the",
      "most",
      "orchestras",
      "?"
    ],
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1.conductor_id",
      "=",
      "t2.conductor_id",
      "group",
      "by",
      "t2.conductor_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "question_toks": [
      "Please",
      "show",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "that",
      "has",
      "conducted",
      "orchestras",
      "founded",
      "after",
      "2008",
      "."
    ],
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1.conductor_id",
      "=",
      "t2.conductor_id",
      "where",
      "year_of_founded",
      ">",
      "2008"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "who",
      "have",
      "conducted",
      "orchestras",
      "founded",
      "after",
      "the",
      "year",
      "2008",
      "?"
    ],
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1.conductor_id",
      "=",
      "t2.conductor_id",
      "where",
      "year_of_founded",
      ">",
      "2008"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Please show the different record companies and the corresponding number of orchestras.",
    "question_toks": [
      "Please",
      "show",
      "the",
      "different",
      "record",
      "companies",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "orchestras",
      "."
    ],
    "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "record_company",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "How many orchestras does each record company manage?",
    "question_toks": [
      "How",
      "many",
      "orchestras",
      "does",
      "each",
      "record",
      "company",
      "manage",
      "?"
    ],
    "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "record_company",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Please show the record formats of orchestras in ascending order of count.",
    "question_toks": [
      "Please",
      "show",
      "the",
      "record",
      "formats",
      "of",
      "orchestras",
      "in",
      "ascending",
      "order",
      "of",
      "count",
      "."
    ],
    "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "major_record_format",
      "from",
      "orchestra",
      "group",
      "by",
      "major_record_format",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the major record formats of orchestras, sorted by their frequency?",
    "question_toks": [
      "What",
      "are",
      "the",
      "major",
      "record",
      "formats",
      "of",
      "orchestras",
      ",",
      "sorted",
      "by",
      "their",
      "frequency",
      "?"
    ],
    "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "major_record_format",
      "from",
      "orchestra",
      "group",
      "by",
      "major_record_format",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "List the record company shared by the most number of orchestras.",
    "question_toks": [
      "List",
      "the",
      "record",
      "company",
      "shared",
      "by",
      "the",
      "most",
      "number",
      "of",
      "orchestras",
      "."
    ],
    "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What is the record company used by the greatest number of orchestras?",
    "question_toks": [
      "What",
      "is",
      "the",
      "record",
      "company",
      "used",
      "by",
      "the",
      "greatest",
      "number",
      "of",
      "orchestras",
      "?"
    ],
    "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "List the names of orchestras that have no performance.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "orchestras",
      "that",
      "have",
      "no",
      "performance",
      "."
    ],
    "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "orchestra",
      "from",
      "orchestra",
      "where",
      "orchestra_id",
      "not",
      "in",
      "(",
      "select",
      "orchestra_id",
      "from",
      "performance",
      ")"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the orchestras that do not have any performances?",
    "question_toks": [
      "What",
      "are",
      "the",
      "orchestras",
      "that",
      "do",
      "not",
      "have",
      "any",
      "performances",
      "?"
    ],
    "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "orchestra",
      "from",
      "orchestra",
      "where",
      "orchestra_id",
      "not",
      "in",
      "(",
      "select",
      "orchestra_id",
      "from",
      "performance",
      ")"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "question_toks": [
      "Show",
      "the",
      "record",
      "companies",
      "shared",
      "by",
      "orchestras",
      "founded",
      "before",
      "2003",
      "and",
      "after",
      "2003",
      "."
    ],
    "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2003.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            2003.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      "<",
      "2003",
      "intersect",
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      ">",
      "2003"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
    "question_toks": [
      "What",
      "are",
      "the",
      "record",
      "companies",
      "that",
      "are",
      "used",
      "by",
      "both",
      "orchestras",
      "founded",
      "before",
      "2003",
      "and",
      "those",
      "founded",
      "after",
      "2003",
      "?"
    ],
    "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2003.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            2003.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      "<",
      "2003",
      "intersect",
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      ">",
      "2003"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "orchestras",
      "whose",
      "record",
      "format",
      "is",
      "\"",
      "CD",
      "\"",
      "or",
      "\"",
      "DVD",
      "\"",
      "."
    ],
    "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"CD\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"DVD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "where",
      "major_record_format",
      "=",
      "\"CD\"",
      "or",
      "major_record_format",
      "=",
      "\"DVD\""
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Count the number of orchestras that have CD or DVD as their record format.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "orchestras",
      "that",
      "have",
      "CD",
      "or",
      "DVD",
      "as",
      "their",
      "record",
      "format",
      "."
    ],
    "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"CD\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"DVD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "where",
      "major_record_format",
      "=",
      "\"CD\"",
      "or",
      "major_record_format",
      "=",
      "\"DVD\""
    ]
  },
  {
    "db_id": "orchestra",
    "question": "Show the years in which orchestras that have given more than one performance are founded.",
    "question_toks": [
      "Show",
      "the",
      "years",
      "in",
      "which",
      "orchestras",
      "that",
      "have",
      "given",
      "more",
      "than",
      "one",
      "performance",
      "are",
      "founded",
      "."
    ],
    "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "year_of_founded",
      "from",
      "orchestra",
      "as",
      "t1",
      "join",
      "performance",
      "as",
      "t2",
      "on",
      "t1.orchestra_id",
      "=",
      "t2.orchestra_id",
      "group",
      "by",
      "t2.orchestra_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "orchestra",
    "question": "What are years of founding for orchestras that have had more than a single performance?",
    "question_toks": [
      "What",
      "are",
      "years",
      "of",
      "founding",
      "for",
      "orchestras",
      "that",
      "have",
      "had",
      "more",
      "than",
      "a",
      "single",
      "performance",
      "?"
    ],
    "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "year_of_founded",
      "from",
      "orchestra",
      "as",
      "t1",
      "join",
      "performance",
      "as",
      "t2",
      "on",
      "t1.orchestra_id",
      "=",
      "t2.orchestra_id",
      "group",
      "by",
      "t2.orchestra_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "network_1",
    "question": "How many high schoolers are there?",
    "question_toks": [
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM Highschooler",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Count the number of high schoolers.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "high",
      "schoolers",
      "."
    ],
    "query": "SELECT count(*) FROM Highschooler",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the names and grades of each high schooler.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "."
    ],
    "query": "SELECT name ,  grade FROM Highschooler",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "grade",
      "from",
      "highschooler"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the names and grades for each high schooler?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "query": "SELECT name ,  grade FROM Highschooler",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "grade",
      "from",
      "highschooler"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show all the grades of the high schoolers.",
    "question_toks": [
      "Show",
      "all",
      "the",
      "grades",
      "of",
      "the",
      "high",
      "schoolers",
      "."
    ],
    "query": "SELECT grade FROM Highschooler",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "grade",
      "from",
      "highschooler"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What is the grade of each high schooler?",
    "question_toks": [
      "What",
      "is",
      "the",
      "grade",
      "of",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "query": "SELECT grade FROM Highschooler",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "grade",
      "from",
      "highschooler"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What grade is Kyle in?",
    "question_toks": [
      "What",
      "grade",
      "is",
      "Kyle",
      "in",
      "?"
    ],
    "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "grade",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "\"Kyle\""
    ]
  },
  {
    "db_id": "network_1",
    "question": "Return the grade for the high schooler named Kyle.",
    "question_toks": [
      "Return",
      "the",
      "grade",
      "for",
      "the",
      "high",
      "schooler",
      "named",
      "Kyle",
      "."
    ],
    "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "grade",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "\"Kyle\""
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the names of all high schoolers in grade 10.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "all",
      "high",
      "schoolers",
      "in",
      "grade",
      "10",
      "."
    ],
    "query": "SELECT name FROM Highschooler WHERE grade  =  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "10"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the names of all high schoolers in grade 10?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "high",
      "schoolers",
      "in",
      "grade",
      "10",
      "?"
    ],
    "query": "SELECT name FROM Highschooler WHERE grade  =  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "10"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the ID of the high schooler named Kyle.",
    "question_toks": [
      "Show",
      "the",
      "ID",
      "of",
      "the",
      "high",
      "schooler",
      "named",
      "Kyle",
      "."
    ],
    "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "id",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "\"Kyle\""
    ]
  },
  {
    "db_id": "network_1",
    "question": "What is Kyle's id?",
    "question_toks": [
      "What",
      "is",
      "Kyle",
      "'s",
      "i",
      "d",
      "?"
    ],
    "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "id",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "\"Kyle\""
    ]
  },
  {
    "db_id": "network_1",
    "question": "How many high schoolers are there in grade 9 or 10?",
    "question_toks": [
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "there",
      "in",
      "grade",
      "9",
      "or",
      "10",
      "?"
    ],
    "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          9.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "9",
      "or",
      "grade",
      "=",
      "10"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Count the number of high schoolers in grades 9 or 10.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "high",
      "schoolers",
      "in",
      "grades",
      "9",
      "or",
      "10",
      "."
    ],
    "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          9.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "9",
      "or",
      "grade",
      "=",
      "10"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the number of high schoolers for each grade.",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "high",
      "schoolers",
      "for",
      "each",
      "grade",
      "."
    ],
    "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "grade",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "group",
      "by",
      "grade"
    ]
  },
  {
    "db_id": "network_1",
    "question": "How many high schoolers are in each grade?",
    "question_toks": [
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "in",
      "each",
      "grade",
      "?"
    ],
    "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "grade",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "group",
      "by",
      "grade"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Which grade has the most high schoolers?",
    "question_toks": [
      "Which",
      "grade",
      "has",
      "the",
      "most",
      "high",
      "schoolers",
      "?"
    ],
    "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Return the grade that has the greatest number of high schoolers.",
    "question_toks": [
      "Return",
      "the",
      "grade",
      "that",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "high",
      "schoolers",
      "."
    ],
    "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show me all grades that have at least 4 students.",
    "question_toks": [
      "Show",
      "me",
      "all",
      "grades",
      "that",
      "have",
      "at",
      "least",
      "4",
      "students",
      "."
    ],
    "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "4"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Which grades have 4 or more high schoolers?",
    "question_toks": [
      "Which",
      "grades",
      "have",
      "4",
      "or",
      "more",
      "high",
      "schoolers",
      "?"
    ],
    "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "4"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the student IDs and numbers of friends corresponding to each.",
    "question_toks": [
      "Show",
      "the",
      "student",
      "IDs",
      "and",
      "numbers",
      "of",
      "friends",
      "corresponding",
      "to",
      "each",
      "."
    ],
    "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "group",
      "by",
      "student_id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "How many friends does each student have?",
    "question_toks": [
      "How",
      "many",
      "friends",
      "does",
      "each",
      "student",
      "have",
      "?"
    ],
    "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "group",
      "by",
      "student_id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the names of high school students and their corresponding number of friends.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "high",
      "school",
      "students",
      "and",
      "their",
      "corresponding",
      "number",
      "of",
      "friends",
      "."
    ],
    "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the names of the high schoolers and how many friends does each have?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "high",
      "schoolers",
      "and",
      "how",
      "many",
      "friends",
      "does",
      "each",
      "have",
      "?"
    ],
    "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What is the name of the high schooler who has the greatest number of friends?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "high",
      "schooler",
      "who",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "friends",
      "?"
    ],
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Return the name of the high school student with the most friends.",
    "question_toks": [
      "Return",
      "the",
      "name",
      "of",
      "the",
      "high",
      "school",
      "student",
      "with",
      "the",
      "most",
      "friends",
      "."
    ],
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the names of high schoolers who have at least 3 friends.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "at",
      "least",
      "3",
      "friends",
      "."
    ],
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "3"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who have 3 or more friends?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "3",
      "or",
      "more",
      "friends",
      "?"
    ],
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "3"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the names of all of the high schooler Kyle's friends.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "all",
      "of",
      "the",
      "high",
      "schooler",
      "Kyle",
      "'s",
      "friends",
      "."
    ],
    "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t3.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "join",
      "highschooler",
      "as",
      "t3",
      "on",
      "t1.friend_id",
      "=",
      "t3.id",
      "where",
      "t2.name",
      "=",
      "\"Kyle\""
    ]
  },
  {
    "db_id": "network_1",
    "question": "Return the names of friends of the high school student Kyle.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "friends",
      "of",
      "the",
      "high",
      "school",
      "student",
      "Kyle",
      "."
    ],
    "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t3.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "join",
      "highschooler",
      "as",
      "t3",
      "on",
      "t1.friend_id",
      "=",
      "t3.id",
      "where",
      "t2.name",
      "=",
      "\"Kyle\""
    ]
  },
  {
    "db_id": "network_1",
    "question": "How many friends does the high school student Kyle have?",
    "question_toks": [
      "How",
      "many",
      "friends",
      "does",
      "the",
      "high",
      "school",
      "student",
      "Kyle",
      "have",
      "?"
    ],
    "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "where",
      "t2.name",
      "=",
      "\"Kyle\""
    ]
  },
  {
    "db_id": "network_1",
    "question": "Count the number of friends Kyle has.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "friends",
      "Kyle",
      "has",
      "."
    ],
    "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "where",
      "t2.name",
      "=",
      "\"Kyle\""
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show ids of all students who do not have any friends.",
    "question_toks": [
      "Show",
      "ids",
      "of",
      "all",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "."
    ],
    "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "id",
      "from",
      "highschooler",
      "except",
      "select",
      "student_id",
      "from",
      "friend"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the ids of high school students who do not have friends?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "high",
      "school",
      "students",
      "who",
      "do",
      "not",
      "have",
      "friends",
      "?"
    ],
    "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "id",
      "from",
      "highschooler",
      "except",
      "select",
      "student_id",
      "from",
      "friend"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show names of all high school students who do not have any friends.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "all",
      "high",
      "school",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "."
    ],
    "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "highschooler",
      "except",
      "select",
      "t2.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the names of students who have no friends?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "no",
      "friends",
      "?"
    ],
    "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "highschooler",
      "except",
      "select",
      "t2.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "question_toks": [
      "Show",
      "the",
      "ids",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "friends",
      "and",
      "are",
      "also",
      "liked",
      "by",
      "someone",
      "else",
      "."
    ],
    "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "student_id",
      "from",
      "friend",
      "intersect",
      "select",
      "liked_id",
      "from",
      "likes"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the ids of students who both have friends and are liked?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "students",
      "who",
      "both",
      "have",
      "friends",
      "and",
      "are",
      "liked",
      "?"
    ],
    "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "student_id",
      "from",
      "friend",
      "intersect",
      "select",
      "liked_id",
      "from",
      "likes"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "question_toks": [
      "Show",
      "name",
      "of",
      "all",
      "students",
      "who",
      "have",
      "some",
      "friends",
      "and",
      "also",
      "are",
      "liked",
      "by",
      "someone",
      "else",
      "."
    ],
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "intersect",
      "select",
      "t2.name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.liked_id",
      "=",
      "t2.id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "both",
      "have",
      "friends",
      "and",
      "are",
      "liked",
      "?"
    ],
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "intersect",
      "select",
      "t2.name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.liked_id",
      "=",
      "t2.id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Count the number of likes for each student id.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "likes",
      "for",
      "each",
      "student",
      "i",
      "d."
    ],
    "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "group",
      "by",
      "student_id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "How many likes correspond to each student id?",
    "question_toks": [
      "How",
      "many",
      "likes",
      "correspond",
      "to",
      "each",
      "student",
      "i",
      "d",
      "?"
    ],
    "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "group",
      "by",
      "student_id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "likes",
      ",",
      "and",
      "numbers",
      "of",
      "likes",
      "for",
      "each",
      "."
    ],
    "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "likes",
      ",",
      "and",
      "how",
      "many",
      "likes",
      "does",
      "each",
      "have",
      "?"
    ],
    "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What is the name of the high schooler who has the greatest number of likes?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "high",
      "schooler",
      "who",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "likes",
      "?"
    ],
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Give the name of the student with the most likes.",
    "question_toks": [
      "Give",
      "the",
      "name",
      "of",
      "the",
      "student",
      "with",
      "the",
      "most",
      "likes",
      "."
    ],
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the names of students who have at least 2 likes.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "at",
      "least",
      "2",
      "likes",
      "."
    ],
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the names of students who have 2 or more likes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "2",
      "or",
      "more",
      "likes",
      "?"
    ],
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "group",
      "by",
      "t1.student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "a",
      "grade",
      "higher",
      "than",
      "5",
      "and",
      "have",
      "at",
      "least",
      "2",
      "friends",
      "."
    ],
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "where",
      "t2.grade",
      ">",
      "5",
      "group",
      "by",
      "t1.student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "a",
      "grade",
      "of",
      "over",
      "5",
      "and",
      "have",
      "2",
      "or",
      "more",
      "friends",
      "?"
    ],
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "where",
      "t2.grade",
      ">",
      "5",
      "group",
      "by",
      "t1.student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "network_1",
    "question": "How many likes does Kyle have?",
    "question_toks": [
      "How",
      "many",
      "likes",
      "does",
      "Kyle",
      "have",
      "?"
    ],
    "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "where",
      "t2.name",
      "=",
      "\"Kyle\""
    ]
  },
  {
    "db_id": "network_1",
    "question": "Return the number of likes that the high schooler named Kyle has.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "likes",
      "that",
      "the",
      "high",
      "schooler",
      "named",
      "Kyle",
      "has",
      "."
    ],
    "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      "where",
      "t2.name",
      "=",
      "\"Kyle\""
    ]
  },
  {
    "db_id": "network_1",
    "question": "Find the average grade of all students who have some friends.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "grade",
      "of",
      "all",
      "students",
      "who",
      "have",
      "some",
      "friends",
      "."
    ],
    "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "in",
      "(",
      "select",
      "t1.student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      ")"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What is the average grade of students who have friends?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "grade",
      "of",
      "students",
      "who",
      "have",
      "friends",
      "?"
    ],
    "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "in",
      "(",
      "select",
      "t1.student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      ")"
    ]
  },
  {
    "db_id": "network_1",
    "question": "Find the minimum grade of students who have no friends.",
    "question_toks": [
      "Find",
      "the",
      "minimum",
      "grade",
      "of",
      "students",
      "who",
      "have",
      "no",
      "friends",
      "."
    ],
    "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "min",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "t1.student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      ")"
    ]
  },
  {
    "db_id": "network_1",
    "question": "What is the lowest grade of students who do not have any friends?",
    "question_toks": [
      "What",
      "is",
      "the",
      "lowest",
      "grade",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "?"
    ],
    "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "min",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "t1.student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1.student_id",
      "=",
      "t2.id",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which states have both owners and professionals living there?",
    "question_toks": [
      "Which",
      "states",
      "have",
      "both",
      "owners",
      "and",
      "professionals",
      "living",
      "there",
      "?"
    ],
    "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  38,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "state",
      "from",
      "owners",
      "intersect",
      "select",
      "state",
      "from",
      "professionals"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the states where both owners and professionals live.",
    "question_toks": [
      "Find",
      "the",
      "states",
      "where",
      "both",
      "owners",
      "and",
      "professionals",
      "live",
      "."
    ],
    "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  38,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "state",
      "from",
      "owners",
      "intersect",
      "select",
      "state",
      "from",
      "professionals"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the average age of the dogs who have gone through any treatments?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "the",
      "dogs",
      "who",
      "have",
      "gone",
      "through",
      "any",
      "treatments",
      "?"
    ],
    "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the average age of the dogs who went through treatments.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "age",
      "of",
      "the",
      "dogs",
      "who",
      "went",
      "through",
      "treatments",
      "."
    ],
    "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "question_toks": [
      "Which",
      "professionals",
      "live",
      "in",
      "the",
      "state",
      "of",
      "Indiana",
      "or",
      "have",
      "done",
      "treatment",
      "on",
      "more",
      "than",
      "2",
      "treatments",
      "?",
      "List",
      "his",
      "or",
      "her",
      "i",
      "d",
      ",",
      "last",
      "name",
      "and",
      "cell",
      "phone",
      "."
    ],
    "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Indiana\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  40,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  43,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [
          [
            0,
            33,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            2.0,
            null
          ]
        ],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "query_toks": [
      "select",
      "professional_id",
      ",",
      "last_name",
      ",",
      "cell_number",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "\"Indiana\"",
      "union",
      "select",
      "t1.professional_id",
      ",",
      "t1.last_name",
      ",",
      "t1.cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id",
      "group",
      "by",
      "t1.professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
    "question_toks": [
      "Find",
      "the",
      "i",
      "d",
      ",",
      "last",
      "name",
      "and",
      "cell",
      "phone",
      "of",
      "the",
      "professionals",
      "who",
      "live",
      "in",
      "the",
      "state",
      "of",
      "Indiana",
      "or",
      "have",
      "performed",
      "more",
      "than",
      "two",
      "treatments",
      "."
    ],
    "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Indiana\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  40,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  43,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [
          [
            0,
            33,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            2.0,
            null
          ]
        ],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "query_toks": [
      "select",
      "professional_id",
      ",",
      "last_name",
      ",",
      "cell_number",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "\"Indiana\"",
      "union",
      "select",
      "t1.professional_id",
      ",",
      "t1.last_name",
      ",",
      "t1.cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id",
      "group",
      "by",
      "t1.professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.",
    "question_toks": [
      "Which",
      "dogs",
      "have",
      "not",
      "cost",
      "their",
      "owner",
      "more",
      "than",
      "1000",
      "for",
      "treatment",
      "?",
      "List",
      "the",
      "dog",
      "names",
      "."
    ],
    "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [
              [
                0,
                45,
                false
              ]
            ],
            "having": [
              [
                false,
                3,
                [
                  0,
                  [
                    4,
                    49,
                    false
                  ],
                  null
                ],
                1000.0,
                null
              ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      "group",
      "by",
      "dog_id",
      "having",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      ">",
      "1000",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "dogs",
      "for",
      "which",
      "the",
      "owner",
      "spent",
      "more",
      "than",
      "1000",
      "for",
      "treatment",
      "?"
    ],
    "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [
              [
                0,
                45,
                false
              ]
            ],
            "having": [
              [
                false,
                3,
                [
                  0,
                  [
                    4,
                    49,
                    false
                  ],
                  null
                ],
                1000.0,
                null
              ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      "group",
      "by",
      "dog_id",
      "having",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      ">",
      "1000",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which first names are used for professionals or owners but are not used as dog names?",
    "question_toks": [
      "Which",
      "first",
      "names",
      "are",
      "used",
      "for",
      "professionals",
      "or",
      "owners",
      "but",
      "are",
      "not",
      "used",
      "as",
      "dog",
      "names",
      "?"
    ],
    "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              4
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": {
          "from": {
            "table_units": [
              [
                "table_unit",
                5
              ]
            ],
            "conds": []
          },
          "select": [
            false,
            [
              [
                0,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ]
              ]
            ]
          ],
          "where": [],
          "groupBy": [],
          "having": [],
          "orderBy": [],
          "limit": null,
          "intersect": null,
          "union": null,
          "except": null
        }
      },
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      "from",
      "professionals",
      "union",
      "select",
      "first_name",
      "from",
      "owners",
      "except",
      "select",
      "name",
      "from",
      "dogs"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "names",
      "that",
      "are",
      "used",
      "for",
      "professionals",
      "or",
      "owners",
      "but",
      "are",
      "not",
      "used",
      "as",
      "dog",
      "names",
      "."
    ],
    "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              4
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": {
          "from": {
            "table_units": [
              [
                "table_unit",
                5
              ]
            ],
            "conds": []
          },
          "select": [
            false,
            [
              [
                0,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ]
              ]
            ]
          ],
          "where": [],
          "groupBy": [],
          "having": [],
          "orderBy": [],
          "limit": null,
          "intersect": null,
          "union": null,
          "except": null
        }
      },
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      "from",
      "professionals",
      "union",
      "select",
      "first_name",
      "from",
      "owners",
      "except",
      "select",
      "name",
      "from",
      "dogs"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
    "question_toks": [
      "Which",
      "professional",
      "did",
      "not",
      "operate",
      "any",
      "treatment",
      "on",
      "dogs",
      "?",
      "List",
      "the",
      "professional",
      "'s",
      "i",
      "d",
      ",",
      "role",
      "and",
      "email",
      "."
    ],
    "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  41,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "from",
      "professionals",
      "except",
      "select",
      "t1.professional_id",
      ",",
      "t1.role_code",
      ",",
      "t1.email_address",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "question_toks": [
      "Give",
      "me",
      "the",
      "i",
      "d",
      ",",
      "role",
      "and",
      "email",
      "of",
      "the",
      "professionals",
      "who",
      "did",
      "not",
      "perform",
      "any",
      "treatment",
      "on",
      "dogs",
      "."
    ],
    "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  41,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "query_toks": [
      "select",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "from",
      "professionals",
      "except",
      "select",
      "t1.professional_id",
      ",",
      "t1.role_code",
      ",",
      "t1.email_address",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
    "question_toks": [
      "Which",
      "owner",
      "owns",
      "the",
      "most",
      "dogs",
      "?",
      "List",
      "the",
      "owner",
      "i",
      "d",
      ",",
      "first",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.owner_id",
      ",",
      "t2.first_name",
      ",",
      "t2.last_name",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "owners",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id",
      "group",
      "by",
      "t1.owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
    "question_toks": [
      "Return",
      "the",
      "owner",
      "i",
      "d",
      ",",
      "first",
      "name",
      "and",
      "last",
      "name",
      "of",
      "the",
      "owner",
      "who",
      "has",
      "the",
      "most",
      "dogs",
      "."
    ],
    "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.owner_id",
      ",",
      "t2.first_name",
      ",",
      "t2.last_name",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "owners",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id",
      "group",
      "by",
      "t1.owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
    "question_toks": [
      "Which",
      "professionals",
      "have",
      "done",
      "at",
      "least",
      "two",
      "treatments",
      "?",
      "List",
      "the",
      "professional",
      "'s",
      "i",
      "d",
      ",",
      "role",
      ",",
      "and",
      "first",
      "name",
      "."
    ],
    "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.professional_id",
      ",",
      "t1.role_code",
      ",",
      "t1.first_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id",
      "group",
      "by",
      "t1.professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
    "question_toks": [
      "What",
      "are",
      "the",
      "i",
      "d",
      ",",
      "role",
      ",",
      "and",
      "first",
      "name",
      "of",
      "the",
      "professionals",
      "who",
      "have",
      "performed",
      "two",
      "or",
      "more",
      "treatments",
      "?"
    ],
    "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.professional_id",
      ",",
      "t1.role_code",
      ",",
      "t1.first_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id",
      "group",
      "by",
      "t1.professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the name of the breed with the most dogs?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "breed",
      "with",
      "the",
      "most",
      "dogs",
      "?"
    ],
    "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.breed_name",
      "from",
      "breeds",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.breed_code",
      "=",
      "t2.breed_code",
      "group",
      "by",
      "t1.breed_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which breed do the most dogs have? Give me the breed name.",
    "question_toks": [
      "Which",
      "breed",
      "do",
      "the",
      "most",
      "dogs",
      "have",
      "?",
      "Give",
      "me",
      "the",
      "breed",
      "name",
      "."
    ],
    "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.breed_name",
      "from",
      "breeds",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.breed_code",
      "=",
      "t2.breed_code",
      "group",
      "by",
      "t1.breed_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "question_toks": [
      "Which",
      "owner",
      "has",
      "paid",
      "for",
      "the",
      "most",
      "treatments",
      "on",
      "his",
      "or",
      "her",
      "dogs",
      "?",
      "List",
      "the",
      "owner",
      "i",
      "d",
      "and",
      "last",
      "name",
      "."
    ],
    "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.owner_id",
      ",",
      "t1.last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2.dog_id",
      "=",
      "t3.dog_id",
      "group",
      "by",
      "t1.owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "owner",
      "i",
      "d",
      "and",
      "last",
      "name",
      "of",
      "the",
      "owner",
      "who",
      "spent",
      "the",
      "most",
      "on",
      "treatments",
      "of",
      "his",
      "or",
      "her",
      "dogs",
      "."
    ],
    "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.owner_id",
      ",",
      "t1.last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2.dog_id",
      "=",
      "t3.dog_id",
      "group",
      "by",
      "t1.owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the description of the treatment type that costs the least money in total?",
    "question_toks": [
      "What",
      "is",
      "the",
      "description",
      "of",
      "the",
      "treatment",
      "type",
      "that",
      "costs",
      "the",
      "least",
      "money",
      "in",
      "total",
      "?"
    ],
    "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.treatment_type_description",
      "from",
      "treatment_types",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.treatment_type_code",
      "=",
      "t2.treatment_type_code",
      "group",
      "by",
      "t1.treatment_type_code",
      "order",
      "by",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Give me the description of the treatment type whose total cost is the lowest.",
    "question_toks": [
      "Give",
      "me",
      "the",
      "description",
      "of",
      "the",
      "treatment",
      "type",
      "whose",
      "total",
      "cost",
      "is",
      "the",
      "lowest",
      "."
    ],
    "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.treatment_type_description",
      "from",
      "treatment_types",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.treatment_type_code",
      "=",
      "t2.treatment_type_code",
      "group",
      "by",
      "t1.treatment_type_code",
      "order",
      "by",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      "asc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "question_toks": [
      "Which",
      "owner",
      "has",
      "paid",
      "the",
      "largest",
      "amount",
      "of",
      "money",
      "in",
      "total",
      "for",
      "their",
      "dogs",
      "?",
      "Show",
      "the",
      "owner",
      "i",
      "d",
      "and",
      "zip",
      "code",
      "."
    ],
    "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.owner_id",
      ",",
      "t1.zip_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2.dog_id",
      "=",
      "t3.dog_id",
      "group",
      "by",
      "t1.owner_id",
      "order",
      "by",
      "sum",
      "(",
      "t3.cost_of_treatment",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "question_toks": [
      "Find",
      "the",
      "owner",
      "i",
      "d",
      "and",
      "zip",
      "code",
      "of",
      "the",
      "owner",
      "who",
      "spent",
      "the",
      "most",
      "money",
      "in",
      "total",
      "for",
      "his",
      "or",
      "her",
      "dogs",
      "."
    ],
    "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.owner_id",
      ",",
      "t1.zip_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2.dog_id",
      "=",
      "t3.dog_id",
      "group",
      "by",
      "t1.owner_id",
      "order",
      "by",
      "sum",
      "(",
      "t3.cost_of_treatment",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
    "question_toks": [
      "Which",
      "professionals",
      "have",
      "done",
      "at",
      "least",
      "two",
      "types",
      "of",
      "treatments",
      "?",
      "List",
      "the",
      "professional",
      "i",
      "d",
      "and",
      "cell",
      "phone",
      "."
    ],
    "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.professional_id",
      ",",
      "t1.cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id",
      "group",
      "by",
      "t1.professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
    "question_toks": [
      "Find",
      "the",
      "i",
      "d",
      "and",
      "cell",
      "phone",
      "of",
      "the",
      "professionals",
      "who",
      "operate",
      "two",
      "or",
      "more",
      "types",
      "of",
      "treatments",
      "."
    ],
    "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.professional_id",
      ",",
      "t1.cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id",
      "group",
      "by",
      "t1.professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "name",
      "and",
      "last",
      "name",
      "of",
      "the",
      "professionals",
      "who",
      "have",
      "done",
      "treatment",
      "with",
      "cost",
      "below",
      "average",
      "?"
    ],
    "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              49,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      49,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.first_name",
      ",",
      "t1.last_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "where",
      "cost_of_treatment",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "cost_of_treatment",
      ")",
      "from",
      "treatments",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "question_toks": [
      "Which",
      "professionals",
      "have",
      "operated",
      "a",
      "treatment",
      "that",
      "costs",
      "less",
      "than",
      "the",
      "average",
      "?",
      "Give",
      "me",
      "theor",
      "first",
      "names",
      "and",
      "last",
      "names",
      "."
    ],
    "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              49,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      49,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.first_name",
      ",",
      "t1.last_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "where",
      "cost_of_treatment",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "cost_of_treatment",
      ")",
      "from",
      "treatments",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List the date of each treatment, together with the first name of the professional who operated it.",
    "question_toks": [
      "List",
      "the",
      "date",
      "of",
      "each",
      "treatment",
      ",",
      "together",
      "with",
      "the",
      "first",
      "name",
      "of",
      "the",
      "professional",
      "who",
      "operated",
      "it",
      "."
    ],
    "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            6
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.date_of_treatment",
      ",",
      "t2.first_name",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "professionals",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the date and the operating professional's first name of each treatment?",
    "question_toks": [
      "What",
      "are",
      "the",
      "date",
      "and",
      "the",
      "operating",
      "professional",
      "'s",
      "first",
      "name",
      "of",
      "each",
      "treatment",
      "?"
    ],
    "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            6
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.date_of_treatment",
      ",",
      "t2.first_name",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "professionals",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List the cost of each treatment and the corresponding treatment type description.",
    "question_toks": [
      "List",
      "the",
      "cost",
      "of",
      "each",
      "treatment",
      "and",
      "the",
      "corresponding",
      "treatment",
      "type",
      "description",
      "."
    ],
    "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.cost_of_treatment",
      ",",
      "t2.treatment_type_description",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "treatment_types",
      "as",
      "t2",
      "on",
      "t1.treatment_type_code",
      "=",
      "t2.treatment_type_code"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the cost and treatment type description of each treatment?",
    "question_toks": [
      "What",
      "are",
      "the",
      "cost",
      "and",
      "treatment",
      "type",
      "description",
      "of",
      "each",
      "treatment",
      "?"
    ],
    "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.cost_of_treatment",
      ",",
      "t2.treatment_type_description",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "treatment_types",
      "as",
      "t2",
      "on",
      "t1.treatment_type_code",
      "=",
      "t2.treatment_type_code"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List each owner's first name, last name, and the size of his for her dog.",
    "question_toks": [
      "List",
      "each",
      "owner",
      "'s",
      "first",
      "name",
      ",",
      "last",
      "name",
      ",",
      "and",
      "the",
      "size",
      "of",
      "his",
      "for",
      "her",
      "dog",
      "."
    ],
    "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      ",",
      "t1.last_name",
      ",",
      "t2.size_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are each owner's first name, last name, and the size of their dog?",
    "question_toks": [
      "What",
      "are",
      "each",
      "owner",
      "'s",
      "first",
      "name",
      ",",
      "last",
      "name",
      ",",
      "and",
      "the",
      "size",
      "of",
      "their",
      "dog",
      "?"
    ],
    "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      ",",
      "t1.last_name",
      ",",
      "t2.size_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List pairs of the owner's first name and the dogs's name.",
    "question_toks": [
      "List",
      "pairs",
      "of",
      "the",
      "owner",
      "'s",
      "first",
      "name",
      "and",
      "the",
      "dogs",
      "'s",
      "name",
      "."
    ],
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      ",",
      "t2.name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are each owner's first name and their dogs's name?",
    "question_toks": [
      "What",
      "are",
      "each",
      "owner",
      "'s",
      "first",
      "name",
      "and",
      "their",
      "dogs",
      "'s",
      "name",
      "?"
    ],
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      ",",
      "t2.name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "the",
      "dogs",
      "of",
      "the",
      "rarest",
      "breed",
      "and",
      "the",
      "treatment",
      "dates",
      "of",
      "them",
      "."
    ],
    "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [
              [
                0,
                23,
                false
              ]
            ],
            "having": [],
            "orderBy": [
              "asc",
              [
                [
                  0,
                  [
                    3,
                    0,
                    false
                  ],
                  null
                ]
              ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      ",",
      "t2.date_of_treatment",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.dog_id",
      "=",
      "t2.dog_id",
      "where",
      "t1.breed_code",
      "=",
      "(",
      "select",
      "breed_code",
      "from",
      "dogs",
      "group",
      "by",
      "breed_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "1",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
    "question_toks": [
      "Which",
      "dogs",
      "are",
      "of",
      "the",
      "rarest",
      "breed",
      "?",
      "Show",
      "their",
      "names",
      "and",
      "treatment",
      "dates",
      "."
    ],
    "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [
              [
                0,
                23,
                false
              ]
            ],
            "having": [],
            "orderBy": [
              "asc",
              [
                [
                  0,
                  [
                    3,
                    0,
                    false
                  ],
                  null
                ]
              ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      ",",
      "t2.date_of_treatment",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.dog_id",
      "=",
      "t2.dog_id",
      "where",
      "t1.breed_code",
      "=",
      "(",
      "select",
      "breed_code",
      "from",
      "dogs",
      "group",
      "by",
      "breed_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "1",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "question_toks": [
      "Which",
      "dogs",
      "are",
      "owned",
      "by",
      "someone",
      "who",
      "lives",
      "in",
      "Virginia",
      "?",
      "List",
      "the",
      "owner",
      "'s",
      "first",
      "name",
      "and",
      "the",
      "dog",
      "'s",
      "name",
      "."
    ],
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"Virginia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      ",",
      "t2.name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id",
      "where",
      "t1.state",
      "=",
      "\"Virginia\""
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "names",
      "of",
      "owners",
      "living",
      "in",
      "Virginia",
      "and",
      "the",
      "names",
      "of",
      "dogs",
      "they",
      "own",
      "."
    ],
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"Virginia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.first_name",
      ",",
      "t2.name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id",
      "where",
      "t1.state",
      "=",
      "\"Virginia\""
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "question_toks": [
      "What",
      "are",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "the",
      "dogs",
      "who",
      "have",
      "gone",
      "through",
      "a",
      "treatment",
      "?"
    ],
    "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.date_arrived",
      ",",
      "t1.date_departed",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.dog_id",
      "=",
      "t2.dog_id"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
    "question_toks": [
      "Find",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "the",
      "dogs",
      "that",
      "received",
      "a",
      "treatment",
      "."
    ],
    "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.date_arrived",
      ",",
      "t1.date_departed",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.dog_id",
      "=",
      "t2.dog_id"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List the last name of the owner owning the youngest dog.",
    "question_toks": [
      "List",
      "the",
      "last",
      "name",
      "of",
      "the",
      "owner",
      "owning",
      "the",
      "youngest",
      "dog",
      "."
    ],
    "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id",
      "where",
      "t2.age",
      "=",
      "(",
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Who owns the youngest dog? Give me his or her last name.",
    "question_toks": [
      "Who",
      "owns",
      "the",
      "youngest",
      "dog",
      "?",
      "Give",
      "me",
      "his",
      "or",
      "her",
      "last",
      "name",
      "."
    ],
    "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1.owner_id",
      "=",
      "t2.owner_id",
      "where",
      "t2.age",
      "=",
      "(",
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "question_toks": [
      "List",
      "the",
      "emails",
      "of",
      "the",
      "professionals",
      "who",
      "live",
      "in",
      "the",
      "state",
      "of",
      "Hawaii",
      "or",
      "the",
      "state",
      "of",
      "Wisconsin",
      "."
    ],
    "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Hawaii\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Wisconsin\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "email_address",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "\"Hawaii\"",
      "or",
      "state",
      "=",
      "\"Wisconsin\""
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
    "question_toks": [
      "What",
      "are",
      "the",
      "emails",
      "of",
      "the",
      "professionals",
      "living",
      "in",
      "either",
      "the",
      "state",
      "of",
      "Hawaii",
      "or",
      "the",
      "state",
      "of",
      "Wisconsin",
      "?"
    ],
    "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Hawaii\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Wisconsin\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "email_address",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "\"Hawaii\"",
      "or",
      "state",
      "=",
      "\"Wisconsin\""
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the arriving date and the departing date of all the dogs?",
    "question_toks": [
      "What",
      "are",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "all",
      "the",
      "dogs",
      "?"
    ],
    "query": "SELECT date_arrived ,  date_departed FROM Dogs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "date_arrived",
      ",",
      "date_departed",
      "from",
      "dogs"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List the arrival date and the departure date for all the dogs.",
    "question_toks": [
      "List",
      "the",
      "arrival",
      "date",
      "and",
      "the",
      "departure",
      "date",
      "for",
      "all",
      "the",
      "dogs",
      "."
    ],
    "query": "SELECT date_arrived ,  date_departed FROM Dogs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "date_arrived",
      ",",
      "date_departed",
      "from",
      "dogs"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "How many dogs went through any treatments?",
    "question_toks": [
      "How",
      "many",
      "dogs",
      "went",
      "through",
      "any",
      "treatments",
      "?"
    ],
    "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                45,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "dog_id",
      ")",
      "from",
      "treatments"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Count the number of dogs that went through a treatment.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "dogs",
      "that",
      "went",
      "through",
      "a",
      "treatment",
      "."
    ],
    "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                45,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "dog_id",
      ")",
      "from",
      "treatments"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "How many professionals have performed any treatment to dogs?",
    "question_toks": [
      "How",
      "many",
      "professionals",
      "have",
      "performed",
      "any",
      "treatment",
      "to",
      "dogs",
      "?"
    ],
    "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                46,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "professional_id",
      ")",
      "from",
      "treatments"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the number of professionals who have ever treated dogs.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "professionals",
      "who",
      "have",
      "ever",
      "treated",
      "dogs",
      "."
    ],
    "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                46,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "distinct",
      "professional_id",
      ")",
      "from",
      "treatments"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
    "question_toks": [
      "Which",
      "professionals",
      "live",
      "in",
      "a",
      "city",
      "containing",
      "the",
      "substring",
      "'",
      "West",
      "'",
      "?",
      "List",
      "his",
      "or",
      "her",
      "role",
      ",",
      "street",
      ",",
      "city",
      "and",
      "state",
      "."
    ],
    "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"%West%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "role_code",
      ",",
      "street",
      ",",
      "city",
      ",",
      "state",
      "from",
      "professionals",
      "where",
      "city",
      "like",
      "\"%West%\""
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
    "question_toks": [
      "Find",
      "the",
      "role",
      ",",
      "street",
      ",",
      "city",
      "and",
      "state",
      "of",
      "the",
      "professionals",
      "living",
      "in",
      "a",
      "city",
      "that",
      "contains",
      "the",
      "substring",
      "'",
      "West",
      "'",
      "."
    ],
    "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"%West%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "role_code",
      ",",
      "street",
      ",",
      "city",
      ",",
      "state",
      "from",
      "professionals",
      "where",
      "city",
      "like",
      "\"%West%\""
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "question_toks": [
      "Which",
      "owners",
      "live",
      "in",
      "the",
      "state",
      "whose",
      "name",
      "contains",
      "the",
      "substring",
      "'",
      "North",
      "'",
      "?",
      "List",
      "his",
      "first",
      "name",
      ",",
      "last",
      "name",
      "and",
      "email",
      "."
    ],
    "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%North%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "last_name",
      ",",
      "email_address",
      "from",
      "owners",
      "where",
      "state",
      "like",
      "\"%North%\""
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "question_toks": [
      "Return",
      "the",
      "first",
      "name",
      ",",
      "last",
      "name",
      "and",
      "email",
      "of",
      "the",
      "owners",
      "living",
      "in",
      "a",
      "state",
      "whose",
      "name",
      "contains",
      "the",
      "substring",
      "'",
      "North",
      "'",
      "."
    ],
    "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%North%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "first_name",
      ",",
      "last_name",
      ",",
      "email_address",
      "from",
      "owners",
      "where",
      "state",
      "like",
      "\"%North%\""
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "How many dogs have an age below the average?",
    "question_toks": [
      "How",
      "many",
      "dogs",
      "have",
      "an",
      "age",
      "below",
      "the",
      "average",
      "?"
    ],
    "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "age",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Count the number of dogs of an age below the average.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "dogs",
      "of",
      "an",
      "age",
      "below",
      "the",
      "average",
      "."
    ],
    "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "age",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "How much does the most recent treatment cost?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "most",
      "recent",
      "treatment",
      "cost",
      "?"
    ],
    "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              48,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "cost_of_treatment",
      "from",
      "treatments",
      "order",
      "by",
      "date_of_treatment",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Show me the cost of the most recently performed treatment.",
    "question_toks": [
      "Show",
      "me",
      "the",
      "cost",
      "of",
      "the",
      "most",
      "recently",
      "performed",
      "treatment",
      "."
    ],
    "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              48,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "cost_of_treatment",
      "from",
      "treatments",
      "order",
      "by",
      "date_of_treatment",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "How many dogs have not gone through any treatment?",
    "question_toks": [
      "How",
      "many",
      "dogs",
      "have",
      "not",
      "gone",
      "through",
      "any",
      "treatment",
      "?"
    ],
    "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Tell me the number of dogs that have received any treatment.",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "number",
      "of",
      "dogs",
      "that",
      "have",
      "received",
      "any",
      "treatment",
      "."
    ],
    "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "How many owners temporarily do not have any dogs?",
    "question_toks": [
      "How",
      "many",
      "owners",
      "temporarily",
      "do",
      "not",
      "have",
      "any",
      "dogs",
      "?"
    ],
    "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "owners",
      "where",
      "owner_id",
      "not",
      "in",
      "(",
      "select",
      "owner_id",
      "from",
      "dogs",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the number of owners who do not own any dogs at this moment.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "owners",
      "who",
      "do",
      "not",
      "own",
      "any",
      "dogs",
      "at",
      "this",
      "moment",
      "."
    ],
    "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "owners",
      "where",
      "owner_id",
      "not",
      "in",
      "(",
      "select",
      "owner_id",
      "from",
      "dogs",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "How many professionals did not operate any treatment on dogs?",
    "question_toks": [
      "How",
      "many",
      "professionals",
      "did",
      "not",
      "operate",
      "any",
      "treatment",
      "on",
      "dogs",
      "?"
    ],
    "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "professionals",
      "where",
      "professional_id",
      "not",
      "in",
      "(",
      "select",
      "professional_id",
      "from",
      "treatments",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the number of professionals who have not treated any dogs.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "professionals",
      "who",
      "have",
      "not",
      "treated",
      "any",
      "dogs",
      "."
    ],
    "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "professionals",
      "where",
      "professional_id",
      "not",
      "in",
      "(",
      "select",
      "professional_id",
      "from",
      "treatments",
      ")"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
    "question_toks": [
      "List",
      "the",
      "dog",
      "name",
      ",",
      "age",
      "and",
      "weight",
      "of",
      "the",
      "dogs",
      "who",
      "have",
      "been",
      "abandoned",
      "?",
      "1",
      "stands",
      "for",
      "yes",
      ",",
      "and",
      "0",
      "stands",
      "for",
      "no",
      "."
    ],
    "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "from",
      "dogs",
      "where",
      "abandoned_yn",
      "=",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "question_toks": [
      "What",
      "are",
      "the",
      "dog",
      "name",
      ",",
      "age",
      "and",
      "weight",
      "of",
      "the",
      "dogs",
      "that",
      "were",
      "abandoned",
      "?",
      "Note",
      "that",
      "1",
      "stands",
      "for",
      "yes",
      ",",
      "and",
      "0",
      "stands",
      "for",
      "no",
      "in",
      "the",
      "tables",
      "."
    ],
    "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "from",
      "dogs",
      "where",
      "abandoned_yn",
      "=",
      "1"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the average age of all the dogs?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "all",
      "the",
      "dogs",
      "?"
    ],
    "query": "SELECT avg(age) FROM Dogs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Compute the average age of all the dogs.",
    "question_toks": [
      "Compute",
      "the",
      "average",
      "age",
      "of",
      "all",
      "the",
      "dogs",
      "."
    ],
    "query": "SELECT avg(age) FROM Dogs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the age of the oldest dog?",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "of",
      "the",
      "oldest",
      "dog",
      "?"
    ],
    "query": "SELECT max(age) FROM Dogs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Tell me the age of the oldest dog.",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "age",
      "of",
      "the",
      "oldest",
      "dog",
      "."
    ],
    "query": "SELECT max(age) FROM Dogs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "How much does each charge type costs? List both charge type and amount.",
    "question_toks": [
      "How",
      "much",
      "does",
      "each",
      "charge",
      "type",
      "costs",
      "?",
      "List",
      "both",
      "charge",
      "type",
      "and",
      "amount",
      "."
    ],
    "query": "SELECT charge_type ,  charge_amount FROM Charges",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "charge_type",
      ",",
      "charge_amount",
      "from",
      "charges"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List each charge type and its amount.",
    "question_toks": [
      "List",
      "each",
      "charge",
      "type",
      "and",
      "its",
      "amount",
      "."
    ],
    "query": "SELECT charge_type ,  charge_amount FROM Charges",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "charge_type",
      ",",
      "charge_amount",
      "from",
      "charges"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "How much does the most expensive charge type costs?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "most",
      "expensive",
      "charge",
      "type",
      "costs",
      "?"
    ],
    "query": "SELECT max(charge_amount) FROM Charges",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "charge_amount",
      ")",
      "from",
      "charges"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the charge amount of the most expensive charge type?",
    "question_toks": [
      "What",
      "is",
      "the",
      "charge",
      "amount",
      "of",
      "the",
      "most",
      "expensive",
      "charge",
      "type",
      "?"
    ],
    "query": "SELECT max(charge_amount) FROM Charges",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "max",
      "(",
      "charge_amount",
      ")",
      "from",
      "charges"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List the email, cell phone and home phone of all the professionals.",
    "question_toks": [
      "List",
      "the",
      "email",
      ",",
      "cell",
      "phone",
      "and",
      "home",
      "phone",
      "of",
      "all",
      "the",
      "professionals",
      "."
    ],
    "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "from",
      "professionals"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the email, cell phone and home phone of each professional?",
    "question_toks": [
      "What",
      "are",
      "the",
      "email",
      ",",
      "cell",
      "phone",
      "and",
      "home",
      "phone",
      "of",
      "each",
      "professional",
      "?"
    ],
    "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "from",
      "professionals"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are all the possible breed type and size type combinations?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "possible",
      "breed",
      "type",
      "and",
      "size",
      "type",
      "combinations",
      "?"
    ],
    "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "breed_code",
      ",",
      "size_code",
      "from",
      "dogs"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the distinct breed type and size type combinations for dogs.",
    "question_toks": [
      "Find",
      "the",
      "distinct",
      "breed",
      "type",
      "and",
      "size",
      "type",
      "combinations",
      "for",
      "dogs",
      "."
    ],
    "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "breed_code",
      ",",
      "size_code",
      "from",
      "dogs"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "List the first name of all the professionals along with the description of the treatment they have done.",
    "question_toks": [
      "List",
      "the",
      "first",
      "name",
      "of",
      "all",
      "the",
      "professionals",
      "along",
      "with",
      "the",
      "description",
      "of",
      "the",
      "treatment",
      "they",
      "have",
      "done",
      "."
    ],
    "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.first_name",
      ",",
      "t3.treatment_type_description",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id",
      "join",
      "treatment_types",
      "as",
      "t3",
      "on",
      "t2.treatment_type_code",
      "=",
      "t3.treatment_type_code"
    ]
  },
  {
    "db_id": "dog_kennels",
    "question": "What are each professional's first name and description of the treatment they have performed?",
    "question_toks": [
      "What",
      "are",
      "each",
      "professional",
      "'s",
      "first",
      "name",
      "and",
      "description",
      "of",
      "the",
      "treatment",
      "they",
      "have",
      "performed",
      "?"
    ],
    "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.first_name",
      ",",
      "t3.treatment_type_description",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1.professional_id",
      "=",
      "t2.professional_id",
      "join",
      "treatment_types",
      "as",
      "t3",
      "on",
      "t2.treatment_type_code",
      "=",
      "t3.treatment_type_code"
    ]
  },
  {
    "db_id": "singer",
    "question": "How many singers are there?",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT count(*) FROM singer",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ]
  },
  {
    "db_id": "singer",
    "question": "What is the count of singers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "count",
      "of",
      "singers",
      "?"
    ],
    "query": "SELECT count(*) FROM singer",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ]
  },
  {
    "db_id": "singer",
    "question": "List the name of singers in ascending order of net worth.",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "singers",
      "in",
      "ascending",
      "order",
      "of",
      "net",
      "worth",
      "."
    ],
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "asc"
    ]
  },
  {
    "db_id": "singer",
    "question": "What are the names of singers ordered by ascending net worth?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "singers",
      "ordered",
      "by",
      "ascending",
      "net",
      "worth",
      "?"
    ],
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "asc"
    ]
  },
  {
    "db_id": "singer",
    "question": "What are the birth year and citizenship of singers?",
    "question_toks": [
      "What",
      "are",
      "the",
      "birth",
      "year",
      "and",
      "citizenship",
      "of",
      "singers",
      "?"
    ],
    "query": "SELECT Birth_Year ,  Citizenship FROM singer",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "birth_year",
      ",",
      "citizenship",
      "from",
      "singer"
    ]
  },
  {
    "db_id": "singer",
    "question": "What are the birth years and citizenships of the singers?",
    "question_toks": [
      "What",
      "are",
      "the",
      "birth",
      "years",
      "and",
      "citizenships",
      "of",
      "the",
      "singers",
      "?"
    ],
    "query": "SELECT Birth_Year ,  Citizenship FROM singer",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "birth_year",
      ",",
      "citizenship",
      "from",
      "singer"
    ]
  },
  {
    "db_id": "singer",
    "question": "List the name of singers whose citizenship is not \"France\".",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "singers",
      "whose",
      "citizenship",
      "is",
      "not",
      "\"",
      "France",
      "\"",
      "."
    ],
    "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "citizenship",
      "!=",
      "\"France\""
    ]
  },
  {
    "db_id": "singer",
    "question": "What are the names of the singers who are not French citizens?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "who",
      "are",
      "not",
      "French",
      "citizens",
      "?"
    ],
    "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "citizenship",
      "!=",
      "\"France\""
    ]
  },
  {
    "db_id": "singer",
    "question": "Show the name of singers whose birth year is either 1948 or 1949?",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "singers",
      "whose",
      "birth",
      "year",
      "is",
      "either",
      "1948",
      "or",
      "1949",
      "?"
    ],
    "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1948.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1949.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "birth_year",
      "=",
      "1948",
      "or",
      "birth_year",
      "=",
      "1949"
    ]
  },
  {
    "db_id": "singer",
    "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "whose",
      "birth",
      "years",
      "are",
      "either",
      "1948",
      "or",
      "1949",
      "?"
    ],
    "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1948.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1949.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "birth_year",
      "=",
      "1948",
      "or",
      "birth_year",
      "=",
      "1949"
    ]
  },
  {
    "db_id": "singer",
    "question": "What is the name of the singer with the largest net worth?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "singer",
      "with",
      "the",
      "largest",
      "net",
      "worth",
      "?"
    ],
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "singer",
    "question": "What is the name of the singer who is worth the most?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "singer",
      "who",
      "is",
      "worth",
      "the",
      "most",
      "?"
    ],
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship.",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "."
    ],
    "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "citizenship",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ]
  },
  {
    "db_id": "singer",
    "question": "For each citizenship, how many singers are from that country?",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "that",
      "country",
      "?"
    ],
    "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "citizenship",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ]
  },
  {
    "db_id": "singer",
    "question": "Please show the most common citizenship of singers.",
    "question_toks": [
      "Please",
      "show",
      "the",
      "most",
      "common",
      "citizenship",
      "of",
      "singers",
      "."
    ],
    "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "citizenship",
      "from",
      "singer",
      "group",
      "by",
      "citizenship",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "singer",
    "question": "What is the msot common singer citizenship?",
    "question_toks": [
      "What",
      "is",
      "the",
      "msot",
      "common",
      "singer",
      "citizenship",
      "?"
    ],
    "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "citizenship",
      "from",
      "singer",
      "group",
      "by",
      "citizenship",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ]
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "."
    ],
    "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "citizenship",
      ",",
      "max",
      "(",
      "net_worth_millions",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ]
  },
  {
    "db_id": "singer",
    "question": "For each citizenship, what is the maximum net worth?",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "what",
      "is",
      "the",
      "maximum",
      "net",
      "worth",
      "?"
    ],
    "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "citizenship",
      ",",
      "max",
      "(",
      "net_worth_millions",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ]
  },
  {
    "db_id": "singer",
    "question": "Show titles of songs and names of singers.",
    "question_toks": [
      "Show",
      "titles",
      "of",
      "songs",
      "and",
      "names",
      "of",
      "singers",
      "."
    ],
    "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.title",
      ",",
      "t1.name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id"
    ]
  },
  {
    "db_id": "singer",
    "question": "What are the song titles and singer names?",
    "question_toks": [
      "What",
      "are",
      "the",
      "song",
      "titles",
      "and",
      "singer",
      "names",
      "?"
    ],
    "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.title",
      ",",
      "t1.name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id"
    ]
  },
  {
    "db_id": "singer",
    "question": "Show distinct names of singers that have songs with sales more than 300000.",
    "question_toks": [
      "Show",
      "distinct",
      "names",
      "of",
      "singers",
      "that",
      "have",
      "songs",
      "with",
      "sales",
      "more",
      "than",
      "300000",
      "."
    ],
    "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id",
      "where",
      "t2.sales",
      ">",
      "300000"
    ]
  },
  {
    "db_id": "singer",
    "question": "what are the different names of the singers that have sales more than 300000?",
    "question_toks": [
      "what",
      "are",
      "the",
      "different",
      "names",
      "of",
      "the",
      "singers",
      "that",
      "have",
      "sales",
      "more",
      "than",
      "300000",
      "?"
    ],
    "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "t1.name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id",
      "where",
      "t2.sales",
      ">",
      "300000"
    ]
  },
  {
    "db_id": "singer",
    "question": "Show the names of singers that have more than one song.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "singers",
      "that",
      "have",
      "more",
      "than",
      "one",
      "song",
      "."
    ],
    "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id",
      "group",
      "by",
      "t1.name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "singer",
    "question": "What are the names of the singers that have more than one songs?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "that",
      "have",
      "more",
      "than",
      "one",
      "songs",
      "?"
    ],
    "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id",
      "group",
      "by",
      "t1.name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ]
  },
  {
    "db_id": "singer",
    "question": "Show the names of singers and the total sales of their songs.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "singers",
      "and",
      "the",
      "total",
      "sales",
      "of",
      "their",
      "songs",
      "."
    ],
    "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      ",",
      "sum",
      "(",
      "t2.sales",
      ")",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id",
      "group",
      "by",
      "t1.name"
    ]
  },
  {
    "db_id": "singer",
    "question": "For each singer name, what is the total sales for their songs?",
    "question_toks": [
      "For",
      "each",
      "singer",
      "name",
      ",",
      "what",
      "is",
      "the",
      "total",
      "sales",
      "for",
      "their",
      "songs",
      "?"
    ],
    "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t1.name",
      ",",
      "sum",
      "(",
      "t2.sales",
      ")",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1.singer_id",
      "=",
      "t2.singer_id",
      "group",
      "by",
      "t1.name"
    ]
  },
  {
    "db_id": "singer",
    "question": "List the name of singers that do not have any song.",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "singers",
      "that",
      "do",
      "not",
      "have",
      "any",
      "song",
      "."
    ],
    "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "singer_id",
      "not",
      "in",
      "(",
      "select",
      "singer_id",
      "from",
      "song",
      ")"
    ]
  },
  {
    "db_id": "singer",
    "question": "What is the sname of every sing that does not have any song?",
    "question_toks": [
      "What",
      "is",
      "the",
      "sname",
      "of",
      "every",
      "sing",
      "that",
      "does",
      "not",
      "have",
      "any",
      "song",
      "?"
    ],
    "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "singer_id",
      "not",
      "in",
      "(",
      "select",
      "singer_id",
      "from",
      "song",
      ")"
    ]
  },
  {
    "db_id": "singer",
    "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "question_toks": [
      "Show",
      "the",
      "citizenship",
      "shared",
      "by",
      "singers",
      "with",
      "birth",
      "year",
      "before",
      "1945",
      "and",
      "after",
      "1955",
      "."
    ],
    "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1945.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            1955.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      "<",
      "1945",
      "intersect",
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      ">",
      "1955"
    ]
  },
  {
    "db_id": "singer",
    "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "question_toks": [
      "What",
      "are",
      "the",
      "citizenships",
      "that",
      "are",
      "shared",
      "by",
      "singers",
      "with",
      "a",
      "birth",
      "year",
      "before",
      "1945",
      "and",
      "after",
      "1955",
      "?"
    ],
    "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1945.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            1955.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      "<",
      "1945",
      "intersect",
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      ">",
      "1955"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "question": "How many available features are there in total?",
    "question_toks": [
      "How",
      "many",
      "available",
      "features",
      "are",
      "there",
      "in",
      "total",
      "?"
    ],
    "query": "SELECT count(*) FROM Other_Available_Features",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "other_available_features"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "question": "What is the feature type name of feature AirCon?",
    "question_toks": [
      "What",
      "is",
      "the",
      "feature",
      "type",
      "name",
      "of",
      "feature",
      "AirCon",
      "?"
    ],
    "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"AirCon\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.feature_type_name",
      "from",
      "other_available_features",
      "as",
      "t1",
      "join",
      "ref_feature_types",
      "as",
      "t2",
      "on",
      "t1.feature_type_code",
      "=",
      "t2.feature_type_code",
      "where",
      "t1.feature_name",
      "=",
      "\"AirCon\""
    ]
  },
  {
    "db_id": "real_estate_properties",
    "question": "Show the property type descriptions of properties belonging to that code.",
    "question_toks": [
      "Show",
      "the",
      "property",
      "type",
      "descriptions",
      "of",
      "properties",
      "belonging",
      "to",
      "that",
      "code",
      "."
    ],
    "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "t2.property_type_description",
      "from",
      "properties",
      "as",
      "t1",
      "join",
      "ref_property_types",
      "as",
      "t2",
      "on",
      "t1.property_type_code",
      "=",
      "t2.property_type_code",
      "group",
      "by",
      "t1.property_type_code"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "properties",
      "that",
      "are",
      "either",
      "houses",
      "or",
      "apartments",
      "with",
      "more",
      "than",
      "1",
      "room",
      "?"
    ],
    "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"House\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  13,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            "\"Apartment\"",
            null
          ],
          "and",
          [
            false,
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            1.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "query_toks": [
      "select",
      "property_name",
      "from",
      "properties",
      "where",
      "property_type_code",
      "=",
      "\"House\"",
      "union",
      "select",
      "property_name",
      "from",
      "properties",
      "where",
      "property_type_code",
      "=",
      "\"Apartment\"",
      "and",
      "room_count",
      ">",
      "1"
    ]
  }
]