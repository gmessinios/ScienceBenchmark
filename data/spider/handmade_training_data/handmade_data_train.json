[
  {
    "db_id": "department_management",
    "query": "SELECT COUNT(*) FROM head AS T1 WHERE T1.age < 56",
    "question": "How many heads of the departments are younger than 56 ?"
  },
  {
    "db_id": "department_management",
    "query": "SELECT T1.Budget_in_Billions / T1.Num_Employees FROM department AS T1",
    "question": "What are the budget in billions per employee of the departments ?"
  },
  {
    "db_id": "department_management",
    "query": "SELECT T1.name FROM head AS T1 WHERE T1.born_state = 'California'",
    "question": "What are the names of the heads who are born in the California state?"
  },
  {
    "db_id": "department_management",
    "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T3 ON T1.Department_ID = T3.department_ID JOIN head AS T2 ON T3.head_ID = T2.head_ID WHERE T2.born_state != 'Alabama'",
    "question": "What are the distinct creation years of the departments managed by a secretary not born in state 'Alabama'?"
  },
  {
    "db_id": "department_management",
    "query": "SELECT T1.born_state FROM head AS T1  GROUP BY T1.born_state HAVING COUNT(*) <= 3",
    "question": "What are the names of the states where at most 3 heads were born?"
  },
  {
    "db_id": "department_management",
    "query": "SELECT T1.Name, T1.Num_Employees FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting != 'Yes'",
    "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is not 'Yes'?"
  },
  {
    "db_id": "department_management",
    "query": "SELECT DISTINCT T1.temporary_acting FROM management AS T1",
    "question": "What are the different acting statuses?"
  },
  {
    "db_id": "department_management",
    "query": "SELECT COUNT(*) FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID",
    "question": "How many departments are there?"
  },
  {
    "db_id": "department_management",
    "query": "SELECT DISTINCT T1.age FROM head AS T1 JOIN management AS T2 ON T1.head_ID = T2.head_ID WHERE T2.temporary_acting != 'Yes'",
    "question": "What are the distinct ages of the heads who are not acting?"
  },
  {
    "db_id": "department_management",
    "query": "SELECT T1.born_state FROM head AS T1 JOIN management AS T3 ON T1.head_ID = T3.head_ID JOIN department AS T2 ON T3.department_ID = T2.Department_ID WHERE T2.Name = 'Treasury'",
    "question": "List the states where the secretary of 'Treasury' department was born."
  },
  {
    "db_id": "department_management",
    "query": "SELECT T1.head_ID, T1.name FROM head AS T1 WHERE T1.name NOT LIKE 'Ha'",
    "question": "Which head's name does not have the substring 'Ha'? List the id and name."
  },
  {
    "db_id": "farm",
    "query": "SELECT * FROM farm AS T1",
    "question": "What information do you have about farms?"
  },
  {
    "db_id": "farm",
    "query": "SELECT * FROM farm AS T1",
    "question": "Show all farms."
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Hosts FROM farm_competition AS T1 WHERE T1.Theme = 'Aliens'",
    "question": "What are the hosts of competitions whose theme is \"Aliens\"?"
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Hosts FROM farm_competition AS T1 WHERE T1.Theme = 'Aliens'",
    "question": "Return the hosts of competitions for which the theme is Aliens?"
  },
  {
    "db_id": "farm",
    "query": "SELECT AVG( T1.Working_Horses) FROM farm AS T1 WHERE T1.Total_Horses >= 5000",
    "question": "What is the average number of working horses of farms with more than or equal to 5000 total number of horses?"
  },
  {
    "db_id": "farm",
    "query": "SELECT AVG( T1.Working_Horses) FROM farm AS T1 WHERE T1.Total_Horses >= 5000",
    "question": "Give the average number of working horses on farms with more than or equal to 5000 total horses."
  },
  {
    "db_id": "farm",
    "query": "SELECT DISTINCT T1.Status FROM city AS T1",
    "question": "What are the different statuses of cities?"
  },
  {
    "db_id": "farm",
    "query": "SELECT DISTINCT T1.Status FROM city AS T1",
    "question": "List all the different statuses."
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  GROUP BY T1.Official_Name HAVING COUNT(*) >= 1",
    "question": "Show the official names of the cities that have hosted at least one competition."
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Theme FROM farm_competition AS T1 JOIN city AS T2 ON T1.Host_city_ID = T2.City_ID WHERE T2.Population >= 1000",
    "question": "Please show the themes of competitions with host cities having populations larger than or equal to 1000."
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID",
    "question": "List the official names of cities that have held any competition."
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID",
    "question": "What are the official names of cities that have hosted a farm competition?"
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Status FROM city AS T1 WHERE T1.Population > 1500",
    "question": "Show the status of cities with population bigger than 1500."
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Status FROM city AS T1 WHERE T1.Population > 1500       EXCEPT SELECT T2.Status FROM city AS T2 WHERE T2.Population < 500",
    "question": "Which statuses correspond to cities that have a population over 1500 but not cities that have a population lower than 500?"
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Official_Name FROM city AS T1 WHERE T1.Population > 1500 AND T1.Population < 500",
    "question": "Find the official names of cities with population bigger than 1500 and smaller than 500."
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Official_Name FROM city AS T1 WHERE T1.Population > 1500 AND T1.Population < 500",
    "question": "What are the official names of cities that have population over 1500 and less than 500?"
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Census_Ranking FROM city AS T1 WHERE T1.Status = 'Village'",
    "question": "Show the census ranking of cities whose status are \"Village\"."
  },
  {
    "db_id": "farm",
    "query": "SELECT T1.Census_Ranking FROM city AS T1 WHERE T1.Status = 'Village'",
    "question": "What are the census rankings of cities that have the status \"Village\"?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Course_Registrations AS T3 ON T1.student_id = T3.student_id JOIN Student_Course_Attendance AS T2 ON T3.student_id = T2.student_id",
    "question": "List the id of students who attends all courses?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Course_Registrations AS T3 ON T1.student_id = T3.student_id JOIN Student_Course_Attendance AS T2 ON T3.student_id = T2.student_id",
    "question": "What are the  ids of every student who has attended a course?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT COUNT( T1.student_id) FROM Student_Course_Attendance AS T1",
    "question": "How many students attended some courses?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT COUNT( T1.student_id) FROM Student_Course_Attendance AS T1",
    "question": "How many students have attended at least one course?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT COUNT(*) FROM Courses AS T1 JOIN Student_Course_Registrations AS T3 ON T1.course_id = T3.course_id JOIN Student_Course_Attendance AS T2 ON T3.student_id = T2.student_id WHERE T2.student_id != 171",
    "question": "How many courses do the students who do not have id 171 attend?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT COUNT(*) FROM Courses AS T1 JOIN Student_Course_Registrations AS T3 ON T1.course_id = T3.course_id JOIN Student_Course_Attendance AS T2 ON T3.student_id = T2.student_id WHERE T2.student_id != 171",
    "question": "How many courses does the student with id 171 not attend?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.candidate_id FROM Candidates AS T1 JOIN People AS T2 ON T1.candidate_id = T2.person_id WHERE T2.email_address != 'stanley.monahan@example.org'",
    "question": "Find id of the candidate whose email is not stanley.monahan@example.org?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.candidate_id FROM Candidates AS T1 JOIN People AS T2 ON T1.candidate_id = T2.person_id WHERE T2.email_address != 'stanley.monahan@example.org'",
    "question": "What is the id of the candidate whose email is not stanley.monahan@example.org?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.candidate_id FROM Candidate_Assessments AS T1 WHERE T1.asessment_outcome_code != 'Pass'",
    "question": "Find id of candidates whose assessment code is not \"Pass\"?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.candidate_id FROM Candidate_Assessments AS T1 WHERE T1.asessment_outcome_code != 'Pass'",
    "question": "What are the ids of the candidates that do not have an outcome code of Pass?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.cell_mobile_number FROM People AS T1 JOIN Candidates AS T3 ON T1.person_id = T3.candidate_id JOIN Candidate_Assessments AS T2 ON T3.candidate_id = T2.candidate_id WHERE T2.asessment_outcome_code != 'Fail'",
    "question": "Find the cell mobile number of the candidates whose assessment code is not \"Fail\"?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.cell_mobile_number FROM People AS T1 JOIN Candidates AS T3 ON T1.person_id = T3.candidate_id JOIN Candidate_Assessments AS T2 ON T3.candidate_id = T2.candidate_id WHERE T2.asessment_outcome_code != 'Fail'",
    "question": "What are the cell phone numbers of the candidates that did not receive an assessment code of \"Fail\"?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Student_Course_Attendance AS T1 WHERE T1.course_id != 301",
    "question": "What are the id of students who did not register course 301?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Student_Course_Attendance AS T1 WHERE T1.course_id != 301",
    "question": "What are the ids of the students who did not register for course 301?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Student_Course_Attendance AS T1 WHERE T1.course_id != 301   ORDER BY T1.date_of_attendance DESC LIMIT 1",
    "question": "What is the id of the student who most recently registered a course other than 301?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Student_Course_Attendance AS T1 WHERE T1.course_id != 301   ORDER BY T1.date_of_attendance DESC LIMIT 1",
    "question": "What are the ids of the students who did not register for course 301?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city) FROM Addresses AS T1",
    "question": "Find distinct count of distinct cities of addresses of people?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city) FROM Addresses AS T1",
    "question": "How many different cities where people live?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city) FROM Addresses AS T1",
    "question": "Find distinct number of cities of address of students?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city) FROM Addresses AS T1",
    "question": "How many different cities where students live?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Student_Course_Registrations AS T1",
    "question": "What are the id of students who registered courses?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Student_Course_Registrations AS T1        EXCEPT SELECT T2.student_id FROM Student_Course_Attendance AS T2",
    "question": "What are the ids of the students who registered but did not attend a course?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.course_id FROM Student_Course_Registrations AS T1 WHERE T1.student_id = 121     INTERSECT SELECT T2.course_id FROM Student_Course_Attendance AS T2 WHERE T2.student_id = 121",
    "question": "Find the id of courses which are registered and attended by student whose id is 121?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.course_id FROM Student_Course_Registrations AS T1 WHERE T1.student_id = 121     INTERSECT SELECT T2.course_id FROM Student_Course_Attendance AS T2 WHERE T2.student_id = 121",
    "question": "What are the ids of the courses that are registered and attended by the student whose id is 121?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT * FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.student_id = T2.student_id",
    "question": "What are all info of students who registered courses and attended courses?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT * FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.student_id = T2.student_id",
    "question": "What are all details of the students who registered and attended any course?"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Student_Course_Registrations AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name != 'statistics'    ORDER BY T1.registration_date ASC",
    "question": "List the id of students who did not register course statistics in the order of registration date."
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Student_Course_Attendance AS T1 JOIN Student_Course_Registrations AS T3 ON T1.student_id = T3.student_id JOIN Courses AS T2 ON T3.course_id = T2.course_id WHERE T2.course_name != 'statistics'    ORDER BY T1.date_of_attendance ASC",
    "question": "List the id of students who did not attend  statistics courses in the order of attendance date."
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T1.student_id FROM Student_Course_Attendance AS T1 JOIN Student_Course_Registrations AS T3 ON T1.student_id = T3.student_id JOIN Courses AS T2 ON T3.course_id = T2.course_id WHERE T2.course_name != 'statistics'    ORDER BY T1.date_of_attendance ASC",
    "question": "What are the ids of the students who did not attend courses in the statistics department in order of attendance date."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.date FROM weather AS T1 WHERE T1.max_temperature_f >= 85",
    "question": "Give me the dates when the max temperature was higher than or equal to 85."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.date FROM weather AS T1 WHERE T1.max_temperature_f < 85",
    "question": "What are the dates with a maximum temperature lower than 85?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.name FROM station AS T1 WHERE T1.lat > 37.5",
    "question": "What are the names of stations that have latitude higher than 37.5?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.name FROM station AS T1 WHERE T1.lat >= 37.5",
    "question": "What are the names of all stations with a latitude larger than or equal to 37.5?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT AVG( T1.lat), AVG( T1.long) FROM station AS T1 WHERE T1.city != 'San Jose'",
    "question": "What is the average latitude and longitude of stations located outside San Jose city?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT SUM( T1.duration), MAX( T1.duration) FROM trip AS T1 WHERE T1.bike_id != 636",
    "question": "What is the total and maximum duration of trips with bike id not equal to 636?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT SUM( T1.duration), MAX( T1.duration) FROM trip AS T1 WHERE T1.bike_id != 636",
    "question": "What is the total and maximum duration for all trips with the bike id not 636?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.zip_code, AVG( T1.mean_temperature_f) FROM weather AS T1 WHERE T1.date NOT LIKE '8\/' GROUP BY T1.zip_code",
    "question": "For each zip code, what is the average mean temperature for all dates that do not start with '8'?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT DISTINCT T1.bike_id FROM trip AS T1",
    "question": "What are the different bike ids?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT DISTINCT T1.city FROM station AS T1",
    "question": "What are the distinct cities the stations are located at?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT DISTINCT T1.city FROM station AS T1",
    "question": "What are the different cities that these stations are in?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT COUNT(*) FROM station AS T1 WHERE T1.city != 'Mountain View'",
    "question": "How many stations are not in Mountain View?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available != 7",
    "question": "Return the unique name for stations that have never had 7 bikes available."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available != 7",
    "question": "What are the different names for each station that has ever had a number of bikes available other than 7?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.bike_id FROM trip AS T1 WHERE T1.zip_code != 94002 GROUP BY T1.bike_id  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Which bike traveled the most often outside of zip code 94002?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.bike_id FROM trip AS T1 WHERE T1.zip_code != 94002 GROUP BY T1.bike_id  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the id of the bike that traveled the most outside of 94002?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT COUNT(*) FROM weather AS T1 WHERE T1.mean_humidity > 50 OR T1.mean_visibility_miles > 8",
    "question": "How many days had either mean humidity above 50 or mean visibility above 8?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT COUNT(*) FROM weather AS T1 WHERE T1.mean_humidity > 50 OR T1.mean_visibility_miles > 8",
    "question": "What is the number of days that had an average humity above 50 or an average visibility above 8?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.id FROM station AS T1 WHERE T1.city = 'San Francisco'",
    "question": "What are the ids of stations that are located in San Francisco."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.id FROM station AS T1 WHERE T1.city = 'San Francisco'      UNION SELECT T2.station_id FROM status AS T2  GROUP BY T2.station_id HAVING AVG( T2.bikes_available) > 10",
    "question": "What are the ids of the stations in San Francisco or normally have more than 10 bikes available?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id  GROUP BY T2.station_id HAVING AVG( T2.bikes_available) > 14   INTERSECT SELECT T3.name, T3.id FROM station AS T3 WHERE T3.installation_date LIKE '%12\/%'",
    "question": "What are the names and ids of all stations that have more than 14 bikes available on average and also had bikes installed in December?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT AVG( T1.bikes_available) FROM status AS T1 WHERE T1.station_id IN (SELECT T22.id FROM station AS T22 WHERE T22.city = 'Palo Alto')",
    "question": "What is the average bike availability in stations that are located in Palo Alto?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT AVG( T1.bikes_available) FROM status AS T1 WHERE T1.station_id IN (SELECT T22.id FROM station AS T22 WHERE T22.city = 'Palo Alto')",
    "question": "What is the average bike availablility for stations in Palo Alto?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT AVG( T1.long) FROM station AS T1 WHERE T1.id IN (SELECT T22.station_id FROM status AS T22  GROUP BY T22.station_id HAVING MAX( T22.bikes_available) > 10)",
    "question": "What is the average longitude of stations that always had bike availability more than 10?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT AVG( T1.long) FROM station AS T1 WHERE T1.id IN (SELECT T22.station_id FROM status AS T22  GROUP BY T22.station_id HAVING MAX( T22.bikes_available) > 10)",
    "question": "What is the mean longitude for all stations that have had more than 10 bikes available?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.date, T1.zip_code FROM weather AS T1 WHERE T1.max_temperature_f < 80",
    "question": "What zip codes have a station with a max temperature less than 80 and when did it reach that temperature?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2  GROUP BY T1.id HAVING AVG( T2.mean_temperature_f) < 60",
    "question": "For each zip code, find the ids of all trips that have a lower average mean temperature below 60?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.zip_code, COUNT(*) FROM weather AS T1 WHERE T1.max_wind_Speed_mph <= 25 GROUP BY T1.zip_code",
    "question": "For each zip code, how many times has the maximum wind speed not reached 25 mph?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.date, T1.zip_code FROM weather AS T1 WHERE T1.min_dew_point_f = (SELECT MIN( T22.min_dew_point_f) FROM weather AS T22 WHERE T22.zip_code = 94107)",
    "question": "On which day and in which zip code was the min dew point exactly the same as any day in zip code 94107?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city = 'San Francisco'",
    "question": "Count the number of trips that ended in San Francisco city."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city = 'San Francisco'",
    "question": "How many trips did end in San Francisco?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.date FROM weather AS T1 WHERE T1.zip_code = 94107 OR T1.events != 'Fog' AND T1.events != 'Rain'",
    "question": "In zip code 94107, on which day either Fog or Rain was not observed?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.date FROM weather AS T1 WHERE T1.zip_code = 94107 OR T1.events != 'Fog' AND T1.events != 'Rain'",
    "question": "On which day has it rained or it has not been foggy in the zip code of 94107?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.id FROM station AS T1 WHERE T1.lat > 37.4      UNION SELECT T2.station_id FROM status AS T2  GROUP BY T2.station_id HAVING MIN( T2.bikes_available) < 7",
    "question": "What are the ids of stations that have latitude above 37.4 or had bike availability below 7?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.id FROM station AS T1 WHERE T1.lat > 37.4",
    "question": "What are the ids of all stations that have a latitude above 37.4?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id  GROUP BY T1.name HAVING AVG( T2.bikes_available) > 10   INTERSECT SELECT T3.name FROM station AS T3 WHERE T3.city = 'San Jose'",
    "question": "What are names of stations that have average bike availability above 10 and are located in San Jose city?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id  GROUP BY T1.name HAVING AVG( T2.bikes_available) > 10",
    "question": "What are the names of all stations that have more than 10 bikes available?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.city, COUNT(*) FROM station AS T1  GROUP BY T1.city HAVING COUNT(*) < 15",
    "question": "List the name and the number of stations for all the cities that have less than 15 stations."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.start_station_id, T1.start_station_name FROM trip AS T1  GROUP BY T1.start_station_id, T1.start_station_name HAVING COUNT(*) < 200",
    "question": "Find the ids and names of stations from which less than 200 trips started."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.start_station_id, T1.start_station_name FROM trip AS T1  GROUP BY T1.start_station_id, T1.start_station_name HAVING COUNT(*) < 200",
    "question": "What are the ids and names of all start stations that were the beginning of less than 200 trips?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.zip_code FROM weather AS T1  GROUP BY T1.zip_code HAVING AVG( T1.mean_visibility_miles) > 10",
    "question": "Find the zip code in which the average mean visibility is higher than 10."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.zip_code FROM weather AS T1  GROUP BY T1.zip_code HAVING AVG( T1.mean_visibility_miles) >= 10",
    "question": "For each zip code, select all those that have an average mean visiblity above or equal to 10."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT DISTINCT T1.start_station_name FROM trip AS T1 WHERE T1.duration > 100",
    "question": "List all the distinct stations from which a trip of duration above 100 started."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT DISTINCT T1.start_station_name FROM trip AS T1 WHERE T1.duration > 100",
    "question": "What are all the different start station names for a trip that lasted more than 100?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT DISTINCT T1.zip_code FROM weather AS T1      INTERSECT SELECT DISTINCT T2.zip_code FROM weather AS T2 WHERE T2.max_dew_point_f >= 70",
    "question": "Find all the zip codes in which the max dew point have reached 70."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.id FROM trip AS T1 WHERE T1.duration <= (SELECT AVG( T22.duration) FROM trip AS T22 WHERE T22.zip_code = 94103)",
    "question": "Find the id for the trips that lasted less than or equal to the average duration of trips in zip code 94103."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.date FROM weather AS T1 WHERE T1.mean_sea_level_pressure_inches BETWEEN 28.1 AND 41.7",
    "question": "What are the dates in which the mean sea level pressure was between 28.1 and 41.7?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.date FROM weather AS T1 WHERE T1.mean_sea_level_pressure_inches BETWEEN 30.4 AND 46.5",
    "question": "What are the dates that have an average sea level pressure between 30.4 and 46.5?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available >= 12",
    "question": "What are the id and name of the stations that have ever had at least 12 bikes available?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available < 12",
    "question": "What are the different ids and names of the stations that have had less than 12 bikes available?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.zip_code FROM weather AS T1  GROUP BY T1.zip_code HAVING AVG( T1.mean_humidity) < 70",
    "question": "Give me the zip code where the average mean humidity is below 70."
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.zip_code FROM weather AS T1  GROUP BY T1.zip_code HAVING AVG( T1.mean_humidity) < 70    UNION SELECT T2.zip_code FROM trip AS T2  GROUP BY T2.zip_code HAVING COUNT(*) >= 100",
    "question": "What are the zip codes that have an average mean humidity below 70 or had at least 100 trips come through there?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.name FROM station AS T1 WHERE T1.city = 'Palo Alto'     INTERSECT SELECT T2.end_station_name FROM trip AS T2  GROUP BY T2.end_station_name HAVING COUNT(*) > 100",
    "question": "What are the names of stations that are located in Palo Alto city and have been the ending point of trips more than 100 times?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.name FROM station AS T1 WHERE T1.city = 'Palo Alto'",
    "question": "What are the names of the stations that are located in Palo Alto"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  'Mountain View' OR T3.city  =  'Palo Alto'",
    "question": "How many trips started from Mountain View city or ended at Palo Alto city?"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  'Mountain View' OR T3.city  =  'Palo Alto'",
    "question": "How many trips started from a station in Mountain View or ended at one in Palo Alto?"
  },
  {
    "db_id": "book_2",
    "query": "SELECT * FROM book AS T1",
    "question": "What are the books?"
  },
  {
    "db_id": "book_2",
    "query": "SELECT T1.Title FROM book AS T1 WHERE T1.Writer = 'Elaine Lee'",
    "question": "What are the titles of the books whose writer is \"Elaine Lee\"?"
  },
  {
    "db_id": "book_2",
    "query": "SELECT DISTINCT T1.Publisher FROM publication AS T1 WHERE T1.Price >= 5000000",
    "question": "What are the distinct publishers of publications with price equal or higher than 5000000?"
  },
  {
    "db_id": "book_2",
    "query": "SELECT T1.Publisher FROM publication AS T1  GROUP BY T1.Publisher HAVING COUNT(*) < 1",
    "question": "Show publishers that have no publication."
  },
  {
    "db_id": "book_2",
    "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID",
    "question": "List the titles of books that are published."
  },
  {
    "db_id": "book_2",
    "query": "SELECT T1.Publisher FROM publication AS T1 WHERE T1.Price > 10000000      UNION SELECT T2.Publisher FROM publication AS T2 WHERE T2.Price < 5000000",
    "question": "Show the publishers that have publications with price higher than 10000000 or publications with price lower than 5000000."
  },
  {
    "db_id": "book_2",
    "query": "SELECT DISTINCT T1.Publication_Date FROM publication AS T1",
    "question": "What are the distinct publication dates?"
  },
  {
    "db_id": "book_2",
    "query": "SELECT DISTINCT T1.Publication_Date FROM publication AS T1",
    "question": "What are the distinct publication dates in our record?"
  },
  {
    "db_id": "musical",
    "query": "SELECT * FROM actor AS T1",
    "question": "What are the actors?"
  },
  {
    "db_id": "musical",
    "query": "SELECT * FROM actor AS T1",
    "question": "List all the actors."
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM actor AS T1 WHERE T1.age = 20",
    "question": "List the name of actors whose age is 20."
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM actor AS T1 WHERE T1.age = 20",
    "question": "What are the names of actors who are 20 years old?"
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM musical AS T1 WHERE T1.Nominee != 'Bob Fosse'",
    "question": "What are the names of musicals without nominee \"Bob Fosse\"?"
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM musical AS T1 WHERE T1.Nominee != 'Bob Fosse'",
    "question": "Return the names of musicals who do not have the nominee Bob Fosse."
  },
  {
    "db_id": "musical",
    "query": "SELECT DISTINCT T1.Nominee FROM musical AS T1 WHERE T1.Award = 'Tony Award'",
    "question": "What are the distinct nominees of the musicals with the award \"Tony Award\"?"
  },
  {
    "db_id": "musical",
    "query": "SELECT DISTINCT T1.Nominee FROM musical AS T1 WHERE T1.Award = 'Tony Award'",
    "question": "Return the different nominees of musicals that have an award that is the Tony Award."
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name != 'The Phantom of the Opera'",
    "question": "Show names of actors that have not appeared in musical with name \"The Phantom of the Opera\"."
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name != 'The Phantom of the Opera'",
    "question": "What are the names of actors who have not been in the musical titled The Phantom of the Opera?"
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM musical AS T1 JOIN actor AS T2  GROUP BY T1.Name HAVING COUNT(*) > 3",
    "question": "Show names of musicals which have more than three actors."
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM musical AS T1 JOIN actor AS T2  GROUP BY T1.Name HAVING COUNT(*) > 3",
    "question": "What are the names of musicals who have more than 3 actors?"
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Nominee FROM musical AS T1  GROUP BY T1.Nominee HAVING COUNT(*) < 2",
    "question": "List the nominees that have been nominated less than two musicals."
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Nominee FROM musical AS T1  GROUP BY T1.Nominee HAVING COUNT(*) >= 2",
    "question": "Who are the nominees who have been nominated at least two times?"
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM musical AS T1 JOIN actor AS T2",
    "question": "List the name of musicals that have actors."
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM musical AS T1 JOIN actor AS T2",
    "question": "What are the names of musicals who have actors?"
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Nominee FROM musical AS T1 WHERE T1.Award = 'Tony Award'",
    "question": "Show the nominees that have nominated musicals for \"Tony Award\"."
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Nominee FROM musical AS T1 WHERE T1.Award = 'Tony Award'      UNION SELECT T2.Nominee FROM musical AS T2 WHERE T2.Award = 'Drama Desk Award'",
    "question": "Who are the nominees who have been nominated for either a Tony Award or a Drama Desk Award?"
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Nominee FROM musical AS T1 WHERE T1.Award = 'Tony Award' AND T1.Award = 'Cleavant Derricks'",
    "question": "Show the musical nominee with award \"Bob Fosse\" and \"Cleavant Derricks\"."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT T1.email FROM user_profiles AS T1 WHERE T1.name != 'Mary'",
    "question": "Find the emails of all the users whose name is not \"Mary\"."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT * FROM user_profiles AS T1",
    "question": "What are the user profiles?"
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT * FROM follows AS T1",
    "question": "What are the followers of each user?"
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT * FROM follows AS T1",
    "question": "Find all the followers for each user."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT * FROM tweets AS T1",
    "question": "Find all the tweets in record."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT DISTINCT T1.uid FROM tweets AS T1",
    "question": "Find the distinct users who posted some tweets."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT T1.name, T1.email FROM user_profiles AS T1 WHERE T1.name NOT LIKE 'Swift'",
    "question": "Find the name and email of the user whose name does not contain the word \u2018Swift\u2019."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT T1.text FROM tweets AS T1 WHERE T1.text NOT LIKE 'intern'",
    "question": "Return the text of tweets not about the topic 'intern'."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT T1.name, T1.email FROM user_profiles AS T1 WHERE T1.followers >= 1000",
    "question": "Find the name and email of the users who have at least 1000 followers."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2  GROUP BY T1.name HAVING COUNT(*) = (SELECT COUNT(*) FROM follows AS T23 JOIN user_profiles AS T24 ON T23.f2 = T24.uid WHERE T24.name = 'Tyler Swift')",
    "question": "Find the names of the users whose number of followers is equal to that of the user named \"Tyler Swift\"."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT T1.f1 FROM follows AS T1 JOIN user_profiles AS T2 ON T1.f2 = T2.uid WHERE T2.name = 'Mary'",
    "question": "Find the id of users who are followed by Mary."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT AVG( T1.followers) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid",
    "question": "Find the average number of followers for the users who have any tweet."
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT AVG( T1.followers) FROM user_profiles AS T1 WHERE T1.uid NOT IN (SELECT T22.uid FROM tweets AS T22)",
    "question": "Find the average number of followers for the users who had no tweets."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.catalog_entry_name) FROM Catalog_Contents AS T1",
    "question": "Find the number of distinct catalog entries."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.catalog_entry_name) FROM Catalog_Contents AS T1",
    "question": "How many distinct catalog entry names are there?"
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.attribute_data_type FROM Attribute_Definitions AS T1 WHERE T1.attribute_name != 'Green'",
    "question": "What is the attribute data type of the attribute with name not \"Green\"?"
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT DISTINCT T1.catalog_publisher FROM Catalogs AS T1 WHERE T1.catalog_publisher NOT LIKE 'Murray'",
    "question": "Find all the catalog publishers whose name does not contain \"Murray\""
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT DISTINCT T1.catalog_publisher FROM Catalogs AS T1 WHERE T1.catalog_publisher NOT LIKE 'Murray'",
    "question": "Which catalog publishers do not have substring \"Murray\" in their names?"
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.catalog_name, T1.date_of_publication FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id WHERE T2.catalog_level_number < 5",
    "question": "Find the names and publication dates of all catalogs that have catalog level number less than 5."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.catalog_name, T1.date_of_publication FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id WHERE T2.catalog_level_number >= 5",
    "question": "What are the name and publication date of the catalogs with catalog level number greater than or equal to 5?"
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 WHERE T1.product_stock_number NOT LIKE '2'",
    "question": "Find the names of all the products whose stock number does not start with \"2\"."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 WHERE T1.product_stock_number NOT LIKE '2'",
    "question": "Which catalog contents have a product stock number that does not start from \"2\"? Show the catalog entry names."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.catalog_entry_id = T2.catalog_entry_id WHERE T2.catalog_level_number != 8",
    "question": "Find the names of catalog entries with level number not equal to 8."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.catalog_entry_id = T2.catalog_entry_id WHERE T2.catalog_level_number != 8",
    "question": "What are the names of catalog entries with level number not equal to 8?"
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 WHERE T1.length < '3' AND T1.width > '5'",
    "question": "Find the names of the products with length smaller than 3 and height greater than 5."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 WHERE T1.length < '3' AND T1.width > '5'",
    "question": "Which catalog contents have length below 3 and above 5? Find the catalog entry names."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.attribute_name, T1.attribute_id FROM Attribute_Definitions AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.attribute_id  =  T2.attribute_id WHERE T2.attribute_value != '0'",
    "question": "Find the name and attribute ID of the attribute definitions with attribute value not 0."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.attribute_name, T1.attribute_id FROM Attribute_Definitions AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.attribute_id  =  T2.attribute_id WHERE T2.attribute_value != '0'",
    "question": "Which attribute definitions do not have attribute value 0? Give me the attribute name and attribute ID."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.catalog_entry_name, T1.capacity FROM Catalog_Contents AS T1 WHERE T1.price_in_dollars < 700",
    "question": "Which catalog contents has price below 700 dollars? Show their catalog entry names and capacities."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.date_of_latest_revision FROM Catalogs AS T1  GROUP BY T1.date_of_latest_revision HAVING COUNT(*) >= 1",
    "question": "On which days at least one revision was made on catalogs."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT * FROM Catalog_Contents AS T1",
    "question": "What are the products in the records?"
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT * FROM Catalog_Contents AS T1",
    "question": "Find all the catalog contents."
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 WHERE T1.next_entry_id >= 8",
    "question": "What are the catalog entry names of the products with next entry ID equal to or above 8?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT * FROM aircraft AS T1",
    "question": "What are the aircrafts?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT * FROM aircraft AS T1",
    "question": "What are the aircrafts in the database?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.aid FROM aircraft AS T1 WHERE T1.distance >= 1000",
    "question": "Show ids for all aircrafts with distance more than or equal to 1000."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.aid FROM aircraft AS T1 WHERE T1.distance < 1000",
    "question": "What are the ids of all aircrafts that can cover a distance of less than 1000?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name, T1.distance FROM aircraft AS T1 WHERE T1.aid != 12",
    "question": "What is the name and distance for aircraft with id not 12?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name, T1.distance FROM aircraft AS T1 WHERE T1.aid != 12",
    "question": "What is the name and distance for the aircraft that does not have an id of 12?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT * FROM employee AS T1",
    "question": "What are the names of all the employees?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT * FROM employee AS T1",
    "question": "What are the employees?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.eid FROM employee AS T1 WHERE T1.salary < 100000",
    "question": "What is the id of every employee who has at most a salary of  100000?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT COUNT(*) FROM employee AS T1 WHERE T1.salary BETWEEN 128698.0 AND 171089.0",
    "question": "What is the number of employees that have a salary between 128698.0 and 171089.0?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name, T1.salary FROM employee AS T1 WHERE T1.eid != 242518965",
    "question": "What is the name and salary for all employees except employee with id 242518965?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name, T1.salary FROM employee AS T1 WHERE T1.eid != 242518965",
    "question": "What is the name and salary of all the employees except the one with the id 242518965?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM employee AS T1 WHERE T1.salary < (SELECT AVG( T22.salary) FROM employee AS T22)",
    "question": "Show names for all employees with salary less than the average."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM employee AS T1 WHERE T1.salary < (SELECT AVG( T22.salary) FROM employee AS T22)",
    "question": "What are the names of all employees who have a salary lower than average?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.eid, T1.salary FROM employee AS T1 WHERE T1.name != 'Mark Young'",
    "question": "Show the id and salary of all employees except Mark Young."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.eid, T1.salary FROM employee AS T1 WHERE T1.name != 'Mark Young'",
    "question": "What is the id and salary of all the employees whose name is not Mark Young?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT * FROM flight AS T1",
    "question": "What data do we have about flights?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT * FROM flight AS T1",
    "question": "What are all the flights?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.flno FROM flight AS T1 WHERE T1.origin != 'Los Angeles'",
    "question": "Show all flight number from cities other than Los Angeles."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.flno FROM flight AS T1 WHERE T1.origin != 'Los Angeles'",
    "question": "What are the numbers of all flights not coming from Los Angeles?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.origin FROM flight AS T1 WHERE T1.destination != 'Honolulu'",
    "question": "Show origins of all flights not having destination Honolulu."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.origin FROM flight AS T1 WHERE T1.destination != 'Honolulu'",
    "question": "What are the origins of all flights that are not headed to Honolulu?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.departure_date, T1.arrival_date FROM flight AS T1 WHERE T1.origin = 'Los Angeles' OR T1.destination = 'Honolulu'",
    "question": "Show me the departure date and arrival date for all flights from Los Angeles or to Honolulu."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.departure_date, T1.arrival_date FROM flight AS T1 WHERE T1.origin = 'Los Angeles' OR T1.destination = 'Honolulu'",
    "question": "What are the departure and arrival dates of all flights from LA or to Honolulu?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.flno FROM flight AS T1 WHERE T1.distance <= 2000",
    "question": "What are the numbers of all flights that can cover a distance of less than or equal to 2000?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.origin, T1.destination FROM flight AS T1 WHERE T1.price < 300",
    "question": "Show origin and destination for flights with price lower than 300."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.origin, T1.destination FROM flight AS T1 WHERE T1.price <= 300",
    "question": "What is the origin and destination for all flights whose price is lower than or equal to 300?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT AVG( T1.distance), AVG( T1.price) FROM flight AS T1 WHERE T1.origin != 'Los Angeles'",
    "question": "What is the average distance and average price for flights not from Los Angeles."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT AVG( T1.distance), AVG( T1.price) FROM flight AS T1 WHERE T1.origin != 'Los Angeles'",
    "question": "What is the average distance and price for all flights not from LA?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM aircraft AS T1 JOIN flight AS T2 ON T1.aid = T2.aid WHERE T2.flno != 99",
    "question": "What are the names of all the aircrafts that are not used for the flight with number 99"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM aircraft AS T1 JOIN flight AS T2 ON T1.aid = T2.aid WHERE T2.flno != 99",
    "question": "What is the name of the aircraft that was not on flight number 99?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name != 'Airbus A340-300'",
    "question": "Show all flight numbers with aircraft not Airbus A340-300."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.flno FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name != 'Airbus A340-300'",
    "question": "What are the flight numbers for the aircraft that is not Airbus A340-300?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM aircraft AS T1 JOIN flight AS T2 ON T1.aid = T2.aid  GROUP BY T1.name HAVING COUNT(*) > 2",
    "question": "Show names for all aircraft with more than two flights."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM aircraft AS T1 JOIN flight AS T2 ON T1.aid = T2.aid  GROUP BY T1.name HAVING COUNT(*) > 2",
    "question": "What are the names for all aircrafts with more than 2 flights?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT DISTINCT T1.eid FROM certificate AS T1",
    "question": "Which employees have certificate."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT DISTINCT T1.eid FROM certificate AS T1",
    "question": "What are the distinct employees with certificates?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.eid FROM employee AS T1",
    "question": "Show ids for all employees."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T3 ON T1.aid = T3.aid JOIN employee AS T2 ON T3.eid = T2.eid WHERE T2.name != 'John Williams'",
    "question": "Show names for all aircrafts of which John Williams does not have certificates."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T3 ON T1.aid = T3.aid JOIN employee AS T2 ON T3.eid = T2.eid WHERE T2.name != 'John Williams'",
    "question": "What are the names of all aircrafts that John Williams do not have certificates to be able to fly?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM employee AS T1 JOIN certificate AS T3 ON T1.eid = T3.eid JOIN aircraft AS T2 ON T3.aid = T2.aid WHERE T2.name != 'Boeing 737-800'",
    "question": "Show names for all employees who do not have certificate of Boeing 737-800."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM employee AS T1 JOIN certificate AS T3 ON T1.eid = T3.eid JOIN aircraft AS T2 ON T3.aid = T2.aid WHERE T2.name != 'Boeing 737-800'",
    "question": "What are the names of all employees who do not have a certificate to fly Boeing 737-800?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM employee AS T1 JOIN certificate AS T3 ON T1.eid = T3.eid JOIN aircraft AS T2 ON T3.aid = T2.aid WHERE T2.name = 'Boeing 737-800'      UNION SELECT T1.name FROM employee AS T1 JOIN certificate AS T3 ON T1.eid = T3.eid JOIN aircraft AS T2 ON T3.aid = T2.aid WHERE T2.name = 'Airbus A340-300'",
    "question": "Show names for all employees who have certificates on either Boeing 737-800 or Airbus A340-300."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM employee AS T1 JOIN certificate AS T3 ON T1.eid = T3.eid JOIN aircraft AS T2 ON T3.aid = T2.aid WHERE T2.name = 'Boeing 737-800'       EXCEPT SELECT T1.name FROM employee AS T1 JOIN certificate AS T3 ON T1.eid = T3.eid JOIN aircraft AS T2 ON T3.aid = T2.aid WHERE T2.name = 'Airbus A340-300'",
    "question": "What are the names of all employees who can fly the Boeing 737-800 but not the Airbus A340-300?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM employee AS T1      INTERSECT SELECT T2.name FROM employee AS T2 JOIN certificate AS T4 ON T2.eid = T4.eid JOIN aircraft AS T3 ON T4.aid = T3.aid WHERE T3.name = 'Boeing 737-800'",
    "question": "Show names for all employees who have certificate of Boeing 737-800."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid WHERE T1.distance < 5000 GROUP BY T1.name   ORDER BY COUNT(*) ASC",
    "question": "Show the name and distance of the aircrafts with less than 5000 distance and which at least 5 people have its certificate."
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM aircraft AS T1 JOIN certificate AS T2 ON T1.aid = T2.aid WHERE T1.distance < 5000 GROUP BY T1.name   ORDER BY COUNT(*) ASC",
    "question": "What is the name and distance of every aircraft that can cover a distance of less than 5000 and which at least 5 people can fly?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid JOIN aircraft AS T3 ON T2.aid = T3.aid WHERE T3.distance >= 5000 GROUP BY T1.name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than or equal to 5000?"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid JOIN aircraft AS T3 ON T2.aid = T3.aid WHERE T3.distance <= 5000 GROUP BY T1.name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the salaray and name of the employee with the most certificates to fly planes less than or equal to 5000?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT T1.Allergy FROM Allergy_Type AS T1",
    "question": "What are the distinct types of allergies?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT T1.Allergy FROM Allergy_Type AS T1",
    "question": "What are the distinct types of allergies?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT T1.AllergyType FROM Allergy_Type AS T1",
    "question": "What are the different allergy types?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT T1.AllergyType FROM Allergy_Type AS T1",
    "question": "What are the distinct types of allergies?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.AllergyType) FROM Allergy_Type AS T1",
    "question": "How many allergy types are there?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.AllergyType) FROM Allergy_Type AS T1",
    "question": "How many different allergy types are there?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT T1.Allergy FROM Allergy_Type AS T1 WHERE T1.AllergyType != 'food'",
    "question": "Show all allergies with type other than food."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT T1.Allergy FROM Allergy_Type AS T1 WHERE T1.AllergyType != 'food'",
    "question": "What are all the different non-food allergies?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.AllergyType FROM Allergy_Type AS T1 WHERE T1.Allergy != 'Cat'",
    "question": "What is the type of allergy that is not Cat?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.AllergyType FROM Allergy_Type AS T1 WHERE T1.Allergy != 'Cat'",
    "question": "What is allergy type of a non-cat allergy?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT COUNT(*) FROM Allergy_Type AS T1 WHERE T1.AllergyType != 'animal'",
    "question": "How many allergies do not have type animal?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT COUNT(*) FROM Allergy_Type AS T1 WHERE T1.AllergyType != 'animal'",
    "question": "How many non-animal type allergies exist?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT * FROM Student AS T1",
    "question": "What are the students' names?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT * FROM Student AS T1",
    "question": "What is the information of all students?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT T1.Advisor FROM Student AS T1",
    "question": "What are the names of the different advisors?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT T1.Advisor FROM Student AS T1",
    "question": "What are the names of the advisors?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Major) FROM Student AS T1",
    "question": "How many majors are there?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Major) FROM Student AS T1",
    "question": "How many different majors are there?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city_code) FROM Student AS T1",
    "question": "How many distinct cities do students live in?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city_code) FROM Student AS T1",
    "question": "How many distinct cities do students live in?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Fname, T1.LName, T1.Age FROM Student AS T1 WHERE T1.Sex != 'F'",
    "question": "Show first name, last name, age for all male students. Their sex is not F."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Fname, T1.LName, T1.Age FROM Student AS T1 WHERE T1.Sex != 'F'",
    "question": "What are the full names and ages for all male students whose sex is not F?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT COUNT(*) FROM Student AS T1 WHERE T1.Age != 18",
    "question": "How many students are not age 18?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT COUNT(*) FROM Student AS T1 WHERE T1.Age != 18",
    "question": "How many students are not 18 years old?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.StuID FROM Student AS T1 WHERE T1.Age >= 20",
    "question": "Show all student ids who are at least 20 years old."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.StuID FROM Student AS T1 WHERE T1.Age >= 20",
    "question": "What are the student ids for students over or equal to 20 years old?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.city_code FROM Student AS T1 WHERE T1.LName != 'Kim'",
    "question": "Which city does the student whose last name is not \"Kim\" live in?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.city_code FROM Student AS T1 WHERE T1.LName != 'Kim'",
    "question": "Give the city that the student whose family name is not Kim lives in."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Advisor FROM Student AS T1 WHERE T1.StuID != 1004",
    "question": "Who is the advisor of students not having ID 1004?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Advisor FROM Student AS T1 WHERE T1.StuID != 1004",
    "question": "Who does not advise student 1004?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT COUNT(*) FROM Student AS T1 WHERE T1.city_code = 'HKG' AND T1.city_code = 'CHI'",
    "question": "How many students live in both HKG and CHI?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT COUNT(*) FROM Student AS T1 WHERE T1.city_code = 'HKG' AND T1.city_code = 'CHI'",
    "question": "Give the number of students living in both HKG and CHI."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Age, T1.Sex FROM Student AS T1",
    "question": "Show the age and sex of all students."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Age, T1.Sex FROM Student AS T1",
    "question": "What are the ages and sex of all students?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.StuID FROM Has_Allergy AS T1  GROUP BY T1.StuID HAVING COUNT(*) > 2",
    "question": "Show all student IDs who have more than two allergies."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.StuID FROM Has_Allergy AS T1  GROUP BY T1.StuID HAVING COUNT(*) < 2",
    "question": "What are the students ids of students who have less than two allergies?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.StuID FROM Student AS T1",
    "question": "What are the student IDs of all students?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT COUNT(*) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = 'F' OR T1.Allergy = 'Milk' OR T1.Allergy = 'Eggs'",
    "question": "How many female students have milk or egg allergies?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT COUNT(*) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = 'F' OR T1.Allergy = 'Milk' OR T1.Allergy = 'Eggs'",
    "question": "How many students are female or are allergic to milk or eggs?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.LName, T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM Has_Allergy AS T22 WHERE T22.Allergy = 'Milk')",
    "question": "What are the last names and ages of the students who are not allergic to milk and cat?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_Type AS T1 JOIN Has_Allergy AS T3 ON T1.Allergy = T3.Allergy JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.Fname != 'Lisa'    ORDER BY T1.Allergy ASC",
    "question": "What are the allergies and their types that the student with first name not Lisa has? And order the result by name of allergies."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Fname, T1.Sex FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM Has_Allergy AS T22 WHERE T22.Allergy = 'Milk')",
    "question": "Find the first name and gender of the student who has no allergy to milk."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Fname, T1.Sex FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM Has_Allergy AS T22 WHERE T22.Allergy = 'Milk')",
    "question": "What are the first name and gender of the students who have allergy to milk and can not put up with cats?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT AVG( T1.Age) FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM Has_Allergy AS T22 JOIN Allergy_Type AS T23 ON T22.Allergy = T23.Allergy WHERE T23.AllergyType = 'food')",
    "question": "Find the average age of the students who do not have allergies with food and animal types."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT AVG( T1.Age) FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM Has_Allergy AS T22 JOIN Allergy_Type AS T23 ON T22.Allergy = T23.Allergy WHERE T23.AllergyType = 'food')",
    "question": "How old are the students without allergies to food and animal types on average?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.StuID IN (SELECT T22.StuID FROM Has_Allergy AS T22 JOIN Allergy_Type AS T23 ON T22.Allergy = T23.Allergy WHERE T23.AllergyType = 'food')",
    "question": "List the first and last name of the students who have any food type allergy."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.StuID IN (SELECT T22.StuID FROM Has_Allergy AS T22 JOIN Allergy_Type AS T23 ON T22.Allergy = T23.Allergy WHERE T23.AllergyType = 'food')",
    "question": "What is the full name of each student who is allergic to any type of food."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT COUNT(*) FROM Student AS T1 WHERE T1.Sex = 'M' OR T1.StuID IN (SELECT T22.StuID FROM Has_Allergy AS T22 JOIN Allergy_Type AS T23 ON T22.Allergy = T23.Allergy WHERE T23.AllergyType = 'food')",
    "question": "Find the number of male (sex is 'M') or female (sex is 'F') students who have some food type allery."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT T1.Fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.Allergy = 'Milk' AND T2.Allergy = 'Cat'",
    "question": "Find the different first names and cities of the students who have allergy to milk and cat."
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT DISTINCT T1.Fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.Allergy = 'Milk' AND T2.Allergy = 'Cat'",
    "question": "What are the distinct first names and cities of the students who have allergy to both milk and cat?"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T1.Fname, T1.Major FROM Student AS T1 WHERE T1.StuID IN (SELECT T22.StuID FROM Has_Allergy AS T22 WHERE T22.Allergy = 'Soy')",
    "question": "Find the first name and major of the students who are allegry to soy."
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT( T1.title) FROM albums AS T1",
    "question": "How many albums are there?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT( T1.title) FROM albums AS T1",
    "question": "How many titles are there in the albums?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title FROM albums AS T1 WHERE T1.title NOT LIKE 'A'    ORDER BY T1.title ASC",
    "question": "List every album whose title does not start with A in alphabetical order."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title FROM albums AS T1 WHERE T1.title NOT LIKE 'A'    ORDER BY T1.title ASC",
    "question": "What are the titles of all albums that do not start with A in alphabetical order?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT SUM( T1.total) FROM invoices AS T1 WHERE T1.billing_city = 'Chicago' OR T1.billing_state = 'IL'",
    "question": "What are the total amount of money in the invoices billed from Chicago or Illinois?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*) FROM invoices AS T1 WHERE T1.billing_city = 'Chicago' OR T1.billing_state = 'IL'",
    "question": "List the number of invoices from Chicago, IL or any other city in Illinois."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.billing_state, COUNT(*) FROM invoices AS T1 WHERE T1.billing_country != 'USA' GROUP BY T1.billing_state  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "List the state outside the US with the most invoices."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.billing_state, COUNT(*) FROM invoices AS T1 WHERE T1.billing_country != 'USA' GROUP BY T1.billing_state  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What are the states with the most invoices outside of the USA?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name != 'Aerosmith'",
    "question": "List all albums that are not by Aerosmith."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name != 'Aerosmith'",
    "question": "What are the titles of all the albums by artists other than Aerosmith?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.company FROM customers AS T1 WHERE T1.first_name = 'Eduardo' OR T1.last_name = 'Martins'",
    "question": "Eduardo or Martins is a customer at which company?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.company FROM customers AS T1 WHERE T1.first_name = 'Eduardo' OR T1.last_name = 'Martins'",
    "question": "What is the company where Eduardo or Martins is a customer?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*) FROM customers AS T1 WHERE T1.city != 'Prague'",
    "question": "How many customers live not in Prague city?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*) FROM customers AS T1 WHERE T1.city != 'Prague'",
    "question": "How many customers do not live in the city of Prague?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*) FROM customers AS T1 WHERE T1.state != 'CA'",
    "question": "How many customers not in state of CA?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*) FROM customers AS T1 WHERE T1.state != 'CA'",
    "question": "How many customers are not from California?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.country FROM customers AS T1 WHERE T1.first_name = 'Roberto' OR T1.last_name = 'Almeida'",
    "question": "In which country is Roberto or Almeida?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name NOT LIKE 'Led'",
    "question": "List the name of albums that are not released by aritist whose name has 'Led'"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name NOT LIKE 'Led'",
    "question": "What is the title of the album that was released by the artist whose name does not have the word 'Led'?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*) FROM customers AS T1 JOIN employees AS T2 ON T1.support_rep_id = T2.id WHERE T2.first_name = 'Steve' OR T2.last_name = 'Johnson'",
    "question": "How many customers does Steve Johnson or Steve Johnson support?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*) FROM customers AS T1 JOIN employees AS T2 ON T1.support_rep_id = T2.id WHERE T2.first_name = 'Steve' OR T2.last_name = 'Johnson'",
    "question": "What is the count of customers that Steve Johnson or Steve Johnson supports?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title, T1.phone, T1.hire_date FROM employees AS T1 WHERE T1.first_name = 'Nancy' OR T1.last_name = 'Edwards'",
    "question": "What is the title, phone and hire date of all employees with first name Nancy or last name Edwards?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.first_name, T1.last_name FROM employees AS T1 WHERE T1.first_name = 'Nancy' OR T1.last_name = 'Edwards'",
    "question": "find the full name of employees who report to Nancy Edwards or report to Nancy Edwards?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.first_name, T1.last_name FROM employees AS T1 WHERE T1.first_name = 'Nancy' OR T1.last_name = 'Edwards'",
    "question": "What is the first and last name of the employee who reports to Nancy Edwards or is Nancy Edwards?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.address FROM employees AS T1 WHERE T1.first_name = 'Nancy' OR T1.last_name = 'Edwards'",
    "question": "What is the address of a person whose first name is Nancy or whose last name is Edwards?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*) FROM employees AS T1 WHERE T1.country != 'Canada'",
    "question": "How many employees are not living in Canada?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*) FROM employees AS T1 WHERE T1.country != 'Canada'",
    "question": "How many employees do not live in Canada?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*), T1.city FROM employees AS T1 WHERE T1.title != 'IT Staff' GROUP BY T1.city",
    "question": "Find the number of employees whose title is not IT Staff from each city?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*), T1.city FROM employees AS T1 WHERE T1.title != 'IT Staff' GROUP BY T1.city",
    "question": "How many employees who are not IT staff are from each city?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT(*) FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.first_name = 'Lucas' OR T2.last_name = 'Mancini'",
    "question": "How many orders does Lucas Mancini or someone with the last name Mancini has?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT SUM( T1.total) FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.first_name = 'Lucas' OR T2.last_name = 'Mancini'",
    "question": "What is the total amount of money spent by Lucas Mancini or any customer with a last name of Mancini?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT SUM( T1.total) FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.first_name = 'Lucas' OR T2.last_name = 'Mancini'",
    "question": "How much money did Lucas Mancini or someone else spend?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT( T1.name) FROM media_types AS T1",
    "question": "How many media types are there?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT( T1.name) FROM media_types AS T1",
    "question": "How many media types are there?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM genres AS T1",
    "question": "Count all different genre types."
  },
  {
    "db_id": "store_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM genres AS T1",
    "question": "How many different names of the genres are there?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT( T1.name) FROM playlists AS T1",
    "question": "How many playlist are there?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT COUNT( T1.name) FROM playlists AS T1",
    "question": "How many playlists are there?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.composer FROM tracks AS T1 WHERE T1.name != 'Fast As a Shark'",
    "question": "Who is the composer of all tracks except Fast As a Shark?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.composer FROM tracks AS T1 WHERE T1.name != 'Fast As a Shark'",
    "question": "What is the composer who did not create the track \"Fast As a Shark\"?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.milliseconds FROM tracks AS T1 WHERE T1.name != 'Fast As a Shark'",
    "question": "How long does every track has that is not Fast As a Shark?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.milliseconds FROM tracks AS T1 WHERE T1.name != 'Fast As a Shark'",
    "question": "How many milliseconds long is every song except Fast As a Shark?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id WHERE T2.name != 'Rock'",
    "question": "What is the name of tracks whose genre is not Rock?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id WHERE T2.name != 'Rock'",
    "question": "What is the name of all tracks not in the Rock genre?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name != 'Balls to the Wall'",
    "question": "What is title of album which track Balls to the Wall does not belong to?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name != 'Balls to the Wall'",
    "question": "What is the name of the album that does not have the track Ball to the Wall?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title != 'Balls to the Wall'",
    "question": "List name of all tracks not in Balls to the Wall."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title FROM albums AS T1  GROUP BY T1.title HAVING COUNT( T1.id) >= 10",
    "question": "List title of albums have the number of tracks greater than or equal to 10."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.title FROM albums AS T1  GROUP BY T1.title HAVING COUNT( T1.id) >= 10",
    "question": "What are the names of the albums that have at least 10 tracks?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id JOIN media_types AS T3 ON T1.media_type_id = T3.id WHERE T2.name = 'Rock' OR T3.name = 'MPEG audio file'",
    "question": "List the name of tracks belongs to genre Rock or whose media type is MPEG audio file."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id JOIN media_types AS T3 ON T1.media_type_id = T3.id WHERE T2.name = 'Rock' AND T3.name = 'MPEG audio file'",
    "question": "List the name of tracks belongs to genre Rock and media type is MPEG audio file."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id WHERE T2.name = 'Rock' AND T2.name = 'Jazz'",
    "question": "List the name of tracks belongs to genre Rock and genre Jazz."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T3 ON T1.id = T3.track_id JOIN playlists AS T2 ON T3.playlist_id = T2.id WHERE T2.name != 'Movies'",
    "question": "What are the names of all tracks that are on playlists not titled Movies?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM playlists AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.playlist_id  GROUP BY T1.name HAVING COUNT( T2.track_id) >= 100",
    "question": "List the name of playlist which has number of tracks greater than or equal to 100."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM playlists AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.playlist_id  GROUP BY T1.name HAVING COUNT( T2.track_id) < 100",
    "question": "What are the names of all playlists that have less than 100 tracks?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T3 ON T1.id = T3.track_id JOIN invoices AS T4 ON T3.invoice_id = T4.id JOIN customers AS T2 ON T4.customer_id = T2.id WHERE T2.first_name = 'Daan' OR T2.last_name = 'Peeters'",
    "question": "List all tracks bought by customer Daan or Peeters."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T3 ON T1.id = T3.track_id JOIN invoices AS T4 ON T3.invoice_id = T4.id JOIN customers AS T2 ON T4.customer_id = T2.id WHERE T2.first_name = 'Daan' OR T2.last_name = 'Peeters'",
    "question": "What are the tracks that Dean Peeters or Daan Peeters bought?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.unit_price FROM tracks AS T1 WHERE T1.name != 'Fast As a Shark'",
    "question": "How much is the track not Fast As a Shark?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.unit_price FROM tracks AS T1 WHERE T1.name != 'Fast As a Shark'",
    "question": "What is the unit price of the tune not named \"Fast As a Shark\"?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T3 ON T1.id = T3.track_id JOIN playlists AS T2 ON T3.playlist_id = T2.id WHERE T2.name = 'Movies'",
    "question": "Find the name of tracks which are in Movies playlist."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T3 ON T1.id = T3.track_id JOIN playlists AS T2 ON T3.playlist_id = T2.id WHERE T2.name = 'Movies'     INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T3 ON T1.id = T3.track_id JOIN playlists AS T2 ON T3.playlist_id = T2.id WHERE T2.name = 'Music'",
    "question": "What are the names of all tracks that are on both the Movies playlist and the music playlist?"
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T3 ON T1.id = T3.track_id JOIN playlists AS T2 ON T3.playlist_id = T2.id WHERE T2.name = 'Movies'      UNION SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T3 ON T1.id = T3.track_id JOIN playlists AS T2 ON T3.playlist_id = T2.id WHERE T2.name = 'Music'",
    "question": "Find the name of tracks which are in either Movies or music playlists."
  },
  {
    "db_id": "store_1",
    "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T3 ON T1.id = T3.track_id JOIN playlists AS T2 ON T3.playlist_id = T2.id WHERE T2.name = 'Movies'       EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T3 ON T1.id = T3.track_id JOIN playlists AS T2 ON T3.playlist_id = T2.id WHERE T2.name = 'Music'",
    "question": "What are the names of all the tracks that are in the Movies playlist but not in the music playlist?"
  },
  {
    "db_id": "journal_committee",
    "query": "SELECT * FROM editor AS T1",
    "question": "What are the names of all the editors?"
  },
  {
    "db_id": "journal_committee",
    "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T3 ON T1.Editor_ID = T3.Editor_ID JOIN journal AS T2 ON T3.Journal_ID = T2.Journal_ID WHERE T2.Sales >= 3000",
    "question": "Show the names of editors that are on the committee of journals with sales equal or bigger than 3000."
  },
  {
    "db_id": "journal_committee",
    "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID  GROUP BY T1.Name HAVING COUNT(*) <= 2",
    "question": "Show the names of editors that are on at most two journal committees."
  },
  {
    "db_id": "journal_committee",
    "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID",
    "question": "List the names of editors that are on at least one journal committee."
  },
  {
    "db_id": "journal_committee",
    "query": "SELECT T1.Date, T1.Theme, T1.Sales FROM journal AS T1",
    "question": "List the date, theme and sales of the journal which had any of the listed editors serving on committee."
  },
  {
    "db_id": "journal_committee",
    "query": "SELECT AVG( T1.Sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.Journal_ID = T2.Journal_ID WHERE T2.Work_Type != 'Photo'",
    "question": "What is the average sales of the journals that do not have an editor whose work type is 'Photo'?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT * FROM Accounts AS T1",
    "question": "What are the accounts?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT * FROM Accounts AS T1",
    "question": "Show all accounts."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T1.other_account_details FROM Accounts AS T1 WHERE T1.account_name != '338'",
    "question": "What are the other account details for the accounts with the name not 338?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  !=  '162'",
    "question": "What is the first name, last name, and phone of the customer with account name not 162?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  !=  '162'",
    "question": "Give the full name and phone of the customer who does not have the account name 162."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' OR T2.customer_last_name = 'Turcotte'",
    "question": "How many accounts does the customer with first name Art or last name Turcotte have?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' OR T2.customer_last_name  =  'Turcotte'",
    "question": "Return the number of accounts that the customer with the first name Art or last name Turcotte has."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT COUNT(*) FROM Customers AS T1 JOIN Accounts AS T2",
    "question": "Show the number of all customers with an account."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT COUNT(*) FROM Customers AS T1 JOIN Accounts AS T2",
    "question": "How many customers have an account?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1",
    "question": "Show the first names and last names of customers."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.customer_first_name), T1.customer_last_name FROM Customers AS T1  GROUP BY T1.customer_last_name",
    "question": "How many customers have accounts?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT T1.customer_id FROM Accounts AS T1",
    "question": "What are the customer ids of customers who have an account?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT T1.customer_id FROM Accounts AS T1",
    "question": "List the customer IDs of customers who hold an account."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT * FROM Customers AS T1",
    "question": "What are the customers?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT * FROM Customers AS T1",
    "question": "Show all customers."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T1.customer_phone, T1.customer_email FROM Customers AS T1 WHERE T1.customer_first_name = 'Aniyah' OR T1.customer_last_name = 'Feest'",
    "question": "What is the phone and email for customer with first name Aniyah or last name Feest?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T1.customer_phone, T1.customer_email FROM Customers AS T1 WHERE T1.customer_first_name = 'Aniyah' OR T1.customer_last_name = 'Feest'",
    "question": "Return the phone and email of the customer with the first name Aniyah or last name Feest."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT * FROM Customers_Cards AS T1",
    "question": "Show all customer cards."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT * FROM Customers_Cards AS T1",
    "question": "What are all the customer cards?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T1.date_valid_from, T1.date_valid_to FROM Customers_Cards AS T1 WHERE T1.card_number != '4560596484842'",
    "question": "Show the date valid from and the date valid to for the cards with card number not '4560596484842'."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T1.date_valid_from, T1.date_valid_to FROM Customers_Cards AS T1 WHERE T1.card_number != '4560596484842'",
    "question": "What are the valid from and valid to dates for the cards that are not the card with the number 4560596484842?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number != '4560596484842'",
    "question": "What is the first name, last name, and phone of the customer without card 4560596484842."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number != '4560596484842'",
    "question": "Return the full name and phone of the customer who does not have card number 4560596484842."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' OR T2.customer_last_name = 'Turcotte'",
    "question": "Count the number of cards the customer with the first name Art or last name Turcotte has."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT COUNT(*) FROM Customers_Cards AS T1 WHERE T1.card_type_code != 'Debit'",
    "question": "Count the number of customer cards not of the type Debit."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Blanche' OR T2.customer_last_name = 'Huels' AND T1.card_type_code = 'Credit'",
    "question": "How many credit cards does customer Blanche Huels or customer Blanche Huels have?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Blanche' OR T2.customer_last_name = 'Huels' AND T1.card_type_code = 'Credit'",
    "question": "Count the number of credit cards that the customer with first name Blanche or last name Huels has."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2",
    "question": "Show id, first and last names for all customers with more than two cards."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T1.card_type_code FROM Customers_Cards AS T1  GROUP BY T1.card_type_code HAVING COUNT(*) < 5",
    "question": "Show card type codes with less than 5 cards."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT T1.card_type_code FROM Customers_Cards AS T1  GROUP BY T1.card_type_code HAVING COUNT(*) < 5",
    "question": "What are the codes of card types that have less than 5 cards?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.card_type_code), COUNT(DISTINCT  T1.customer_id) FROM Customers_Cards AS T1",
    "question": "How many different card types are there, and how many different customers are there?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.card_type_code) FROM Customers_Cards AS T1",
    "question": "Show the number of distinct card type codes."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.card_type_code) FROM Customers_Cards AS T1",
    "question": "How many different card type codes are there?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT T1.card_type_code FROM Customers_Cards AS T1",
    "question": "Show the card types."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT T1.card_type_code FROM Customers_Cards AS T1",
    "question": "What are the different card types?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.transaction_type) FROM Financial_Transactions AS T1",
    "question": "How many transaction types are there?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.transaction_type) FROM Financial_Transactions AS T1",
    "question": "How many different types of transactions are there?"
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT T1.transaction_type FROM Financial_Transactions AS T1",
    "question": "Show the transaction types."
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT DISTINCT T1.transaction_type FROM Financial_Transactions AS T1",
    "question": "What are the different types of transactions?"
  },
  {
    "db_id": "race_track",
    "query": "SELECT * FROM track AS T1",
    "question": "What are all the tracks?"
  },
  {
    "db_id": "race_track",
    "query": "SELECT * FROM track AS T1",
    "question": "Show all the tracks."
  },
  {
    "db_id": "race_track",
    "query": "SELECT T1.Name, T1.Seating FROM track AS T1 WHERE T1.Year_Opened >= 2000    ORDER BY T1.Seating ASC",
    "question": "Show names and seatings, ordered by seating for all tracks opened after or in 2000."
  },
  {
    "db_id": "race_track",
    "query": "SELECT T1.Name, T1.Seating FROM track AS T1 WHERE T1.Year_Opened < 2000    ORDER BY T1.Seating ASC",
    "question": "What are the names and seatings for all tracks opened before 2000, ordered by seating?"
  },
  {
    "db_id": "race_track",
    "query": "SELECT T1.Name, T1.Location, T1.Year_Opened FROM track AS T1 WHERE T1.Seating != (SELECT AVG( T22.Seating) FROM track AS T22)",
    "question": "What are the names, locations, and years of opening for tracks with seating not equal to average?"
  },
  {
    "db_id": "race_track",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Location) FROM track AS T1",
    "question": "How many distinct locations where tracks are located?"
  },
  {
    "db_id": "race_track",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Location) FROM track AS T1",
    "question": "Give the number of different locations of tracks."
  },
  {
    "db_id": "race_track",
    "query": "SELECT * FROM race AS T1",
    "question": "What are the races?"
  },
  {
    "db_id": "race_track",
    "query": "SELECT * FROM race AS T1",
    "question": "Show all the data in the race table."
  },
  {
    "db_id": "race_track",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Class) FROM race AS T1",
    "question": "How many distinct classes are there?"
  },
  {
    "db_id": "race_track",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Class) FROM race AS T1",
    "question": "Return the number of different classes of races."
  },
  {
    "db_id": "race_track",
    "query": "SELECT T1.Class FROM race AS T1  GROUP BY T1.Class HAVING COUNT(*) < 2",
    "question": "List the race class with less than two races."
  },
  {
    "db_id": "race_track",
    "query": "SELECT T1.Name FROM track AS T1",
    "question": "What are the names for all tracks?"
  },
  {
    "db_id": "race_track",
    "query": "SELECT T1.Name FROM track AS T1",
    "question": "Give the names of all tracks."
  },
  {
    "db_id": "race_track",
    "query": "SELECT T1.Name FROM track AS T1 JOIN race AS T2 ON T1.Track_ID = T2.Track_ID",
    "question": "Show all track names that have had races."
  },
  {
    "db_id": "race_track",
    "query": "SELECT T1.Name FROM track AS T1 JOIN race AS T2 ON T1.Track_ID = T2.Track_ID",
    "question": "Return the names of tracks that have had races."
  },
  {
    "db_id": "race_track",
    "query": "SELECT T1.Location FROM track AS T1 WHERE T1.Seating > 90000      UNION SELECT T2.Location FROM track AS T2 WHERE T2.Seating < 70000",
    "question": "Find the locations where have either tracks with more than 90000 seats or tracks with less than 70000 seats."
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT COUNT(*) FROM member AS T1 WHERE T1.Membership_card != 'Black'",
    "question": "How many members do not have the black membership card?"
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT COUNT(*), T1.Name FROM member AS T1  GROUP BY T1.Name",
    "question": "Find the number of members living in each name."
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT T1.Name, T1.Member_ID FROM member AS T1 WHERE T1.Membership_card = 'Black' AND T1.Age < 30",
    "question": "Find the ids and names of members who are under age 30 and with black membership card."
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT T1.Membership_card FROM member AS T1  GROUP BY T1.Membership_card HAVING COUNT(*) >= 5",
    "question": "Which membership card has more than or equal to 5 members?"
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT T1.Address FROM member AS T1 WHERE T1.Age < 30       EXCEPT SELECT T2.Address FROM member AS T2 WHERE T2.Age > 40",
    "question": "Which address has members younger than 30 but not members older than 40?"
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT COUNT(*) FROM member AS T1 WHERE T1.Address = 'Hartford'",
    "question": "How many members are living in Hartford?"
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT T1.Address FROM member AS T1",
    "question": "Which address do have any member?"
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT T1.Address, T1.Num_of_staff FROM shop AS T1 JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID",
    "question": "Find the address and staff number of the shops that have happy hour."
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT T1.Address, T1.Shop_ID FROM shop AS T1 JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Month != 'May'",
    "question": "What are the id and address of the shops which do not have a happy hour in May?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT * FROM Album AS T1",
    "question": "What are the names of all the albums?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT * FROM Album AS T1",
    "question": "Find all the albums."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT( T1.Name) FROM Genre AS T1",
    "question": "How many music genres are there?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT( T1.Name) FROM Genre AS T1",
    "question": "How many music genres are there?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT * FROM Customer AS T1 WHERE T1.State != 'NY'",
    "question": "Find all the customer information not in state NY."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT * FROM Customer AS T1 WHERE T1.State != 'NY'",
    "question": "What is all the customer information for customers not in NY state?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM Employee AS T1 WHERE T1.City != 'Calgary'",
    "question": "What are the first names and last names of the employees who do not live in Calgary city."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM Employee AS T1 WHERE T1.City != 'Calgary'",
    "question": "Find the full names of employees not living in the city of Calgary."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.BillingCountry) FROM Invoice AS T1",
    "question": "How many distinct billing countries are there in the invoices?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.BillingCountry) FROM Invoice AS T1",
    "question": "Find the number of different billing countries for all invoices."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Name FROM Artist AS T1 WHERE T1.Name NOT LIKE 'a'",
    "question": "Find the names of all artists that do not have \"a\" in their names."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Name FROM Artist AS T1 WHERE T1.Name NOT LIKE 'a'",
    "question": "What are the names of artist who do not have the letter 'a' in their names?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Title FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name != 'AC\/DC'",
    "question": "Find the title of all the albums of all the artists except \"AC\/DC\"."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Title FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name != 'AC\/DC'",
    "question": "What are the titles of albums by all artists except \"AC\/DC\"?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT(*) FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name != 'Metallica'",
    "question": "How many albums do the artists have that are not \"Metallica\"?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Name FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Title != 'Balls to the Wall'",
    "question": "Which artist does not have an album named \"Balls to the Wall\"?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Name FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Title != 'Balls to the Wall'",
    "question": "Find the name of the artist who did not make the album \"Balls to the Wall\"."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Name FROM Track AS T1 WHERE T1.Name NOT LIKE 'you'",
    "question": "Find the names of all the tracks that do not contain the word \"you\"."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Name FROM Track AS T1 WHERE T1.Name NOT LIKE 'you'",
    "question": "What are the names of tracks that do not contain the word you in them?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.UnitPrice FROM Track AS T1",
    "question": "What are the unit prices of all the tracks?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.UnitPrice FROM Track AS T1",
    "question": "Find the unit price for a track."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Title, T2.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice < 1",
    "question": "Show the album names and ids for albums that contain tracks with unit price smaller than 1."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Title, T2.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice >= 1",
    "question": "What are the titles and ids for albums containing tracks with unit price greater than or equal to 1?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT(*) FROM Track AS T1 JOIN Genre AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name != 'Rock'",
    "question": "Count the number of tracks that are not part of the rock genre."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT AVG( T1.UnitPrice) FROM Track AS T1 JOIN Genre AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name != 'Jazz'",
    "question": "What is the average unit price of tracks that do not belong to Jazz genre?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT AVG( T1.UnitPrice) FROM Track AS T1 JOIN Genre AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name != 'Jazz'",
    "question": "Find the average unit price of non-jazz tracks."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM Customer AS T1 WHERE T1.Email != 'luisg@embraer.com.br'",
    "question": "What is the first name and last name of the customer that has email not \"luisg@embraer.com.br\"?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT(*) FROM Customer AS T1 WHERE T1.Email NOT LIKE 'gmail.com'",
    "question": "How many customers have email that does not contain \"gmail.com\"?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT(*) FROM Customer AS T1 WHERE T1.Email NOT LIKE 'gmail.com'",
    "question": "Count the number of customers that do not have an email containing \"gmail.com\"."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM Employee AS T1 JOIN Customer AS T2 ON T1.EmployeeId = T2.SupportRepId WHERE T2.FirstName != 'Leonie'",
    "question": "What is the first name and last name employee does not help the customer with first name Leonie?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM Employee AS T1 JOIN Customer AS T2 ON T1.EmployeeId = T2.SupportRepId WHERE T2.FirstName != 'Leonie'",
    "question": "Find the full names of employees who do not help customers with the first name Leonie."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.City FROM Employee AS T1 JOIN Customer AS T2 ON T1.EmployeeId = T2.SupportRepId WHERE T2.PostalCode != '70174'",
    "question": "What city does the employee who does not help the customer with postal code 70174 live in?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.City FROM Employee AS T1 JOIN Customer AS T2 ON T1.EmployeeId = T2.SupportRepId WHERE T2.PostalCode != '70174'",
    "question": "Find the cities corresponding to employees who do not help customers with the postal code 70174."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT DISTINCT T1.City FROM Employee AS T1",
    "question": "What are the distinct cities where the employees live in?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT DISTINCT T1.City FROM Employee AS T1",
    "question": "Find the cities that employees live in."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.InvoiceDate FROM Invoice AS T1 JOIN Customer AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.FirstName = 'Astrid' OR T2.LastName = 'Gruber'",
    "question": "Find all invoice dates corresponding to customers with first name Astrid or last name Gruber."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.InvoiceDate FROM Invoice AS T1 JOIN Customer AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.FirstName = 'Astrid' OR T2.LastName = 'Gruber'",
    "question": "What are the invoice dates for customers with the first name Astrid or the last name Gruber?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT DISTINCT T1.FirstName FROM Customer AS T1 WHERE T1.Country != 'Brazil'",
    "question": "Find the first names of all customers that do not live in Brazil and have an invoice."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT DISTINCT T1.FirstName FROM Customer AS T1 WHERE T1.Country != 'Brazil'",
    "question": "What are the different first names for customers from countries other than Brazil who have also had an invoice?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT DISTINCT T1.Address FROM Customer AS T1 WHERE T1.Country != 'Germany'",
    "question": "Find the address of all customers that do not live in Germany and have invoice."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT( T1.Phone) FROM Employee AS T1",
    "question": "How many phone numbers are there in the employee table?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT( T1.Phone) FROM Employee AS T1",
    "question": "How many phone numbers are there in the employee table?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT(*) FROM Track AS T1 JOIN MediaType AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T2.Name != 'AAC audio file'",
    "question": "Count the number of tracks that are not of the media type \"AAC audio file\"."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT AVG( T1.Milliseconds) FROM Track AS T1 JOIN Genre AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = 'Latin' AND T2.Name = 'Pop'",
    "question": "What is the average duration in milliseconds of tracks that belong to Latin and Pop genre?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT AVG( T1.Milliseconds) FROM Track AS T1 JOIN Genre AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = 'Latin' AND T2.Name = 'Pop'",
    "question": "Find the average millisecond length of Latin and Pop tracks."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.FirstName, T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId  GROUP BY T1.SupportRepId HAVING COUNT(*) < 10",
    "question": "What are the first names and support rep ids for employees serving less than 10 customers?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId  GROUP BY T1.LastName HAVING COUNT(*) > 20",
    "question": "Please show the employee last names that serves more than 20 customers."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId  GROUP BY T1.LastName HAVING COUNT(*) >= 20",
    "question": "What are the last names of employees who serve at least 20 customers?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Name, T2.ArtistId FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId  GROUP BY T2.ArtistId HAVING COUNT(*) > 3  ORDER BY T1.Name ASC",
    "question": "Please list the name and id of all artists that have more than 3 albums in alphabetical order."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Name FROM Artist AS T1       UNION SELECT T2.Name FROM Artist AS T2",
    "question": "Find the names of artists that have at least one album."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Name FROM Artist AS T1      INTERSECT SELECT T2.Name FROM Artist AS T2",
    "question": "What are the names of artists who have released albums?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT AVG( T1.UnitPrice) FROM Track AS T1 JOIN Genre AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name != 'Rock'",
    "question": "What is the average unit price of non-rock tracks?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT AVG( T1.UnitPrice) FROM Track AS T1 JOIN Genre AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name != 'Rock'",
    "question": "Find the average unit price of tracks from all genres except Rock."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT MAX( T1.Milliseconds), MIN( T1.Milliseconds) FROM Track AS T1 JOIN Genre AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name != 'Pop'",
    "question": "What are the duration of the longest and shortest non-pop tracks in milliseconds?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT MAX( T1.Milliseconds), MIN( T1.Milliseconds) FROM Track AS T1 JOIN Genre AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name != 'Pop'",
    "question": "Find the maximum and minimum millisecond lengths of non-pop tracks."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.BirthDate FROM Employee AS T1 WHERE T1.City != 'Edmonton'",
    "question": "What are the birth dates of employees not living in Edmonton?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.BirthDate FROM Employee AS T1 WHERE T1.City != 'Edmonton'",
    "question": "Find the birth dates corresponding to employees who do not live in the city of Edmonton."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.UnitPrice) FROM Track AS T1",
    "question": "How many distinct unit prices are there in all tracks?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.UnitPrice) FROM Track AS T1",
    "question": "Find the distinct count of distinct unit prices for tracks."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT(*) FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId",
    "question": "How many artists are there?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT COUNT(*) FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId",
    "question": "Count the number of artists who have released an album."
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T3 ON T1.AlbumId = T3.AlbumId JOIN Genre AS T2 ON T3.GenreId = T2.GenreId WHERE T2.Name = 'Reggae'       EXCEPT SELECT T1.Title FROM Album AS T1 JOIN Track AS T3 ON T1.AlbumId = T3.AlbumId JOIN Genre AS T2 ON T3.GenreId = T2.GenreId WHERE T2.Name = 'Rock'",
    "question": "What are the album titles for albums containing 'Reggae' genre tracks but not 'Rock' genre tracks?"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T3 ON T1.AlbumId = T3.AlbumId JOIN Genre AS T2 ON T3.GenreId = T2.GenreId WHERE T2.Name = 'Reggae'       EXCEPT SELECT T1.Title FROM Album AS T1 JOIN Track AS T3 ON T1.AlbumId = T3.AlbumId JOIN Genre AS T2 ON T3.GenreId = T2.GenreId WHERE T2.Name = 'Rock'",
    "question": "Find the titles of albums that contain tracks of the Reggae genre but not the Rock genre."
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT COUNT( T1.Customer_Phone) FROM Available_Policies AS T1",
    "question": "How many phone numbers are there?"
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT COUNT( T1.Customer_Phone) FROM Available_Policies AS T1",
    "question": "How many phone numbers are there?"
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Customer_Phone FROM Available_Policies AS T1 WHERE T1.policy_type_code != 'Life Insurance'",
    "question": "What are the customer phone numbers under the policy \"Not Life Insurance\"?"
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Customer_Phone FROM Available_Policies AS T1 WHERE T1.policy_type_code != 'Life Insurance'",
    "question": "What are the phone numbers of customers using policies other than \"Life Insurance\"?"
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Service_name FROM Services AS T1 JOIN First_Notification_of_Loss AS T2 ON T1.Service_ID = T2.Service_ID  GROUP BY T1.Service_name HAVING COUNT(*) < 2",
    "question": "Find the name of services that have been used for less than 2 times in first notification of loss."
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT DISTINCT T1.policy_type_code FROM Available_Policies AS T1 JOIN Customers_Policies AS T3 ON T1.Policy_ID = T3.Policy_ID JOIN Customers AS T2 ON T3.Customer_ID = T2.Customer_ID WHERE T2.Customer_name != 'Dayana Robel'",
    "question": "What are all the policy types of the customers that are not named \"Dayana Robel\"?"
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT DISTINCT T1.policy_type_code FROM Available_Policies AS T1 JOIN Customers_Policies AS T3 ON T1.Policy_ID = T3.Policy_ID JOIN Customers AS T2 ON T3.Customer_ID = T2.Customer_ID WHERE T2.Customer_name < (SELECT T23.Customer_name FROM Customers AS T23 JOIN Customers_Policies AS T24 ON T23.Customer_ID = T24.Customer_ID  GROUP BY T23.Customer_name  ORDER BY COUNT(*) DESC LIMIT 1)",
    "question": "List all the policy types used by the customer enrolled in fewer policies than the customer with the most policies."
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT * FROM Services AS T1",
    "question": "What are the services?"
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT * FROM Services AS T1",
    "question": "List all the available services."
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Customer_name FROM Customers AS T1      INTERSECT SELECT T2.Customer_name FROM Customers AS T2",
    "question": "Find the names of users who have a first notification of loss record."
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Customer_name FROM Customers AS T1      INTERSECT SELECT T2.Customer_name FROM Customers AS T2",
    "question": "Which customers have a first notification of loss record? Give me the customer names."
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Customer_name FROM Customers AS T1 JOIN Customers_Policies AS T3 ON T1.Customer_ID = T3.Customer_ID JOIN First_Notification_of_Loss AS T4 ON T3.Customer_ID = T4.Customer_ID JOIN Services AS T2 ON T4.Service_ID = T2.Service_ID WHERE T2.Service_name = 'Close a policy' AND T2.Service_name = 'Upgrade a policy'",
    "question": "Which customers have used the service named \"Close a policy\" and \"Upgrade a policy\"? Give me the customer names."
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Customer_name FROM Customers AS T1 JOIN Customers_Policies AS T3 ON T1.Customer_ID = T3.Customer_ID JOIN First_Notification_of_Loss AS T4 ON T3.Customer_ID = T4.Customer_ID JOIN Services AS T2 ON T4.Service_ID = T2.Service_ID WHERE T2.Service_name = 'Close a policy'       EXCEPT SELECT T1.Customer_name FROM Customers AS T1 JOIN Customers_Policies AS T3 ON T1.Customer_ID = T3.Customer_ID JOIN First_Notification_of_Loss AS T4 ON T3.Customer_ID = T4.Customer_ID JOIN Services AS T2 ON T4.Service_ID = T2.Service_ID WHERE T2.Service_name = 'New policy application'",
    "question": "Find the names of customers who have used the service \"Close a policy\" but not the service \"New policy application\"."
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Customer_name FROM Customers AS T1 JOIN Customers_Policies AS T3 ON T1.Customer_ID = T3.Customer_ID JOIN First_Notification_of_Loss AS T4 ON T3.Customer_ID = T4.Customer_ID JOIN Services AS T2 ON T4.Service_ID = T2.Service_ID WHERE T2.Service_name = 'Close a policy'",
    "question": "Which customers have used the service named \"Close a policy\"? Give me the customer names."
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Customer_ID FROM Customers AS T1 WHERE T1.Customer_name NOT LIKE 'Diana'",
    "question": "Find the IDs of customers whose name does not contain \"Diana\"."
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Customer_ID FROM Customers AS T1 WHERE T1.Customer_name NOT LIKE 'Diana'",
    "question": "What are the IDs of customers who do not have \"Diana\" in part of their names?"
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Date_Opened, T1.Date_Closed FROM Customers_Policies AS T1 JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_name NOT LIKE 'Diana'",
    "question": "Retrieve the open and close dates of all the policies associated with the customer whose name does not contain \"Diana\""
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT T1.Date_Opened, T1.Date_Closed FROM Customers_Policies AS T1 JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_name NOT LIKE 'Diana'",
    "question": "What are the open and close dates of all the policies used by the customer who do not have \"Diana\" in part of their names?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT * FROM enzyme AS T1",
    "question": "What are all the kinds of enzymes?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT * FROM enzyme AS T1",
    "question": "What are all the enzymes?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.Product, T1.Chromosome, T1.Porphyria FROM enzyme AS T1 WHERE T1.Location != 'Cytosol'",
    "question": "What is the product, chromosome and porphyria related to the enzymes which do not take effect at the location 'Cytosol'?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name FROM enzyme AS T1 WHERE T1.Product = 'Heme'",
    "question": "What are the names of enzymes who does produce 'Heme'?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name FROM enzyme AS T1 WHERE T1.Product = 'Heme'",
    "question": "What are the names of enzymes whose product is 'Heme'?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name, T1.Trade_Name FROM medicine AS T1 WHERE T1.FDA_approved != 'Yes'",
    "question": "What are the names and trade names of the medicines which does not have 'Yes' value in the FDA record?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name, T1.Trade_Name FROM medicine AS T1 WHERE T1.FDA_approved != 'Yes'",
    "question": "What are the names and trade names of the medcines that are not FDA approved?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.enzyme_id JOIN medicine AS T2 ON T3.medicine_id = T2.id WHERE T2.name = 'Amisulpride' OR T3.interaction_type = 'inhibitor'",
    "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor' or 'Amisulpride' can serve as an enzyme inhibitor?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.enzyme_id JOIN medicine AS T2 ON T3.medicine_id = T2.id WHERE T2.name = 'Amisulpride' OR T3.interaction_type = 'inhibitor'",
    "question": "What are the names of the enzymes used in the medicine  Amisulpride or the ones that act as inhibitors?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.id, T1.name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id  GROUP BY T2.medicine_id HAVING COUNT(*) < 2",
    "question": "For every medicine id, what are the names of the medicines that can interact with less than two enzymes?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN enzyme AS T2 ON T1.enzyme_id = T2.id JOIN medicine AS T3 ON T1.medicine_id = T3.id WHERE T2.name = 'ALA synthase' OR T3.name = 'Aripiprazole'",
    "question": "What is the interaction type of the enzyme named 'ALA synthase' or the medicine named 'Aripiprazole'?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN enzyme AS T2 ON T1.enzyme_id = T2.id JOIN medicine AS T3 ON T1.medicine_id = T3.id WHERE T2.name = 'ALA synthase' OR T3.name = 'Aripiprazole'",
    "question": "What is the type of interaction for the enzyme named 'ALA synthase' or the medicine named 'Aripiprazole'?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT COUNT(*) FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id",
    "question": "How many enzymes have at least one interaction?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT COUNT(*) FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id",
    "question": "How many enzymes have interactions?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.id, T1.Trade_Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id  GROUP BY T2.medicine_id HAVING COUNT(*) <= 3",
    "question": "What is the id and trade name of the medicines can interact with at most 3 enzymes?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.id, T1.Trade_Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id  GROUP BY T2.medicine_id HAVING COUNT(*) < 3",
    "question": "What are the ids and trade names of the medicine that can interact with less than 3 enzymes?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT DISTINCT T1.name, T1.Location, T1.Product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type != 'inhibitor'",
    "question": "What are the distinct name, location and products of the enzymes which has any 'non-inhibitor' interaction?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT DISTINCT T1.name, T1.Location, T1.Product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type != 'inhibitor'",
    "question": "What are the different names, locations, and products of the enzymes that are not capable inhibitor interactions?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name, T1.Trade_Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id WHERE T2.interaction_type = 'inhibitor'",
    "question": "List the medicine name and trade name which can interact as 'inhibitor' with enzymes."
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name, T1.Trade_Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id WHERE T2.interaction_type = 'inhibitor'      UNION SELECT T3.name, T3.Trade_Name FROM medicine AS T3 JOIN medicine_enzyme_interaction AS T4 ON T3.id = T4.medicine_id WHERE T4.interaction_type = 'activitor'",
    "question": "What are the medicine and trade names that can interact as an inhibitor or activitor with enzymes?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name, T1.Trade_Name FROM medicine AS T1",
    "question": "Show the medicine names and trade names."
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT DISTINCT T1.FDA_approved FROM medicine AS T1",
    "question": "What are the distinct FDA approval statuses for the medicines?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT DISTINCT T1.FDA_approved FROM medicine AS T1",
    "question": "What are the different FDA approval statuses for medicines?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name FROM enzyme AS T1 WHERE T1.name NOT LIKE 'ALA'",
    "question": "Which enzyme names do not have the substring \"ALA\"?"
  },
  {
    "db_id": "medicine_enzyme_interaction",
    "query": "SELECT T1.name FROM enzyme AS T1 WHERE T1.name NOT LIKE 'ALA'",
    "question": "What are the names of enzymes that do not include the string 'ALA'?"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT T1.Founded FROM university AS T1 WHERE T1.Affiliation = 'Public'   ORDER BY T1.Founded DESC LIMIT 1",
    "question": "Find the founded year of the newest public school."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT T1.Founded FROM university AS T1 WHERE T1.Affiliation = 'Public'   ORDER BY T1.Founded DESC LIMIT 1",
    "question": "What is the founded year of the public school that was founded most recently?"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT DISTINCT T1.School_ID FROM basketball_match AS T1",
    "question": "What are the school IDs in the basketball match?"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT DISTINCT T1.School_ID FROM basketball_match AS T1",
    "question": "List the school IDs of schools that have had basketball matches."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT T1.All_Games, T2.Location FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name != 'Clemson'",
    "question": "Find the location and all games score of the school that does not have Clemson as its team name."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT T1.All_Games, T2.Location FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name != 'Clemson'",
    "question": "What are the all games score and location of the school not called Clemson?"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT AVG( T1.Enrollment) FROM university AS T1 WHERE T1.Founded > 1850",
    "question": "What are the average enrollment size of the universities that are founded after 1850?"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT T1.Enrollment, T1.Affiliation FROM university AS T1",
    "question": "Find the student enrollment and affiliation for all schools."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT T1.Enrollment, T1.Affiliation FROM university AS T1",
    "question": "What are the enrollments and affiliations of universities?"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT COUNT(*) FROM university AS T1 JOIN basketball_match AS T2 ON T1.School_ID = T2.School_ID",
    "question": "How many schools participate in the basketball match?"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT COUNT(*) FROM university AS T1 JOIN basketball_match AS T2 ON T1.School_ID = T2.School_ID",
    "question": "Count the number of universities that participate in the baketball match."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT T1.School FROM university AS T1 WHERE T1.Founded > 1850 AND T1.Affiliation = 'Public'",
    "question": "Find the schools that were founded after 1850 and public."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT DISTINCT T1.Affiliation FROM university AS T1",
    "question": "Find all the affiliation types."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT DISTINCT T1.Affiliation FROM university AS T1",
    "question": "List all the affiliation types."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT COUNT(*) FROM university AS T1 WHERE T1.Location NOT LIKE 'NY'",
    "question": "Find how many school locations are not 'NY'."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT COUNT(*) FROM university AS T1 WHERE T1.Location NOT LIKE 'NY'",
    "question": "How many universities have a location that does not contain NY?"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT T1.Team_Name FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T2.Enrollment > (SELECT AVG( T23.Enrollment) FROM university AS T23)",
    "question": "What are the names of teams from universities that have an above average enrollment?"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT SUM( T1.Enrollment), T1.Affiliation FROM university AS T1 WHERE T1.Founded < 1850 GROUP BY T1.Affiliation",
    "question": "Find the total number of students enrolled in the colleges that were founded before the year of 1850 for each affiliation type."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT T1.Enrollment FROM university AS T1",
    "question": "Return the enrollment of each school."
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT COUNT(*) FROM basketball_match AS T1",
    "question": "How many basketball matches are there?"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT COUNT(*) FROM basketball_match AS T1",
    "question": "How many basketball matches are there?"
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T1.chip_model, T1.screen_mode FROM phone AS T1 WHERE T1.Hardware_Model_name != 'LG-P760'",
    "question": "What are the chip model and screen mode of the phones with hardware model name not \"LG-P760\"?"
  },
  {
    "db_id": "phone_1",
    "query": "SELECT COUNT(*) FROM phone AS T1 WHERE T1.Company_name != 'Nokia Corporation'",
    "question": "How many phone hardware models are produced by the company other than \"Nokia Corporation\"?"
  },
  {
    "db_id": "phone_1",
    "query": "SELECT MAX( T1.RAM_MiB), MIN( T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name != 'Nokia Corporation'",
    "question": "What is maximum and minimum RAM size of phone produced by company not named \"Nokia Corporation\"?"
  },
  {
    "db_id": "phone_1",
    "query": "SELECT AVG( T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name != 'Nokia Corporation'",
    "question": "What is the average ROM size of phones produced by the company not named \"Nokia Corporation\"?"
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T1.Hardware_Model_name, T1.Company_name FROM phone AS T1 JOIN chip_model AS T2 ON T1.chip_model = T2.Model_name WHERE T2.Launch_year = 2002 AND T2.RAM_MiB > 32",
    "question": "List the hardware model name and company name for all the phones that were launched in year 2002 and have RAM size greater than 32."
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T1.Hardware_Model_name, T1.Company_name FROM phone AS T1 WHERE T1.Accreditation_type NOT LIKE 'Full'",
    "question": "Find all phones that do not have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T1.Char_cells, T1.Pixels, T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name != 'LG-P760'",
    "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is not \"LG-P760\"."
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T1.Hardware_Model_name, T1.Company_name FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T2.Type != 'Graphics'",
    "question": "List the hardware model name and company name for the phone whose screen mode type is not \"Graphics.\""
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T1.Company_name FROM phone AS T1  GROUP BY T1.Company_name HAVING COUNT(*) >= 1",
    "question": "List the name of the company that produced at least one phone model."
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T1.WiFi, T2.Type FROM chip_model AS T1 JOIN phone AS T3 ON T1.Model_name = T3.chip_model JOIN screen_mode AS T2 ON T3.screen_mode = T2.Graphics_mode WHERE T3.Hardware_Model_name != 'LG-P760'",
    "question": "What are the wifi and screen mode type of the hardware model not named \"LG-P760\"?"
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T1.Hardware_Model_name FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode JOIN chip_model AS T3 ON T1.chip_model = T3.Model_name WHERE T2.Type = 'Text' AND T3.RAM_MiB > 32",
    "question": "List the hardware model name for the phones that have screen mode type \"Text\" and RAM size greater than 32."
  },
  {
    "db_id": "phone_1",
    "query": "SELECT DISTINCT T1.Hardware_Model_name FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T2.Type = 'Graphics' AND T1.Company_name = 'Nokia Corporation'",
    "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" and whose screen mode type is \"Graphics.\""
  },
  {
    "db_id": "phone_1",
    "query": "SELECT DISTINCT T1.Hardware_Model_name FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T1.Company_name = 'Nokia Corporation' OR T2.Type != 'Text'",
    "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" or whose screen mode type is not Text."
  },
  {
    "db_id": "phone_1",
    "query": "SELECT COUNT(*) FROM chip_model AS T1",
    "question": "How many chip models are there?"
  },
  {
    "db_id": "phone_1",
    "query": "SELECT AVG( T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model",
    "question": "Find the average ram mib size of the chip models that are used by some phone."
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T1.Model_name FROM chip_model AS T1      INTERSECT SELECT T2.chip_model FROM phone AS T2 WHERE T2.Accreditation_type = 'Full'",
    "question": "Find the names of the chip models that are used by at least one phone with full accreditation type."
  },
  {
    "db_id": "match_season",
    "query": "SELECT * FROM country AS T1",
    "question": "What are the names of all the countries?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT * FROM country AS T1",
    "question": "Show all the countries."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Official_native_language FROM country AS T1 WHERE T1.Official_native_language NOT LIKE 'English'",
    "question": "Show all official native languages that do not contain the word \"English\"."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Official_native_language FROM country AS T1 WHERE T1.Official_native_language NOT LIKE 'English'",
    "question": "What are the official native languages that do not contain the string \"English\"."
  },
  {
    "db_id": "match_season",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Position) FROM match_season AS T1",
    "question": "Show the number of distinct positions of matches."
  },
  {
    "db_id": "match_season",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Position) FROM match_season AS T1",
    "question": "How many different positions are there for match season?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Player FROM match_season AS T1 WHERE T1.College != 'UCLA'",
    "question": "Show the players from colleges other than UCLA."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Player FROM match_season AS T1 WHERE T1.College != 'UCLA'",
    "question": "Who are the players not from UCLA?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Draft_Pick_Number, T1.Draft_Class FROM match_season AS T1 WHERE T1.Position != 'Defender'",
    "question": "Show the draft pick numbers and draft classes of players whose positions are not defenders."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Draft_Pick_Number, T1.Draft_Class FROM match_season AS T1 WHERE T1.Position != 'Defender'",
    "question": "What are the draft pick numbers and draft classes for players who do not play the Defender position?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT DISTINCT T1.Team FROM match_season AS T1",
    "question": "What are the distinct teams involved in match seasons?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT DISTINCT T1.Team FROM match_season AS T1",
    "question": "List all the teams involved in match season."
  },
  {
    "db_id": "match_season",
    "query": "SELECT COUNT( T1.Name) FROM team AS T1",
    "question": "How many teams are there?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT COUNT( T1.Name) FROM team AS T1",
    "question": "How many teams are there?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Player FROM match_season AS T1 JOIN country AS T2 ON T1.Country = T2.Country_id WHERE T2.Country_name != 'Indonesia'",
    "question": "Which players are not from Indonesia?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Player FROM match_season AS T1 JOIN country AS T2 ON T1.Country = T2.Country_id WHERE T2.Country_name != 'Indonesia'",
    "question": "Who are the players not from Indonesia?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT DISTINCT T1.Position FROM match_season AS T1 JOIN country AS T2 ON T1.Country = T2.Country_id WHERE T2.Capital != 'Dublin'",
    "question": "What are the distinct positions of the players from a country whose capital is not Dublin?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT DISTINCT T1.Position FROM match_season AS T1 JOIN country AS T2 ON T1.Country = T2.Country_id WHERE T2.Capital != 'Dublin'",
    "question": "Give the different positions of players who play for the country with the capital not Dublin."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'Maryland' AND T2.College = 'Duke'",
    "question": "Return the official native languages of countries who have players from Maryland AND Duke colleges."
  },
  {
    "db_id": "match_season",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position != 'Defender'",
    "question": "How many distinct official languages are there among countries of players whose positions are not defenders."
  },
  {
    "db_id": "match_season",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position != 'Defender'",
    "question": "Count the number of different official languages corresponding to countries that players who do not play Defender are from."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name != 'Ryley Goldner'",
    "question": "Show the positions of the players from the teams with name not \"Ryley Goldner\"."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name != 'Ryley Goldner'",
    "question": "Return the positions of players on the team that is not Ryley Goldner."
  },
  {
    "db_id": "match_season",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name != 'Columbus Crew'",
    "question": "How many distinct colleges are associated with players from all teams except \"Columbus Crew\"."
  },
  {
    "db_id": "match_season",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name != 'Columbus Crew'",
    "question": "Count the number of different colleges that players who do not play for Columbus Crew are from."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name != 'Columbus Crew'",
    "question": "Show the players and years played for players from all teams except \"Columbus Crew\"."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name != 'Columbus Crew'",
    "question": "What are the players who did not play for Columbus Crew, and how many years did each play for?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.College FROM match_season AS T1  GROUP BY T1.College HAVING COUNT(*) > 2",
    "question": "Show the name of colleges that have more than two players."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.College FROM match_season AS T1  GROUP BY T1.College HAVING COUNT(*) > 2",
    "question": "What are the names of all colleges that have more than two players?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.College FROM match_season AS T1  GROUP BY T1.College HAVING COUNT(*) <= 2  ORDER BY T1.College DESC",
    "question": "Show the name of colleges that have at most two players in descending alphabetical order."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.College FROM match_season AS T1  GROUP BY T1.College HAVING COUNT(*) < 2  ORDER BY T1.College DESC",
    "question": "What are the names of colleges that have less than two players, listed in descending alphabetical order?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team",
    "question": "What are the names of teams that have match season record?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team",
    "question": "Return the names of teams that have match season record."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Forward'       EXCEPT SELECT T3.Country_name FROM country AS T3 JOIN match_season AS T4 ON T3.Country_id = T4.Country WHERE T4.Position = 'Defender'",
    "question": "What are the names of countries that have players with position forward but not players with position defender?"
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Forward'",
    "question": "Return the names of countries that have players that play the Forward position."
  },
  {
    "db_id": "match_season",
    "query": "SELECT T1.College FROM match_season AS T1 WHERE T1.Position = 'Midfielder'",
    "question": "Return the colleges that have players who play the Midfielder position."
  },
  {
    "db_id": "climbing",
    "query": "SELECT * FROM climber AS T1",
    "question": "What are the climbers?"
  },
  {
    "db_id": "climbing",
    "query": "SELECT * FROM climber AS T1",
    "question": "Show all the climbers."
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Name FROM climber AS T1 WHERE T1.Country = 'Switzerland'",
    "question": "List the names of climbers whose country is Switzerland."
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Name FROM climber AS T1 WHERE T1.Country = 'Switzerland'",
    "question": "What are the names of climbers who are from the country of Switzerland?"
  },
  {
    "db_id": "climbing",
    "query": "SELECT MAX( T1.Points) FROM climber AS T1 WHERE T1.Country != 'United Kingdom'",
    "question": "What is the maximum point for climbers whose country is not United Kingdom?"
  },
  {
    "db_id": "climbing",
    "query": "SELECT MAX( T1.Points) FROM climber AS T1 WHERE T1.Country != 'United Kingdom'",
    "question": "Return the maximum number of points for climbers from all countries except the United Kingdom."
  },
  {
    "db_id": "climbing",
    "query": "SELECT DISTINCT T1.Country FROM climber AS T1",
    "question": "What are the distinct countries of the climbers?"
  },
  {
    "db_id": "climbing",
    "query": "SELECT DISTINCT T1.Country FROM climber AS T1",
    "question": "List all the different countries that climbers are from."
  },
  {
    "db_id": "climbing",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Range) FROM mountain AS T1    ORDER BY T1.Prominence DESC LIMIT 1",
    "question": "How many different ranges of the 3 mountains with the highest prominence?"
  },
  {
    "db_id": "climbing",
    "query": "SELECT DISTINCT T1.Name FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country != 'West Germany'",
    "question": "Show the distinct names of mountains climbed by climbers from countries other than \"West Germany\"."
  },
  {
    "db_id": "climbing",
    "query": "SELECT DISTINCT T1.Name FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country != 'West Germany'",
    "question": "What are the different names of mountains ascended by climbers from the country of not West Germany?"
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country != 'Uganda'",
    "question": "Show the times used by climbers to climb mountains not in Country Uganda."
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country != 'Uganda'",
    "question": "What are the times used by climbers who climbed mountains not in the country of Uganda?"
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Country FROM mountain AS T1  GROUP BY T1.Country HAVING COUNT(*) < 1",
    "question": "List the countries that have no mountains."
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Name FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
    "question": "List the names of mountains that have at least one climber."
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Name FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
    "question": "What are the names of mountains that have been climbed?"
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Country FROM mountain AS T1 WHERE T1.Height > 5600      UNION SELECT T2.Country FROM mountain AS T2 WHERE T2.Height < 5200",
    "question": "Show the countries that have mountains with height more than 5600 stories or mountains with height less than 5200."
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Country FROM mountain AS T1 WHERE T1.Height > 5600      UNION SELECT T2.Country FROM mountain AS T2 WHERE T2.Height < 5200",
    "question": "What are the countries that have either mountains that are higher than 5600 or lower than 5200?"
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Name FROM mountain AS T1 WHERE T1.Height > 5000 AND T1.Prominence > 1000",
    "question": "Show the names of mountains with height more than 5000 and prominence more than 1000."
  },
  {
    "db_id": "climbing",
    "query": "SELECT T1.Name FROM mountain AS T1 WHERE T1.Height > 5000 AND T1.Prominence > 1000",
    "question": "What are the names of mountains that have a height of over 5000 and a prominence of over 1000?"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT * FROM body_builder AS T1",
    "question": "What are the attributes of all body builders?"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT COUNT( T1.Name) FROM people AS T1",
    "question": "How many names are there in the people table?"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Total < 300",
    "question": "What are the names of body builders whose total score is lower than 300?"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT T1.Height FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Total > 315",
    "question": "What are the heights of body builders with total score greater than 315?"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT AVG( T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height >= 200",
    "question": "What is the average total score of body builders with height bigger than or equal to 200?"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT COUNT(*) FROM body_builder AS T1",
    "question": "How many body builders are there?"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT T1.Name, T1.Birth_Place FROM people AS T1",
    "question": "List the names and origins of people."
  },
  {
    "db_id": "body_builder",
    "query": "SELECT DISTINCT T1.Birth_Place FROM people AS T1",
    "question": "What are the distinct birth places?"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT COUNT(*) FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID",
    "question": "How many persons are body builders?"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT T1.Weight FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Snatch > 140 AND T1.Height > 200",
    "question": "List the weight of the body builders who have snatch score higher than 140 and have the height greater than 200."
  },
  {
    "db_id": "body_builder",
    "query": "SELECT T1.Total FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Birth_Date NOT LIKE 'January'",
    "question": "What are the total scores of the body builders whose birthday does not contain the string \"January\" ?"
  },
  {
    "db_id": "election_representative",
    "query": "SELECT * FROM election AS T1",
    "question": "What are all the elections?"
  },
  {
    "db_id": "election_representative",
    "query": "SELECT T1.Name FROM representative AS T1 WHERE T1.Party = 'Republican'",
    "question": "What are the names of representatives whose party is \"Republican\"?"
  },
  {
    "db_id": "election_representative",
    "query": "SELECT T1.Lifespan FROM representative AS T1 WHERE T1.State = 'New York' AND T1.State = 'Indiana'",
    "question": "What are the life spans of representatives from New York state and Indiana state?"
  },
  {
    "db_id": "election_representative",
    "query": "SELECT T1.Name FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Votes >= 10000",
    "question": "What are the names of representatives with at least 10000 votes in election?"
  },
  {
    "db_id": "election_representative",
    "query": "SELECT AVG( T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party != 'Republican'",
    "question": "What is the average number of votes of representatives from all parties except \"Republican\"?"
  },
  {
    "db_id": "election_representative",
    "query": "SELECT T1.Party FROM representative AS T1  GROUP BY T1.Party HAVING COUNT(*) > 3",
    "question": "What parties have more than three representatives?"
  },
  {
    "db_id": "election_representative",
    "query": "SELECT T1.State FROM representative AS T1  GROUP BY T1.State HAVING COUNT(*) > 2",
    "question": "What states have more than two representatives?"
  },
  {
    "db_id": "election_representative",
    "query": "SELECT T1.Name FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID = T2.Representative_ID",
    "question": "List the names of representatives that have participated in elections listed here."
  },
  {
    "db_id": "election_representative",
    "query": "SELECT T1.Party FROM representative AS T1 WHERE T1.State = 'New York'      UNION SELECT T2.Party FROM representative AS T2 WHERE T2.State = 'Pennsylvania'",
    "question": "Show the parties that have representatives in New York state or representatives in Pennsylvania state."
  },
  {
    "db_id": "election_representative",
    "query": "SELECT DISTINCT T1.Party FROM representative AS T1",
    "question": "What are the distinct parties for representatives?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT * FROM Apartment_Bookings AS T1",
    "question": "What are the apartment bookings?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT * FROM Apartment_Bookings AS T1",
    "question": "List all apartment bookings."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.building_description) FROM Apartment_Buildings AS T1",
    "question": "Show the number of distinct building descriptions."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.building_description) FROM Apartment_Buildings AS T1",
    "question": "Give me a count of all the distinct building descriptions."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.building_short_name FROM Apartment_Buildings AS T1 WHERE T1.building_manager != 'Emma'",
    "question": "Show the short names of the buildings not managed by \"Emma\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.building_short_name FROM Apartment_Buildings AS T1 WHERE T1.building_manager != 'Emma'",
    "question": "Which buildings do not \"Emma\" manage? Give me the short names of the buildings."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.building_address, T1.building_phone FROM Apartment_Buildings AS T1 WHERE T1.building_manager != 'Brenden'",
    "question": "Show the addresses and phones of all the buildings NOT managed by \"Brenden\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.building_address, T1.building_phone FROM Apartment_Buildings AS T1 WHERE T1.building_manager != 'Brenden'",
    "question": "What are the address and phone number of the buildings NOT managed by \"Brenden\"?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.building_full_name FROM Apartment_Buildings AS T1 WHERE T1.building_full_name NOT LIKE 'court'",
    "question": "What are the building full names that do not contain the word \"court\"?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.building_full_name FROM Apartment_Buildings AS T1 WHERE T1.building_full_name NOT LIKE 'court'",
    "question": "Find all the building full names not containing the word \"court\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.bedroom_count FROM Apartments AS T1",
    "question": "Find the number of bedrooms of all the apartments."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT AVG( T1.room_count) FROM Apartments AS T1 WHERE T1.apt_type_code != 'Studio'",
    "question": "What is the average number of rooms of apartments with type code not \"Studio\"?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT AVG( T1.room_count) FROM Apartments AS T1 WHERE T1.apt_type_code != 'Studio'",
    "question": "Find the average room count of the apartments that do not have the \"Studio\" type code."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.apt_number FROM Apartments AS T1 WHERE T1.apt_type_code != 'Flat'",
    "question": "Return the apartment numbers of the apartments with type code not \"Flat\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.apt_number FROM Apartments AS T1 WHERE T1.apt_type_code != 'Flat'",
    "question": "Which apartments do not have type code \"Flat\"? Give me their apartment numbers."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.date_of_birth FROM Guests AS T1 WHERE T1.gender_code != 'Male'",
    "question": "Return the date of birth for all the guests with gender code not \"Male\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.date_of_birth FROM Guests AS T1 WHERE T1.gender_code != 'Male'",
    "question": "What are dates of birth of all the guests whose gender is not \"Male\"?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code != 'Duplex'",
    "question": "What are the booking start and end dates of the apartments with type code not \"Duplex\"?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code != 'Duplex'",
    "question": "Return the booking start date and end date for the apartments that do not have type code \"Duplex\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count < 2",
    "question": "What are the booking start and end dates of the apartments with less than 2 bedrooms?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count < 2",
    "question": "Find the booking start date and end date for the apartments that have less than two bedrooms."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number != 'Suite 634'",
    "question": "What is the booking status code of the apartment with apartment number not equal to \"Suite 634\"?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number != 'Suite 634'",
    "question": "Tell me the booking status code for the apartments with number not equal to \"Suite 634\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT DISTINCT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code != 'Confirmed'",
    "question": "Show the distinct apartment numbers of the apartments that do not have bookings with status code \"Confirmed\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT DISTINCT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code != 'Confirmed'",
    "question": "Which apartments have bookings with status code not \"Confirmed\"? Return their apartment numbers."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT AVG( T1.room_count) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code != 'Provisional'",
    "question": "Show the average room count of the apartments that do not have booking status code \"Provisional\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT AVG( T1.room_count) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code != 'Provisional'",
    "question": "What is the average room count of the apartments whose booking status code is not \"Provisional\"?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code != 'Female'",
    "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code not \"Female\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.guest_first_name, T1.guest_last_name FROM Guests AS T1 JOIN Apartment_Bookings AS T2 ON T1.guest_id = T2.guest_id WHERE T2.booking_status_code != 'Confirmed'",
    "question": "Show the first names and last names of all the guests that do not have apartment bookings with status code \"Confirmed\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.guest_first_name, T1.guest_last_name FROM Guests AS T1 JOIN Apartment_Bookings AS T2 ON T1.guest_id = T2.guest_id WHERE T2.booking_status_code != 'Confirmed'",
    "question": "Which guests have apartment bookings with status code not equal to \"Confirmed\"? Return their first names and last names."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count < 4",
    "question": "Show the facility codes of apartments with less than 4 bedrooms."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT SUM( T1.room_count) FROM Apartments AS T1 JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id WHERE T2.facility_code != 'Gym'",
    "question": "Show the total number of rooms of all apartments without facility code \"Gym\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT SUM( T1.room_count) FROM Apartments AS T1 JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id WHERE T2.facility_code != 'Gym'",
    "question": "Find the total number of rooms in the apartments that do not have facility code \"Gym\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT SUM( T1.room_count) FROM Apartments AS T1 JOIN Apartment_Buildings AS T2 ON T1.building_id = T2.building_id WHERE T2.building_short_name != 'Columbus Square'",
    "question": "Show the total number of rooms of the apartments in the buildings that do not have short name \"Columbus Square\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT SUM( T1.room_count) FROM Apartments AS T1 JOIN Apartment_Buildings AS T2 ON T1.building_id = T2.building_id WHERE T2.building_short_name != 'Columbus Square'",
    "question": "How many rooms in total are there in the apartments in the buildings that do not have short name \"Columbus Square\"?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count < 2",
    "question": "Show the addresses of the buildings that have apartments with less than 2 bathrooms."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.apt_type_code, T1.apt_number FROM Apartments AS T1 JOIN Apartment_Buildings AS T2 ON T1.building_id = T2.building_id WHERE T2.building_manager != 'Kyle'",
    "question": "Show the apartment type codes and apartment numbers in the buildings not managed by \"Kyle\"."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.apt_type_code, T1.apt_number FROM Apartments AS T1 JOIN Apartment_Buildings AS T2 ON T1.building_id = T2.building_id WHERE T2.building_manager != 'Kyle'",
    "question": "What apartment type codes and apartment numbers do the buildings managed by someone other than \"Kyle\" have?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.apt_type_code FROM Apartments AS T1 WHERE T1.bathroom_count < 1 GROUP BY T1.apt_type_code  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Show the most common apartment type code among apartments with less than 1 bathroom."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.apt_type_code FROM Apartments AS T1 WHERE T1.bathroom_count <= 1 GROUP BY T1.apt_type_code  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Which apartment type code is the most common among apartments with one or no bathrooms?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT COUNT(*) FROM Apartments AS T1 JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id",
    "question": "How many apartments have at least one facility?"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT COUNT(*) FROM Apartments AS T1 JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id",
    "question": "Find the number of apartments that have facilities."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = 'Confirmed'       EXCEPT SELECT T3.apt_number FROM Apartments AS T3 JOIN Apartment_Bookings AS T4 ON T3.apt_id = T4.apt_id WHERE T4.booking_status_code = 'Provisional'",
    "question": "Show the apartment numbers of apartments with bookings that have status code \"Confirmed\" but not \"Provisional\""
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = 'Confirmed'       EXCEPT SELECT T3.apt_number FROM Apartments AS T3 JOIN Apartment_Bookings AS T4 ON T3.apt_id = T4.apt_id WHERE T4.booking_status_code = 'Provisional'",
    "question": "Which apartments have bookings with status code \"Confirmed\" but no status code \"Provisional\"? Give me the apartment numbers."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0       EXCEPT SELECT T3.apt_number FROM Apartments AS T3 JOIN View_Unit_Status AS T4 ON T3.apt_id = T4.apt_id WHERE T4.available_yn = 1",
    "question": "Show the apartment numbers of apartments with unit status availability of 0 but not 1."
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0",
    "question": "Which apartments have unit status availability of 0? Return their apartment numbers."
  },
  {
    "db_id": "game_injury",
    "query": "SELECT COUNT(*) FROM game AS T1 WHERE T1.Season < 2007",
    "question": "How many games are held before season 2007?"
  },
  {
    "db_id": "game_injury",
    "query": "SELECT T1.Average_Attendance FROM stadium AS T1 WHERE T1.Capacity_Percentage >= 100",
    "question": "What is the average attendance of stadiums with capacity percentage equal or higher than 100%?"
  },
  {
    "db_id": "game_injury",
    "query": "SELECT T1.Player, T1.Number_of_matches, T1.Source FROM injury_accident AS T1 WHERE T1.Injury = 'Knee problem'",
    "question": "What are the player name, number of matches, and information source for players who suffer from injury of 'Knee problem'?"
  },
  {
    "db_id": "game_injury",
    "query": "SELECT T1.Season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.Player != 'Walter Samuel'",
    "question": "What is the season of the game which does not cause the player 'Walter Samuel' to get injured?"
  },
  {
    "db_id": "game_injury",
    "query": "SELECT T1.id, T1.Score, T1.Date FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id  GROUP BY T2.game_id HAVING COUNT(*) <= 2",
    "question": "What are the ids, scores, and dates of the games which caused at most two injury accidents?"
  },
  {
    "db_id": "game_injury",
    "query": "SELECT DISTINCT T1.Source FROM injury_accident AS T1",
    "question": "What are the different kinds of information sources for injury accidents?"
  },
  {
    "db_id": "game_injury",
    "query": "SELECT COUNT(*) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id",
    "question": "How many games are there in the injury_accident table?"
  },
  {
    "db_id": "game_injury",
    "query": "SELECT T1.name FROM stadium AS T1 JOIN game AS T3 ON T1.id = T3.stadium_id JOIN injury_accident AS T2 ON T3.id = T2.game_id WHERE T2.Player = 'Walter Samuel'      UNION SELECT T1.name FROM stadium AS T1 JOIN game AS T3 ON T1.id = T3.stadium_id JOIN injury_accident AS T2 ON T3.id = T2.game_id WHERE T2.Player = 'Thiago Motta'",
    "question": "List the name of the stadium where either the player 'Walter Samuel' or the player 'Thiago Motta' got injured."
  },
  {
    "db_id": "game_injury",
    "query": "SELECT T1.name, T1.Average_Attendance, T1.Total_Attendance FROM stadium AS T1      INTERSECT SELECT T2.name, T2.Average_Attendance, T2.Total_Attendance FROM stadium AS T2",
    "question": "Show the name, average attendance, total attendance for stadiums where accidents happened."
  },
  {
    "db_id": "game_injury",
    "query": "SELECT T1.name FROM stadium AS T1 WHERE T1.name NOT LIKE 'Bank'",
    "question": "Which stadium name does not contain the substring \"Bank\"?"
  },
  {
    "db_id": "soccer_1",
    "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating < (SELECT AVG( T23.overall_rating) FROM Player_Attributes AS T23)",
    "question": "List all player names who have an overall rating lower than the average."
  },
  {
    "db_id": "soccer_1",
    "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling != (SELECT MAX( T23.overall_rating) FROM Player_Attributes AS T23)",
    "question": "What are the names of players who do not have the best dribbling?"
  },
  {
    "db_id": "soccer_1",
    "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 OR T2.preferred_foot = 'right'",
    "question": "List the names of all players who have a crossing score higher than 90 or prefer their right foot."
  },
  {
    "db_id": "soccer_1",
    "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = 'left' OR T2.overall_rating >= 85 AND T2.overall_rating <= 90",
    "question": "List the names of all left-footed players or players with overall rating between 85 and 90."
  },
  {
    "db_id": "soccer_1",
    "query": "SELECT T1.preferred_foot, COUNT(*) FROM Player_Attributes AS T1 WHERE T1.overall_rating >= 80 GROUP BY T1.preferred_foot",
    "question": "Of all players with an overall rating greater than or equal to 80, how many are right-footed and left-footed?"
  },
  {
    "db_id": "soccer_1",
    "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height >= 180      UNION SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating > 85",
    "question": "List all of the player ids with a height of at least 180cm or an overall rating higher than 85."
  },
  {
    "db_id": "soccer_1",
    "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height >= 180 AND T1.height <= 190",
    "question": "List all of the ids for players with a height between 180cm and 190cm."
  },
  {
    "db_id": "soccer_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.player_name) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id    ORDER BY T2.overall_rating DESC LIMIT 1",
    "question": "How many players are there in the world?"
  },
  {
    "db_id": "soccer_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.player_name), T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  GROUP BY T1.birthday  ORDER BY T2.potential DESC LIMIT 1",
    "question": "List the number of players born on each day, in descending order of potential."
  },
  {
    "db_id": "performance_attendance",
    "query": "SELECT * FROM performance AS T1",
    "question": "What are all the performances?"
  },
  {
    "db_id": "performance_attendance",
    "query": "SELECT T1.Attendance FROM performance AS T1",
    "question": "What are the attendance numbers for performances?"
  },
  {
    "db_id": "performance_attendance",
    "query": "SELECT T1.Location FROM performance AS T1  GROUP BY T1.Location HAVING COUNT(*) > 2",
    "question": "Show the locations that have more than two performances."
  },
  {
    "db_id": "performance_attendance",
    "query": "SELECT T1.Location FROM performance AS T1 WHERE T1.Attendance > 2000       EXCEPT SELECT T2.Location FROM performance AS T2 WHERE T2.Attendance < 1000",
    "question": "Show the locations that have more than 2000 attendees but not less than 1000 attendees."
  },
  {
    "db_id": "performance_attendance",
    "query": "SELECT T1.Date FROM performance AS T1 JOIN member_attendance AS T3 ON T1.Performance_ID = T3.Performance_ID JOIN member AS T2 ON T3.Member_ID = T2.Member_ID WHERE T2.Role != 'Violin'",
    "question": "Show the dates of performances with attending members whose roles are not \"Violin\"."
  },
  {
    "db_id": "performance_attendance",
    "query": "SELECT T1.Name FROM member AS T1 JOIN member_attendance AS T2 ON T1.Member_ID = T2.Member_ID",
    "question": "List the names of members who attended any performance."
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT T1.building FROM classroom AS T1 WHERE T1.capacity >= 50",
    "question": "What are the distinct buildings with capacities of greater than or equal to 50?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*) FROM classroom AS T1 WHERE T1.building = 'Lamberton'",
    "question": "Count the number of rooms that are in the Lamberton building."
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*) FROM classroom AS T1 WHERE T1.building = 'Lamberton'",
    "question": "How many classrooms are in Lamberton?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.dept_name, T1.building FROM department AS T1 WHERE T1.budget = (SELECT AVG( T22.budget) FROM department AS T22)",
    "question": "What is the name and building of the departments whose budget is the average budget?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.dept_name, T1.building FROM department AS T1 WHERE T1.budget = (SELECT AVG( T22.budget) FROM department AS T22)",
    "question": "Give the name and building of the departments with average budget."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM student AS T1 WHERE T1.dept_name != 'History'   ORDER BY T1.tot_cred DESC LIMIT 1",
    "question": "What is the name of the student who has the highest total credits in the department that is not the History department."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM student AS T1 WHERE T1.dept_name != 'History'   ORDER BY T1.tot_cred DESC LIMIT 1",
    "question": "Give the name of the student in the department other than History with the most credits."
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*) FROM classroom AS T1 WHERE T1.building != 'Lamberton'",
    "question": "How many rooms does the building not named Lamberton have?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*) FROM classroom AS T1 WHERE T1.building != 'Lamberton'",
    "question": "Count the number of classrooms not in Lamberton."
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT T1.s_ID FROM advisor AS T1",
    "question": "What are the IDs of students who have advisors?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT T1.s_ID FROM advisor AS T1",
    "question": "Find the students who have advisors."
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT T1.dept_name FROM course AS T1",
    "question": "What are the names of the departments that offer courses?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT T1.dept_name FROM course AS T1",
    "question": "List all the departments which offer courses."
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.course_id) FROM course AS T1 WHERE T1.dept_name != 'Physics'",
    "question": "Count the number of courses not in the Physics department."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id  GROUP BY T1.title HAVING COUNT(*) != 2",
    "question": "Find the title of courses that do not have two prerequisites?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title, T1.credits, T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id  GROUP BY T2.prereq_id HAVING COUNT(*) >= 1",
    "question": "What is the title, credit value, and department name for courses with at least one prerequisite?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id",
    "question": "How many courses have prerequisites?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id",
    "question": "Count the number of courses with prerequisites."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id",
    "question": "Find the name of the courses that have any prerequisite?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id",
    "question": "What are the titles of courses that have prerequisites?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT T1.ID FROM teaches AS T1",
    "question": "What are the IDs of all instructors who have taught some course?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT T1.ID FROM teaches AS T1",
    "question": "List the distinct instructor IDs who have taught a course."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.dept_name FROM instructor AS T1 WHERE T1.name NOT LIKE 'Soisalon'",
    "question": "Find the department name of the instructor whose name does not contain 'Soisalon'."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.dept_name FROM instructor AS T1 WHERE T1.name NOT LIKE 'Soisalon'",
    "question": "What is the name of the department with an instructure who does not have a name like 'Soisalon'?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*) FROM classroom AS T1 WHERE T1.building = 'Lamberton' OR T1.capacity < 50",
    "question": "Count the number of rooms in Lamberton with capacity lower than 50 or higher than 50."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.dept_name, T1.budget FROM department AS T1 WHERE T1.budget < (SELECT AVG( T22.budget) FROM department AS T22)",
    "question": "Find the name and budget of departments whose budgets are less than the average budget."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.dept_name, T1.budget FROM department AS T1 WHERE T1.budget < (SELECT AVG( T22.budget) FROM department AS T22)",
    "question": "What are the names and budgets of departments with budgets less than the average?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.dept_name != 'Statistics'   ORDER BY T1.salary ASC LIMIT 1",
    "question": "what is the name of the instructor who is not in Statistics department and earns the lowest salary?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.dept_name != 'Statistics'   ORDER BY T1.salary ASC LIMIT 1",
    "question": "Give the name of the lowest earning instructor who is not in the Statistics department."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 WHERE T1.dept_name = 'Statistics'       EXCEPT SELECT T2.title FROM course AS T2 WHERE T2.dept_name = 'Psychology'",
    "question": "Find the title of course that is provided by Statistics department but not by Psychology department."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 WHERE T1.dept_name = 'Statistics'       EXCEPT SELECT T2.title FROM course AS T2 WHERE T2.dept_name = 'Psychology'",
    "question": "What is the title of a course that is listed in the Statistics department but not the Psychology department?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 WHERE T1.dept_name = 'Statistics'      UNION SELECT T2.title FROM course AS T2 WHERE T2.dept_name = 'Psychology'",
    "question": "Find the title of course that is provided by Statistics or Psychology departments."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 WHERE T1.dept_name = 'Statistics'     INTERSECT SELECT T2.title FROM course AS T2 WHERE T2.dept_name = 'Psychology'",
    "question": "What are the titles of courses that are in the Statistics department and the Psychology department?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.ID FROM teaches AS T1 WHERE T1.semester = 'Fall' AND T1.year = 2009      UNION SELECT T2.ID FROM teaches AS T2 WHERE T2.semester = 'Spring' AND T2.year = 2010",
    "question": "Find the id of instructors who have taught in either Fall 2009 or Spring 2010."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.ID FROM teaches AS T1 WHERE T1.semester = 'Fall' AND T1.year = 2009     INTERSECT SELECT T2.ID FROM teaches AS T2 WHERE T2.semester = 'Spring' AND T2.year = 2010",
    "question": "What are the ids of instructors who taught in the Fall of 2009 and the Spring of 2010?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*) FROM instructor AS T1     ORDER BY T1.salary ASC",
    "question": "How many instructors are there?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*) FROM instructor AS T1     ORDER BY T1.salary ASC",
    "question": "How many instructors are there?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title, T2.name FROM course AS T1 JOIN department AS T4 ON T1.dept_name = T4.dept_name JOIN instructor AS T2 ON T4.dept_name = T2.dept_name JOIN teaches AS T3 ON T2.ID = T3.ID WHERE T3.year != 2008    ORDER BY T1.title ASC",
    "question": "list in alphabetic order all course names and their instructors' names not in year 2008."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title, T2.name FROM course AS T1 JOIN department AS T4 ON T1.dept_name = T4.dept_name JOIN instructor AS T2 ON T4.dept_name = T2.dept_name JOIN teaches AS T3 ON T2.ID = T3.ID WHERE T3.year != 2008    ORDER BY T1.title ASC",
    "question": "Show all titles and their instructors' names for courses not in 2008, in alphabetical order by title."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.ID = T2.i_ID  GROUP BY T1.name HAVING COUNT(*) <= 1",
    "question": "What are the names of instructors who do not advise any student?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.ID = T2.s_ID  GROUP BY T1.name HAVING COUNT(*) >= 1",
    "question": "Find the name of the students who have at least one advisor?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.ID = T2.s_ID  GROUP BY T1.name HAVING COUNT(*) >= 1",
    "question": "What are the names of students who have at least one advisor?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*), T1.building FROM classroom AS T1 WHERE T1.capacity < 50 GROUP BY T1.building",
    "question": "Find the number of rooms with less than 50 capacity for each building."
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*), T1.building FROM classroom AS T1 WHERE T1.capacity < 50 GROUP BY T1.building",
    "question": "How many rooms in each building have a capacity of under 50?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1  GROUP BY T1.title HAVING COUNT(*) >= 1",
    "question": "Find the title of the course that is offered by at least one department."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.credits, T1.dept_name FROM course AS T1",
    "question": "Find the credits and department name of courses."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.credits, T1.dept_name FROM course AS T1",
    "question": "What are the credits and department names of courses?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT MIN( T1.salary), T1.dept_name FROM instructor AS T1  GROUP BY T1.dept_name HAVING AVG( T1.salary) < (SELECT AVG( T22.salary) FROM instructor AS T22)",
    "question": "What is the lowest salary in departments with average salary less than the overall average."
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*), T1.sec_id, T1.year FROM section AS T1  GROUP BY T1.year",
    "question": "Find the number of sections in each semester and year."
  },
  {
    "db_id": "college_2",
    "query": "SELECT COUNT(*), T1.time_slot_id, T1.year FROM section AS T1  GROUP BY T1.year",
    "question": "How many courses are provided in each time slot and year?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.i_ID FROM advisor AS T1 JOIN student AS T2 ON T1.s_ID = T2.ID WHERE T2.dept_name != 'History'",
    "question": "What is the id of the instructor who advises of all students not from History department?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.i_ID FROM advisor AS T1 JOIN student AS T2 ON T1.s_ID = T2.ID WHERE T2.dept_name != 'History'",
    "question": "Give id of the instructor who does not advise students in the History department."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name, T1.salary FROM instructor AS T1 JOIN advisor AS T3 ON T1.ID = T3.i_ID JOIN student AS T2 ON T3.s_ID = T2.ID WHERE T2.dept_name != 'History'",
    "question": "Find the name and salary of the instructors who are not advisors of any student from History department?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name, T1.salary FROM instructor AS T1 JOIN advisor AS T3 ON T1.ID = T3.i_ID JOIN student AS T2 ON T3.s_ID = T2.ID WHERE T2.dept_name != 'History'",
    "question": "What are the names and salaries of instructors who does not advise students in the History department?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.course_id FROM course AS T1",
    "question": "Find the id of the courses?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.course_id FROM course AS T1",
    "question": "What are the ids of courses?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id",
    "question": "Find the name of the courses that have any prerequisite?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id",
    "question": "What are the names of courses with prerequisites?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 WHERE T1.course_id NOT IN (SELECT T22.prereq_id FROM prereq AS T22 JOIN course AS T23 ON T22.prereq_id = T23.course_id WHERE T23.title = 'International Finance')",
    "question": "Give the title of the courses that are not prerequisites to the course International Finance."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 WHERE T1.course_id NOT IN (SELECT T22.course_id FROM prereq AS T22 JOIN course AS T23 ON T22.prereq_id = T23.course_id WHERE T23.title = 'Differential Geometry')",
    "question": "Find the title of course whose prerequisite is not course Differential Geometry."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 WHERE T1.course_id NOT IN (SELECT T22.course_id FROM prereq AS T22 JOIN course AS T23 ON T22.prereq_id = T23.course_id WHERE T23.title = 'Differential Geometry')",
    "question": "What is the title of the course without Differential Geometry as a prerequisite?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM student AS T1 WHERE T1.ID NOT IN (SELECT T22.ID FROM takes AS T22 WHERE T22.semester = 'Fall' AND T22.year = 2003)",
    "question": "Find the names of students who have not taken any course in the fall semester of year 2003."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM student AS T1 WHERE T1.ID NOT IN (SELECT T22.ID FROM takes AS T22 WHERE T22.semester = 'Fall' AND T22.year = 2003)",
    "question": "What are the names of students who did not take a course in the Fall of 2003?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.building = 'Chandler' OR T2.semester = 'Fall' AND T2.year = 2010",
    "question": "What is the title of the course that was offered at building Chandler or during the fall semester in the year of 2010?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.building = 'Chandler' OR T2.semester = 'Fall' AND T2.year = 2010",
    "question": "Give the title of the course offered in Chandler or in Fall of 2010."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 JOIN department AS T3 ON T1.dept_name = T3.dept_name JOIN course AS T2 ON T3.dept_name = T2.dept_name WHERE T2.title != 'C Programming'",
    "question": "Find the name of the instructors who did not teach C Programming course before."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name, T1.salary FROM instructor AS T1 JOIN advisor AS T3 ON T1.ID = T3.i_ID JOIN student AS T2 ON T3.s_ID = T2.ID WHERE T2.dept_name != 'Math'",
    "question": "Find the name and salary of instructors who are not advisors of the students from the Math department."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name, T1.salary FROM instructor AS T1 JOIN advisor AS T3 ON T1.ID = T3.i_ID JOIN student AS T2 ON T3.s_ID = T2.ID WHERE T2.dept_name != 'Math'",
    "question": "What are the names and salaries of instructors who do not advise students in the Math department?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T3 ON T1.ID = T3.i_ID JOIN student AS T2 ON T3.s_ID = T2.ID WHERE T2.dept_name != 'Math'    ORDER BY T2.tot_cred ASC",
    "question": "Find the name of instructors who are advisors of the students from the department other than Math department, and sort the results by students' total credit."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T3 ON T1.ID = T3.i_ID JOIN student AS T2 ON T3.s_ID = T2.ID WHERE T2.dept_name != 'Math'    ORDER BY T2.tot_cred ASC",
    "question": "What are the names of all instructors who advise students not in the math depart sorted by total credits of the student."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 WHERE T1.course_id NOT IN (SELECT T22.prereq_id FROM prereq AS T22 JOIN course AS T23 ON T22.prereq_id = T23.course_id WHERE T23.title = 'Mobile Computing')",
    "question": "What is the course title of the course that is not a prerequisite of course Mobile Computing?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title FROM course AS T1 WHERE T1.course_id NOT IN (SELECT T22.prereq_id FROM prereq AS T22 JOIN course AS T23 ON T22.prereq_id = T23.course_id WHERE T23.title = 'Mobile Computing')",
    "question": "What is the title of the course that is not a prerequisite for Mobile Computing?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
    "question": "Find the name of instructors who taught any courses?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
    "question": "What are the names of instructors who teach?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.ID FROM instructor AS T1      INTERSECT SELECT T2.ID FROM teaches AS T2",
    "question": "Find the id of instructors who taught at least one course?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.ID FROM instructor AS T1      INTERSECT SELECT T2.ID FROM teaches AS T2",
    "question": "What are the ids of instructors who teach?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.ID IN (SELECT T22.ID FROM teaches AS T22 WHERE T22.semester = 'Spring')",
    "question": "Find the names of instructors who each any courses in any Spring semester."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.ID IN (SELECT T22.ID FROM teaches AS T22 WHERE T22.semester = 'Spring')",
    "question": "What are the names of instructors who taught courses in the Spring?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.salary, COUNT(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name  GROUP BY T1.salary  ORDER BY T2.budget DESC LIMIT 1",
    "question": "Find the number and salary of all instructors who are in the department with the highest budget."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.salary, COUNT(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name  GROUP BY T1.salary  ORDER BY T2.budget DESC LIMIT 1",
    "question": "How many instructors are in the department with the highest budget, and what is the average salary of those instructors?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title, T1.credits FROM course AS T1 JOIN section AS T3 ON T1.course_id = T3.course_id JOIN classroom AS T2 ON T3.building = T2.building WHERE T2.capacity != (SELECT MAX( T23.capacity) FROM classroom AS T23)",
    "question": "What is the title and credits of the course that is taught in a classroom with a capacity that is not the highest?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title, T1.credits FROM course AS T1 JOIN section AS T3 ON T1.course_id = T3.course_id JOIN classroom AS T2 ON T3.building = T2.building WHERE T2.capacity != (SELECT MAX( T23.capacity) FROM classroom AS T23)",
    "question": "Give the title and credits for the course that is taught in a classroom with a capacity that is not the greatest."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM student AS T1 WHERE T1.ID IN (SELECT T22.ID FROM takes AS T22 JOIN section AS T24 ON T22.course_id = T24.course_id JOIN course AS T23 ON T24.course_id = T23.course_id WHERE T23.dept_name = 'Biology')",
    "question": "Find the name of students who took any course from Biology department."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM student AS T1 WHERE T1.ID IN (SELECT T22.ID FROM takes AS T22 JOIN section AS T24 ON T22.course_id = T24.course_id JOIN course AS T23 ON T24.course_id = T23.course_id WHERE T23.dept_name = 'Biology')",
    "question": "What are the names of students who have taken any Biology courses?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.course_id NOT IN (SELECT T23.prereq_id FROM prereq AS T23 JOIN course AS T24 ON T23.prereq_id = T24.course_id WHERE T24.title = 'International Finance')",
    "question": "Find the name of students who have not taken the prerequisite course of the course with title International Finance."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.course_id NOT IN (SELECT T23.prereq_id FROM prereq AS T23 JOIN course AS T24 ON T23.prereq_id = T24.course_id WHERE T24.title = 'International Finance')",
    "question": "What are the names of students who have not taken the prerequisite for the course International Finance?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name, T1.salary FROM instructor AS T1 WHERE T1.salary > (SELECT AVG( T22.salary) FROM instructor AS T22 WHERE T22.dept_name = 'Physics')",
    "question": "Find the name and salary of instructors whose salary is above the average salary of the instructors in the Physics department."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name, T1.salary FROM instructor AS T1 WHERE T1.salary = (SELECT AVG( T22.salary) FROM instructor AS T22 WHERE T22.dept_name = 'Physics')",
    "question": "What are the names and salaries for instructors who earn the average salary of instructors in the Physics department?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.building, T1.room_number, T1.semester, T1.year FROM section AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name != 'Psychology'    ORDER BY T2.title ASC",
    "question": "What are the building, room number, semester and year of courses in the department other than Psychology, sorted using course title?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.dept_name != 'Comp. Sci.'",
    "question": "Find the names of all instructors not in computer science department"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.dept_name != 'Comp. Sci.'",
    "question": "What are the names of all instructors not in the Comp. Sci. department?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.dept_name = 'Comp. Sci.' OR T1.salary > 80000",
    "question": "Find the names of all instructors in Comp. Sci. department or with salary > 80000."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.dept_name = 'Comp. Sci.' OR T1.salary > 80000",
    "question": "What are the names of the instructors in the Comp. Sci. department or who earn more than 80000?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name, T2.course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name != 'Art'",
    "question": "Find the names of all instructors who have not taught in the Art department and the course_id."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name, T2.course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name != 'Art'",
    "question": "What are the names of non-Art instructors who have taught a course, and the corresponding course id?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.name NOT LIKE 'dar'",
    "question": "Find the names of all instructors whose name does not include the substring \u201cdar\u201d."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.name NOT LIKE 'dar'",
    "question": "What are the names of all instructors whose names do not include \"dar\"?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.course_id FROM section AS T1 WHERE T1.semester = 'Fall' AND T1.year = 2009",
    "question": "Find courses that ran in Fall 2009."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.course_id FROM section AS T1 WHERE T1.semester = 'Fall' AND T1.year = 2009     INTERSECT SELECT T2.course_id FROM section AS T2 WHERE T2.semester = 'Spring' AND T2.year = 2010",
    "question": "What are the ids for courses in the Fall of 2009 and the Spring of 2010?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.course_id FROM section AS T1 WHERE T1.semester = 'Fall' AND T1.year = 2009       EXCEPT SELECT T2.course_id FROM section AS T2 WHERE T2.semester = 'Spring' AND T2.year = 2010",
    "question": "Find courses that ran in Fall 2009 but not in Spring 2010."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.course_id FROM section AS T1 WHERE T1.semester = 'Fall' AND T1.year = 2009",
    "question": "What are the ids for courses that were offered in Fall of 2009?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.course_id FROM section AS T1 WHERE T1.semester = 'Fall' AND T1.year = 2009",
    "question": "Find courses that ran in Fall 2009."
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT T1.salary FROM instructor AS T1 WHERE T1.salary != (SELECT MAX( T22.salary) FROM instructor AS T22)",
    "question": "Find the salaries of all distinct instructors that are not equal to the largest salary."
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT T1.salary FROM instructor AS T1 WHERE T1.salary > (SELECT MAX( T22.salary) FROM instructor AS T22)",
    "question": "What are the distinct salaries of all instructors who earned more than the maximum salary?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.ID) FROM teaches AS T1 WHERE T1.semester = 'Spring' OR T1.year = 2010",
    "question": "Find the total number of instructors who teach a course in the Spring semester or the year is 2010."
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.ID) FROM teaches AS T1 WHERE T1.semester = 'Spring' OR T1.year = 2010",
    "question": "How many instructors teach a course in the Spring or in the year of 2010?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.dept_name, AVG( T1.salary) FROM instructor AS T1  GROUP BY T1.dept_name HAVING AVG( T1.salary) >= 42000",
    "question": "Find the names and average salaries of all departments whose average salary is greater than or equal to 42000."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.dept_name, AVG( T1.salary) FROM instructor AS T1  GROUP BY T1.dept_name HAVING AVG( T1.salary) < 42000",
    "question": "What are the names and average salaries for departments with average salary lower than 42000?"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.salary != (SELECT MAX( T22.salary) FROM instructor AS T22 WHERE T22.dept_name = 'Biology')",
    "question": "Find the names of all instructors whose salary is not equal to the salary of the instructor with the highest salary in the Biology department."
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.name FROM instructor AS T1 WHERE T1.salary = (SELECT MAX( T22.salary) FROM instructor AS T22 WHERE T22.dept_name = 'Biology')",
    "question": "What is the name of the instructor with the highest salary in the Biology department?"
  },
  {
    "db_id": "debate",
    "query": "SELECT * FROM debate AS T1",
    "question": "What are the attributes of all debates?"
  },
  {
    "db_id": "debate",
    "query": "SELECT T1.Date FROM debate AS T1 WHERE T1.Num_of_Audience <= 150",
    "question": "List the dates of debates with number of audience smaller than or equal to 150"
  },
  {
    "db_id": "debate",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Venue) FROM debate AS T1",
    "question": "Show the distinct count of distinct venues of debates"
  },
  {
    "db_id": "debate",
    "query": "SELECT T1.Name FROM people AS T1 JOIN debate_people AS T3 ON T1.People_ID = T3.Negative JOIN debate AS T2 ON T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience >= 200",
    "question": "Show the names of people that are on negative side of debates with number of audience bigger than or equal to 200."
  },
  {
    "db_id": "debate",
    "query": "SELECT T1.Name FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Negative  GROUP BY T1.Name HAVING COUNT(*) < 2",
    "question": "Show the names of people who have been on the negative side of debates less than twice."
  },
  {
    "db_id": "debate",
    "query": "SELECT T1.Name FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Negative",
    "question": "List the names of people that have been on the negative side of debates."
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT T1.Policy_Type_Code FROM Policies AS T1 JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_Details != 'Dayana Robel'",
    "question": "What are the type codes of the policies used by the customers other than \"Dayana Robel\"?"
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT T1.Policy_Type_Code FROM Policies AS T1  GROUP BY T1.Policy_Type_Code HAVING COUNT(*) >= 2",
    "question": "Which types of policy are chosen by more than or equal to 2 customers? Give me the policy type codes."
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT T1.Customer_Details FROM Customers AS T1      INTERSECT SELECT T2.Customer_Details FROM Customers AS T2",
    "question": "Find the names of customers who have policies associated."
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT T1.Customer_Details FROM Customers AS T1",
    "question": "What are the names of customers who have policies?"
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT * FROM Claims_Processing_Stages AS T1",
    "question": "What are the claim processing stages?"
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT * FROM Claims_Processing_Stages AS T1",
    "question": "Find all stages in claim processing."
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT T1.Customer_Details FROM Customers AS T1 WHERE T1.Customer_Details NOT LIKE 'Diana'",
    "question": "Find the names of customers whose name does not contain \"Diana\"."
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT T1.Customer_Details FROM Customers AS T1 WHERE T1.Customer_Details NOT LIKE 'Diana'",
    "question": "Which customers do not have the substring \"Diana\" in their names? Return the customer details."
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT DISTINCT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Policy_Type_Code != 'Deputy'",
    "question": "Find the names of the customers who do not have an deputy policy."
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT DISTINCT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Policy_Type_Code != 'Deputy'",
    "question": "Which customers have an insurance policy with the type code not \"Deputy\"? Give me the customer details."
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT T1.Customer_Details FROM Customers AS T1        EXCEPT SELECT T2.Staff_Details FROM Staff AS T2",
    "question": "Find the names of all the customers but not the names of the staff members."
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT T1.Customer_Details FROM Customers AS T1      INTERSECT SELECT T2.Staff_Details FROM Staff AS T2",
    "question": "What are the names of the customers and staff members who are both customers and staff members?"
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT T1.Claim_Status_Description FROM Claims_Processing_Stages AS T1 WHERE T1.Claim_Status_Name != 'Open'",
    "question": "What is the description of the claim status that is not \"Open\"?"
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT T1.Claim_Status_Description FROM Claims_Processing_Stages AS T1 WHERE T1.Claim_Status_Name != 'Open'",
    "question": "Find the description of the claim status that is not \"Open\"."
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT DISTINCT T1.Claim_Outcome_Code FROM Claims_Processing AS T1",
    "question": "What are the distinct claim outcome codes?"
  },
  {
    "db_id": "insurance_and_eClaims",
    "query": "SELECT DISTINCT T1.Claim_Outcome_Code FROM Claims_Processing AS T1",
    "question": "List the distinct claim outcome codes."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT * FROM Accounts AS T1",
    "question": "Show all accounts."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT * FROM Accounts AS T1",
    "question": "What are the details of all accounts?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT DISTINCT T1.customer_id FROM Accounts AS T1",
    "question": "What are the customer IDs of customers who have opened an account?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT DISTINCT T1.customer_id FROM Accounts AS T1",
    "question": "Find the customer IDs of customers who have an account."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name != 'Meaghan'",
    "question": "Show the id, the account name, and other account details for all accounts by the customers with first name not 'Meaghan'."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name != 'Meaghan'",
    "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name not \"Meaghan\"?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan' OR T2.customer_last_name = 'Keeling'",
    "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan or last name Keeling."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan' OR T2.customer_last_name = 'Keeling'",
    "question": "What are the names and other details for accounts corresponding to the customer named Meaghan or Keeling?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T2.account_name != '900'",
    "question": "Show the first name and last name for the customer with account name not equal to 900."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T2.account_name != '900'",
    "question": "What are the full names of customers with the account name not 900?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT COUNT(*) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
    "question": "How many customers have an account?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT COUNT(*) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
    "question": "Count the number of customers who have an account."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.customer_first_name), T1.customer_last_name, T1.phone_number FROM Customers AS T1  GROUP BY T1.phone_number",
    "question": "How many distinct first names, last names, and phone numbers are there for customers with accounts?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.customer_id FROM Customers AS T1      INTERSECT SELECT T2.customer_id FROM Accounts AS T2",
    "question": "Show customer ids who have an account."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.customer_id FROM Customers AS T1      INTERSECT SELECT T2.customer_id FROM Accounts AS T2",
    "question": "What are the customer ids for customers who have an account?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT COUNT(*), T1.account_id FROM Accounts AS T1  GROUP BY T1.account_id",
    "question": "Count the number of accounts corresponding to each account id."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.customer_first_name, T2.customer_id FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T2.customer_id HAVING COUNT(*) > 2",
    "question": "Show first name and id for all customers with more than 2 accounts."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.customer_first_name, T2.customer_id FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T2.customer_id HAVING COUNT(*) < 2",
    "question": "What are the first names and ids for customers who have less than two accounts?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT * FROM Customers AS T1",
    "question": "Show all customers."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT * FROM Customers AS T1",
    "question": "Show all customers."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT * FROM Financial_Transactions AS T1",
    "question": "What are all the transactions?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT * FROM Financial_Transactions AS T1",
    "question": "Show all transactions."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT COUNT(*) FROM Financial_Transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name != '337'",
    "question": "How many transaction does account with name not 337 have?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT COUNT(*) FROM Financial_Transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name != '337'",
    "question": "Count the number of financial transactions that the account with the name not 337 has."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.transaction_id FROM Financial_Transactions AS T1 WHERE T1.transaction_amount < (SELECT AVG( T22.transaction_amount) FROM Financial_Transactions AS T22)",
    "question": "Show ids for all transactions whose amounts are less than the average."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.account_id, T2.account_name FROM Financial_Transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id  GROUP BY T1.account_id HAVING COUNT(*) <= 4",
    "question": "Show the account id and name with at most 4 transactions."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_size) FROM Products AS T1",
    "question": "How many product sizes are there?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_size) FROM Products AS T1",
    "question": "How many different product sizes are there?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_color) FROM Products AS T1",
    "question": "How many product colors are there?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_color) FROM Products AS T1",
    "question": "How many different product colors are there?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT * FROM Invoices AS T1",
    "question": "What are all the invoices?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT * FROM Invoices AS T1",
    "question": "Show all invoices."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.product_name FROM Products AS T1",
    "question": "Show all product names."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T1.product_name FROM Products AS T1",
    "question": "What are the names of products that have been ordered?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_id), COUNT(DISTINCT  T1.order_id) FROM Order_Items AS T1",
    "question": "How many distinct products are there? How many distinct orders are there?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.order_id), COUNT(DISTINCT  T1.product_id) FROM Order_Items AS T1",
    "question": "How many different order ids and product ids are there?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT COUNT(*) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id",
    "question": "How many products were included in any order?"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT COUNT(*) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id",
    "question": "Count the number of products that were ordered."
  },
  {
    "db_id": "wedding",
    "query": "SELECT COUNT(*) FROM church AS T1 WHERE T1.Open_Date > 1850",
    "question": "How many churches opened after 1850 are there?"
  },
  {
    "db_id": "wedding",
    "query": "SELECT T1.Open_Date FROM church AS T1  GROUP BY T1.Open_Date HAVING COUNT(*) > 2",
    "question": "Show the opening year in whcih more than two churches opened."
  },
  {
    "db_id": "wedding",
    "query": "SELECT T1.Country FROM people AS T1 WHERE T1.Age < 25       EXCEPT SELECT T2.Country FROM people AS T2 WHERE T2.Age > 30",
    "question": "Show the country where people younger than 25 are from but people older than 30 are not from."
  },
  {
    "db_id": "wedding",
    "query": "SELECT T1.Name, T1.Name FROM people AS T1 JOIN wedding AS T2 ON T1.People_ID = T2.Female_ID WHERE T2.Year < 2014",
    "question": "Show the pair of male and female names in all weddings before year 2014"
  },
  {
    "db_id": "wedding",
    "query": "SELECT T1.Name, T1.Age FROM people AS T1 WHERE T1.Is_Male = 'T' OR T1.People_ID NOT IN (SELECT T22.Male_ID FROM wedding AS T22)",
    "question": "Show the name and age for all male people or all male people who don't have a wedding."
  },
  {
    "db_id": "wedding",
    "query": "SELECT T1.Name FROM church AS T1",
    "question": "Show all church names."
  },
  {
    "db_id": "wedding",
    "query": "SELECT T1.Name FROM church AS T1 JOIN wedding AS T2 ON T1.Church_ID = T2.Church_ID  GROUP BY T1.Name HAVING COUNT(*) > 2",
    "question": "Show all church names that have hosted more than two weddings."
  },
  {
    "db_id": "wedding",
    "query": "SELECT T1.Name FROM people AS T1 JOIN wedding AS T2 ON T1.People_ID = T2.Female_ID WHERE T2.Year = 2016 OR T1.Is_Male = 'F' AND T1.Country = 'Canada'",
    "question": "Show the names for all females from Canada having a wedding in year 2016 or after."
  },
  {
    "db_id": "wedding",
    "query": "SELECT COUNT(*) FROM wedding AS T1 WHERE T1.Year != 2016",
    "question": "How many weddings are there in year not 2016?"
  },
  {
    "db_id": "wedding",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Church_ID) FROM wedding AS T1 WHERE T1.Year != 2016",
    "question": "How many churches have a wedding in year other than 2016?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT * FROM artist AS T1",
    "question": "What are all the artists?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT * FROM artist AS T1",
    "question": "Show all the artists."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Country) FROM artist AS T1",
    "question": "How many distinct country for artists?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Country) FROM artist AS T1",
    "question": "Return the number of different countries for artists."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Name, T1.Year_Join FROM artist AS T1 WHERE T1.Country = 'United States'",
    "question": "Show all artist names and the year joined who are from United States."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Name, T1.Year_Join FROM artist AS T1 WHERE T1.Country = 'United States'",
    "question": "What are the names and year of joining for artists that have the country \"United States\"?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT COUNT(*) FROM artist AS T1 WHERE T1.Age > 46 OR T1.Year_Join > 1990",
    "question": "How many artists are above age 46 or joined after 1990?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT COUNT(*) FROM artist AS T1 WHERE T1.Age > 46 OR T1.Year_Join > 1990",
    "question": "Count the number of artists who are older than 46 or joined after 1990."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT AVG( T1.Age), MIN( T1.Age) FROM artist AS T1 WHERE T1.Country != 'United States'",
    "question": "What is the average and minimum age of all artists not from United States."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT COUNT(*) FROM exhibition AS T1 WHERE T1.Year < 2005",
    "question": "How many exhibition are there in year before 2005?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT COUNT(*) FROM exhibition AS T1 WHERE T1.Year > 2005",
    "question": "Count the number of exhibitions that happened after 2005."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Theme, T1.Year FROM exhibition AS T1 WHERE T1.Ticket_Price >= 15",
    "question": "Show theme and year for all exhibitions with ticket prices equal or higher than 15."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Theme, T1.Year FROM exhibition AS T1 WHERE T1.Ticket_Price > 15",
    "question": "What are the theme and year for all exhibitions that have a ticket price over 15?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Name FROM artist AS T1 JOIN exhibition AS T2 ON T1.Artist_ID = T2.Artist_ID",
    "question": "Show names for artists with any exhibition."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Name FROM artist AS T1 JOIN exhibition AS T2 ON T1.Artist_ID = T2.Artist_ID",
    "question": "What are the names of artists that have had any exhibitions?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT AVG( T1.Ticket_Price), MIN( T1.Ticket_Price), MAX( T1.Ticket_Price) FROM exhibition AS T1 WHERE T1.Year > 2009",
    "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened after 2009?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Theme, T2.Date, T2.Attendance FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T1.Year != 2004",
    "question": "What is the theme, date, and attendance for the exhibition not in year 2004?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Theme, T2.Date, T2.Attendance FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T1.Year != 2004",
    "question": "Return the themes, dates, and attendance for exhibitions that did not happen in 2004."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Name FROM artist AS T1      INTERSECT SELECT T2.Name FROM artist AS T2 JOIN exhibition AS T3 ON T2.Artist_ID = T3.Artist_ID WHERE T3.Year = 2004",
    "question": "What are the names of artists who had an exhibition in 2004?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < 100      UNION SELECT T3.Theme FROM exhibition AS T3 JOIN exhibition_record AS T4 ON T3.Exhibition_ID = T4.Exhibition_ID WHERE T4.Attendance > 500",
    "question": "Show the theme for exhibitions with either records of an attendance below 100 or above 500."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < 100       EXCEPT SELECT T3.Theme FROM exhibition AS T3 JOIN exhibition_record AS T4 ON T3.Exhibition_ID = T4.Exhibition_ID WHERE T4.Attendance > 500",
    "question": "Which themes have had corresponding exhibitions that have had attendance below 100 but not above 500?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT COUNT(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T1.Attendance > 100 AND T2.Ticket_Price < 10",
    "question": "How many exhibitions have a attendance more than 100 and have a ticket price below 10?"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT COUNT(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T1.Attendance > 100 AND T2.Ticket_Price < 10",
    "question": "Count the number of exhibitions that have had an attendnance of over 100 and a ticket prices under 10."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Name FROM artist AS T1 JOIN exhibition AS T3 ON T1.Artist_ID = T3.Artist_ID JOIN exhibition_record AS T2 ON T3.Exhibition_ID = T2.Exhibition_ID  GROUP BY T1.Name HAVING AVG( T2.Attendance) < 200",
    "question": "Show all artist names with an average exhibition attendance under 200."
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.Name FROM artist AS T1 JOIN exhibition AS T3 ON T1.Artist_ID = T3.Artist_ID JOIN exhibition_record AS T2 ON T3.Exhibition_ID = T2.Exhibition_ID  GROUP BY T1.Name HAVING AVG( T2.Attendance) >= 200",
    "question": "What are the names of artist whose exhibitions draw at least 200 attendees on average?"
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT T1.i_id FROM item AS T1 WHERE T1.title != 'orange'",
    "question": "Find the id of the item whose title is not \"orange\"."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT COUNT(*) FROM item AS T1",
    "question": "How many items are there in the item table?"
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT * FROM review AS T1",
    "question": "Find all the reviews."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT * FROM useracct AS T1",
    "question": "What are the user accounts?"
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT T1.rank FROM review AS T1",
    "question": "Find all ranks of all reviews."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT DISTINCT T1.u_id FROM review AS T1",
    "question": "What are the IDs of the users who wrote some reviews?"
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT DISTINCT T1.i_id FROM review AS T1",
    "question": "Which items were reviewed by some users?"
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT COUNT(*) FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id",
    "question": "Find the number of items that received at least one review."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id",
    "question": "Find the names of users who left a review."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating != 10",
    "question": "Find the names of goods that do not receive a rating of 10."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating != (SELECT AVG( T23.rating) FROM review AS T23)",
    "question": "Find the titles of items whose rating is not equal to the average review rating of all items."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8       EXCEPT SELECT T3.title FROM item AS T3 JOIN review AS T4 ON T3.i_id = T4.i_id WHERE T4.rating < 5",
    "question": "Find the titles of items that received a rating higher than 8 but not a rating below 5."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3      UNION SELECT T3.title FROM item AS T3 JOIN review AS T4 ON T3.i_id = T4.i_id  GROUP BY T3.title HAVING AVG( T4.rating) > 5",
    "question": "Find the names of items whose rank is higher than 3 or whose average rating is above 5."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id",
    "question": "Find the names of the items that received any review."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id",
    "question": "Find the names of users who left a review."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT COUNT(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id",
    "question": "Find the number of users who wrote at least one review."
  },
  {
    "db_id": "epinions_1",
    "query": "SELECT COUNT(*) FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id",
    "question": "Find the number of items with any review."
  },
  {
    "db_id": "riding_club",
    "query": "SELECT * FROM player AS T1",
    "question": "What are the attributes of all players?"
  },
  {
    "db_id": "riding_club",
    "query": "SELECT T1.Player_name, T1.Residence FROM player AS T1 WHERE T1.Occupation = 'Researcher'",
    "question": "List the name and residence for players whose occupation is \"Researcher\"."
  },
  {
    "db_id": "riding_club",
    "query": "SELECT T1.Residence FROM player AS T1  GROUP BY T1.Residence HAVING COUNT(*) < 2",
    "question": "Show the residences that have less than two players."
  },
  {
    "db_id": "riding_club",
    "query": "SELECT T1.Player_name, T1.Gender FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID = T2.Player_ID WHERE T2.Starting_year < 2011",
    "question": "Show the names and genders of players with a coach starting before 2011."
  },
  {
    "db_id": "riding_club",
    "query": "SELECT T1.Player_name FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID = T2.Player_ID",
    "question": "List the names of players that have coaches."
  },
  {
    "db_id": "riding_club",
    "query": "SELECT T1.Residence FROM player AS T1 WHERE T1.Gender = 'M'",
    "question": "Show the residences of all players of gender \"M\"."
  },
  {
    "db_id": "gymnast",
    "query": "SELECT * FROM gymnast AS T1",
    "question": "What are the gymnasts' names?"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT * FROM gymnast AS T1",
    "question": "Show all the gymnasts."
  },
  {
    "db_id": "gymnast",
    "query": "SELECT T1.Horizontal_Bar_Points FROM gymnast AS T1",
    "question": "What are the horizontal bar points for all gymnasts?"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT T1.Horizontal_Bar_Points FROM gymnast AS T1",
    "question": "Return the horizontal bar points for all gymnasts."
  },
  {
    "db_id": "gymnast",
    "query": "SELECT COUNT( T1.Name) FROM people AS T1",
    "question": "How many people are there?"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT COUNT( T1.Name) FROM people AS T1",
    "question": "Return the number of gymnasts."
  },
  {
    "db_id": "gymnast",
    "query": "SELECT T1.Name FROM people AS T1 WHERE T1.Hometown = 'Santo Domingo'",
    "question": "What are the names of gymnasts whose hometown is \"Santo Domingo\"?"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT T1.Name FROM people AS T1 WHERE T1.Hometown = 'Santo Domingo'",
    "question": "Return the names of gymnasts who grew up in Santo Domingo."
  },
  {
    "db_id": "gymnast",
    "query": "SELECT DISTINCT T1.Hometown FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID WHERE T2.Total_Points >= 57.5",
    "question": "What are the distinct hometowns of gymnasts with total points greater than or equal to 57.5?"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT DISTINCT T1.Hometown FROM people AS T1",
    "question": "List the distinct hometowns that are associated with any gymnast."
  },
  {
    "db_id": "gymnast",
    "query": "SELECT DISTINCT T1.Hometown FROM people AS T1      INTERSECT SELECT DISTINCT T2.Hometown FROM people AS T2",
    "question": "Which hometowns did both gymnasts and coaches come from?"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT T1.Hometown FROM people AS T1 WHERE T1.Age > 23",
    "question": "Show the hometowns of people older than 23."
  },
  {
    "db_id": "gymnast",
    "query": "SELECT T1.Hometown FROM people AS T1 WHERE T1.Age > 23       EXCEPT SELECT T2.Hometown FROM people AS T2 WHERE T2.Age < 20",
    "question": "From which hometowns did people older than 23 come from, but not younger than 20?"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT DISTINCT T1.Hometown FROM people AS T1",
    "question": "What are the distinct hometowns of these people?"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT DISTINCT T1.Hometown FROM people AS T1",
    "question": "List all the different hometowns of these people."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT SUM( T1.balance) FROM SAVINGS AS T1 JOIN ACCOUNTS AS T2 ON T1.custid = T2.custid WHERE T2.name = 'Brown'",
    "question": "Find the total savings balance of all accounts with name \u2018Brown\u2019."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT SUM( T1.balance) FROM SAVINGS AS T1 JOIN ACCOUNTS AS T2 ON T1.custid = T2.custid WHERE T2.name = 'Brown'",
    "question": "What is the total balance of savings accounts belonging to someone with the name Brown?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT * FROM ACCOUNTS AS T1",
    "question": "What are the details of all accounts?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT * FROM ACCOUNTS AS T1",
    "question": "Show all accounts."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.balance FROM CHECKING AS T1",
    "question": "What are the checking balances in all accounts?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.balance FROM CHECKING AS T1",
    "question": "Find the balance for checking accounts."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.balance FROM CHECKING AS T1",
    "question": "Find the checking balance."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.balance FROM CHECKING AS T1",
    "question": "What are the balances in checking accounts?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT COUNT(*) FROM SAVINGS AS T1 WHERE T1.balance != (SELECT AVG( T22.balance) FROM SAVINGS AS T22)",
    "question": "How many accounts have a savings balance not equal to the average savings balance?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT COUNT(*) FROM SAVINGS AS T1 WHERE T1.balance < (SELECT AVG( T22.balance) FROM SAVINGS AS T22)",
    "question": "Find the number of accounts with a savings balance that is lower than the average savings balance."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.custid, T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT MAX( T23.balance) FROM CHECKING AS T23)",
    "question": "Find the name and id of accounts whose checking balance is above the maximum checking balance."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.balance FROM CHECKING AS T1 JOIN ACCOUNTS AS T2 ON T1.custid = T2.custid WHERE T2.name NOT LIKE 'ee'",
    "question": "What is the checking balance of the account whose owner\u2019s name does not contain the substring \u2018ee\u2019?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.balance FROM CHECKING AS T1 JOIN ACCOUNTS AS T2 ON T1.custid = T2.custid WHERE T2.name NOT LIKE 'ee'",
    "question": "Find the balance of the checking account belonging to an owner whose name does not contain 'ee'."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG( T23.balance) FROM CHECKING AS T23)      UNION SELECT T3.name FROM ACCOUNTS AS T3 JOIN SAVINGS AS T4 ON T3.custid = T4.custid WHERE T4.balance < (SELECT AVG( T25.balance) FROM SAVINGS AS T25)",
    "question": "Find the names of accounts whose checking balance is above the average checking balance, or savings balance is below the average savings balance."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG( T23.balance) FROM CHECKING AS T23)      UNION SELECT T3.name FROM ACCOUNTS AS T3 JOIN SAVINGS AS T4 ON T3.custid = T4.custid WHERE T4.balance < (SELECT AVG( T25.balance) FROM SAVINGS AS T25)",
    "question": "What are the names of accounts with checking balances greater than the average checking balance or savings balances below the average savings balance?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT COUNT( T1.name) FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid JOIN SAVINGS AS T3 ON T1.custid = T3.custid    ORDER BY T2.balance + T3.balance ASC LIMIT 1",
    "question": "How many customers have the lowest sum of checking and savings balances?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.name, T2.balance + T3.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid JOIN SAVINGS AS T3 ON T1.custid = T3.custid WHERE T3.balance != (SELECT AVG( T24.balance) FROM SAVINGS AS T24)",
    "question": "What are the names and sum of checking and savings balances for accounts with savings balances not equal to the average savings balance?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT COUNT(*), T2.custid FROM CHECKING AS T1 JOIN ACCOUNTS AS T2 ON T1.custid = T2.custid  GROUP BY T2.custid",
    "question": "Find the number of checking accounts for each customer."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT COUNT(*), T2.custid FROM CHECKING AS T1 JOIN ACCOUNTS AS T2 ON T1.custid = T2.custid  GROUP BY T2.custid",
    "question": "How many checking accounts do each customer have?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.balance, T2.name FROM SAVINGS AS T1 JOIN ACCOUNTS AS T2 ON T1.custid = T2.custid",
    "question": "Find the saving balance and account name for each customer."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.balance, T2.name FROM SAVINGS AS T1 JOIN ACCOUNTS AS T2 ON T1.custid = T2.custid",
    "question": "What are the balances of savings accounts, and what are the names of customers with those accounts?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG( T23.balance) FROM CHECKING AS T23)",
    "question": "Find the name of accounts whose checking balance is above the average checking balance."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT COUNT( T1.balance) FROM SAVINGS AS T1 JOIN ACCOUNTS AS T3 ON T1.custid = T3.custid JOIN CHECKING AS T2 ON T3.custid = T2.custid    ORDER BY T2.balance DESC LIMIT 1",
    "question": "How many customers have the highest checking balance?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT COUNT( T1.balance + T2.balance) FROM CHECKING AS T1 JOIN ACCOUNTS AS T3 ON T1.custid = T3.custid JOIN SAVINGS AS T2 ON T3.custid = T2.custid     ORDER BY T1.balance + T2.balance ASC",
    "question": "How many customers have a checking and savings balance?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid JOIN SAVINGS AS T3 ON T1.custid  =  T3.custid WHERE T2.balance <= T3.balance",
    "question": "What are the names of customers with a lower or equal checking balance than savings balance?"
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.name, T2.balance + T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance <= T3.balance",
    "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower or equal than corresponding checking balance."
  },
  {
    "db_id": "small_bank_1",
    "query": "SELECT T1.name, T2.balance + T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance <= T3.balance",
    "question": "What are the names of customers who have a savings balance lower than or equal to their checking balance, and what is the total of their checking and savings balances?"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT COUNT(*) FROM browser AS T1 WHERE T1.market_share <= 5",
    "question": "How many main stream browsers whose market share is at most 5 exist?"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT T1.id, T1.market_share FROM browser AS T1 WHERE T1.name != 'Safari'",
    "question": "What is the id and market share of the browsers other than Safari?"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT T1.name, T1.Operating_system FROM Web_client_accelerator AS T1 WHERE T1.Connection = 'Broadband'",
    "question": "What are the name and os of web client accelerators that work with only a 'Broadband' type connection?"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.browser_id JOIN Web_client_accelerator AS T2 ON T3.accelerator_id = T2.id WHERE T2.name = 'CProxy' OR T3.compatible_since_year > 1998",
    "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' or after year 1998 ?"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT T1.id, T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id  GROUP BY T2.accelerator_id HAVING COUNT(*) > 2",
    "question": "What are the ids and names of the web accelerators that are compatible with more than two browsers?"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN Web_client_accelerator AS T2 ON T1.accelerator_id = T2.id JOIN browser AS T3 ON T1.browser_id = T3.id WHERE T2.name = 'CACHEbox' OR T3.name = 'Internet Explorer'",
    "question": "When did the web accelerator 'CACHEbox' or browser 'Internet Explorer' become compatible?"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT DISTINCT T1.Client FROM Web_client_accelerator AS T1",
    "question": "What are the different kinds of clients supported by the web clients accelerators?"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT COUNT(*) FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id",
    "question": "How many accelerators are compatible with the browsers listed ?"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT DISTINCT T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id JOIN browser AS T2 ON T3.browser_id = T2.id WHERE T2.market_share <= 15",
    "question": "What distinct accelerator names are compatible with the browswers that have market share lower than or equal to 15?"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.browser_id JOIN Web_client_accelerator AS T2 ON T3.accelerator_id = T2.id WHERE T2.name = 'CACHEbox'      UNION SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.browser_id JOIN Web_client_accelerator AS T2 ON T3.accelerator_id = T2.id WHERE T2.name = 'Fasterfox'",
    "question": "List the names of the browser that are compatible with either 'CACHEbox' or 'Fasterfox'."
  },
  {
    "db_id": "browser_web",
    "query": "SELECT T1.name, T1.Operating_system FROM Web_client_accelerator AS T1",
    "question": "Show the accelerator names and supporting operating systems."
  },
  {
    "db_id": "browser_web",
    "query": "SELECT T1.name FROM Web_client_accelerator AS T1 WHERE T1.name NOT LIKE 'Opera'",
    "question": "Which accelerator name does not contain substring \"Opera\"?"
  },
  {
    "db_id": "wrestler",
    "query": "SELECT * FROM wrestler AS T1",
    "question": "What are the wrestlers?"
  },
  {
    "db_id": "wrestler",
    "query": "SELECT * FROM wrestler AS T1",
    "question": "Show all the wrestlers."
  },
  {
    "db_id": "wrestler",
    "query": "SELECT DISTINCT T1.Reign FROM wrestler AS T1 WHERE T1.Location = 'Tokyo , Japan'",
    "question": "What are the distinct reigns of wrestlers whose location is \"Tokyo,Japan\" ?"
  },
  {
    "db_id": "wrestler",
    "query": "SELECT DISTINCT T1.Reign FROM wrestler AS T1 WHERE T1.Location = 'Tokyo , Japan'",
    "question": "Give the different reigns of wrestlers who are located in Tokyo, Japan."
  },
  {
    "db_id": "wrestler",
    "query": "SELECT T1.Elimination_Move FROM Elimination AS T1 WHERE T1.Team != 'Team Orton'",
    "question": "What are the elimination moves of wrestlers whose team is not \"Team Orton\"?"
  },
  {
    "db_id": "wrestler",
    "query": "SELECT T1.Elimination_Move FROM Elimination AS T1 WHERE T1.Team != 'Team Orton'",
    "question": "Return the elimination movies of wrestlers not on Team Orton."
  },
  {
    "db_id": "wrestler",
    "query": "SELECT T1.Time FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held < '50'",
    "question": "Show times of elimination of wrestlers with days held less than 50."
  },
  {
    "db_id": "wrestler",
    "query": "SELECT T1.Time FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held < '50'",
    "question": "What are the times of elimination for wrestlers with under 50 days held?"
  },
  {
    "db_id": "wrestler",
    "query": "SELECT T1.Team FROM Elimination AS T1  GROUP BY T1.Team HAVING COUNT(*) >= 3",
    "question": "Show teams that have suffered three or more eliminations."
  },
  {
    "db_id": "wrestler",
    "query": "SELECT T1.Team FROM Elimination AS T1  GROUP BY T1.Team HAVING COUNT(*) < 3",
    "question": "Which teams had less than 3 eliminations?"
  },
  {
    "db_id": "wrestler",
    "query": "SELECT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID",
    "question": "List the names of wrestlers that have been eliminated."
  },
  {
    "db_id": "wrestler",
    "query": "SELECT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID",
    "question": "What are the names of wrestlers who have been eliminated?"
  },
  {
    "db_id": "wrestler",
    "query": "SELECT T1.Team FROM Elimination AS T1 WHERE T1.Eliminated_By = 'Orton'",
    "question": "Show the teams that have wrestlers eliminated by \"Orton\"."
  },
  {
    "db_id": "wrestler",
    "query": "SELECT T1.Team FROM Elimination AS T1 WHERE T1.Eliminated_By = 'Orton'       EXCEPT SELECT T2.Team FROM Elimination AS T2 WHERE T2.Eliminated_By = 'Benjamin'",
    "question": "What are the teams that have wrestlers eliminated by Orton but not eliminated by Benjamin?"
  },
  {
    "db_id": "wrestler",
    "query": "SELECT DISTINCT T1.Team FROM Elimination AS T1",
    "question": "What are the distinct teams that suffer elimination?"
  },
  {
    "db_id": "wrestler",
    "query": "SELECT DISTINCT T1.Team FROM Elimination AS T1",
    "question": "What are the different teams that have eliminated wrestlers?"
  },
  {
    "db_id": "school_finance",
    "query": "SELECT * FROM School AS T1",
    "question": "What are the names of all the schools?"
  },
  {
    "db_id": "school_finance",
    "query": "SELECT * FROM School AS T1",
    "question": "List all the schools."
  },
  {
    "db_id": "school_finance",
    "query": "SELECT T1.Mascot FROM School AS T1 WHERE T1.Enrollment < (SELECT AVG( T22.Enrollment) FROM School AS T22)",
    "question": "What are the mascots for schools with enrollments below the average?"
  },
  {
    "db_id": "school_finance",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.donator_name) FROM endowment AS T1 JOIN School AS T2 ON T1.School_id = T2.School_id WHERE T2.School_name != 'Glenn'",
    "question": "How many donors have endowment for school not named \"Glenn\"?"
  },
  {
    "db_id": "school_finance",
    "query": "SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id",
    "question": "List the names of the schools that have endowments."
  },
  {
    "db_id": "school_finance",
    "query": "SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id  GROUP BY T1.School_name HAVING SUM( T2.amount) >= 10",
    "question": "List all the names of schools with an endowment amount greater than or equal to 10."
  },
  {
    "db_id": "school_finance",
    "query": "SELECT T1.donator_name FROM endowment AS T1 JOIN School AS T2 ON T1.School_id = T2.School_id WHERE T2.School_name = 'Glenn'      UNION SELECT T3.donator_name FROM endowment AS T3 JOIN School AS T4 ON T3.School_id = T4.School_id WHERE T4.School_name = 'Triton'",
    "question": "Show the names of donors who donated to either school \"Glenn\" or \"Triton.\""
  },
  {
    "db_id": "school_finance",
    "query": "SELECT COUNT(*) FROM budget AS T1 WHERE T1.Budgeted > 3000 OR T1.Year <= 2001",
    "question": "How many budgets are above 3000 or in year 2001 or before?"
  },
  {
    "db_id": "school_finance",
    "query": "SELECT COUNT(*) FROM budget AS T1 WHERE T1.Budgeted > 3000 OR T1.Year <= 2001",
    "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000 or less than or equal to 3000"
  },
  {
    "db_id": "school_finance",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.donator_name) FROM endowment AS T1",
    "question": "How many distinct donor names are there?"
  },
  {
    "db_id": "school_finance",
    "query": "SELECT T1.School_name, T1.Mascot, T1.IHSAA_Football_Class FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Budgeted > 6000 AND T2.Year < 2003    ORDER BY T2.total_budget_percent_invested ASC",
    "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount and were founded before 2003, in the order of percent of total invested budget and total budgeted budget."
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT * FROM building AS T1",
    "question": "What are the buildings?"
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT COUNT(*) FROM building AS T1 WHERE T1.Height_feet > (SELECT AVG( T22.Height_feet) FROM building AS T22) AND T1.Floors > (SELECT AVG( T22.Floors) FROM building AS T22)",
    "question": "Show the number of buildings with a height above the average and a number of floors above the average."
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT T1.Name FROM building AS T1 WHERE T1.Height_feet >= 200 OR T1.Floors >= 20",
    "question": "List the names of buildings with at least 200 feet of height or with at least 20 floors."
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT T1.Institution, T1.Location FROM Institution AS T1 WHERE T1.Founded > 1990 OR T1.Type = 'Private'",
    "question": "Show the names and locations of institutions that are founded after 1990 or have the type \"Private\"."
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT T1.Type FROM Institution AS T1 WHERE T1.Founded > 1990 OR T1.Enrollment >= 1000",
    "question": "Show the institution type with an institution founded after 1990 or an institution with at least 1000 enrollment."
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT T1.Name FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id",
    "question": "Show the name of buildings that have at least one institution."
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT T1.Name FROM building AS T1",
    "question": "Show the names of buildings."
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT T1.Name, T1.Height_feet FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id WHERE T2.Founded > 1880 GROUP BY T2.building_id HAVING COUNT(*) >= 2",
    "question": "Show the names and heights of buildings with at least two institutions founded after 1880."
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Type) FROM Institution AS T1",
    "question": "Show the number of distinct institution types."
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT COUNT(*) FROM protein AS T1 JOIN Institution AS T2 ON T1.Institution_id = T2.Institution_id WHERE T2.Founded > 1880 AND T2.Type = 'Private'",
    "question": "How many proteins are associated with an institution founded after 1880 and an institution with type \"Private\"?"
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT COUNT(*) FROM Institution AS T1 JOIN building AS T2 ON T1.building_id = T2.building_id WHERE T2.Floors < 20",
    "question": "How many proteins are associated with an institution in a building with less than 20 floors?"
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT COUNT(*) FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id",
    "question": "How many institutions have an associated protein in our record?"
  },
  {
    "db_id": "cinema",
    "query": "SELECT T1.Location FROM cinema AS T1      INTERSECT SELECT T2.Location FROM cinema AS T2 WHERE T2.Capacity > 800",
    "question": "Show all the locations where all cinemas have capacity over 800."
  },
  {
    "db_id": "cinema",
    "query": "SELECT T1.Location FROM cinema AS T1 WHERE T1.Openning_year = 2010",
    "question": "Show all the locations where some cinemas were opened in year 2010."
  },
  {
    "db_id": "cinema",
    "query": "SELECT * FROM cinema AS T1",
    "question": "What are the attributes of all cinema?"
  },
  {
    "db_id": "cinema",
    "query": "SELECT * FROM cinema AS T1",
    "question": "Show all the data of cinemas."
  },
  {
    "db_id": "cinema",
    "query": "SELECT T1.Name, T1.Location FROM cinema AS T1 WHERE T1.Capacity != (SELECT AVG( T22.Capacity) FROM cinema AS T22)",
    "question": "Show the cinema name and location for cinemas with capacity not equal to average."
  },
  {
    "db_id": "cinema",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Location) FROM cinema AS T1",
    "question": "How many distinct locations have a cinema?"
  },
  {
    "db_id": "cinema",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Location) FROM cinema AS T1",
    "question": "Find the distinct number of locations that has a cinema."
  },
  {
    "db_id": "cinema",
    "query": "SELECT AVG( T1.Capacity), MIN( T1.Capacity), MAX( T1.Capacity) FROM cinema AS T1 WHERE T1.Openning_year > 2011",
    "question": "Show the average, minimum, and maximum capacity for all the cinemas opened after year 2011."
  },
  {
    "db_id": "cinema",
    "query": "SELECT T1.Location FROM cinema AS T1 WHERE T1.Capacity > 300 GROUP BY T1.Location HAVING COUNT(*) >= 2",
    "question": "Which locations have 2 or more cinemas with capacity over 300?"
  },
  {
    "db_id": "cinema",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Directed_by) FROM film AS T1",
    "question": "How many distinct directors are there?"
  },
  {
    "db_id": "cinema",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Directed_by) FROM film AS T1",
    "question": "How many distinct directors are there?"
  },
  {
    "db_id": "cinema",
    "query": "SELECT T1.Title, T1.Directed_by FROM film AS T1 JOIN schedule AS T2 ON T1.Film_ID = T2.Film_ID",
    "question": "What are the title and director of the films with schedule?"
  },
  {
    "db_id": "cinema",
    "query": "SELECT T1.Location FROM cinema AS T1 WHERE T1.Capacity > 300 GROUP BY T1.Location HAVING COUNT(*) > 1",
    "question": "Find the locations that have more than one movie theater with capacity above 300."
  },
  {
    "db_id": "cinema",
    "query": "SELECT T1.Location FROM cinema AS T1 WHERE T1.Capacity > 300 GROUP BY T1.Location HAVING COUNT(*) > 1",
    "question": "In which locations are there more than one movie theater with capacity above 300?"
  },
  {
    "db_id": "cinema",
    "query": "SELECT COUNT(*) FROM film AS T1 WHERE T1.Title NOT LIKE 'Dummy'",
    "question": "How many films do not have the word 'Dummy' in their titles?"
  },
  {
    "db_id": "cinema",
    "query": "SELECT COUNT(*) FROM film AS T1 WHERE T1.Title NOT LIKE 'Dummy'",
    "question": "Count the number of films whose title does not contain the word 'Dummy'."
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT T1.good_or_bad_customer FROM Customers AS T1 JOIN Discount_Coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount != 500",
    "question": "Are the customers holding coupons with amount not 500 bad or good?"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT T1.product_id FROM Products_Booked AS T1  GROUP BY T1.product_id HAVING COUNT(*) != 3",
    "question": "What is the id of the product that is not booked for 3 times?"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT T1.product_description FROM Products_for_Hire AS T1 JOIN Products_Booked AS T2 ON T1.product_id = T2.product_id WHERE T2.booked_amount != 102.76",
    "question": "What is the product description of the product booked with an amount not equal to 102.76?"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT T1.booking_start_date, T1.booking_end_date FROM Bookings AS T1 JOIN Products_Booked AS T3 ON T1.booking_id = T3.booking_id JOIN Products_for_Hire AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name != 'Book collection A'",
    "question": "What are the start date and end date of the booking that has booked the product except the product named 'Book collection A'?"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT T1.product_name FROM Products_for_Hire AS T1 JOIN View_Product_Availability AS T2 ON T1.product_id = T2.product_id WHERE T2.available_yn != '1'",
    "question": "What are the names of products whose availability does not equal to 1?"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT DISTINCT T1.product_type_code FROM Products_for_Hire AS T1",
    "question": "What are the different product types?"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT T1.amount_due FROM Payments AS T1",
    "question": "What are the amounts due for all the payments?"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.payment_type_code) FROM Payments AS T1",
    "question": "How many distinct payment types are there?"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT T1.daily_hire_cost FROM Products_for_Hire AS T1 WHERE T1.product_name NOT LIKE 'Book'",
    "question": "What are the daily hire costs for the products whose name does not contain the substring 'Book'?"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT COUNT(*) FROM Products_for_Hire AS T1 WHERE T1.product_id IN (SELECT T22.product_id FROM Products_Booked AS T22 WHERE T22.booked_amount > 200)",
    "question": "How many products are booked with amount higher than 200?"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT T1.payment_date FROM Payments AS T1 WHERE T1.amount_paid > 300 AND T1.payment_type_code = 'Check'",
    "question": "What are the payment date of the payment with amount paid higher than 300 and with payment type is 'Check'"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT T1.product_name, T1.product_description FROM Products_for_Hire AS T1 WHERE T1.product_type_code = 'Cutlery' OR T1.daily_hire_cost < 20",
    "question": "What are the names and descriptions of the products that are of 'Cutlery' type or have daily hire cost lower than 20?"
  },
  {
    "db_id": "phone_market",
    "query": "SELECT * FROM phone AS T1",
    "question": "What are the phones?"
  },
  {
    "db_id": "phone_market",
    "query": "SELECT T1.Name FROM phone AS T1 JOIN phone_market AS T3 ON T1.Phone_ID = T3.Phone_ID JOIN market AS T2 ON T3.Market_ID = T2.Market_ID WHERE T2.Num_of_shops <= 50",
    "question": "Show the names of phones that are on market with number of shops less than or equal to 50."
  },
  {
    "db_id": "phone_market",
    "query": "SELECT T1.Name FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID",
    "question": "List the names of phones that are on any market."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT * FROM company AS T1",
    "question": "What are the names of all the companies?"
  },
  {
    "db_id": "gas_company",
    "query": "SELECT * FROM company AS T1",
    "question": "What are the names of all companies?"
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Company, T1.Main_Industry FROM company AS T1 WHERE T1.Headquarters = 'USA'",
    "question": "Show the company name and the main industry for all companies whose headquarters are from USA."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Company, T1.Main_Industry FROM company AS T1 WHERE T1.Headquarters = 'USA'",
    "question": "What are the companies and main industries of all companies that are headquartered in the United States?"
  },
  {
    "db_id": "gas_company",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Main_Industry) FROM company AS T1",
    "question": "Show the number of distinct main industry for all companies."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Main_Industry) FROM company AS T1",
    "question": "How many different main industries are there for all companies?"
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Headquarters FROM company AS T1 WHERE T1.Main_Industry = 'Banking'",
    "question": "Show all headquarters with a company in banking industry."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Headquarters FROM company AS T1 WHERE T1.Main_Industry = 'Banking'      UNION SELECT T2.Headquarters FROM company AS T2 WHERE T2.Main_Industry = 'Oil AND gas'",
    "question": "What are the headquarters that have either a company in the banking industry or 'oil and gas' industry?"
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Headquarters FROM company AS T1      INTERSECT SELECT T2.Headquarters FROM company AS T2 WHERE T2.Main_Industry = 'Banking'",
    "question": "Show all headquarters with a company in banking industry."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Company, T1.Main_Industry FROM company AS T1 JOIN station_company AS T2 ON T1.Company_ID = T2.Company_ID",
    "question": "Show company name and main industry with a gas station."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Company, T1.Main_Industry FROM company AS T1 JOIN station_company AS T2 ON T1.Company_ID = T2.Company_ID",
    "question": "What are the main industries of the companies that have gas stations and what are the companies?"
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Manager_Name FROM gas_station AS T1 JOIN station_company AS T3 ON T1.Station_ID = T3.Station_ID JOIN company AS T2 ON T3.Company_ID = T2.Company_ID WHERE T2.Company != 'ExxonMobil'",
    "question": "Show the manager name for gas stations not belonging to the ExxonMobil company."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Manager_Name FROM gas_station AS T1 JOIN station_company AS T3 ON T1.Station_ID = T3.Station_ID JOIN company AS T2 ON T3.Company_ID = T2.Company_ID WHERE T2.Company != 'ExxonMobil'",
    "question": "What are the names of the managers for gas stations that are NOT operated by the ExxonMobil company?"
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Location FROM gas_station AS T1 JOIN station_company AS T3 ON T1.Station_ID = T3.Station_ID JOIN company AS T2 ON T3.Company_ID = T2.Company_ID WHERE T2.Market_Value <= 100",
    "question": "What are the locations that have gas stations owned by a company with a market value less than or equal to 100?"
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Manager_Name FROM gas_station AS T1 WHERE T1.Open_Year < 2000 GROUP BY T1.Manager_Name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the name of the manager with the most gas stations that opened before 2000?"
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Rank, T1.Company, T1.Market_Value FROM company AS T1 WHERE T1.Main_Industry != 'Banking'    ORDER BY T1.Sales_billion ASC",
    "question": "find the rank, company names, market values of the companies not in the banking industry order by their sales and profits in billion."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.Rank, T1.Company, T1.Market_Value FROM company AS T1 WHERE T1.Main_Industry != 'Banking'    ORDER BY T1.Sales_billion ASC",
    "question": "What is the rank, company, and market value of every comapny that is not in the banking industry ordered by sales and profits?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT * FROM region AS T1",
    "question": "What are the regions?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT * FROM region AS T1",
    "question": "List all the regions."
  },
  {
    "db_id": "party_people",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Region_name) FROM region AS T1     ORDER BY T1.Label ASC",
    "question": "How many different region names are there, ordered by labels?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT DISTINCT T1.Party_name FROM party AS T1",
    "question": "What are the names of all the parties?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT DISTINCT T1.Party_name FROM party AS T1",
    "question": "List the names of all the different parties."
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Minister FROM party AS T1 WHERE T1.Party_name = 'Progress Party'",
    "question": "Show all ministers who belong to Progress Party."
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Minister FROM party AS T1 WHERE T1.Party_name = 'Progress Party'",
    "question": "Which ministers are a part of the Progress Party?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Party_name FROM party AS T1 JOIN member AS T2 ON T1.Party_ID = T2.Party_ID",
    "question": "Show names of parties that have at least one member."
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Party_name FROM party AS T1 JOIN member AS T2 ON T1.Party_ID = T2.Party_ID",
    "question": "What are the names of parties that have members?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Member_Name FROM member AS T1 WHERE T1.Party_ID = '3'       EXCEPT SELECT T2.Member_Name FROM member AS T2 WHERE T2.Party_ID = '1'",
    "question": "Show the member names which are in the party with id 3 but not in the party with id 1."
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Member_Name FROM member AS T1 WHERE T1.Party_ID = '3'",
    "question": "Which member names are in the party with the id 3?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Member_Name FROM member AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID WHERE T2.Party_name = 'Progress Party'",
    "question": "Show member names that are in the Progress Party."
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Member_Name FROM member AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID WHERE T2.Party_name = 'Progress Party'",
    "question": "Which member names corresponding to members who are in the Progress Party?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT * FROM party_events AS T1",
    "question": "What are all the party events?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT * FROM party_events AS T1",
    "question": "Show all party events."
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Member_Name FROM member AS T1      INTERSECT SELECT T2.Member_Name FROM member AS T2",
    "question": "Show all member names who are in charge of any event."
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Member_Name FROM member AS T1",
    "question": "What are the names of members who are in charge of any events?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Party_name FROM party AS T1 JOIN party_events AS T2 ON T1.Party_ID = T2.Party_ID  GROUP BY T1.Party_name HAVING COUNT(*) < 2",
    "question": "Return the names of parties that have less than two events."
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Event_Name FROM party_events AS T1  GROUP BY T1.Event_Name HAVING COUNT(*) < 2",
    "question": "find the event names that have less than 2 records."
  },
  {
    "db_id": "party_people",
    "query": "SELECT T1.Event_Name FROM party_events AS T1  GROUP BY T1.Event_Name HAVING COUNT(*) < 2",
    "question": "Which event names were used less than twice for party events?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT COUNT(*) FROM party AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID JOIN party_events AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Region_name = 'United Kingdom' OR T3.Event_Name = 'Annaual Meeting'",
    "question": "How many Annual Meeting events happened in the United Kingdom region or elsewhere?"
  },
  {
    "db_id": "party_people",
    "query": "SELECT COUNT(*) FROM party AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID JOIN party_events AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Region_name = 'United Kingdom' OR T3.Event_Name = 'Annaual Meeting'",
    "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom or in the United Kingdom."
  },
  {
    "db_id": "pilot_record",
    "query": "SELECT * FROM pilot AS T1",
    "question": "What are the attributes of all pilots?"
  },
  {
    "db_id": "pilot_record",
    "query": "SELECT T1.Pilot_name FROM pilot AS T1 WHERE T1.Team = 'Bradley' AND T1.Team = 'Fordham'",
    "question": "Show the names of pilots from team \"Bradley\" and \"Fordham\"."
  },
  {
    "db_id": "pilot_record",
    "query": "SELECT T1.Position FROM pilot AS T1 WHERE T1.Join_Year < 2000      UNION SELECT T2.Position FROM pilot AS T2 WHERE T2.Join_Year > 2005",
    "question": "Show the pilot positions that have both pilots joining after year 2005 or pilots joining before 2000."
  },
  {
    "db_id": "pilot_record",
    "query": "SELECT T1.Fleet_Series FROM aircraft AS T1 JOIN pilot_record AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID JOIN pilot AS T2 ON T3.Pilot_ID = T2.Pilot_ID WHERE T2.Age > 34",
    "question": "Show the fleet series of the aircrafts flied by pilots older than 34"
  },
  {
    "db_id": "pilot_record",
    "query": "SELECT T1.Pilot_name FROM pilot AS T1 JOIN pilot_record AS T2 ON T1.Pilot_ID = T2.Pilot_ID",
    "question": "List the names of pilots that have records."
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT COUNT( T1.document_status_code) FROM Ref_Document_Status AS T1",
    "question": "How many document status codes do we have?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.document_status_description FROM Ref_Document_Status AS T1 WHERE T1.document_status_code != 'working'",
    "question": "What is the description of document status code that is not 'working'?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT COUNT( T1.document_type_code) FROM Ref_Document_Types AS T1",
    "question": "How many document type codes do we have?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.document_type_description FROM Ref_Document_Types AS T1 WHERE T1.document_type_code != 'Paper'",
    "question": "What is the description of document type that is not 'Paper'?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT COUNT( T1.shipping_agent_name) FROM Ref_Shipping_Agents AS T1",
    "question": "How many shipping agent names are there?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.shipping_agent_code FROM Ref_Shipping_Agents AS T1 WHERE T1.shipping_agent_name != 'UPS'",
    "question": "What is the shipping agent code of shipping agent not UPS?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT COUNT( T1.role_code) FROM Roles AS T1",
    "question": "How many role codes are there?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.role_description FROM Roles AS T1 WHERE T1.role_code != 'ED'",
    "question": "What is the description of all roles except role code ED?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT * FROM Employees AS T1",
    "question": "What are the names of all the employees?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.role_description FROM Roles AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name != 'Koby'",
    "question": "What are the roles of the employees who are not named Koby?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.role_description, COUNT( T2.employee_id) FROM Roles AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code  GROUP BY T1.role_description HAVING COUNT( T2.employee_id) >= 1",
    "question": "List roles that have at least one employee. List the role description and number of employees."
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.document_status_description FROM Ref_Document_Status AS T1 JOIN Documents AS T2 ON T1.document_status_code = T2.document_status_code WHERE T2.document_id != 1",
    "question": "What is the document status description of the documents that do not have id 1?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.document_type_code FROM Documents AS T1 WHERE T1.document_id != 2",
    "question": "List the document type code for all documents except the document with the id 2."
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.document_id FROM Documents AS T1 WHERE T1.document_status_code = 'done' OR T1.document_type_code = 'Paper'",
    "question": "List the document ids for any documents with the status code done or the type code paper."
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.shipping_agent_name FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T2.document_id != 2",
    "question": "What is the name of the shipping agent of the document with id not 2?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT COUNT(*) FROM Documents AS T1 JOIN Ref_Shipping_Agents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T2.shipping_agent_name != 'USPS'",
    "question": "How many documents were not shipped by USPS?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.receipt_date FROM Documents AS T1 WHERE T1.document_id != 3",
    "question": "What is the receipt date of the document with id not 3?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.address_details FROM Addresses AS T1 JOIN Documents_Mailed AS T2 ON T1.address_id = T2.mailed_to_address_id WHERE T2.document_id != 4",
    "question": "What address was the document with id not 4 mailed to?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.mailing_date FROM Documents_Mailed AS T1 WHERE T1.document_id != 7",
    "question": "What is the mail date of the document with id not 7?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.document_id FROM Documents AS T1 WHERE T1.document_status_code = 'done' AND T1.document_type_code = 'Paper'",
    "question": "List the document ids of documents with the status done and type Paper."
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.document_id FROM Documents AS T1 WHERE T1.document_status_code = 'done' AND T1.document_type_code = 'Paper'",
    "question": "List document id of documents status is done and document type is Paper."
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.draft_details FROM Document_Drafts AS T1 WHERE T1.document_id != 7",
    "question": "What is draft detail of the document with id not 7?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT COUNT(*) FROM Draft_Copies AS T1 WHERE T1.document_id != 2",
    "question": "How many draft copies does the document with id not 2 have?"
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.document_id, COUNT(*) FROM Draft_Copies AS T1  GROUP BY T1.document_id HAVING COUNT(*) >= 1",
    "question": "Which documents have at least 1 draft copy? List document id and number of draft copies."
  },
  {
    "db_id": "cre_Doc_Control_Systems",
    "query": "SELECT T1.employee_name FROM Employees AS T1 JOIN Circulation_History AS T2 ON T1.employee_id = T2.employee_id WHERE T2.document_id != 1",
    "question": "List all employees in the circulation history of the document with id not 1. List the employee's name."
  },
  {
    "db_id": "company_1",
    "query": "SELECT T1.Dependent_name FROM dependent AS T1 WHERE T1.Relationship != 'Spouse'",
    "question": "find all dependent names who do not have a spouse relation with some employee."
  },
  {
    "db_id": "company_1",
    "query": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation != 'Houston'",
    "question": "Find the names of departments that are not located in Houston."
  },
  {
    "db_id": "company_1",
    "query": "SELECT T1.Fname, T1.Lname FROM employee AS T1 WHERE T1.Salary >= 30000",
    "question": "Return the first names and last names of employees who earn more than or equal to 30000 in salary."
  },
  {
    "db_id": "local_govt_in_alabama",
    "query": "SELECT T1.Event_Details FROM Events AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code != 'Marriage'",
    "question": "what are the event details of the services that do not have the type code 'Marriage'?"
  },
  {
    "db_id": "local_govt_in_alabama",
    "query": "SELECT T1.Event_ID, T1.Event_Details FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID  GROUP BY T2.Event_ID HAVING COUNT(*) >= 1",
    "question": "What are the ids and details of events that have at least one participants?"
  },
  {
    "db_id": "local_govt_in_alabama",
    "query": "SELECT COUNT(*) FROM Participants AS T1 WHERE T1.Participant_Type_Code != 'Organizer'",
    "question": "How many participants do not belong to the type 'Organizer'?"
  },
  {
    "db_id": "local_govt_in_alabama",
    "query": "SELECT COUNT(*) FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T2.Participant_Details NOT LIKE 'Dr.'",
    "question": "How many events had participants whose details did not have the substring 'Dr.'"
  },
  {
    "db_id": "local_govt_in_alabama",
    "query": "SELECT T1.Service_Type_Code FROM Services AS T1 JOIN Events AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Event_Details = 'Success'",
    "question": "Which services type had successful event details?"
  },
  {
    "db_id": "local_govt_in_alabama",
    "query": "SELECT COUNT(*) FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID",
    "question": "How many events had participants?"
  },
  {
    "db_id": "local_govt_in_alabama",
    "query": "SELECT DISTINCT T1.Participant_ID FROM Participants_in_Events AS T1",
    "question": "What are all the distinct participant ids who attended any events?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.name FROM races AS T1 WHERE T1.year != 2017",
    "question": "Find the names of all races not held in 2017."
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.name FROM races AS T1 WHERE T1.year != 2017",
    "question": "What are the names of all the races that did not occur in the year 2017?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.forename, T1.surname FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > 93000",
    "question": "What are the forenames and surnames of all unique drivers who had a lap time of more than 93000 milliseconds?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.driverId, T1.nationality FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < 100000",
    "question": "What are the different driver ids and nationalities of all drivers who had a laptime of less than 100000 milliseconds?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.driverId, T1.forename, T1.surname FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 GROUP BY T2.driverId HAVING COUNT(*) >= 2",
    "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' OR T2.year = 2009",
    "question": "How many drivers participated in the race Australian Grand Prix or held in 2009?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.name, T1.year FROM races AS T1 JOIN driverStandings AS T3 ON T1.raceId = T3.raceId JOIN drivers AS T2 ON T3.driverId = T2.driverId WHERE T2.forename != 'Lewis'",
    "question": "Give me a list of names and years of races that did not have any driver whose forename is Lewis?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.name, T1.year FROM races AS T1 JOIN driverStandings AS T3 ON T1.raceId = T3.raceId JOIN drivers AS T2 ON T3.driverId = T2.driverId WHERE T2.forename != 'Lewis'",
    "question": "What are the names and years of all races that did not have a driver with the last name Lewis?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.forename, T1.surname FROM drivers AS T1 WHERE T1.nationality != 'German'",
    "question": "Find the forename and surname of drivers whose nationality is not German?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.forename, T1.surname FROM drivers AS T1 WHERE T1.nationality != 'German'",
    "question": "What is the first and last name of all the non-German drivers?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.driverId, T2.forename FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId JOIN driverStandings AS T4 ON T2.driverId = T4.driverId JOIN races AS T3 ON T4.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix'",
    "question": "Find the id and forenames of drivers who participated the race with name Australian Grand Prix?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.driverId, T2.forename FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId JOIN driverStandings AS T4 ON T2.driverId = T4.driverId JOIN races AS T3 ON T4.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix'      UNION SELECT T4.driverId, T5.forename FROM results AS T4 JOIN drivers AS T5 ON T4.driverId = T5.driverId JOIN driverStandings AS T7 ON T5.driverId = T7.driverId JOIN races AS T6 ON T7.raceId = T6.raceId WHERE T6.name = 'Chinese Grand Prix'",
    "question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix or the Chinese Grand Prix?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN driverStandings AS T3 ON T1.driverId = T3.driverId JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix'      UNION SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN driverStandings AS T3 ON T1.driverId = T3.driverId JOIN races AS T2 ON T3.raceId = T3.raceId WHERE T2.name = 'Chinese Grand Prix'",
    "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix or the races named Chinese Grand Prix?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN driverStandings AS T3 ON T1.driverId = T3.driverId JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix'     INTERSECT SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN driverStandings AS T3 ON T1.driverId = T3.driverId JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix'",
    "question": "What are the first and last names of all drivers who participated in both the Australian Grand Prix and the Chinese Grand Prix?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 OR T2.wins = 1",
    "question": "Find all the forenames of distinct drivers who was in position 1 as standing or won?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 OR T2.wins = 1",
    "question": "What are all the different first names of the drivers who are in position as standing or won?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 OR T2.wins = 1 AND T2.points > 20",
    "question": "Find all the forenames of distinct drivers who won in position 1 or won as driver standing and had more than 20 points?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 OR T2.wins = 1 AND T2.points > 20",
    "question": "What are the first names of the different drivers who won in position 1 or won as driver standing and had more than 20 points?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain' OR T1.year > 2017",
    "question": "What are the names of races that were held after 2017 or the circuits were in the country of Spain?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain' OR T1.year > 2017",
    "question": "What are the names of the races held after 2017 in Spain or after 2017 in general?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain' OR T1.year > 2000",
    "question": "What are the unique names of races that held after 2000 or the circuits were in Spain?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain' OR T1.year > 2000",
    "question": "What are the names of all races held after 2000 in Spain or after 2000 in general?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.driverId, T1.stop FROM pitStops AS T1 WHERE T1.duration = (SELECT MAX( T22.duration) FROM pitStops AS T22 WHERE T22.raceId = 841)",
    "question": "What is the id and stop number for each driver that has the same pit stop as the driver in the race with id 841?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.driverId, T1.stop FROM pitStops AS T1 WHERE T1.duration < (SELECT MIN( T22.duration) FROM pitStops AS T22 WHERE T22.raceId = 841)",
    "question": "Find the distinct driver id of all drivers that have a shorter stop duration than some drivers in the race whose id is 841?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT T1.driverId, T1.stop FROM pitStops AS T1 WHERE T1.duration < (SELECT MIN( T22.duration) FROM pitStops AS T22 WHERE T22.raceId = 841)",
    "question": "What are the different ids and stop durations of all the drivers whose stop lasted shorter than the driver in the race with the id 841?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.forename) FROM drivers AS T1     ORDER BY T1.forename ASC",
    "question": "How many distinct forenames are there in the drivers table?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.forename) FROM drivers AS T1     ORDER BY T1.forename ASC",
    "question": "How many different first names are there?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM races AS T1     ORDER BY T1.name DESC",
    "question": "How many distinct names are there in the races table?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM races AS T1     ORDER BY T1.name DESC",
    "question": "How many different names of all the races are there in reverse alphabetical order?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.name FROM races AS T1 WHERE T1.time > '12:00:00' AND T1.time < '09:00:00'",
    "question": "What are the names of races held between 12:00:00 and 09:00:00?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.forename, T1.surname, T1.driverId FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId  GROUP BY T2.driverId HAVING COUNT(*) > 8     EXCEPT SELECT T3.forename, T3.surname, T3.driverId FROM drivers AS T3 JOIN results AS T4 ON T3.driverId = T4.driverId  GROUP BY T3.driverId HAVING COUNT(*) > 5",
    "question": "What are the drivers' first, last names and id who had more than 8 pit stops but did not participate in more than 5 race results?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.forename, T1.surname, T1.driverId FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId  GROUP BY T2.driverId HAVING COUNT(*) > 8   INTERSECT SELECT T3.forename, T3.surname, T3.driverId FROM drivers AS T3 JOIN results AS T4 ON T3.driverId = T4.driverId  GROUP BY T3.driverId HAVING COUNT(*) > 5",
    "question": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops and participated in more than 5 races?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.surname, T1.driverId FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId  GROUP BY T2.driverId HAVING COUNT(*) = 11    UNION SELECT T3.surname, T3.driverId FROM drivers AS T3 JOIN results AS T4 ON T3.driverId = T4.driverId  GROUP BY T3.driverId HAVING COUNT(*) > 5",
    "question": "What are the last names and ids of all drivers who had 11 pit stops or participated in more than 5 races?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.circuitId, T1.location FROM circuits AS T1 WHERE T1.country = 'France' AND T1.country = 'Belgium'",
    "question": "Find the id and location of circuits that belong to France and Belgium?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.circuitId, T1.location FROM circuits AS T1 WHERE T1.country = 'France' AND T1.country = 'Belgium'",
    "question": "What are the ids and locations of all circuits in France and Belgium?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT AVG( T1.fastestLapSpeed) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 OR T2.name = 'Monaco Grand Prix'",
    "question": "What is the average fastest lap speed in race in 2008 or named 'Monaco Grand Prix' ?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT MAX( T1.fastestLapSpeed) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 OR T2.name = 'Monaco Grand Prix'",
    "question": "What is the maximum fastest lap speed in race in 2008 or named 'Monaco Grand Prix' ?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT MAX( T1.fastestLapSpeed), T2.name, T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year < 2014 GROUP BY T1.raceId   ORDER BY T2.year ASC",
    "question": "For each race name, What is the maximum fastest lap speed for races before 2004 ordered by year?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.driverId, T1.forename, COUNT(*) FROM drivers AS T1  GROUP BY T1.forename HAVING COUNT(*) > 2",
    "question": "Find the id, forename and number of races of all drivers who have participated in more than two races?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.driverId, T1.forename, COUNT(*) FROM drivers AS T1  GROUP BY T1.forename HAVING COUNT(*) < 2",
    "question": "What is the id, forename, and number of races for all drivers that have participated in less than 2 races?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.driverId, COUNT(*) FROM drivers AS T1  GROUP BY T1.driverId HAVING COUNT(*) < 30",
    "question": "Find the driver id and number of races of all drivers who have participated in less than 30 races?"
  },
  {
    "db_id": "formula_1",
    "query": "SELECT T1.driverId, COUNT(*) FROM drivers AS T1  GROUP BY T1.driverId HAVING COUNT(*) > 30",
    "question": "For each id of a driver who participated in more than 30 races, how many races did they participate in?"
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT * FROM technician AS T1",
    "question": "What are the names of all the technicians?"
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT * FROM technician AS T1",
    "question": "What are the technicians?"
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT T1.Name FROM technician AS T1 WHERE T1.Team = 'NYY'",
    "question": "List the name of technicians whose team is \"NYY\"."
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT T1.Name FROM technician AS T1 WHERE T1.Team = 'NYY'",
    "question": "What is the name of the technician whose team is 'NYY'?"
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT T1.Team FROM technician AS T1  GROUP BY T1.Team HAVING COUNT(*) < 2",
    "question": "Show the team that have less than two technicians."
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT T1.Team FROM technician AS T1  GROUP BY T1.Team HAVING COUNT(*) <= 2",
    "question": "What is the team with at most 2 technicians?"
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT T1.Name FROM technician AS T1 JOIN repair_assignment AS T3 ON T1.technician_id = T3.technician_id JOIN machine AS T2 ON T3.Machine_ID = T2.Machine_ID WHERE T2.value_points <= 70",
    "question": "Show names of technicians who are assigned to repair machines with value point less than or equal to 70."
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT T1.Name FROM technician AS T1 JOIN repair_assignment AS T3 ON T1.technician_id = T3.technician_id JOIN machine AS T2 ON T3.Machine_ID = T2.Machine_ID WHERE T2.value_points < 70",
    "question": "What are the names of the technicians that are assigned to repair machines with less point values than 70?"
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT T1.Name FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id",
    "question": "List the names of technicians who have been assigned to repair machines."
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT T1.Name FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id",
    "question": "What are the names of the technicians that have been assigned to repair machines?"
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT T1.Starting_Year FROM technician AS T1 WHERE T1.Team = 'CLE'      UNION SELECT T2.Starting_Year FROM technician AS T2 WHERE T2.Team = 'CWS'",
    "question": "Show the starting years of technicians from team \"CLE\" or \"CWS\"."
  },
  {
    "db_id": "machine_repair",
    "query": "SELECT T1.Starting_Year FROM technician AS T1 WHERE T1.Team = 'CLE'      UNION SELECT T2.Starting_Year FROM technician AS T2 WHERE T2.Team = 'CWS'",
    "question": "What are the starting years of the technicians from the team \"CLE\" or \"CWS\"?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT * FROM entrepreneur AS T1",
    "question": "What are the attributes of entrepreneurs?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT * FROM entrepreneur AS T1",
    "question": "Show all entrepreneurs."
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT T1.Money_Requested FROM entrepreneur AS T1",
    "question": "What is the money requested by all entrepreneurs?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT T1.Money_Requested FROM entrepreneur AS T1",
    "question": "Return the money requested for all entrepreneurs."
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT COUNT( T1.Name) FROM people AS T1",
    "question": "How many entrepreneurs are there?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT COUNT( T1.Name) FROM people AS T1",
    "question": "Return the number of entrepreneurs."
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT T1.Name FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Investor = 'Rachel Elnaugh'",
    "question": "What are the names of entrepreneurs whose investor is \"Rachel Elnaugh\"?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT T1.Name FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Investor = 'Rachel Elnaugh'",
    "question": "Return the names of entrepreneurs who have the investor Rachel Elnaugh."
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT SUM( T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height >= 1.85",
    "question": "What is the total money requested by entrepreneurs with height more than or equal to 1.85?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT T1.Date_of_Birth FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Investor = 'Simon Woodroffe' AND T2.Investor = 'Peter Jones'",
    "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" and \"Peter Jones\"?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT T1.Investor FROM entrepreneur AS T1  GROUP BY T1.Investor HAVING COUNT(*) < 2",
    "question": "What are the investors that have invested in at most two entrepreneurs?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT T1.Name FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID",
    "question": "List the names of entrepreneurs."
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT T1.Name FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID",
    "question": "What are the names of entrepreneurs?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT T1.Investor FROM entrepreneur AS T1 WHERE T1.Money_Requested > 140000       EXCEPT SELECT T2.Investor FROM entrepreneur AS T2 WHERE T2.Money_Requested < 120000",
    "question": "Show the investors that are not shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000."
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT T1.Investor FROM entrepreneur AS T1 WHERE T1.Money_Requested > 140000",
    "question": "What are the investors who have invested in entrepreneurs who requested more than 140000?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT DISTINCT T1.Company FROM entrepreneur AS T1",
    "question": "What are the distinct companies?"
  },
  {
    "db_id": "entrepreneur",
    "query": "SELECT DISTINCT T1.Company FROM entrepreneur AS T1",
    "question": "List all the companies."
  },
  {
    "db_id": "perpetrator",
    "query": "SELECT * FROM perpetrator AS T1",
    "question": "What are the perpetrators like?"
  },
  {
    "db_id": "perpetrator",
    "query": "SELECT COUNT( T1.Name) FROM people AS T1",
    "question": "How many perpetrators are there?"
  },
  {
    "db_id": "perpetrator",
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = 'China'",
    "question": "What are the names of perpetrators whose country is \"China\"?"
  },
  {
    "db_id": "perpetrator",
    "query": "SELECT SUM( T1.Killed) FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height < 1.84",
    "question": "What is the total kills of the perpetrators with height less than 1.84."
  },
  {
    "db_id": "perpetrator",
    "query": "SELECT T1.Country, COUNT(*) FROM perpetrator AS T1  GROUP BY T1.Country HAVING COUNT(*) < 2",
    "question": "What are the countries that have less than two perpetrators?"
  },
  {
    "db_id": "perpetrator",
    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID",
    "question": "List the names of people that are perpetrators."
  },
  {
    "db_id": "perpetrator",
    "query": "SELECT T1.Country FROM perpetrator AS T1 WHERE T1.Injured > 50",
    "question": "Show the countries that have perpetrators with injures more than 50."
  },
  {
    "db_id": "perpetrator",
    "query": "SELECT DISTINCT T1.Location FROM perpetrator AS T1",
    "question": "What are the distinct locations of perpetrators?"
  },
  {
    "db_id": "perpetrator",
    "query": "SELECT T1.Year FROM perpetrator AS T1",
    "question": "What year did the crime happen?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.County != 'Los Angeles'",
    "question": "Report the name of all campuses not in Los Angeles county."
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.County != 'Los Angeles'",
    "question": "What campuses are not located in the county of Los Angeles?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.Location != 'Chico'",
    "question": "What are the names of all campuses not located at Chico?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.Location != 'Chico'",
    "question": "What campuses are not located in Chico?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.Year != 1958",
    "question": "Find all the campuses that were not opened in 1958."
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.Year != 1958",
    "question": "What are the campuses that did not open in 1958?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.Year >= 1935 OR T1.Year <= 1939",
    "question": "Which campus was opened before or in 1935 or in 1939?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.Year >= 1935 OR T1.Year <= 1939",
    "question": "What campuses opened in 1935 or 1939?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.Location = 'Northridge' AND T1.County = 'Los Angeles'       EXCEPT SELECT T2.Campus FROM Campuses AS T2 WHERE T2.Location = 'San Francisco' AND T2.County = 'San Francisco'",
    "question": "Find the name of the campuses that is in Northridge, Los Angeles but not in San Francisco, San Francisco."
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.Location = 'Northridge' AND T1.County = 'Los Angeles'",
    "question": "What campuses are located in Northridge, Los Angeles?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.CampusFee FROM csu_fees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Jose State University' OR T1.Year = 1996",
    "question": "What is the campus fee for San Jose State University or 1996?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.CampusFee FROM csu_fees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Francisco State University' OR T1.Year = 1996",
    "question": "What is the campus fee of \"San Francisco State University\" or in year 1996?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.CampusFee FROM csu_fees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Francisco State University' OR T1.Year = 1996",
    "question": "What is the campus fee for San Francisco State University or 1996?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT COUNT(*) FROM csu_fees AS T1 WHERE T1.CampusFee = (SELECT AVG( T22.CampusFee) FROM csu_fees AS T22)",
    "question": "How many universities have a campus fee exactly equal to average?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT COUNT(*) FROM csu_fees AS T1 WHERE T1.CampusFee != (SELECT AVG( T22.CampusFee) FROM csu_fees AS T22)",
    "question": "Find the count of universities whose campus fee is not equal to the average campus fee."
  },
  {
    "db_id": "csu_1",
    "query": "SELECT COUNT(*) FROM csu_fees AS T1 WHERE T1.CampusFee < (SELECT AVG( T22.CampusFee) FROM csu_fees AS T22)",
    "question": "How many universities have a campus fee less than the average?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.County = 'Los Angeles' OR T1.Year > 1950",
    "question": "Which university is in Los Angeles county or opened after 1950?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.County = 'Los Angeles' OR T1.Year > 1950",
    "question": "What campuses are located in Los Angeles county or opened after 1950?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT AVG( T1.CampusFee) FROM csu_fees AS T1 WHERE T1.Year != 1996",
    "question": "Find the average fee on a CSU campus not in 1996"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT AVG( T1.CampusFee) FROM csu_fees AS T1 WHERE T1.Year != 1996",
    "question": "What is the average fee for a CSU campus not in the year of 1996?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT AVG( T1.CampusFee) FROM csu_fees AS T1 WHERE T1.Year != 2005",
    "question": "What is the average fee on a CSU campus in all years except 2005?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT AVG( T1.CampusFee) FROM csu_fees AS T1 WHERE T1.Year != 2005",
    "question": "What is the average fee for a CSU campus not in the year of 2005?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T2.Year = 2002 OR T2.Faculty > (SELECT MAX( T23.Faculty) FROM faculty AS T23 JOIN Campuses AS T24 ON T23.Campus = T24.Id WHERE T23.Year = 2002 AND T24.County = 'Orange')",
    "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county or has more faculties than any campus in Orange county."
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN enrollments AS T2 ON T1.Id = T2.Campus WHERE T2.Year = 1956 OR T2.TotalEnrollment_AY > 400 AND T2.FTE_AY > 200",
    "question": "What campus had more than 400 total enrollment or more than 200 full time enrollment in year 1956?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN enrollments AS T2 ON T1.Id = T2.Campus WHERE T2.Year = 1956 OR T2.TotalEnrollment_AY > 400 AND T2.FTE_AY > 200",
    "question": "What campus started in year 1956 or has more than 200 full time students and more than 400 students enrolled?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT COUNT(*) FROM Campuses AS T1 WHERE T1.County != 'Los Angeles'",
    "question": "How many campuses are there in counties other than Los Angeles county?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT COUNT(*) FROM Campuses AS T1 WHERE T1.County != 'Los Angeles'",
    "question": "How many campuses exist are not in the county of LA?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.County != 'Los Angeles'",
    "question": "List the campuses not in Los Angeles county."
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Campus FROM Campuses AS T1 WHERE T1.County != 'Los Angeles'",
    "question": "What campuses are not in Los Angeles county?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Degrees FROM degrees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Jose State University' OR T1.Year = 2000",
    "question": "How many degrees were conferred in \"San Jose State University\" or in 2000?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Degrees FROM degrees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Jose State University' OR T1.Year = 2000",
    "question": "How many degrees were conferred at San Jose State University or at any campus in 2000?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Degrees FROM degrees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Francisco State University' OR T1.Year = 2001",
    "question": "What are the degrees conferred in \"San Francisco State University\" or in 2001."
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Degrees FROM degrees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Francisco State University' OR T1.Year = 2001",
    "question": "What degrees were conferred in San Francisco State University or the year 2001?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT SUM( T1.Faculty) FROM faculty AS T1 WHERE T1.Year != 2002",
    "question": "How many faculty, in total, are there in the year not 2002?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Faculty FROM faculty AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2004 OR T2.Campus = 'San Francisco State University'",
    "question": "How many faculty lines are there in \"San Francisco State University\" or year 2004?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.Faculty FROM faculty AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2004 OR T2.Campus = 'San Francisco State University'",
    "question": "How many faculty lines are there at San Francisco State University or at 2004?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT SUM( T1.Graduate) FROM discipline_enrollments AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2004 OR T2.Campus = 'San Francisco State University'",
    "question": "How many people graduated from San Francisco State University or University of California, Berkeley in 2004?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.CampusFee FROM csu_fees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Francisco State University' OR T1.Year = 2000",
    "question": "What is the campus fee of \"San Francisco State University\" or in year 2000?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.CampusFee FROM csu_fees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Francisco State University' OR T1.Year = 2000",
    "question": "In the year 2000, what is the campus fee for San Francisco State University or any other campus?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.CampusFee FROM csu_fees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Jose State University' OR T1.Year = 2000",
    "question": "Find the campus fee of \"San Jose State University\" or in year 2000."
  },
  {
    "db_id": "csu_1",
    "query": "SELECT T1.CampusFee FROM csu_fees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Campus = 'San Jose State University' OR T1.Year = 2000",
    "question": "What is the campus fee in the year 2000 for San Jose State University or any other campus?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT * FROM Campuses AS T1",
    "question": "What are the names of all CSU campuses?"
  },
  {
    "db_id": "csu_1",
    "query": "SELECT * FROM Campuses AS T1",
    "question": "What are the names of all campuses?"
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT * FROM candidate AS T1",
    "question": "What are the candidates?"
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT * FROM candidate AS T1",
    "question": "Show all candidates."
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT AVG( T1.Height), AVG( T1.Weight) FROM people AS T1 WHERE T1.Sex != 'M'",
    "question": "Find the average height and weight for all females (sex is not M)."
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT AVG( T1.Height), AVG( T1.Weight) FROM people AS T1 WHERE T1.Sex != 'M'",
    "question": "What are the average height and weight across females (sex is not M)?"
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT T1.Name FROM people AS T1 WHERE T1.Height > 200 AND T1.Height < 190",
    "question": "find the names of people who are taller than 200 and lower than 190."
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT T1.Name FROM people AS T1 WHERE T1.Height > 200 AND T1.Height < 190",
    "question": "What are the names of people who have a height greater than 200 and less than 190?"
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT T1.Name FROM people AS T1 JOIN candidate AS T2 ON T1.People_ID = T2.People_ID",
    "question": "what are the names of people who participated in the candidate election."
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT T1.Name FROM people AS T1 JOIN candidate AS T2 ON T1.People_ID = T2.People_ID",
    "question": "Give the names of people who participated in the candidate election."
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT COUNT(*), T1.Sex FROM people AS T1 WHERE T1.Weight < 85 GROUP BY T1.Sex",
    "question": "Count the number of people of each sex who have a weight lower than 85."
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT T1.Name FROM people AS T1 WHERE T1.Sex != 'F'    ORDER BY T1.Name ASC",
    "question": "list all male (sex is not F) candidate names in the alphabetical order."
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT T1.Name FROM people AS T1 WHERE T1.Sex != 'F'    ORDER BY T1.Name ASC",
    "question": "What are the names of all male candidates in alphabetical order (sex is not F)?"
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT T1.Name FROM people AS T1 WHERE T1.Height > (SELECT AVG( T22.Height) FROM people AS T22)",
    "question": "find the name of people whose height is higher than the average."
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT T1.Name FROM people AS T1 WHERE T1.Height > (SELECT AVG( T22.Height) FROM people AS T22)",
    "question": "What are the names of people who are taller than average?"
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT COUNT(*) FROM people AS T1",
    "question": "How many people are there?"
  },
  {
    "db_id": "candidate_poll",
    "query": "SELECT COUNT(*) FROM people AS T1",
    "question": "How many people are there?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 WHERE T1.director != 'Steven Spielberg'",
    "question": "Find the titles of all movies not directed by steven spielberg."
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 WHERE T1.director != 'Steven Spielberg'",
    "question": "What are the names of all movies not directed by Steven Spielberg?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 WHERE T1.director = 'James Cameron' OR T1.year > 2000",
    "question": "What is the name of the movie directed by James Cameron or produced after 2000?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 WHERE T1.director = 'James Cameron' OR T1.year > 2000",
    "question": "What are the titles of all movies that James Cameron directed or were released after 2000?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT COUNT(*) FROM Movie AS T1 WHERE T1.year <= 2000",
    "question": "How many movies were made before or in 2000?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT COUNT(*) FROM Movie AS T1 WHERE T1.year > 2000",
    "question": "How many movies were made after 2000?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.director FROM Movie AS T1 WHERE T1.title != 'Avatar'",
    "question": "Who is the director of movie not Avatar?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.director FROM Movie AS T1 WHERE T1.title != 'Avatar'",
    "question": "Who did not direct Avatar?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT * FROM Reviewer AS T1",
    "question": "What are the reviewers?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT * FROM Reviewer AS T1",
    "question": "What are the attributes of all reviewers?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.rID FROM Reviewer AS T1 WHERE T1.name NOT LIKE 'Mike'",
    "question": "What is the id of the reviewer whose name does not have substring \u201cMike\u201d?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.rID FROM Reviewer AS T1 WHERE T1.name NOT LIKE 'Mike'",
    "question": "What is the id of the reviewer whose name does not include the word \"Mike\"?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.rID FROM Reviewer AS T1 WHERE T1.name != 'Daniel Lewis'",
    "question": "What is the reviewer id of all reviewers except Daniel Lewis?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.rID FROM Reviewer AS T1 WHERE T1.name != 'Daniel Lewis'",
    "question": "What is the id of the reviewer whose name is not Daniel Lewis?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT COUNT(*) FROM Rating AS T1 WHERE T1.stars >= 3",
    "question": "How many movie ratings have at least 3 stars?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.director, T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars != 5",
    "question": "What are the names of the directors who created a movie with a rating that is not a 5 star rating, and what were the names of those movies?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID",
    "question": "Find the titles of all movies that have ratings."
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID",
    "question": "What are the titles of all movies that have been rated?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT DISTINCT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.ratingDate != 'null'",
    "question": "Find the names of all reviewers who have ratings with a non-NULL value for the date."
  },
  {
    "db_id": "movie_1",
    "query": "SELECT DISTINCT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.ratingDate != 'null'",
    "question": "What are the different names of all reviewers whose ratings have a date field?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT AVG( T1.stars), T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year > (SELECT MIN( T23.year) FROM Movie AS T23) GROUP BY T2.title",
    "question": "What is the average rating stars and title for the movies that are newer than the oldest movie?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 WHERE T1.year = (SELECT MAX( T22.year) FROM Movie AS T22 WHERE T22.director = 'Steven Spielberg')",
    "question": "What is the names of movies whose created year is the same as the latest movie directed by Steven Spielberg?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 WHERE T1.year = (SELECT MAX( T22.year) FROM Movie AS T22 WHERE T22.director = 'Steven Spielberg')",
    "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID  GROUP BY T1.name HAVING COUNT(*) < 3",
    "question": "Find the names of all reviewers who have contributed less than three ratings."
  },
  {
    "db_id": "movie_1",
    "query": "SELECT DISTINCT T1.name FROM Reviewer AS T1 JOIN Rating AS T3 ON T1.rID = T3.rID JOIN Movie AS T2 ON T3.mID = T2.mID WHERE T2.title != 'Gone with the Wind'",
    "question": "What are the names of all the different reviewers who does not rate Gone with the Wind?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT DISTINCT T1.director FROM Movie AS T1 JOIN Rating AS T3 ON T1.mID = T3.mID JOIN Reviewer AS T2 ON T3.rID = T2.rID WHERE T2.name != 'Sarah Martinez'",
    "question": "Find the names of all directors whose movies are not rated by Sarah Martinez."
  },
  {
    "db_id": "movie_1",
    "query": "SELECT DISTINCT T1.director FROM Movie AS T1 JOIN Rating AS T3 ON T1.mID = T3.mID JOIN Reviewer AS T2 ON T3.rID = T2.rID WHERE T2.name != 'Sarah Martinez'",
    "question": "What are the names of all directors whose movies have not been reviewed by Sarah Martinez?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.name FROM Reviewer AS T1        EXCEPT SELECT T2.title FROM Movie AS T2",
    "question": "Return all reviewer names that are not movie names."
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.name FROM Reviewer AS T1        EXCEPT SELECT T2.title FROM Movie AS T2",
    "question": "What are the names of all the reviewers except the movie names?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT DISTINCT T1.title FROM Movie AS T1",
    "question": "Find the titles of all movies."
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.director FROM Movie AS T1 WHERE T1.director != 'null' GROUP BY T1.director HAVING COUNT(*) = 1",
    "question": "What are the names of the directors who made exactly one movie excluding director NULL?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT COUNT(*), T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID  GROUP BY T2.title",
    "question": "How many movie reviews does each movie get?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT COUNT(*), T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID  GROUP BY T2.title",
    "question": "For each movie, how many reviews have they received?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title, T2.stars, T1.director, MAX( T2.stars) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T1.director = 'null' GROUP BY T2.mID",
    "question": "For each director, what are the titles and ratings for all the movies they did not review?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars >= 3",
    "question": "What are the names of the reviewers who have rated a movie 3 stars or more before?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.mID, AVG( T1.stars) FROM Rating AS T1 WHERE T1.mID IN (SELECT T22.mID FROM Rating AS T22 JOIN Reviewer AS T23 ON T22.rID = T23.rID WHERE T23.name = 'Brittany Harris') GROUP BY T1.mID",
    "question": "Find the average rating star for each movie that are reviewed by Brittany Harris."
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.mID, AVG( T1.stars) FROM Rating AS T1 WHERE T1.mID IN (SELECT T22.mID FROM Rating AS T22 JOIN Reviewer AS T23 ON T22.rID = T23.rID WHERE T23.name = 'Brittany Harris') GROUP BY T1.mID",
    "question": "What is the average rating for each movie that has been reviewed by Brittany Harris?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.mID, AVG( T1.stars) FROM Rating AS T1  GROUP BY T1.mID HAVING COUNT(*) <= 2",
    "question": "Find the average rating star for each movie that received at most 2 ratings."
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.rID FROM Rating AS T1 WHERE T1.stars = 4",
    "question": "Find the ids of reviewers who only gave 4 star."
  },
  {
    "db_id": "movie_1",
    "query": "SELECT DISTINCT T1.title FROM Movie AS T1 JOIN Rating AS T3 ON T1.mID = T3.mID JOIN Reviewer AS T2 ON T3.rID = T2.rID WHERE T2.name = 'Brittany Harris' AND T1.year > 2000",
    "question": "What are names of the movies that are both made after 2000 and reviewed by Brittany Harris?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT DISTINCT T1.title FROM Movie AS T1 JOIN Rating AS T3 ON T1.mID = T3.mID JOIN Reviewer AS T2 ON T3.rID = T2.rID WHERE T2.name = 'Brittany Harris' AND T1.year > 2000",
    "question": "What are the names of all movies that were made after 2000 and reviewed by Brittany Harris?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 WHERE T1.director = 'James Cameron' AND T1.year < 1980",
    "question": "What are names of the movies that are both made before 1980 and directed by James Cameron?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 WHERE T1.director = 'James Cameron' AND T1.year < 1980",
    "question": "What are the names of all movies made before 1980 and had James Cameron as the director?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 3       EXCEPT SELECT T3.name FROM Reviewer AS T3 JOIN Rating AS T4 ON T3.rID = T4.rID WHERE T4.stars = 4",
    "question": "What are the names of reviewers who had rated 3 star but not 4 star?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 3",
    "question": "What are the names of all reviewers that have given 3 stars for reviews?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 3      UNION SELECT T3.title FROM Movie AS T3 JOIN Rating AS T4 ON T3.mID = T4.mID WHERE T4.stars = 4",
    "question": "What are the names of movies that get 3 star or 4 star?"
  },
  {
    "db_id": "movie_1",
    "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 3       EXCEPT SELECT T3.title FROM Movie AS T3 JOIN Rating AS T4 ON T3.mID = T4.mID WHERE T4.stars = 4",
    "question": "What are the names of all movies that received 3 stars but not 4 stars?"
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT * FROM county_public_safety AS T1",
    "question": "What are the names of all the counties?"
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT * FROM county_public_safety AS T1",
    "question": "List all the countries."
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT DISTINCT T1.Police_force FROM county_public_safety AS T1 WHERE T1.Location = 'East'",
    "question": "List the distinct police forces of counties whose location is on east side."
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT DISTINCT T1.Police_force FROM county_public_safety AS T1 WHERE T1.Location = 'East'",
    "question": "What are the different police forces of counties that are located in the East?"
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Hispanic FROM city AS T1 WHERE T1.Black < 10",
    "question": "What are the percentage of hispanics in cities with the black percentage lower than 10?"
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Hispanic FROM city AS T1 WHERE T1.Black < 10",
    "question": "Return the hispanic percentage for cities in which the black percentage is less than 10."
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Name FROM city AS T1 WHERE T1.County_ID != (SELECT T22.County_ID FROM county_public_safety AS T22    ORDER BY T22.Police_officers DESC LIMIT 1)",
    "question": "What are the names of cities that are not in the county with the most police officers?"
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT COUNT(*) FROM city AS T1 WHERE T1.County_ID NOT IN (SELECT T22.County_ID FROM county_public_safety AS T22 WHERE T22.Population > 20000)",
    "question": "Show the number of cities in counties that do not have a population more than 20000."
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Crime_rate FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID = T2.County_ID WHERE T2.White < 90",
    "question": "Show the crime rate of counties with a city having white percentage less than 90."
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Crime_rate FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID = T2.County_ID WHERE T2.White >= 90",
    "question": "What are the crime rates of counties that contain cities that have white percentages of over or equal to 90?"
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Name FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID = T2.County_ID",
    "question": "List the names of counties that have at least one city."
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Name FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID = T2.County_ID",
    "question": "What are the names of counties that contain at least one city?"
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Police_force FROM county_public_safety AS T1 WHERE T1.Location = 'East'      UNION SELECT T2.Police_force FROM county_public_safety AS T2 WHERE T2.Location = 'West'",
    "question": "Show the police force in counties with location on the east or west."
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Police_force FROM county_public_safety AS T1 WHERE T1.Location = 'East'      UNION SELECT T2.Police_force FROM county_public_safety AS T2 WHERE T2.Location = 'West'",
    "question": "Which police forces operate in either the East or in the West?"
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Name FROM city AS T1 WHERE T1.County_ID NOT IN (SELECT T22.County_ID FROM county_public_safety AS T22 WHERE T22.Crime_rate < 100)",
    "question": "Show the names of cities in counties that do not have a crime rate less than 100."
  },
  {
    "db_id": "county_public_safety",
    "query": "SELECT T1.Name FROM city AS T1 WHERE T1.County_ID NOT IN (SELECT T22.County_ID FROM county_public_safety AS T22 WHERE T22.Crime_rate < 100)",
    "question": "What are the names of cities that are not in counties that have a crime rate below 100?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName FROM Rooms AS T1 WHERE T1.basePrice < 160 OR T1.beds = 2 AND T1.decor = 'modern'",
    "question": "Find the names of all modern rooms with a base price below $160 or two beds."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName FROM Rooms AS T1 WHERE T1.basePrice < 160 OR T1.beds = 2 AND T1.decor = 'modern'",
    "question": "What are the names of modern rooms that have a base price lower than $160 or two beds."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName, T1.RoomId FROM Rooms AS T1 WHERE T1.basePrice > 160 OR T1.maxOccupancy > 2",
    "question": "Find all the rooms that have a price higher than 160 or can accommodate more than 2 people. Report room names and ids."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName, T1.RoomId FROM Rooms AS T1 WHERE T1.basePrice > 160 OR T1.maxOccupancy > 2",
    "question": "What are the room names and ids of all the rooms that cost more than 160 or can accommodate more than two people."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.Kids FROM Reservations AS T1 WHERE T1.FirstName = 'ROY' OR T1.LastName = 'SWEAZY'",
    "question": "How many kids stay in the rooms reserved by ROY or SWEAZY?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.Kids FROM Reservations AS T1 WHERE T1.FirstName = 'ROY' OR T1.LastName = 'SWEAZY'",
    "question": "Find the number of kids staying in the rooms reserved by a person called ROY or SWEAZ."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT COUNT(*) FROM Reservations AS T1 WHERE T1.FirstName = 'ROY' OR T1.LastName = 'SWEAZY'",
    "question": "How many times has ROY or SWEAZY reserved a room."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT COUNT(*) FROM Reservations AS T1 WHERE T1.FirstName = 'ROY' OR T1.LastName = 'SWEAZY'",
    "question": "Find the number of times ROY or SWEAZY have reserved a room."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.Adults FROM Reservations AS T1 WHERE T1.CheckIn = '2010-10-23' OR T1.FirstName = 'CONRAD' AND T1.LastName = 'SELBIG'",
    "question": "Find the number of adults for the room reserved or checked in by CONRAD SELBIG on Oct 23, 2010."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.Kids FROM Reservations AS T1 WHERE T1.CheckIn = '2010-09-21' OR T1.FirstName = 'DAMIEN' AND T1.LastName = 'TRACHSEL'",
    "question": "Return the number of kids for the room reserved or checked in by DAMIEN TRACHSEL on  Sep 21, 2010."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName, T1.decor FROM Rooms AS T1 WHERE T1.bedType != 'King'    ORDER BY T1.basePrice ASC",
    "question": "List the names and decor of rooms that do not have a king bed. Sort the list by their price."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName, T1.decor FROM Rooms AS T1 WHERE T1.bedType != 'King'    ORDER BY T1.basePrice ASC",
    "question": "What are the names and decor of rooms with a non-king bed? Sort them by their price"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.decor FROM Rooms AS T1 WHERE T1.roomName != 'Recluse AND defiance'",
    "question": "What is the decor of all rooms except Recluse and defiance?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.decor FROM Rooms AS T1 WHERE T1.roomName != 'Recluse AND defiance'",
    "question": "Return the decor of all rooms whose name is not \"Recluse and defiance\"."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT SUM( T1.maxOccupancy) FROM Rooms AS T1 WHERE T1.decor != 'modern'",
    "question": "What is the total number of people who could stay in the rooms in this inn that are not modern?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT SUM( T1.maxOccupancy) FROM Rooms AS T1 WHERE T1.decor != 'modern'",
    "question": "How many people in total can stay in the rooms of this inn that are not modern?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice >= 0",
    "question": "Find the first and last names of people who payed equal to or more than the rooms' base prices."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice < 0",
    "question": "What are the first and last names of people who payed less than the rooms' base prices?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT * FROM Rooms AS T1",
    "question": "What are the rooms?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT * FROM Rooms AS T1",
    "question": "What are the details of all the rooms in this inn?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT COUNT(*) FROM Rooms AS T1 WHERE T1.bedType != 'King'",
    "question": "Find the number of rooms with a non-king bed."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT COUNT(*) FROM Rooms AS T1 WHERE T1.bedType != 'King'",
    "question": "How many rooms do not have a king bed?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName, T1.bedType FROM Rooms AS T1 WHERE T1.decor != 'traditional'",
    "question": "List the type of bed and name of all non-traditional rooms."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName, T1.bedType FROM Rooms AS T1 WHERE T1.decor != 'traditional'",
    "question": "What are the bed type and name of all the rooms that are not traditional?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.decor, COUNT(*) FROM Rooms AS T1 WHERE T1.bedType != 'King' GROUP BY T1.decor",
    "question": "Find the number of rooms with non-king bed for each decor type."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.decor, COUNT(*) FROM Rooms AS T1 WHERE T1.bedType != 'King' GROUP BY T1.decor",
    "question": "How many rooms have not king beds? Report the number for each decor type."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.decor, COUNT(*) FROM Rooms AS T1 WHERE T1.basePrice < 120 GROUP BY T1.decor",
    "question": "Find the number of rooms with price lower than 120 for different decor."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.decor, COUNT(*) FROM Rooms AS T1 WHERE T1.basePrice >= 120 GROUP BY T1.decor",
    "question": "How many rooms cost more than or equal to 120, for each different decor?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT DISTINCT T1.bedType FROM Rooms AS T1",
    "question": "What types of beds are there?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT DISTINCT T1.bedType FROM Rooms AS T1",
    "question": "Find the distinct bed types available in this inn."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName FROM Rooms AS T1 WHERE T1.basePrice != (SELECT AVG( T22.basePrice) FROM Rooms AS T22)",
    "question": "Find the name of rooms whose price is not equal to the average price."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName FROM Rooms AS T1 WHERE T1.basePrice = (SELECT AVG( T22.basePrice) FROM Rooms AS T22)",
    "question": "What are the name of rooms that cost the average."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT COUNT(*) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room",
    "question": "Find the number of rooms that have at least one reservation."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT COUNT(*) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room",
    "question": "How many rooms have been reserved?"
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName NOT LIKE 'ROY'",
    "question": "Find the name of rooms booked by some customers whose first name does not contain ROY."
  },
  {
    "db_id": "inn_1",
    "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName NOT LIKE 'ROY'",
    "question": "What are the name of rooms booked by customers whose first name does not have \"ROY\" in part?"
  },
  {
    "db_id": "local_govt_mdm",
    "query": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code != 'Tax'",
    "question": "what are the details of the cmi masters that do not have the cross reference code 'Tax'?"
  },
  {
    "db_id": "local_govt_mdm",
    "query": "SELECT T1.cmi_cross_ref_id, T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id  GROUP BY T2.cmi_cross_ref_id HAVING COUNT(*) > 1",
    "question": "What is the cmi cross reference id that is related to more than one council tax entry? List the cross reference id and source system code."
  },
  {
    "db_id": "local_govt_mdm",
    "query": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T3 ON T1.cmi_cross_ref_id = T3.cmi_cross_ref_id JOIN Customer_Master_Index AS T2 ON T3.master_customer_id = T2.master_customer_id WHERE T2.cmi_details = 'Schmidt ,  Kertzmann AND Lubowitz'",
    "question": "What are the renting arrears tax ids related to the customer master index whose detail is 'Schmidt, Kertzmann and Lubowitz'?"
  },
  {
    "db_id": "local_govt_mdm",
    "query": "SELECT DISTINCT T1.source_system_code FROM CMI_Cross_References AS T1",
    "question": "What are the different source system code for the cmi cross references?"
  },
  {
    "db_id": "local_govt_mdm",
    "query": "SELECT * FROM Rent_Arrears AS T1",
    "question": "What are the council taxes collected for renting arrears ?"
  },
  {
    "db_id": "local_govt_mdm",
    "query": "SELECT DISTINCT T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Customer_Master_Index AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.cmi_details != 'Gottlieb ,  Becker AND Wyman'",
    "question": "What are the distinct cross reference source system codes which are not related to the master customer details 'Gottlieb, Becker and Wyman'?"
  },
  {
    "db_id": "local_govt_mdm",
    "query": "SELECT DISTINCT T1.source_system_code FROM CMI_Cross_References AS T1 WHERE T1.source_system_code NOT LIKE 'en'",
    "question": "Which distinct source system code does not include the substring 'en'?"
  },
  {
    "db_id": "party_host",
    "query": "SELECT * FROM party AS T1",
    "question": "What are the parties?"
  },
  {
    "db_id": "party_host",
    "query": "SELECT * FROM party AS T1",
    "question": "Show all data from party table."
  },
  {
    "db_id": "party_host",
    "query": "SELECT T1.First_year, T1.Last_year FROM party AS T1 WHERE T1.Party_Theme = 'Spring' AND T1.Party_Theme = 'Teqnology'",
    "question": "Show the first year and last year of parties with theme \"Spring\" and \"Teqnology\"."
  },
  {
    "db_id": "party_host",
    "query": "SELECT T1.First_year, T1.Last_year FROM party AS T1 WHERE T1.Party_Theme = 'Spring' AND T1.Party_Theme = 'Teqnology'",
    "question": "What are the first year and last year of the parties whose theme is \"Spring\" and \"Teqnology\"?"
  },
  {
    "db_id": "party_host",
    "query": "SELECT T1.Number_of_hosts FROM party AS T1",
    "question": "What are the number of hosts for parties?"
  },
  {
    "db_id": "party_host",
    "query": "SELECT T1.Number_of_hosts FROM party AS T1",
    "question": "Find the number of hosts for parties."
  },
  {
    "db_id": "party_host",
    "query": "SELECT T1.Location FROM party AS T1 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID JOIN host AS T2 ON T3.Host_ID = T2.Host_ID WHERE T2.Age < '50'",
    "question": "Show the locations of parties with hosts younger than 50."
  },
  {
    "db_id": "party_host",
    "query": "SELECT T1.Location FROM party AS T1 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID JOIN host AS T2 ON T3.Host_ID = T2.Host_ID WHERE T2.Age < '50'",
    "question": "Which parties have hosts of age below 50? Give me the party locations."
  },
  {
    "db_id": "party_host",
    "query": "SELECT T1.Name FROM host AS T1 JOIN party_host AS T3 ON T1.Host_ID = T3.Host_ID JOIN party AS T2 ON T3.Party_ID = T2.Party_ID WHERE T2.Number_of_hosts >= 20",
    "question": "Which parties have at least 20 hosts? Give me the host names for these parties."
  },
  {
    "db_id": "party_host",
    "query": "SELECT T1.Name FROM host AS T1 JOIN party_host AS T2 ON T1.Host_ID = T2.Host_ID",
    "question": "List the names of hosts who served as a host of a party in our record."
  },
  {
    "db_id": "party_host",
    "query": "SELECT T1.Name FROM host AS T1 JOIN party_host AS T2 ON T1.Host_ID = T2.Host_ID",
    "question": "What are the names of hosts who hosted at least one party in our record?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT * FROM region AS T1",
    "question": "What are the regions?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT * FROM region AS T1",
    "question": "List all the regions."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Region_name FROM region AS T1 WHERE T1.Region_name = 'Denmark'",
    "question": "Show names for all regions which are called Denmark."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Region_name FROM region AS T1 WHERE T1.Region_name = 'Denmark'",
    "question": "Return the name of the region Denmark."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT COUNT(*) FROM storm AS T1 WHERE T1.Number_Deaths < 0",
    "question": "Count the number of storms in which no one died."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name, T1.Dates_active, T1.Number_Deaths FROM storm AS T1 WHERE T1.Number_Deaths <= 1",
    "question": "List name, dates active, and number of deaths for all storms with at most 1 death."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name, T1.Dates_active, T1.Number_Deaths FROM storm AS T1 WHERE T1.Number_Deaths < 1",
    "question": "What are the names, dates active, and number of deaths for storms that had less than 1 death?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT AVG( T1.Damage_millions_USD), MAX( T1.Damage_millions_USD) FROM storm AS T1 WHERE T1.Max_speed >= 1000",
    "question": "Show the average and maximum damage for all storms with max speed equal or higher than 1000."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT AVG( T1.Damage_millions_USD), MAX( T1.Damage_millions_USD) FROM storm AS T1 WHERE T1.Max_speed >= 1000",
    "question": "What is the average and maximum damage in millions for storms that had a max speed over or equal to 1000?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT SUM( T1.Number_Deaths), SUM( T1.Damage_millions_USD) FROM storm AS T1 WHERE T1.Max_speed < (SELECT AVG( T22.Max_speed) FROM storm AS T22)",
    "question": "What is the total number of deaths and damage for all storms with a max speed less than the average?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT DISTINCT T1.Region_id FROM affected_region AS T1",
    "question": "Which regions are affected?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT DISTINCT T1.Region_id FROM affected_region AS T1",
    "question": "List the regions affected."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.Region_id = T2.Region_id",
    "question": "Show the name for regions affected."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.Region_id = T2.Region_id",
    "question": "What are the names of regions that were affected?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID",
    "question": "Show the name of storms which have affected region in record."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID",
    "question": "What are the names of storms that affected regions?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID  GROUP BY T1.Name HAVING COUNT(*) >= 2    UNION SELECT T3.Name FROM storm AS T3 JOIN affected_region AS T4 ON T3.Storm_ID = T4.Storm_ID  GROUP BY T3.Name HAVING SUM( T4.Number_city_affected) >= 10",
    "question": "Show storm name with at least two regions or 10 cities affected."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID  GROUP BY T1.Name HAVING COUNT(*) >= 2",
    "question": "What are the names of storms that both affected two or more regions?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name FROM storm AS T1      INTERSECT SELECT T2.Name FROM storm AS T2 JOIN affected_region AS T3 ON T2.Storm_ID = T3.Storm_ID  GROUP BY T2.Name HAVING COUNT(*) >= 2",
    "question": "Show all storm names with at least two affected regions."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name FROM storm AS T1      INTERSECT SELECT T2.Name FROM storm AS T2 JOIN affected_region AS T3 ON T2.Storm_ID = T3.Storm_ID  GROUP BY T2.Name HAVING COUNT(*) >= 2",
    "question": "What are the names of storms that affected two or more regions?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Region_name FROM region AS T1 JOIN affected_region AS T3 ON T1.Region_id = T3.Region_id JOIN storm AS T2 ON T3.Storm_ID = T2.Storm_ID WHERE T2.Number_Deaths < 10",
    "question": "Return the names of the regions affected by storms that had a death count of less than 10."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID JOIN region AS T2 ON T3.Region_id = T2.Region_id WHERE T2.Region_name != 'Denmark'",
    "question": "Show all storm names not affecting region \"Denmark\"."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID JOIN region AS T2 ON T3.Region_id = T2.Region_id WHERE T2.Region_name != 'Denmark'",
    "question": "What are the names of the storms that did not affect Denmark?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.Region_id = T2.Region_id  GROUP BY T1.Region_name HAVING COUNT(*) < 2",
    "question": "Show the region name with less than two storms."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.Region_id = T2.Region_id  GROUP BY T1.Region_name HAVING COUNT(*) < 2",
    "question": "What are the names of regions with less than two storms?"
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID JOIN region AS T2 ON T3.Region_id = T2.Region_id WHERE T2.Region_name = 'Afghanistan'",
    "question": "Find the name of the storm that affected Afghanistan region."
  },
  {
    "db_id": "storm_record",
    "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID JOIN region AS T2 ON T3.Region_id = T2.Region_id WHERE T2.Region_name = 'Afghanistan'       EXCEPT SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID JOIN region AS T2 ON T3.Region_id = T2.Region_id WHERE T2.Region_name = 'Albania'",
    "question": "What are the names of the storms that affected Afghanistan but not Albania?"
  },
  {
    "db_id": "election",
    "query": "SELECT * FROM county AS T1",
    "question": "What are the names of all the counties?"
  },
  {
    "db_id": "election",
    "query": "SELECT * FROM county AS T1",
    "question": "List all the counties."
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Population FROM county AS T1",
    "question": "Show the population of all counties."
  },
  {
    "db_id": "election",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.District) FROM election AS T1",
    "question": "Show the number of distinct districts for elections."
  },
  {
    "db_id": "election",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.District) FROM election AS T1",
    "question": "How many distinct districts are there for elections?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Zip_code FROM county AS T1 WHERE T1.County_name != 'Howard'",
    "question": "Show the zip code of the counties with name not \"Howard\"."
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Zip_code FROM county AS T1 WHERE T1.County_name != 'Howard'",
    "question": "What is the zip code the county named \"Howard\" is not located in?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Delegate FROM election AS T1 WHERE T1.District != 1",
    "question": "Show the delegate from district not 1 in election."
  },
  {
    "db_id": "election",
    "query": "SELECT DISTINCT T1.Governor FROM party AS T1",
    "question": "What are the distinct governors?"
  },
  {
    "db_id": "election",
    "query": "SELECT DISTINCT T1.Governor FROM party AS T1",
    "question": "List all distinct governors."
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Lieutenant_Governor, T1.Comptroller FROM party AS T1 WHERE T1.Party != 'Democratic'",
    "question": "Show the lieutenant governor and comptroller from the party that is not democratic."
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Lieutenant_Governor, T1.Comptroller FROM party AS T1 WHERE T1.Party != 'Democratic'",
    "question": "Who are the lieutenant governor and comptroller from the non-democratic party?"
  },
  {
    "db_id": "election",
    "query": "SELECT DISTINCT T1.Year FROM party AS T1 WHERE T1.Governor != 'Eliot Spitzer'",
    "question": "In which distinct years was the governor not \"Eliot Spitzer\"?"
  },
  {
    "db_id": "election",
    "query": "SELECT DISTINCT T1.Year FROM party AS T1 WHERE T1.Governor != 'Eliot Spitzer'",
    "question": "Find the distinct years when the governor was not named \"Eliot Spitzer\"."
  },
  {
    "db_id": "election",
    "query": "SELECT COUNT(*) FROM election AS T1",
    "question": "How many elections are there?"
  },
  {
    "db_id": "election",
    "query": "SELECT COUNT(*) FROM election AS T1",
    "question": "Return the number of election records."
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Delegate FROM election AS T1 JOIN county AS T2 ON T1.District = T2.County_Id WHERE T2.Population > 100000",
    "question": "Which delegates are from counties with population greater than 100000?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Delegate FROM election AS T1 JOIN county AS T2 ON T1.District = T2.County_Id WHERE T2.Population >= 100000",
    "question": "Find the delegates who are from counties with population above or equal to 100000."
  },
  {
    "db_id": "election",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Delegate) FROM election AS T1 JOIN county AS T2 ON T1.District = T2.County_Id WHERE T2.Population >= 50000",
    "question": "Count the number of distinct delegates who are from counties with population equal to or greater than 50000."
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Governor FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.District != 1",
    "question": "Who were the governors of the parties associated with delegates from all districts except 1?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Governor FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.District != 1",
    "question": "Find the parties associated with the delegates from districts other than 1. Who served as governors of the parties?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party != 'Democratic'",
    "question": "Return all the committees that have delegates from non Democratic party."
  },
  {
    "db_id": "election",
    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District  GROUP BY T1.County_name HAVING COUNT(*) > 2",
    "question": "Show the names of counties that have more than two delegates."
  },
  {
    "db_id": "election",
    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District  GROUP BY T1.County_name HAVING COUNT(*) > 2",
    "question": "Which counties have more than two delegates? Give me the county names."
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Party FROM party AS T1  GROUP BY T1.Party HAVING COUNT(*) > 2",
    "question": "Which party has more than two records?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party",
    "question": "What are the names of parties that have delegates in election?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party",
    "question": "Which parties had delegates in elections?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = 'Appropriations'       EXCEPT SELECT T3.Party FROM party AS T3 JOIN election AS T4 ON T3.Party_ID = T4.Party WHERE T4.Committee = 'Economic Matters'",
    "question": "What are the names of parties that have delegates on \"Appropriations\" committee but not on \"Economic Matters\" committee?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = 'Appropriations'      UNION SELECT T3.Party FROM party AS T3 JOIN election AS T4 ON T3.Party_ID = T4.Party WHERE T4.Committee = 'Economic Matters'",
    "question": "Which parties have delegates in either the \"Appropriations\" committee or the \"Economic Matters\" committee?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Democratic'",
    "question": "Which committees have delegates from democratic party?"
  },
  {
    "db_id": "election",
    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Democratic'       EXCEPT SELECT T3.Committee FROM election AS T3 JOIN party AS T4 ON T3.Party = T4.Party_ID WHERE T4.Party = 'Liberal'",
    "question": "Find the committees that have delegates from the democratic party but not from the liberal party."
  },
  {
    "db_id": "news_report",
    "query": "SELECT * FROM journalist AS T1",
    "question": "What are the names of all the journalists?"
  },
  {
    "db_id": "news_report",
    "query": "SELECT T1.Years_working FROM journalist AS T1",
    "question": "What are the years spent working as a journalist?"
  },
  {
    "db_id": "news_report",
    "query": "SELECT T1.Name FROM journalist AS T1 JOIN news_report AS T2 ON T1.journalist_ID = T2.journalist_ID",
    "question": "List the names of journalists who have reported at least one event."
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT COUNT( T1.ResName) FROM Restaurant AS T1",
    "question": "How many restaurants are there?"
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT T1.Address FROM Restaurant AS T1 WHERE T1.ResName != 'Subway'",
    "question": "What is the address of the restaurant that is not Subway?"
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT T1.Rating FROM Restaurant AS T1 WHERE T1.ResName != 'Subway'",
    "question": "What is the rating of all the restaurants that are not Subway?"
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT COUNT( T1.ResTypeName) FROM Restaurant_Type AS T1",
    "question": "How many restaurant types are there?"
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT T1.ResTypeDescription FROM Restaurant_Type AS T1 WHERE T1.ResTypeName != 'Sandwich'",
    "question": "What is the description of the restaurant type that is not Sandwich?"
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.Major != 600",
    "question": "List all students' first names and last names who did not major in 600."
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT T1.city_code FROM Student AS T1 WHERE T1.Fname = 'Linda' OR T1.LName = 'Smith'",
    "question": "Which city do students with first name Linda or last name Smith live in?"
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT T1.Major, COUNT(*) FROM Student AS T1  GROUP BY T1.Major HAVING COUNT( T1.Major) BETWEEN 25.0 AND 27.0",
    "question": "Which major has between 25.0 and 27.0 number of students? List major and the number of students."
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.Age > 18 OR T1.Major = 600",
    "question": "Which student's age is older than 18 or is majoring in 600? List each student's first and last name."
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT SUM( T1.Spent) FROM Visits_Restaurant AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = 'Linda' OR T2.LName = 'Smith'",
    "question": "How long does student Linda Smith or any student whose last name is Smith spend on the restaurant in total?"
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT COUNT(*) FROM Visits_Restaurant AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID JOIN Restaurant AS T3 ON T1.ResID = T3.ResID WHERE T2.Fname = 'Linda' OR T2.LName = 'Smith' AND T3.ResName = 'Subway'",
    "question": "How many times has Linda Smith or any of her friends visited Subway?"
  },
  {
    "db_id": "restaurant_1",
    "query": "SELECT T1.Time FROM Visits_Restaurant AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID JOIN Restaurant AS T3 ON T1.ResID = T3.ResID WHERE T2.Fname = 'Linda' OR T2.LName = 'Smith' AND T3.ResName = 'Subway'",
    "question": "When did Linda Smith or any student visit Subway?"
  },
  {
    "db_id": "customer_deliveries",
    "query": "SELECT T1.actual_order_id FROM Actual_Orders AS T1 WHERE T1.order_status_code != 'Success'",
    "question": "Find the ids of orders whose status is not 'Success'."
  },
  {
    "db_id": "customer_deliveries",
    "query": "SELECT * FROM Customers AS T1",
    "question": "Find all the customers."
  },
  {
    "db_id": "customer_deliveries",
    "query": "SELECT DISTINCT T1.payment_method FROM Customers AS T1",
    "question": "What are the different payment methods?"
  },
  {
    "db_id": "customer_deliveries",
    "query": "SELECT T1.customer_name FROM Customers AS T1      INTERSECT SELECT T2.customer_name FROM Customers AS T2 JOIN Customer_Addresses AS T4 ON T2.customer_id = T4.customer_id JOIN Addresses AS T3 ON T4.address_id = T3.address_id WHERE T3.state_province_county = 'California'",
    "question": "Find the names of customers who are living in the state of California."
  },
  {
    "db_id": "customer_deliveries",
    "query": "SELECT T1.customer_email, T1.customer_name FROM Customers AS T1 WHERE T1.payment_method != 'Visa'",
    "question": "List the names and emails of customers who did not pay by Visa card."
  },
  {
    "db_id": "customer_deliveries",
    "query": "SELECT T1.customer_name, T1.customer_phone FROM Customers AS T1 JOIN Customer_Addresses AS T3 ON T1.customer_id = T3.customer_id JOIN Addresses AS T2 ON T3.address_id = T2.address_id WHERE T2.state_province_county != 'California'",
    "question": "Find the names and phone numbers of customers living in states other than California."
  },
  {
    "db_id": "customer_deliveries",
    "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Employees AS T2 ON T1.address_id = T2.employee_address_id",
    "question": "Find the states which have at least one employee in their record."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT * FROM Authors AS T1",
    "question": "What are the names of all the authors?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT * FROM Authors AS T1",
    "question": "Show all authors."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT * FROM Inst AS T1",
    "question": "What are the institutions?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT * FROM Inst AS T1",
    "question": "List all institutions."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT * FROM Papers AS T1",
    "question": "What are the titles of all the papers?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT * FROM Papers AS T1",
    "question": "List all papers."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Jeremy' OR T2.lname = 'Gibbons'",
    "question": "What are the titles of papers published by \"Jeremy\" or \"Gibbons\"?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Jeremy' OR T2.lname = 'Gibbons'",
    "question": "Find the titles of all the papers written by \"Jeremy\" or \"Gibbons\""
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Aaron' OR T2.lname = 'Turon'",
    "question": "Find all the papers published by \"Aaron Turon\" or \"Aaron Turon\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Aaron' OR T2.lname = 'Turon'",
    "question": "Find the titles of all the papers written by \"Aaron Turon\" or \"Aaron Turon\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT COUNT(*) FROM Authors AS T1 WHERE T1.fname = 'Atsushi' OR T1.lname = 'Ohori'",
    "question": "How many papers have \"Atsushi\" or \"Ohori\" as an author?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT COUNT(*) FROM Authors AS T1 WHERE T1.fname = 'Atsushi' OR T1.lname = 'Ohori'",
    "question": "How many authors are \"Atsushi\" or \"Ohori\"?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT DISTINCT T1.name FROM Inst AS T1 JOIN Authorship AS T3 ON T1.instID = T3.instID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Matthias' OR T2.lname = 'Blume'",
    "question": "What is the name of the institution that \"Matthias Blume\" or \"Blume\" belongs to?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT DISTINCT T1.name FROM Inst AS T1 JOIN Authorship AS T3 ON T1.instID = T3.instID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Katsuhiro' OR T2.lname = 'Ueno'",
    "question": "Which institution does \"Katsuhiro Ueno\" or \"Katsuhiro Ueno\" belong to?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT DISTINCT T1.name FROM Inst AS T1 JOIN Authorship AS T3 ON T1.instID = T3.instID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Katsuhiro' OR T2.lname = 'Ueno'",
    "question": "What is the name of the institution the author \"Katsuhiro Ueno\" or \"Ueno Katsuhiro\" belongs to?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT DISTINCT T1.fname, T1.lname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Inst AS T2 ON T3.instID = T2.instID WHERE T2.name != 'University of Oxford'",
    "question": "Who do not belong to the institution \"University of Oxford\"? Show the first names and last names."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT DISTINCT T1.fname, T1.lname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Inst AS T2 ON T3.instID = T2.instID WHERE T2.name != 'University of Oxford'",
    "question": "Find the first names and last names of the authors whose institution affiliation is not \"University of Oxford\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT DISTINCT T1.fname, T1.lname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Inst AS T2 ON T3.instID = T2.instID WHERE T2.name != 'Google'",
    "question": "Which authors do not belong to the institution \"Google\"? Show the first names and last names."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT DISTINCT T1.fname, T1.lname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Inst AS T2 ON T3.instID = T2.instID WHERE T2.name != 'Google'",
    "question": "Find the first names and last names of the authors whose institution affiliation is not \"Google\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.lname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Papers AS T2 ON T3.paperID = T2.paperID WHERE T2.title != 'Binders Unbound'",
    "question": "What are the last names of the authors of the papers not titled \"Binders Unbound\"?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.lname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Papers AS T2 ON T3.paperID = T2.paperID WHERE T2.title != 'Binders Unbound'",
    "question": "Who is the author of the paper not titled \"Binders Unbound\"? Give me the last name."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.fname, T1.lname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Papers AS T2 ON T3.paperID = T2.paperID WHERE T2.title != 'Nameless ,  Painless'",
    "question": "Find the first and last name of the author(s) who did not write the paper \"Nameless, Painless\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT DISTINCT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Inst AS T2 ON T3.instID = T2.instID WHERE T2.name != 'Indiana University'",
    "question": "List the titles of the papers whose authors are not from the institution \"Indiana University\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Olin' OR T2.lname = 'Shivers'",
    "question": "Find the papers which have \"Olin\" or \"Shivers\" as an author."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Olin' OR T2.lname = 'Shivers'",
    "question": "Which papers did the authors \"Olin Shivers\" or \"Shivers, Olin\" write? Give me the paper titles."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Stephanie' OR T2.lname = 'Weirich'",
    "question": "Which papers have \"Stephanie\" or \"Weirich\" as an author?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Authors AS T2 ON T3.authID = T2.authID WHERE T2.fname = 'Stephanie' OR T2.lname = 'Weirich'",
    "question": "Find the titles of the papers the author \"Stephanie\" or \"Weirich\" wrote."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Inst AS T2 ON T3.instID = T2.instID JOIN Authors AS T4 ON T3.authID = T4.authID WHERE T2.country = 'USA' OR T3.authOrder = 2 AND T4.lname = 'Turon'",
    "question": "Which paper is published in an institution in \"USA\" or have \"Turon\" as its second author?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Inst AS T2 ON T3.instID = T2.instID JOIN Authors AS T4 ON T3.authID = T4.authID WHERE T2.country = 'USA' OR T3.authOrder = 2 AND T4.lname = 'Turon'",
    "question": "Find papers whose second author has last name \"Turon\" or is affiliated with an institution in the country \"USA\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Inst AS T2 ON T3.instID = T2.instID JOIN Authors AS T4 ON T3.authID = T4.authID WHERE T2.country = 'Japan' OR T3.authOrder = 1 AND T4.lname = 'Ohori'",
    "question": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" or has last name \"Ohori\"?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 JOIN Authorship AS T3 ON T1.paperID = T3.paperID JOIN Inst AS T2 ON T3.instID = T2.instID JOIN Authors AS T4 ON T3.authID = T4.authID WHERE T2.country = 'Japan' OR T3.authOrder = 1 AND T4.lname = 'Ohori'",
    "question": "Which papers' first author is affiliated with an institution in the country \"Japan\" or has last name \"Ohori\"? Give me the titles of the papers."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 WHERE T1.title NOT LIKE 'ML'",
    "question": "Find the titles of the papers that do not contain the word \"ML\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 WHERE T1.title NOT LIKE 'ML'",
    "question": "Which papers do not have the substring \"ML\" in their titles? Return the titles of the papers."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 WHERE T1.title NOT LIKE 'Database'",
    "question": "Which paper's title does not contain the word \"Database\"?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.title FROM Papers AS T1 WHERE T1.title NOT LIKE 'Database'",
    "question": "Which papers do not have the substring \"Database\" in their titles? Show the titles of the papers."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.fname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Papers AS T2 ON T3.paperID = T2.paperID WHERE T2.title NOT LIKE 'Functional'",
    "question": "Find the first names of all the authors who have written a paper with title not containing the word \"Functional\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.fname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Papers AS T2 ON T3.paperID = T2.paperID WHERE T2.title NOT LIKE 'Functional'",
    "question": "Who has written a paper that does not have the word \"Functional\" in its title? Return the first names of the authors."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.lname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Papers AS T2 ON T3.paperID = T2.paperID WHERE T2.title NOT LIKE 'Monadic'",
    "question": "Find the last names of all the authors that have written a paper with title not containing the word \"Monadic\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.lname FROM Authors AS T1 JOIN Authorship AS T3 ON T1.authID = T3.authID JOIN Papers AS T2 ON T3.paperID = T2.paperID WHERE T2.title NOT LIKE 'Monadic'",
    "question": "Which authors have written a paper with title not containing the word \"Monadic\"? Return their last names."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.fname FROM Authors AS T1 WHERE T1.lname != 'Ueno'",
    "question": "What is the first name of the author with last name not \"Ueno\"?"
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.fname FROM Authors AS T1 WHERE T1.lname != 'Ueno'",
    "question": "Which authors do not have last name \"Ueno\"? List their first names."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.lname FROM Authors AS T1 WHERE T1.fname != 'Amal'",
    "question": "Find the last name of the author with first name not \"Amal\"."
  },
  {
    "db_id": "icfp_1",
    "query": "SELECT T1.lname FROM Authors AS T1 WHERE T1.fname != 'Amal'",
    "question": "Which authors have first name not \"Amal\"? List their last names."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT DISTINCT T1.last_name FROM actor AS T1",
    "question": "What are the different last names of the actors and actresses?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT DISTINCT T1.last_name FROM actor AS T1",
    "question": "List all the different last names actors have."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.district FROM address AS T1  GROUP BY T1.district HAVING COUNT(*) > 2",
    "question": "Which districts have more than two addresses?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.phone, T1.postal_code FROM address AS T1 WHERE T1.address != '1031 Daugavpils Parkway'",
    "question": "What is the phone number and postal code of the address that is not 1031 Daugavpils Parkway?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.phone, T1.postal_code FROM address AS T1 WHERE T1.address != '1031 Daugavpils Parkway'",
    "question": "Give the phone and postal code corresponding to the address that is not '1031 Daugavpils Parkway'."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT COUNT(*) FROM address AS T1 WHERE T1.district != 'California'",
    "question": "How many addresses are not in the district of California?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT COUNT(*) FROM address AS T1 WHERE T1.district != 'California'",
    "question": "Count the number of addressed not in the California district."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.title, T1.film_id FROM film AS T1 WHERE T1.rental_rate = 0.99",
    "question": "What are the title and id of the film which has a rental rate of 0.99?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT COUNT(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country != 'Australia'",
    "question": "Count the number of cities not in Australia."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.country FROM country AS T1 JOIN city AS T2 ON T1.country_id = T2.country_id  GROUP BY T1.country HAVING COUNT(*) < 3",
    "question": "What are the countries that contain less than 3 cities?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.payment_date FROM payment AS T1 WHERE T1.amount > 10       EXCEPT SELECT T2.payment_date FROM payment AS T2 JOIN staff AS T3 ON T2.staff_id = T3.staff_id WHERE T3.first_name = 'Elsa'",
    "question": "What are the payment dates for any payments that have an amount greater than 10 but not handled by a staff member with the first name Elsa?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT COUNT(*) FROM customer AS T1 WHERE T1.active != 1",
    "question": "Count the number of customers who are not active."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.first_name, T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id  GROUP BY T2.actor_id HAVING COUNT(*) >= 30",
    "question": "What are the full names of actors who had roles in at least 30 films?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.amount FROM payment AS T1",
    "question": "What are the amounts of all payments?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.amount FROM payment AS T1",
    "question": "Return all payment amounts."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T3 ON T1.category_id = T3.category_id JOIN film AS T2 ON T3.film_id = T2.film_id WHERE T2.title != 'HUNGER ROOF'",
    "question": "What is the genre name of the films that are not HUNGER ROOF?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT DISTINCT T1.language_id FROM film AS T1",
    "question": "What are the language IDs of these films?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT DISTINCT T1.language_id FROM film AS T1",
    "question": "List all the languages in these films."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.title FROM film AS T1 WHERE T1.rating != 'R'",
    "question": "What are all the movies rated not as R? List the titles."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.title FROM film AS T1 WHERE T1.rating != 'R'",
    "question": "Return the titles of any movies that do not have an R rating."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.name FROM language AS T1 JOIN film AS T2 ON T1.language_id = T2.original_language_id WHERE T2.title != 'AIRPORT POLLOCK'",
    "question": "Which language does the film not AIRPORT POLLOCK use? List the language name."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT * FROM store AS T1",
    "question": "What information do you have about stores?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT * FROM store AS T1",
    "question": "Show all the stores."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT DISTINCT T1.rating FROM film AS T1",
    "question": "What are the different ratings?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT DISTINCT T1.rating FROM film AS T1",
    "question": "List all the different film ratings."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.title FROM film AS T1 WHERE T1.special_features NOT LIKE 'Deleted Scenes'",
    "question": "Which movies do not have 'Deleted Scenes' as a substring in the special feature?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.title FROM film AS T1 WHERE T1.special_features NOT LIKE 'Deleted Scenes'",
    "question": "Return the titles of films that do not include 'Deleted Scenes' in their special feature section."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT COUNT(*) FROM inventory AS T1 WHERE T1.store_id != 1",
    "question": "How many items in inventory does store 1 not have?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT COUNT(*) FROM inventory AS T1 WHERE T1.store_id != 1",
    "question": "Count the number of items store 1 does not have in stock."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.address, T2.email FROM address AS T1 JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name != 'LINDA'",
    "question": "Where does the customer with the first name not Linda live? And what is her email?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.address, T2.email FROM address AS T1 JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name != 'LINDA'",
    "question": "Return the address and email of the customer with the first name not Linda."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.title FROM film AS T1 WHERE T1.length > 100 OR T1.rating = 'PG'      UNION SELECT T2.title FROM film AS T2 WHERE T2.replacement_cost > 200",
    "question": "Find all the films longer than 100 minutes, or rated PG, and those who cost more than 200 for replacement. List the titles."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.title FROM film AS T1 WHERE T1.length > 100 OR T1.rating = 'PG'      UNION SELECT T2.title FROM film AS T2 WHERE T2.replacement_cost > 200",
    "question": "What are the titles of films that are either longer than 100 minutes or rated PG or those that cost more than 200 to replace?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT DISTINCT T1.first_name, T1.last_name FROM staff AS T1 JOIN address AS T3 ON T1.address_id = T3.address_id JOIN customer AS T2 ON T3.address_id = T2.address_id WHERE T2.first_name = 'APRIL' OR T2.last_name = 'BURNS'",
    "question": "What is the full name of the staff member who has rented a film to a customer with the first name April or the last name Burns?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT DISTINCT T1.first_name, T1.last_name FROM staff AS T1 JOIN address AS T3 ON T1.address_id = T3.address_id JOIN customer AS T2 ON T3.address_id = T2.address_id WHERE T2.first_name = 'APRIL' OR T2.last_name = 'BURNS'",
    "question": "Return the full name of the staff who provided a customer with the first name April or the last name Burns with a film rental."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.address FROM address AS T1 JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name != 'Elsa'",
    "question": "Where do the staff members who do not live in the same place as the staff member with the first name Elsa live?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.address FROM address AS T1 JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name != 'Elsa'",
    "question": "Give the address of the staff member who does not have the first name Elsa."
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.first_name FROM customer AS T1 WHERE T1.customer_id IN (SELECT T22.customer_id FROM rental AS T22 WHERE T22.rental_date > '2005-08-23 02:06:01')",
    "question": "What are the first names of customers who have rented any films after '2005-08-23 02:06:01'?"
  },
  {
    "db_id": "sakila_1",
    "query": "SELECT T1.first_name FROM customer AS T1 WHERE T1.customer_id IN (SELECT T22.customer_id FROM rental AS T22 WHERE T22.rental_date > '2005-08-23 02:06:01')",
    "question": "Return the first names of customers who did rented a film after the date '2005-08-23 02:06:01'."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT * FROM bank AS T1",
    "question": "What are the attributes of all bank branches?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT * FROM bank AS T1",
    "question": "Show all the bank branches."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT SUM( T1.no_of_customers) FROM bank AS T1 WHERE T1.city != 'New York City'",
    "question": "Find the number of customers in the banks at all cities except New York City."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT SUM( T1.no_of_customers) FROM bank AS T1 WHERE T1.city != 'New York City'",
    "question": "What is the total number of customers who use banks in cities other than New York City?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT AVG( T1.no_of_customers) FROM bank AS T1 WHERE T1.state != 'Utah'",
    "question": "Find the average number of customers in all banks of states other than Utah."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.city, T1.state FROM bank AS T1 WHERE T1.bname != 'morningside'",
    "question": "Find the city and state of all the bank branches not named morningside."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.city, T1.state FROM bank AS T1 WHERE T1.bname != 'morningside'",
    "question": "What city and state are the banks that are not called morningside in?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.bname FROM bank AS T1 WHERE T1.state != 'New York'",
    "question": "Find the branch names of banks not in the New York state."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.bname FROM bank AS T1 WHERE T1.state != 'New York'",
    "question": "What are the names of banks not in the state of New York?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.state, T1.acc_type, T1.credit_score FROM customer AS T1 WHERE T1.no_of_loans != 0",
    "question": "Find the state, account type, and credit score of the customer whose number of loan is not 0."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT DISTINCT T1.city FROM bank AS T1",
    "question": "Find the cities which banks are located at."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT DISTINCT T1.city FROM bank AS T1",
    "question": "What are the different cities where banks are located?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT DISTINCT T1.state FROM bank AS T1",
    "question": "Find the states which banks are located at."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT DISTINCT T1.state FROM bank AS T1",
    "question": "What are the different states where banks are located?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT DISTINCT T1.acc_type FROM customer AS T1",
    "question": "What are the distinct types of accounts?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT DISTINCT T1.acc_type FROM customer AS T1",
    "question": "List all the different account types."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name, T1.acc_bal FROM customer AS T1 WHERE T1.cust_name NOT LIKE 'a'",
    "question": "Find the name and account balance of the customer whose name does not include the letter \u2018a\u2019."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name, T1.acc_bal FROM customer AS T1 WHERE T1.cust_name NOT LIKE 'a'",
    "question": "What are the names and account balances of customers whose names do not contain the letter a?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT SUM( T1.acc_bal) FROM customer AS T1 WHERE T1.state = 'Utah' AND T1.state = 'Texas'",
    "question": "Find the total account balance of each customer from Utah and Texas."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT SUM( T1.acc_bal) FROM customer AS T1 WHERE T1.state = 'Utah' AND T1.state = 'Texas'",
    "question": "What are the total account balances for each customer from Utah and Texas?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name FROM customer AS T1 WHERE T1.acc_type = 'saving'       EXCEPT SELECT T2.cust_name FROM customer AS T2 WHERE T2.acc_type = 'checking'",
    "question": "Find the name of customers who have saving account but not checking account."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name FROM customer AS T1 WHERE T1.acc_type = 'saving'",
    "question": "What are the names of customers who have savings accounts?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name FROM customer AS T1",
    "question": "Find the name of customers."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name FROM customer AS T1      INTERSECT SELECT T2.cust_name FROM customer AS T2 JOIN bank AS T4 ON T2.branch_ID = T4.branch_ID JOIN loan AS T3 ON T4.branch_ID = T3.branch_ID WHERE T3.loan_type = 'Mortgages'",
    "question": "Find the name of customers who have a loan with a type of Mortgages."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN bank AS T3 ON T1.branch_ID = T3.branch_ID JOIN loan AS T2 ON T3.branch_ID = T2.branch_ID WHERE T2.loan_type = 'Mortgages'       EXCEPT SELECT T3.cust_name FROM customer AS T3 JOIN bank AS T5 ON T3.branch_ID = T5.branch_ID JOIN loan AS T4 ON T5.branch_ID = T4.branch_ID WHERE T4.loan_type = 'Auto'",
    "question": "Find the name of customers who have loans of Mortgages but not Auto."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN bank AS T3 ON T1.branch_ID = T3.branch_ID JOIN loan AS T2 ON T3.branch_ID = T2.branch_ID WHERE T2.loan_type = 'Mortgages'      UNION SELECT T3.cust_name FROM customer AS T3 JOIN bank AS T5 ON T3.branch_ID = T5.branch_ID JOIN loan AS T4 ON T5.branch_ID = T4.branch_ID WHERE T4.loan_type = 'Auto'",
    "question": "What are the names of customers who have taken either Mortgage or Auto loans?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name FROM customer AS T1 WHERE T1.credit_score = (SELECT AVG( T22.credit_score) FROM customer AS T22)",
    "question": "Find the name of customers whose credit score is the average credit scores of all customers."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name FROM customer AS T1 WHERE T1.credit_score > (SELECT AVG( T22.credit_score) FROM customer AS T22)",
    "question": "What are the names of customers with credit score greater than the average credit score across customers?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT AVG( T1.acc_bal), T1.acc_type FROM customer AS T1 WHERE T1.credit_score >= 50 GROUP BY T1.acc_type",
    "question": "For each account type, find the average account balance of customers with credit score greater than or equal to 50."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT AVG( T1.acc_bal), T1.acc_type FROM customer AS T1 WHERE T1.credit_score >= 50 GROUP BY T1.acc_type",
    "question": "What is the average account balance of customers with credit score above or equal to 50 for the different account types?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT SUM( T1.acc_bal), T1.state FROM customer AS T1 WHERE T1.credit_score < 100 GROUP BY T1.state",
    "question": "For each state, find the total account balance of customers whose credit score is below 100."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name, T1.acc_type FROM customer AS T1 JOIN bank AS T3 ON T1.branch_ID = T3.branch_ID JOIN loan AS T2 ON T3.branch_ID = T2.branch_ID  GROUP BY T1.cust_ID HAVING SUM( T2.amount) >= 5000",
    "question": "What are the names and account balances for customers who have taken a total amount of more than or equal to 5000 in loans?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID JOIN customer AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.credit_score >= 100 GROUP BY T1.bname  ORDER BY SUM( T2.amount) DESC LIMIT 1",
    "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is greater than or equal to 100."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID JOIN customer AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.credit_score <= 100 GROUP BY T1.bname  ORDER BY SUM( T2.amount) DESC LIMIT 1",
    "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores of 100 or less?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.bname) FROM bank AS T1",
    "question": "Find the number of bank branches that provided some loans."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.bname) FROM bank AS T1",
    "question": "How many different banks have provided loans?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.cust_name), T1.credit_score FROM customer AS T1  GROUP BY T1.credit_score",
    "question": "Find the number of customers and their credit score for each credit score group."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.cust_name), T1.credit_score FROM customer AS T1  GROUP BY T1.credit_score",
    "question": "How many customers have taken a loan with each credit score?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN bank AS T3 ON T1.branch_ID = T3.branch_ID JOIN loan AS T2 ON T3.branch_ID = T2.branch_ID WHERE T2.amount < 3000",
    "question": "Find the the name of the customers who have a loan with amount less than 3000."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.loan_type != 'Business'",
    "question": "Find the city and name of bank branches that do not provide business loans."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.loan_type != 'Business'",
    "question": "What are the names and cities of bank branches that do not offer loans for business?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT SUM( T1.amount) FROM loan AS T1 JOIN bank AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.state != 'New York'",
    "question": "Find the total amount of loans provided by bank branches not in the state of New York."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT AVG( T1.credit_score) FROM customer AS T1 WHERE T1.cust_ID NOT IN (SELECT T22.cust_ID FROM loan AS T22)",
    "question": "Find the average credit score of the customers who do not have any loan."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT AVG( T1.credit_score) FROM customer AS T1 WHERE T1.cust_ID NOT IN (SELECT T22.cust_ID FROM loan AS T22)",
    "question": "What is the average credit score for customers who have not taken a loan?"
  },
  {
    "db_id": "loan_1",
    "query": "SELECT AVG( T1.credit_score) FROM customer AS T1 JOIN bank AS T3 ON T1.branch_ID = T3.branch_ID JOIN loan AS T2 ON T3.branch_ID = T2.branch_ID",
    "question": "Find the average credit score of the customers who have loan from the bank."
  },
  {
    "db_id": "loan_1",
    "query": "SELECT AVG( T1.credit_score) FROM customer AS T1 JOIN bank AS T3 ON T1.branch_ID = T3.branch_ID JOIN loan AS T2 ON T3.branch_ID = T2.branch_ID",
    "question": "What is the average credit score for customers who have taken a loan from a particular bank?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT * FROM Assessment_Notes AS T1",
    "question": "What are all the assessment notes?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT COUNT( T1.date_of_notes) FROM Assessment_Notes AS T1",
    "question": "How many assessment notes are there?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT COUNT(*) FROM Addresses AS T1 WHERE T1.zip_postcode != '197'",
    "question": "How many addresses do not have zip code 197?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT DISTINCT T1.incident_type_code FROM Behavior_Incident AS T1",
    "question": "What are the distinct incident type codes?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.detention_type_code) FROM Detention AS T1",
    "question": "Return the count of distinct detention type codes."
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.date_incident_start, T1.date_incident_end FROM Behavior_Incident AS T1 WHERE T1.incident_type_code != 'NOISE'",
    "question": "What are the start and end dates for incidents with incident type code not \"NOISE\"?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT COUNT( T1.detention_summary) FROM Detention AS T1",
    "question": "How many detention summaries are there?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.email_address FROM Students AS T1 WHERE T1.first_name = 'Emma' OR T1.last_name = 'Rohan'",
    "question": "What is the email of the student with first name \"Emma\" or last name \"Rohan\"?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT DISTINCT T1.student_id FROM Students_in_Detention AS T1",
    "question": "What are the distinct student IDs?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.gender FROM Teachers AS T1 WHERE T1.last_name != 'Medhurst'",
    "question": "What is the gender of the teacher with last name not \"Medhurst\"?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.incident_type_description FROM Ref_Incident_Type AS T1 WHERE T1.incident_type_code != 'VIOLENCE'",
    "question": "What is the incident type description for the incident type with code not equal to \"VIOLENCE\"?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.first_name FROM Teachers AS T1 WHERE T1.email_address NOT LIKE 'man'",
    "question": "Find the first names of teachers whose email address does not contain the word \"man\"."
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT COUNT(*) FROM Assessment_Notes AS T1     ORDER BY T1.date_of_notes ASC",
    "question": "How many assessment notes are there?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT COUNT(*) FROM Student_Addresses AS T1     ORDER BY T1.monthly_rental DESC",
    "question": "Find the number of student addresses, and sort by monthly rental in descending order."
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.teacher_id, T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code != 'AFTER' GROUP BY T1.teacher_id  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Find the id and last name of the teacher that has the second most detentions with detention type code not \"AFTER\"?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name != 'Fanny'",
    "question": "Find the dates of assessment notes for students with first name not \"Fanny\"."
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name != 'Schuster'",
    "question": "Find the texts of assessment notes for teachers with last name not \"Schuster\"."
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.date_incident_start, T1.date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name != 'Fahey'",
    "question": "Find the start and end dates of behavior incidents of students with last name not \"Fahey\"."
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.datetime_detention_start, T1.datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name != 'Schultz'",
    "question": "Find the start and end dates of detentions of teachers with last name not \"Schultz\"."
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT COUNT( T1.cell_mobile_number) FROM Students AS T1 JOIN Student_Addresses AS T2 ON T1.student_id = T2.student_id    ORDER BY T2.monthly_rental ASC LIMIT 1",
    "question": "How many students have addresses with the lowest monthly rental?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.monthly_rental FROM Student_Addresses AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.state_province_county != 'Texas'",
    "question": "What are the monthly rentals of student addresses not in Texas state?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.state_province_county != 'Wisconsin'",
    "question": "What are the first names and last names of students with address not in Wisconsin state?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name != 'Lyla'",
    "question": "What is the zip code of the address where the teacher with first name \"Lyla\" does not live?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT T1.email_address FROM Teachers AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.zip_postcode != '918'",
    "question": "What are the email addresses of teachers whose address does not have zip code \"918\"?"
  },
  {
    "db_id": "behavior_monitoring",
    "query": "SELECT COUNT(*) FROM Students AS T1 JOIN Behavior_Incident AS T2 ON T1.student_id = T2.student_id",
    "question": "How many students are involved in behavior incident?"
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id  GROUP BY T2.asset_id HAVING COUNT(*) = 2    UNION SELECT T3.asset_id, T3.asset_details FROM Assets AS T3 JOIN Fault_Log AS T4 ON T3.asset_id = T4.asset_id  GROUP BY T3.asset_id HAVING COUNT(*) < 2",
    "question": "Which assets have 2 parts or less than 2 fault logs? List the asset id and detail."
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT COUNT(*), T2.maintenance_contract_company_id FROM Assets AS T1 JOIN Maintenance_Contracts AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id  GROUP BY T2.maintenance_contract_company_id",
    "question": "How many assets does each maintenance contract company contain? List the number and the company id."
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT COUNT(*), T2.company_name FROM Assets AS T1 JOIN Third_Party_Companies AS T2 ON T1.supplier_company_id = T2.company_id  GROUP BY T2.company_name",
    "question": "How many assets does each third party company supply? List the count and the company name."
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2      INTERSECT SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2",
    "question": "Which third party companies have at least 2 maintenance engineers and have at least 2 maintenance contracts? List the company id and name."
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT T1.staff_name, T1.staff_id FROM Staff AS T1      INTERSECT SELECT T2.staff_name, T2.staff_id FROM Staff AS T2",
    "question": "What is the name and id of the staff who recorded the fault log and has contacted any visiting engineers?"
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT COUNT(*), T2.recorded_by_staff_id FROM Engineer_Visits AS T1 JOIN Fault_Log AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id  GROUP BY T2.recorded_by_staff_id  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "How many engineer visits are required at most for a single fault log? List the number and the staff id."
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.last_name) FROM Maintenance_Engineers AS T1",
    "question": "How many distinct last names of all the engineers?"
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.fault_status) FROM Fault_Log_Parts AS T1",
    "question": "How many distinct fault status codes are recorded in the fault log parts table?"
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id",
    "question": "List the engineers who have visited to maintain the assets. List the engineer first name and last name."
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.asset_model) FROM Assets AS T1",
    "question": "How many distinct asset models are there?"
  },
  {
    "db_id": "assets_maintenance",
    "query": "SELECT T1.asset_model FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id",
    "question": "Which assets incurred any fault log? List the asset model."
  },
  {
    "db_id": "station_weather",
    "query": "SELECT T1.time, T1.train_number FROM train AS T1 WHERE T1.destination != 'Chennai'    ORDER BY T1.time ASC",
    "question": "Give me the times and numbers of all trains that do not go to Chennai, ordered by time."
  },
  {
    "db_id": "station_weather",
    "query": "SELECT COUNT(*) FROM train AS T1 WHERE T1.name NOT LIKE 'Express'",
    "question": "How many trains do not have 'Express' in their names?"
  },
  {
    "db_id": "station_weather",
    "query": "SELECT T1.train_number, T1.time FROM train AS T1 WHERE T1.origin = 'Chennai' OR T1.destination = 'Guruvayur'",
    "question": "Find the number and time of the train that goes from Chennai or goes to Guruvayur."
  },
  {
    "db_id": "station_weather",
    "query": "SELECT COUNT(*), T2.services, T2.services FROM route AS T1 JOIN station AS T2 ON T1.station_id = T2.id  GROUP BY T1.station_id",
    "question": "Find the number of trains for each station, as well as the station services and services."
  },
  {
    "db_id": "station_weather",
    "query": "SELECT T1.high_temperature, T1.day_of_week FROM weekly_weather AS T1",
    "question": "What is the high temperature and day of week for each day?"
  },
  {
    "db_id": "station_weather",
    "query": "SELECT MAX( T1.low_temperature), AVG( T1.precipitation) FROM weekly_weather AS T1 JOIN station AS T2 ON T1.station_id = T2.id WHERE T2.network_name != 'Amersham'",
    "question": "Give me the maximum low temperature and average precipitation at the stations other than the Amersham station."
  },
  {
    "db_id": "station_weather",
    "query": "SELECT DISTINCT T1.services FROM station AS T1",
    "question": "What are the different services provided by all stations?"
  },
  {
    "db_id": "station_weather",
    "query": "SELECT T1.id, T1.local_authority FROM station AS T1 JOIN weekly_weather AS T2 ON T1.id = T2.station_id  GROUP BY T2.station_id HAVING MAX( T2.precipitation) >= 50",
    "question": "Find the id and local authority of the station whose maximum precipitation is higher than or equal to 50."
  },
  {
    "db_id": "station_weather",
    "query": "SELECT T1.low_temperature, MAX( T1.wind_speed_mph) FROM weekly_weather AS T1  GROUP BY T1.low_temperature",
    "question": "show the lowest low temperature and highest wind speed in miles per hour grouped by low temperature."
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.PROF_NUM) FROM CLASS AS T1 WHERE T1.CRS_CODE != 'ACCT-211'",
    "question": "How many professors are not teaching class with code ACCT-211?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.PROF_NUM) FROM CLASS AS T1 WHERE T1.CRS_CODE != 'ACCT-211'",
    "question": "How many professors teach a class with the code not ACCT-211?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME, T1.EMP_LNAME FROM EMPLOYEE AS T1 JOIN DEPARTMENT AS T2 ON T1.EMP_NUM = T2.EMP_NUM WHERE T2.DEPT_NAME != 'Biology'",
    "question": "What are the first and last name of all employees who are not biology professors?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM WHERE T2.EMP_LNAME != 'Graztevski'",
    "question": "How many classes are professor whose last name is not Graztevski has?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM WHERE T2.EMP_LNAME != 'Graztevski'",
    "question": "How many classes does the professor whose last name is not Graztevski teach?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.SCHOOL_CODE FROM DEPARTMENT AS T1 WHERE T1.DEPT_NAME != 'Accounting'",
    "question": "What is the code of the school where the accounting department does not belong to?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.SCHOOL_CODE FROM DEPARTMENT AS T1 WHERE T1.DEPT_NAME != 'Accounting'",
    "question": "What is the school code of the departments that are not accounting?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.DEPT_ADDRESS FROM DEPARTMENT AS T1 WHERE T1.DEPT_NAME != 'History'",
    "question": "what is the address of department that is not history?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.DEPT_ADDRESS FROM DEPARTMENT AS T1 WHERE T1.DEPT_NAME != 'History'",
    "question": "Where is the department that is not history?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.DEPT_ADDRESS) FROM DEPARTMENT AS T1 WHERE T1.SCHOOL_CODE != 'BUS'",
    "question": "How many different locations does the school with code not BUS has?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.DEPT_ADDRESS), T1.DEPT_NAME FROM DEPARTMENT AS T1  GROUP BY T1.DEPT_NAME",
    "question": "How many different locations does each department have?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.CRS_CREDIT, T1.CRS_DESCRIPTION FROM COURSE AS T1 WHERE T1.CRS_CODE != 'QM-261'",
    "question": "What is the course description and number of credits for all courses except QM-261?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.DEPT_NAME), T1.DEPT_CODE FROM DEPARTMENT AS T1  GROUP BY T1.DEPT_CODE",
    "question": "Find the number of departments in each department."
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.DEPT_NAME), T1.DEPT_NAME FROM DEPARTMENT AS T1  GROUP BY T1.DEPT_NAME",
    "question": "How many departments are in each department?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.DEPT_NAME), T1.SCHOOL_CODE FROM DEPARTMENT AS T1  GROUP BY T1.SCHOOL_CODE HAVING COUNT( T1.DEPT_NAME) > '5'",
    "question": "Find the number of different departments in each school whose number of different departments is greater than 5."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.CRS_CREDIT, T1.DEPT_CODE FROM COURSE AS T1",
    "question": "What is the credit and department code of each course?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.CRS_CREDIT, T1.DEPT_CODE FROM COURSE AS T1",
    "question": "What are the credits and department code of the courses?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*), T1.CLASS_ROOM FROM CLASS AS T1  GROUP BY T1.CLASS_ROOM HAVING COUNT(*) <= 2",
    "question": "Find the number of classes offered for all class rooms that held at most 2 classes."
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*), T1.CLASS_ROOM FROM CLASS AS T1  GROUP BY T1.CLASS_ROOM HAVING COUNT(*) > 2",
    "question": "For each classroom with more than 2 classes, how many classes are offered?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*), T2.DEPT_EXTENSION FROM CLASS AS T1 JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN DEPARTMENT AS T2 ON T3.DEPT_CODE = T2.DEPT_CODE  GROUP BY T2.DEPT_EXTENSION",
    "question": "How many classes exist for each department?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*), T2.DEPT_CODE FROM PROFESSOR AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE  GROUP BY T2.DEPT_CODE",
    "question": "How many professors in each department?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*), T2.DEPT_ADDRESS FROM PROFESSOR AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE  GROUP BY T2.DEPT_ADDRESS",
    "question": "How many different departments are there for the different addresses?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*), T1.DEPT_CODE FROM PROFESSOR AS T1 WHERE T1.PROF_HIGH_DEGREE != 'Ph.D.' GROUP BY T1.DEPT_CODE",
    "question": "How many professors do not have a Ph.D. in each department?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*), T1.STU_FNAME FROM STUDENT AS T1  GROUP BY T1.STU_FNAME",
    "question": "Find the number of students for each student first name."
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.SCHOOL_CODE FROM DEPARTMENT AS T1",
    "question": "what are the school codes?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.SCHOOL_CODE FROM DEPARTMENT AS T1",
    "question": "What are the school codes of the departments?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.CLASS_CODE FROM CLASS AS T1",
    "question": "What are the different class codes?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.CRS_CODE FROM CLASS AS T1",
    "question": "What are the course codes?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.CRS_CODE FROM CLASS AS T1",
    "question": "What are the course codes?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.DEPT_NAME FROM DEPARTMENT AS T1",
    "question": "What are the names of the departments?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.DEPT_NAME FROM DEPARTMENT AS T1",
    "question": "What are the names of the different departments?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.CLASS_SECTION) FROM CLASS AS T1 WHERE T1.CRS_CODE != 'ACCT-211'",
    "question": "How many different class sections are there in the courses other than ACCT-211?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT( T1.DEPT_NAME) FROM DEPARTMENT AS T1 JOIN COURSE AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE  GROUP BY COUNT( T1.DEPT_NAME)  ORDER BY SUM( T2.CRS_CREDIT) DESC LIMIT 1",
    "question": "How many departments offer the most credits all together?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*) FROM ENROLL AS T1 JOIN CLASS AS T2 ON T1.CLASS_CODE = T2.CLASS_CODE WHERE T2.CRS_CODE != 'ACCT-211'",
    "question": "How many students enrolled in a class other than ACCT-211?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T3 ON T1.STU_NUM = T3.STU_NUM JOIN CLASS AS T2 ON T3.CLASS_CODE = T2.CLASS_CODE WHERE T2.CRS_CODE != 'ACCT-211'",
    "question": "What is the first name of each student enrolled in a class other than ACCT-211?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T3 ON T1.STU_NUM = T3.STU_NUM JOIN CLASS AS T2 ON T3.CLASS_CODE = T2.CLASS_CODE WHERE T2.CRS_CODE != 'ACCT-211'",
    "question": "What are the first names of all students not in course ACCT-211?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T3 ON T1.STU_NUM = T3.STU_NUM JOIN CLASS AS T2 ON T3.CLASS_CODE = T2.CLASS_CODE WHERE T2.CRS_CODE = 'ACCT-211' OR T3.ENROLL_GRADE = 'C'",
    "question": "What is the first name of students enrolled in class ACCT-211 or got grade C?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T3 ON T1.STU_NUM = T3.STU_NUM JOIN CLASS AS T2 ON T3.CLASS_CODE = T2.CLASS_CODE WHERE T2.CRS_CODE = 'ACCT-211' OR T3.ENROLL_GRADE = 'C'",
    "question": "What are the first names of all students who took ACCT-211 or received a C?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT * FROM EMPLOYEE AS T1",
    "question": "Find all employees."
  },
  {
    "db_id": "college_1",
    "query": "SELECT * FROM EMPLOYEE AS T1",
    "question": "What are the names of all the employees?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*) FROM PROFESSOR AS T1 WHERE T1.PROF_HIGH_DEGREE != 'Ph.D.'",
    "question": "How many professors do not have a Ph.D. degree?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*) FROM PROFESSOR AS T1 WHERE T1.PROF_HIGH_DEGREE != 'Ph.D.'",
    "question": "What is the total number of professors without a Ph.D. ?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.CLASS_CODE FROM CLASS AS T1 WHERE T1.CLASS_ROOM != 'KLR209'",
    "question": "List the codes of all courses that do not take place in room KLR209."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.CLASS_CODE FROM CLASS AS T1 WHERE T1.CLASS_ROOM != 'KLR209'",
    "question": "What are the codes of all the courses that are not located in room KLR209?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME FROM EMPLOYEE AS T1 WHERE T1.EMP_JOBCODE != 'PROF'    ORDER BY T1.EMP_DOB ASC",
    "question": "List the first name of all employees with job code not PROF ordered by their date of birth."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME FROM EMPLOYEE AS T1 WHERE T1.EMP_JOBCODE != 'PROF'    ORDER BY T1.EMP_DOB ASC",
    "question": "What are the first names of all employees that are not professors ordered by date of birth?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME, T1.STU_LNAME, T1.STU_GPA FROM STUDENT AS T1 WHERE T1.STU_GPA >= 3   ORDER BY T1.STU_DOB DESC LIMIT 1",
    "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above or equal to 3?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE != 'C'",
    "question": "What is the first name of students who did not get grade C in any class?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE != 'C'",
    "question": "What are the first names of all students who did not get a grade C in a class?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.DEPT_NAME, T2.DEPT_CODE FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE WHERE T2.PROF_HIGH_DEGREE != 'Ph.D.' GROUP BY T2.DEPT_CODE  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the name of department where has the largest number of professors without a Ph.D. degree?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME FROM EMPLOYEE AS T1 WHERE T1.EMP_JOBCODE = 'PROF'     INTERSECT SELECT T2.EMP_FNAME FROM EMPLOYEE AS T2",
    "question": "What are the first names of the professors who teach a class."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME FROM EMPLOYEE AS T1 WHERE T1.EMP_JOBCODE = 'PROF'",
    "question": "What are the first names of all professors?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME FROM EMPLOYEE AS T1 JOIN DEPARTMENT AS T2 ON T1.EMP_NUM = T2.EMP_NUM WHERE T2.DEPT_NAME = 'History'     INTERSECT SELECT T3.EMP_FNAME FROM EMPLOYEE AS T3",
    "question": "What are the first names of all history professors who teach?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_LNAME, T2.PROF_OFFICE FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM JOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE WHERE T3.DEPT_NAME != 'History'",
    "question": "What is the last name and office of the professor not from the history department?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_LNAME, T2.PROF_OFFICE FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM JOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE WHERE T3.DEPT_NAME != 'History'",
    "question": "What are the last name and office of all non-history professors?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.DEPT_NAME, T2.PROF_OFFICE FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE JOIN EMPLOYEE AS T3 ON T2.EMP_NUM = T3.EMP_NUM WHERE T3.EMP_LNAME != 'Heffington'",
    "question": "What is department name and office for the professor whose last name is not Heffington?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.DEPT_NAME, T2.PROF_OFFICE FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE JOIN EMPLOYEE AS T3 ON T2.EMP_NUM = T3.EMP_NUM WHERE T3.EMP_LNAME != 'Heffington'",
    "question": "What is the name of the department and office location for the professor with the last name not equal to Heffington?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_LNAME, T1.EMP_HIREDATE FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM WHERE T2.PROF_OFFICE != 'DRE 102'",
    "question": "Find the last name and hire date of the professor who is not in office DRE 102."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_LNAME, T1.EMP_HIREDATE FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM WHERE T2.PROF_OFFICE != 'DRE 102'",
    "question": "What is the last name of the professor whose office is not located in DRE 102, and when were they hired?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.CRS_CODE FROM CLASS AS T1 JOIN ENROLL AS T3 ON T1.CLASS_CODE = T3.CLASS_CODE JOIN STUDENT AS T2 ON T3.STU_NUM = T2.STU_NUM WHERE T2.STU_LNAME != 'Smithson'",
    "question": "What is the code of the course which the student whose last name is not Smithson took?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.CRS_CODE FROM CLASS AS T1 JOIN ENROLL AS T3 ON T1.CLASS_CODE = T3.CLASS_CODE JOIN STUDENT AS T2 ON T3.STU_NUM = T2.STU_NUM WHERE T2.STU_LNAME != 'Smithson'",
    "question": "What are the course codes for every class that the student with the last name Smithson did not take?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.CRS_DESCRIPTION, T1.CRS_CREDIT FROM COURSE AS T1 JOIN DEPARTMENT AS T3 ON T1.DEPT_CODE = T3.DEPT_CODE JOIN STUDENT AS T2 ON T3.DEPT_CODE = T2.DEPT_CODE WHERE T2.STU_LNAME != 'Smithson'",
    "question": "What are the description and credit of the course which the student whose last name is not Smithson took?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.CRS_DESCRIPTION, T1.CRS_CREDIT FROM COURSE AS T1 JOIN DEPARTMENT AS T3 ON T1.DEPT_CODE = T3.DEPT_CODE JOIN STUDENT AS T2 ON T3.DEPT_CODE = T2.DEPT_CODE WHERE T2.STU_LNAME != 'Smithson'",
    "question": "How many credits is the course that the student with the last name not Smithson took, and what is its description?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT COUNT(*) FROM PROFESSOR AS T1 WHERE T1.PROF_HIGH_DEGREE = 'Ph.D.' AND T1.PROF_HIGH_DEGREE = 'MA'",
    "question": "How many professors who has both Ph.D. and MA degree?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T2.CRS_CODE = 'CIS-220'",
    "question": "Find the first name of the professor who is teaching the course with code CIS-220."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T2.CRS_CODE = 'CIS-220'      UNION SELECT T3.EMP_FNAME FROM EMPLOYEE AS T3 JOIN CLASS AS T4 ON T3.EMP_NUM = T4.PROF_NUM WHERE T4.CRS_CODE = 'QM-261'",
    "question": "What is the first name of the professor who is teaching CIS-220 or QM-261?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE WHERE T2.DEPT_NAME = 'Accounting'      UNION SELECT T3.STU_FNAME FROM STUDENT AS T3 JOIN DEPARTMENT AS T4 ON T3.DEPT_CODE = T4.DEPT_CODE WHERE T4.DEPT_NAME = 'Computer Info. Systems'",
    "question": "Find the first name of student who is taking classes from accounting or Computer Info. Systems departments"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE WHERE T2.DEPT_NAME = 'Accounting'       EXCEPT SELECT T3.STU_FNAME FROM STUDENT AS T3 JOIN DEPARTMENT AS T4 ON T3.DEPT_CODE = T4.DEPT_CODE WHERE T4.DEPT_NAME = 'Computer Info. Systems'",
    "question": "What are the first names of all students taking accoutning but not Computer Information Systems classes?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT AVG( T1.STU_GPA) FROM STUDENT AS T1 JOIN ENROLL AS T3 ON T1.STU_NUM = T3.STU_NUM JOIN CLASS AS T2 ON T3.CLASS_CODE = T2.CLASS_CODE WHERE T2.CRS_CODE != 'ACCT-211'",
    "question": "What is the average GPA of students not taking ACCT-211?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME, T1.STU_GPA FROM STUDENT AS T1 WHERE T1.STU_GPA != (SELECT AVG( T22.STU_GPA) FROM STUDENT AS T22)",
    "question": "Find the first name and gpa of the students whose gpa is not equal to the average gpa of all students."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME, T1.STU_GPA FROM STUDENT AS T1 WHERE T1.STU_GPA > (SELECT AVG( T22.STU_GPA) FROM STUDENT AS T22)",
    "question": "What is the first name and GPA of every student that has a GPA higher than average?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME, T2.PROF_OFFICE FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM JOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE WHERE T3.DEPT_NAME = 'History' OR T2.PROF_HIGH_DEGREE = 'Ph.D.'",
    "question": "Find the first name and office of the professor who is in the history department or has a Ph.D. degree."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME, T2.PROF_OFFICE FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM JOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE WHERE T3.DEPT_NAME = 'History' OR T2.PROF_HIGH_DEGREE = 'Ph.D.'",
    "question": "What are the first names and office of the professors who are in the history department or have a Ph.D?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME, T2.CLASS_ROOM FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM JOIN COURSE AS T4 ON T2.CRS_CODE = T4.CRS_CODE JOIN DEPARTMENT AS T3 ON T4.DEPT_CODE = T3.DEPT_CODE WHERE T3.DEPT_NAME != 'Accounting'",
    "question": "Find the first names of all professors who is teaching some course and the class room in the department other than Accounting."
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.EMP_FNAME, T2.PROF_HIGH_DEGREE FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM JOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE WHERE T3.DEPT_NAME != 'Computer Info. Systems'",
    "question": "Find the first names and degree of all professors who are not teaching some class in Computer Info. Systems department."
  },
  {
    "db_id": "college_1",
    "query": "SELECT DISTINCT T1.EMP_FNAME, T2.PROF_HIGH_DEGREE FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM JOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE WHERE T3.DEPT_NAME != 'Computer Info. Systems'",
    "question": "What are the different first names and highest degree attained for professors not teaching in the Computer Information Systems department?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_LNAME FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'A' OR T2.CLASS_CODE = '10018'",
    "question": "What is the last name of the student who got a grade A in the class with code 10018 or any other class."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME, T2.PROF_OFFICE FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM JOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE WHERE T3.DEPT_NAME = 'History' OR T2.PROF_HIGH_DEGREE != 'Ph.D.'",
    "question": "Find the first name and office of history professor or professor who did not get a Ph.D. degree."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME, T2.PROF_OFFICE FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM JOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE WHERE T3.DEPT_NAME = 'History' OR T2.PROF_HIGH_DEGREE != 'Ph.D.'",
    "question": "What are the first names and offices of professors who are in the history department or don't have Ph.D.s?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM  GROUP BY T1.EMP_FNAME HAVING COUNT(*) >= 1",
    "question": "Find the first names of professors who are teaching at least one class."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.EMP_FNAME FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM  GROUP BY T1.EMP_FNAME HAVING COUNT(*) >= 1",
    "question": "What are the first names of all professors who teach at least one class?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.DEPT_NAME FROM DEPARTMENT AS T1 JOIN COURSE AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE WHERE T2.CRS_DESCRIPTION NOT LIKE 'Statistics'",
    "question": "Find the name of department that does not offer the class whose description has the word \"Statistics\"."
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.DEPT_NAME FROM DEPARTMENT AS T1 JOIN COURSE AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE WHERE T2.CRS_DESCRIPTION NOT LIKE 'Statistics'",
    "question": "What is the name of the department that offers a course that does not have the word \"Statistics\" in its description?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T3 ON T1.STU_NUM = T3.STU_NUM JOIN CLASS AS T2 ON T3.CLASS_CODE = T2.CLASS_CODE WHERE T2.CRS_CODE = 'ACCT-211' OR T1.STU_LNAME LIKE '%S%'",
    "question": "What is the first name of the student whose last name starting with the letter S or is taking ACCT-211 class?"
  },
  {
    "db_id": "college_1",
    "query": "SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T3 ON T1.STU_NUM = T3.STU_NUM JOIN CLASS AS T2 ON T3.CLASS_CODE = T2.CLASS_CODE WHERE T2.CRS_CODE = 'ACCT-211' OR T1.STU_LNAME LIKE '%S%'",
    "question": "What is the first name of the student whose last name starts with the letter S or is taking ACCT-211?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT * FROM club AS T1",
    "question": "What are the names of all the clubs?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT * FROM club AS T1",
    "question": "What are the names of all the clubs?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Region) FROM club AS T1     ORDER BY T1.Region ASC",
    "question": "How many different regions of clubs are there in ascending alphabetical order?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT DISTINCT T1.Year FROM competition AS T1 WHERE T1.Competition_type = 'Tournament'",
    "question": "What are the distinct years in which the competitions type is \"Tournament\"?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT COUNT(*) FROM club_rank AS T1 WHERE T1.Total > 10",
    "question": "How many clubs have total medals more than 10?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT COUNT(*) FROM club_rank AS T1 WHERE T1.Total > 10",
    "question": "What is the total number of clubs that have more than 10 medals in total?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position != 'Right Wing'",
    "question": "Show the names of clubs that do not have players with position \"Right Wing\"."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position != 'Right Wing'",
    "question": "What are the names of the clubs that do not have players in the position of \"Right Wing\"?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT AVG( T1.Points) FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.name != 'AIB'",
    "question": "What is the average points of players from club with name not \"AIB\"."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT AVG( T1.Points) FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.name != 'AIB'",
    "question": "What is the average number of points for players from all clubs except \"AIB\"?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Position FROM player AS T1  GROUP BY T1.Position HAVING AVG( T1.Points) < 20",
    "question": "List the position of players with average number of points scored by players of that position smaller than 20."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Position FROM player AS T1  GROUP BY T1.Position HAVING AVG( T1.Points) > 20",
    "question": "What are the positions of players whose average number of points scored by that position is larger than 20?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Competition_type FROM competition AS T1  GROUP BY T1.Competition_type HAVING COUNT(*) > 5",
    "question": "List the types of competition that have more than five competitions of that type."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
    "question": "List the names of clubs that have players."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
    "question": "What are the names of all clubs that have players?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Position FROM player AS T1 WHERE T1.Points > 20       EXCEPT SELECT T2.Position FROM player AS T2 WHERE T2.Points < 10",
    "question": "What are the positions with more than 20 points but not less than 10 points."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Position FROM player AS T1 WHERE T1.Points > 20      UNION SELECT T2.Position FROM player AS T2 WHERE T2.Points < 10",
    "question": "What are the positions of both players that have more than 20 points or less than 10 points?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Points FROM player AS T1",
    "question": "Show points of all players."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Points FROM player AS T1",
    "question": "What are the points for each player?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT DISTINCT T1.Position FROM player AS T1",
    "question": "what are the different positions?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT DISTINCT T1.Position FROM player AS T1",
    "question": "What are the different positions for players?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.name FROM player AS T1 WHERE T1.Points < (SELECT AVG( T22.Points) FROM player AS T22)",
    "question": "what are the name of players who get less than the average points."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.name FROM player AS T1 WHERE T1.Points != (SELECT AVG( T22.Points) FROM player AS T22)",
    "question": "What are the names of all players that did not get the average number of points?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT COUNT(*), T1.Position FROM player AS T1 WHERE T1.Points >= 30 GROUP BY T1.Position",
    "question": "find the number of players whose points are higher than or equal to 30 in each position."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT COUNT(*), T1.Position FROM player AS T1 WHERE T1.Points > 30 GROUP BY T1.Position",
    "question": "What is the number of players who have points greater than 30 for each position?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Country FROM competition AS T1 WHERE T1.Competition_type != 'Tournament' GROUP BY T1.Country  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "which country did participated in the most number of non-Tournament competitions?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Country FROM competition AS T1 WHERE T1.Competition_type != 'Tournament' GROUP BY T1.Country  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "what is the name of the country that participated in the most non-tournament competitions?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Country FROM competition AS T1 WHERE T1.Competition_type = 'Friendly'       EXCEPT SELECT T2.Country FROM competition AS T2 WHERE T2.Competition_type = 'Tournament'",
    "question": "which countries did participated in Friendly type competitions but not in Tournament type competitions."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Country FROM competition AS T1 WHERE T1.Competition_type = 'Friendly'      UNION SELECT T2.Country FROM competition AS T2 WHERE T2.Competition_type = 'Tournament'",
    "question": "What are the countries that participated in either friendly or tournament type competitions?"
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Country FROM competition AS T1",
    "question": "Find the countries that have participated in any competition."
  },
  {
    "db_id": "sports_competition",
    "query": "SELECT T1.Country FROM competition AS T1      INTERSECT SELECT T2.Country FROM competition AS T2 WHERE T2.Competition_type = 'Friendly'",
    "question": "What are the countries that have participated in at least one friendly-type competition?"
  },
  {
    "db_id": "manufacturer",
    "query": "SELECT T1.Market_Rate FROM furniture AS T1    ORDER BY T1.Market_Rate DESC LIMIT 1",
    "question": "find the market rate of the furniture that has the top 2 market shares."
  },
  {
    "db_id": "manufacturer",
    "query": "SELECT T1.Num_of_Component, T1.Name FROM furniture AS T1 WHERE T1.Num_of_Component < 10",
    "question": "Find the component amounts and names of all furnitures that have fewer than 10 components."
  },
  {
    "db_id": "manufacturer",
    "query": "SELECT T1.Name FROM furniture AS T1 JOIN furniture_manufacte AS T2 ON T1.Furniture_ID = T2.Furniture_ID WHERE T2.Price_in_Dollar != (SELECT MAX( T23.Price_in_Dollar) FROM furniture_manufacte AS T23)",
    "question": "Find the names of furnitures whose prices are not the same as the highest price."
  },
  {
    "db_id": "manufacturer",
    "query": "SELECT MAX( T1.Num_of_Shops), AVG( T1.Num_of_Factories) FROM manufacturer AS T1 WHERE T1.Open_Year <= 1990",
    "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before or in 1990."
  },
  {
    "db_id": "manufacturer",
    "query": "SELECT T1.Market_Rate, T1.Name FROM furniture AS T1 JOIN furniture_manufacte AS T2 ON T1.Furniture_ID = T2.Furniture_ID",
    "question": "Find the market shares and names of furnitures which are produced by some company in our records."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.DEPARTMENT_ID FROM employees AS T1 WHERE T1.LAST_NAME != 'McEwen'",
    "question": "Display the first name, and department number for all employees whose last name is not \"McEwen\"."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.DEPARTMENT_ID FROM employees AS T1 WHERE T1.LAST_NAME != 'McEwen'",
    "question": "What are the first names and department numbers for employees whose last name is not McEwen?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 WHERE T1.DEPARTMENT_ID != 'null'",
    "question": "Return all the information for all employees with a department number."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 WHERE T1.DEPARTMENT_ID != 'null'",
    "question": "What are all the employees with a department number?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM departments AS T1 WHERE T1.DEPARTMENT_NAME != 'Marketing'",
    "question": "What is all the information about the departments that are not Marketing?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.HIRE_DATE FROM employees AS T1 WHERE T1.FIRST_NAME LIKE '%M%'",
    "question": "when is the hire date for those employees whose first name containing the letter M?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.HIRE_DATE FROM employees AS T1 WHERE T1.FIRST_NAME LIKE '%M%'",
    "question": "On what dates were employees with the letter M in their first names hired?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.HIRE_DATE, T1.SALARY, T1.DEPARTMENT_ID FROM employees AS T1 WHERE T1.FIRST_NAME LIKE '%M%'",
    "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name containing the letter M."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.HIRE_DATE, T1.SALARY, T1.DEPARTMENT_ID FROM employees AS T1 WHERE T1.FIRST_NAME LIKE '%M%'",
    "question": "What are the full name, hire date, salary, and department id for employees with the letter M in their first name?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.HIRE_DATE, T1.SALARY, T1.DEPARTMENT_ID FROM employees AS T1 WHERE T1.FIRST_NAME LIKE '%M%'    ORDER BY T1.DEPARTMENT_ID ASC",
    "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name containing the letter M and make the result set in ascending order by department number."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.HIRE_DATE, T1.SALARY, T1.DEPARTMENT_ID FROM employees AS T1 WHERE T1.FIRST_NAME LIKE '%M%'    ORDER BY T1.DEPARTMENT_ID ASC",
    "question": "What are the full name, hire data, salary and department id for employees with the letter M in their first name, ordered by ascending department id?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.PHONE_NUMBER FROM employees AS T1 WHERE T1.SALARY BETWEEN 10035.0 AND 17118.0",
    "question": "what is the phone number of employees whose salary is in the range of 10035.0 and 17118.0?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 WHERE T1.SALARY BETWEEN 8000 AND 12000 OR T1.COMMISSION_PCT != 'null' OR T1.DEPARTMENT_ID != 40",
    "question": "display all the information of employees whose salary is in the range of 8000 and 12000 or commission is not null or department number does not equal to 40."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.SALARY FROM employees AS T1 WHERE T1.COMMISSION_PCT != 'null'",
    "question": "What are the full name (first and last name) and salary for all employees who does have any value for commission?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.SALARY FROM employees AS T1 WHERE T1.COMMISSION_PCT != 'null'",
    "question": "Return the full names and salaries of employees with non-null commissions."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.SALARY FROM employees AS T1 WHERE T1.FIRST_NAME NOT LIKE 'm'",
    "question": "Display the first and last name, and salary for those employees whose first name does not end with the letter m."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.SALARY FROM employees AS T1 WHERE T1.FIRST_NAME NOT LIKE 'm'",
    "question": "Return the full names and salaries for employees with first names that do not end with the letter m."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.SALARY, T1.MANAGER_ID FROM employees AS T1 WHERE T1.MANAGER_ID = 'null'",
    "question": "Find the salary and manager number for those employees who is not working under a manager."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.SALARY, T1.MANAGER_ID FROM employees AS T1 WHERE T1.MANAGER_ID = 'null'",
    "question": "What are the salaries and manager ids for employees who do not have managers?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 WHERE T1.FIRST_NAME LIKE '%D%' AND T1.FIRST_NAME LIKE '%S%'    ORDER BY T1.SALARY DESC",
    "question": "display all the information for all employees who have the letters D and S in their first name and also arrange the result in descending order by salary."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 WHERE T1.FIRST_NAME LIKE '%D%' AND T1.FIRST_NAME LIKE '%S%'    ORDER BY T1.SALARY DESC",
    "question": "What is all the information about employees with D and S in their first name, ordered by salary descending?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 WHERE T1.HIRE_DATE < '1987-09-07'",
    "question": "Which employees were hired before September 7th, 1987?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.JOB_TITLE FROM jobs AS T1 WHERE T1.MIN_SALARY <= 9000",
    "question": "display the job title of jobs which minimum salary is less than or equal to 9000."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.JOB_TITLE FROM jobs AS T1 WHERE T1.MIN_SALARY < 9000",
    "question": "Which job titles correspond to jobs with salaries under 9000?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMAIL FROM employees AS T1 WHERE T1.COMMISSION_PCT = 'null' OR T1.SALARY BETWEEN 7000 AND 12000 AND T1.DEPARTMENT_ID = 50",
    "question": "What are the emails of employees with null commission, salary between 7000 and 12000, or who work in department 50?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.DEPARTMENT_ID FROM employees AS T1  GROUP BY T1.DEPARTMENT_ID HAVING COUNT( T1.COMMISSION_PCT) >= 10",
    "question": "display those departments where more than or equal to ten employees work who got a commission percentage."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.DEPARTMENT_ID FROM employees AS T1  GROUP BY T1.DEPARTMENT_ID HAVING COUNT( T1.COMMISSION_PCT) >= 10",
    "question": "What are the department ids for which at least 10 employees had a commission?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT DISTINCT T1.DEPARTMENT_ID FROM employees AS T1  GROUP BY T1.DEPARTMENT_ID HAVING COUNT( T1.EMPLOYEE_ID) < 4",
    "question": "What are department ids for departments with managers managing less than 4 employees?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.DEPARTMENT_ID, AVG( T1.SALARY) FROM employees AS T1 WHERE T1.COMMISSION_PCT = 'null' GROUP BY T1.DEPARTMENT_ID",
    "question": "display the average salary of employees for each department who does not get a commission percentage."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.DEPARTMENT_ID, AVG( T1.SALARY) FROM employees AS T1 WHERE T1.COMMISSION_PCT = 'null' GROUP BY T1.DEPARTMENT_ID",
    "question": "What is the average salary of employees who have a null commission percentage?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.JOB_ID FROM job_history AS T1 WHERE T1.END_DATE - T1.START_DATE > '300' GROUP BY T1.JOB_ID HAVING COUNT(*) >= 2",
    "question": "display job ID for those jobs that were done by two or more for more than 300 days."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.JOB_ID FROM job_history AS T1 WHERE T1.END_DATE - T1.START_DATE > '300' GROUP BY T1.JOB_ID HAVING COUNT(*) >= 2",
    "question": "What are the job ids for jobs done more than once for a period of more than 300 days?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID FROM job_history AS T1  GROUP BY T1.EMPLOYEE_ID HAVING COUNT(*) < 2",
    "question": "display the ID for those employees who did less than two jobs in the past."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID FROM job_history AS T1  GROUP BY T1.EMPLOYEE_ID HAVING COUNT(*) > 2",
    "question": "What are the employee ids for employees who have held more than two jobs?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T2.SALARY < 12000",
    "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary below 12000?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T2.SALARY <= 12000",
    "question": "What is all the job history info done by employees earning a salary less than or equal to 12000?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT COUNT( T1.JOB_TITLE), AVG( T2.SALARY) FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
    "question": "How many employees work for each job title?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME FROM employees AS T1 WHERE T1.SALARY < (SELECT T22.SALARY FROM employees AS T22 WHERE T22.EMPLOYEE_ID = 163)",
    "question": "Provide the full names of employees earning less than the employee with id 163."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.DEPARTMENT_ID FROM employees AS T1 WHERE T1.SALARY NOT IN (SELECT MIN( T22.SALARY) FROM employees AS T22)",
    "question": "Find the first name and last name and department id for those employees who earn such amount of salary which is not the smallest salary of any of the departments."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY < (SELECT AVG( T22.SALARY) FROM employees AS T22)",
    "question": "Find the employee id for all employees who earn less than the average salary."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY != (SELECT AVG( T22.SALARY) FROM employees AS T22)",
    "question": "What are the employee ids for employees who do not make the average?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.DEPARTMENT_NAME) FROM departments AS T1",
    "question": "count the number of distinct department names."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.DEPARTMENT_NAME) FROM departments AS T1",
    "question": "How many distinct departments have at least one employee."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM departments AS T1 WHERE T1.DEPARTMENT_NAME != 'Marketing'",
    "question": "What is all the information about the departments that are not Marketing?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID FROM job_history AS T1  GROUP BY T1.EMPLOYEE_ID HAVING COUNT(*) > 2",
    "question": "What are the employee ids for those who had more than two jobs."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT DISTINCT T1.DEPARTMENT_ID FROM employees AS T1  GROUP BY T1.DEPARTMENT_ID HAVING COUNT( T1.EMPLOYEE_ID) > 4",
    "question": "What are the unique ids of those departments where any manager is managing more than 4 employees."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT DISTINCT T1.DEPARTMENT_ID FROM employees AS T1  GROUP BY T1.DEPARTMENT_ID HAVING COUNT( T1.EMPLOYEE_ID) > 4",
    "question": "Give the distinct department ids of departments in which a manager is in charge of more than 4 employees?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.JOB_ID FROM employees AS T1  GROUP BY T1.JOB_ID HAVING AVG( T1.SALARY) >= 8000",
    "question": "Find the job ID for those jobs which average salary is equal to or above 8000."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.JOB_ID FROM employees AS T1  GROUP BY T1.JOB_ID HAVING AVG( T1.SALARY) >= 8000",
    "question": "What are the job ids corresponding to jobs with average salary equal to or above 8000?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID, T2.JOB_TITLE FROM employees AS T1 JOIN jobs AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.DEPARTMENT_ID != 80",
    "question": "what are the employee ids and job titles for employees not in department 80?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 WHERE T1.SALARY BETWEEN (SELECT MAX( T22.SALARY) FROM employees AS T22) AND 2500",
    "question": "display all the information of the employees whose salary if within the range of largest salary and 2500."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 WHERE T1.DEPARTMENT_ID IN (SELECT T22.DEPARTMENT_ID FROM departments AS T22 WHERE T22.MANAGER_ID BETWEEN 100 AND 200)",
    "question": "Find the ids of the employees who works in those departments where some employees works whose manager id within the range 100 and 200."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 WHERE T1.DEPARTMENT_ID IN (SELECT T22.DEPARTMENT_ID FROM departments AS T22 WHERE T22.MANAGER_ID BETWEEN 100 AND 200)",
    "question": "What are the ids for employees who work in departments with managers that have ids between 100 and 200?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.HIRE_DATE FROM employees AS T1 WHERE T1.DEPARTMENT_ID > (SELECT T22.DEPARTMENT_ID FROM employees AS T22 WHERE T22.FIRST_NAME = 'Clara')",
    "question": "display the employee name ( first name and last name ) and hire date for all employees in the department that is greater than the department of Clara."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID, T1.FIRST_NAME, T1.LAST_NAME FROM employees AS T1 WHERE T1.DEPARTMENT_ID NOT IN (SELECT T22.DEPARTMENT_ID FROM employees AS T22 WHERE T22.FIRST_NAME LIKE '%T%')",
    "question": "display the employee number and name( first name and last name ) for all employees who do not work in a department with any employee whose name contains a \u2019T\u2019."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID, T1.FIRST_NAME, T1.LAST_NAME FROM employees AS T1 WHERE T1.DEPARTMENT_ID NOT IN (SELECT T22.DEPARTMENT_ID FROM employees AS T22 WHERE T22.FIRST_NAME LIKE '%T%')",
    "question": "What are the ids and full names for employees who work in a department that does not have someone with a first name that contains the letter T?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID, T1.FIRST_NAME, T1.LAST_NAME, T1.SALARY FROM employees AS T1 WHERE T1.SALARY > (SELECT AVG( T22.SALARY) FROM employees AS T22) OR T1.DEPARTMENT_ID IN (SELECT T22.DEPARTMENT_ID FROM employees AS T22 WHERE T22.FIRST_NAME LIKE '%J%')",
    "question": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary or who work in a department with any employee with a 'J' in their first name."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID, T1.FIRST_NAME, T1.LAST_NAME, T1.SALARY FROM employees AS T1 WHERE T1.SALARY > (SELECT AVG( T22.SALARY) FROM employees AS T22) OR T1.DEPARTMENT_ID IN (SELECT T22.DEPARTMENT_ID FROM employees AS T22 WHERE T22.FIRST_NAME LIKE '%J%')",
    "question": "What are the ids, full names, and salaries for employees making more than average or who work in a department with employees who have the letter J in their first name?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID, T1.JOB_ID FROM employees AS T1 WHERE T1.SALARY > (SELECT MIN( T22.SALARY) FROM employees AS T22 WHERE T22.JOB_ID = 'MK_MAN')",
    "question": "What are the employee ids and job ids for employees who make more than the lowest earning employee with title MK_MAN?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID, T1.FIRST_NAME, T1.LAST_NAME, T1.JOB_ID FROM employees AS T1 WHERE T1.SALARY < (SELECT MAX( T22.SALARY) FROM employees AS T22 WHERE T22.JOB_ID = 'PU_MAN')",
    "question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is less than any salary of those employees whose job title is PU_MAN."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.EMPLOYEE_ID, T1.FIRST_NAME, T1.LAST_NAME, T1.JOB_ID FROM employees AS T1 WHERE T1.SALARY = (SELECT MAX( T22.SALARY) FROM employees AS T22 WHERE T22.JOB_ID = 'PU_MAN')",
    "question": "What are the employee ids, full names, and job ids for employees who make the same as the highest earning employee with title PU_MAN?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.DEPARTMENT_ID, SUM( T1.SALARY) FROM employees AS T1  GROUP BY T1.DEPARTMENT_ID HAVING COUNT(*) < 2",
    "question": "display the department id and the total salary for those departments which contains less than two employees."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID",
    "question": "display all the information of those employees who had any job in the past."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT * FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID",
    "question": "What is all the information about employees who have had a job in the past?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T2.CITY FROM employees AS T1 JOIN departments AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID JOIN locations AS T2 ON T3.LOCATION_ID = T2.LOCATION_ID WHERE T1.FIRST_NAME NOT LIKE 'z'",
    "question": "display those employees who do not contain a letter z to their first name and also display their last name, city."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T2.CITY FROM employees AS T1 JOIN departments AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID JOIN locations AS T2 ON T3.LOCATION_ID = T2.LOCATION_ID WHERE T1.FIRST_NAME NOT LIKE 'z'",
    "question": "What are the full names and cities of employees whose first names do not have the letter Z in them?"
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.SALARY FROM employees AS T1 JOIN departments AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID JOIN locations AS T2 ON T3.LOCATION_ID = T2.LOCATION_ID WHERE T2.CITY != 'London'",
    "question": "display the full name (first and last name), and salary of those employees who working in any department located in any city except London."
  },
  {
    "db_id": "hr_1",
    "query": "SELECT T1.FIRST_NAME, T1.LAST_NAME, T1.SALARY FROM employees AS T1 JOIN departments AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID JOIN locations AS T2 ON T3.LOCATION_ID = T2.LOCATION_ID WHERE T2.CITY != 'London'",
    "question": "What are full names and salaries of employees working in the city other than London?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 WHERE T1.languages != 'english'",
    "question": "Find the names of all songs that are not English."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 WHERE T1.languages != 'english'",
    "question": "What are the names of all songs not in English?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.f_id FROM files AS T1 WHERE T1.formats != 'mp3'",
    "question": "What are the id of songs whose format is not mp3."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.f_id FROM files AS T1 WHERE T1.formats != 'mp3'",
    "question": "What are the id of all the files not in mp3 format?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT DISTINCT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating < 9",
    "question": "List the name and country of origin for all singers who have produced songs with rating below 9."
  },
  {
    "db_id": "music_1",
    "query": "SELECT DISTINCT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating >= 9",
    "question": "What are the different names and countries of origins for all artists whose song ratings are greater than or equal to 9?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT DISTINCT T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution >= 800",
    "question": "List the file size and format for all songs that have resolution greater than or equal to 800."
  },
  {
    "db_id": "music_1",
    "query": "SELECT DISTINCT T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution > 800",
    "question": "What are the file sizes and formats for all songs with a resolution higher than 800?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT COUNT(*) FROM files AS T1 WHERE T1.duration NOT LIKE '4:'",
    "question": "How many songs do not have 4 minute duration?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT COUNT(*) FROM files AS T1 WHERE T1.duration NOT LIKE '4:'",
    "question": "What is the count of the songs that do not last 4 minutes?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT COUNT(*) FROM artist AS T1 WHERE T1.country != 'Bangladesh'",
    "question": "How many artists are not from Bangladesh?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT COUNT(*) FROM artist AS T1 WHERE T1.country != 'Bangladesh'",
    "question": "How many artists are listed other than Bangladeshi?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = 'UK'",
    "question": "Find the names of the artists who are from UK."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = 'UK'       EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.languages = 'english'",
    "question": "What are the names of the artists that are from the UK and did not sing songs in English?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.f_id FROM files AS T1 WHERE T1.formats = 'mp4'       EXCEPT SELECT T2.f_id FROM song AS T2 WHERE T2.resolution < 1000",
    "question": "What is the id of the files that are available in the format of mp4 and not a resolution smaller than 1000?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female' OR T2.languages = 'bangla'",
    "question": "What is the country of origin of the artist who is female or produced a song in Bangla?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female' OR T2.languages = 'bangla'",
    "question": "What countries are the female artists who sang in the language Bangla or in any other language?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT AVG( T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = 'mp3' OR T2.resolution < 800",
    "question": "What is the average duration of songs that have mp3 format or resolution below 800?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT AVG( T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = 'mp3' OR T2.resolution < 800",
    "question": "What is the average song duration for the songs that are in mp3 format or whose resolution below 800?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT COUNT(*), T1.artist_name FROM artist AS T1  GROUP BY T1.artist_name",
    "question": "How many artists are named James and how many are named David?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.rating, T1.languages FROM song AS T1",
    "question": "What is the rating and language of songs?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.rating, T1.languages FROM song AS T1",
    "question": "What is the rating and language of each song?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT COUNT(*), T1.duration FROM files AS T1  GROUP BY T1.duration",
    "question": "For each duration, return the number of artists who released songs in that duration."
  },
  {
    "db_id": "music_1",
    "query": "SELECT DISTINCT T1.song_name FROM song AS T1 WHERE T1.resolution < (SELECT MIN( T22.resolution) FROM song AS T22 WHERE T22.languages = 'english')",
    "question": "Find the distinct names of all songs that have a lower resolution than some songs in English."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 WHERE T1.rating > (SELECT MAX( T22.rating) FROM song AS T22 WHERE T22.genre_is = 'blues')",
    "question": "What are the names of the songs that have a higher rating than at least one blues song?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name NOT LIKE 'love'",
    "question": "What is the name and country of origin of the artist who released a song that does not have \"love\" in its title?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name NOT LIKE 'love'",
    "question": "What are the names of the artists who released a song that does not have the word love in its title, and where are the artists from?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name, T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate NOT LIKE 'Mar'",
    "question": "List the name and gender for all artists who did not release songs in March."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name, T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate NOT LIKE 'Mar'",
    "question": "What are the names and genders of all artists who did not release songs in the month of March?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.f_id FROM files AS T1 WHERE T1.formats = 'mp4'     INTERSECT SELECT T2.f_id FROM song AS T2 WHERE T2.resolution > 720",
    "question": "What are the ids of songs that are available in both mp4 format and have resolution above 720?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.f_id FROM files AS T1 WHERE T1.formats = 'mp4'",
    "question": "What are the ids of all files that are available on mp4?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id WHERE T2.duration LIKE '%4:%'       EXCEPT SELECT T3.song_name FROM song AS T3 WHERE T3.languages = 'english'",
    "question": "List the names of all songs that have 4 minute duration but are not in English."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id WHERE T2.duration LIKE '%4:%'       EXCEPT SELECT T3.song_name FROM song AS T3 WHERE T3.languages = 'english'",
    "question": "What are the names of all songs that are approximately 4 minutes long but are not in English?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name FROM song AS T1 WHERE T1.resolution >= 500 GROUP BY T1.artist_name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the language that was used most often in songs with resolution equal or above 500?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name FROM song AS T1 WHERE T1.resolution < 500 GROUP BY T1.artist_name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the name of the artist, for each language, that has the most songs with a lower resolution than 500?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = 'UK' OR T1.gender = 'Male'",
    "question": "What are the names of artists who are from UK or are Male?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = 'UK' OR T1.gender = 'Male'",
    "question": "What are the names of all male or British artists?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 WHERE T1.genre_is = 'modern' AND T1.languages = 'english'",
    "question": "Find the names of songs whose genre is modern and language is English."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 WHERE T1.genre_is = 'modern' AND T1.languages = 'english'",
    "question": "What are the names of the songs that are modern and sung in English?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id WHERE T2.formats = 'mp3'      UNION SELECT T3.song_name FROM song AS T3 WHERE T3.resolution < 1000",
    "question": "Return the names of songs for which format is mp3 or resolution is below 1000."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id WHERE T2.formats = 'mp3'       EXCEPT SELECT T3.song_name FROM song AS T3 WHERE T3.resolution < 1000",
    "question": "What are the names of all songs that are in mp3 format and do not have a resolution lower than 1000?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = 'UK'      UNION SELECT T2.artist_name FROM artist AS T2 JOIN song AS T3 ON T2.artist_name = T3.artist_name WHERE T3.languages = 'english'",
    "question": "Return the names of singers who are from UK or released an English song."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = 'UK'      UNION SELECT T2.artist_name FROM artist AS T2 JOIN song AS T3 ON T2.artist_name = T3.artist_name WHERE T3.languages = 'english'",
    "question": "What are the names of all singers that are from the UK or released a song in English?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT AVG( T1.rating), AVG( T1.resolution) FROM song AS T1 WHERE T1.languages != 'bangla'",
    "question": "What are the average rating and resolution of songs that are not in Bangla?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT AVG( T1.rating), AVG( T1.resolution) FROM song AS T1 WHERE T1.languages != 'bangla'",
    "question": "What is the average rating and resolution of all non-bangla songs?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT MAX( T1.resolution), MIN( T1.resolution) FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id WHERE T2.duration NOT LIKE '3:'",
    "question": "What are the maximum and minimum resolution of songs whose duration is not 3 minutes?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT MAX( T1.resolution), MIN( T1.resolution) FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id WHERE T2.duration NOT LIKE '3:'",
    "question": "What is the maximum and minimum resolution of all songs that are not approximately 3 minutes long?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name, COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'english' GROUP BY T1.artist_name HAVING COUNT(*) >= 1",
    "question": "Find the names and number of works of all artists who have at least one English songs."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name, COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'english' GROUP BY T1.artist_name HAVING COUNT(*) >= 1",
    "question": "What are the names and number of works for all artists who have sung at least one song in English?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 WHERE T1.rating = (SELECT MIN( T22.rating) FROM song AS T22 WHERE T22.languages = 'english')",
    "question": "What are the names of the songs whose rating is the lowest in English?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.song_name FROM song AS T1 WHERE T1.rating != (SELECT MIN( T22.rating) FROM song AS T22 WHERE T22.languages = 'english')",
    "question": "What are the song names for every song whose rating is not equal to the minimum rating for English songs?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.f_id FROM song AS T1 WHERE T1.resolution != (SELECT MAX( T22.resolution) FROM song AS T22 WHERE T22.rating < 8)",
    "question": "What is ids of the songs whose resolution is not equal to the resolution of the song with the highest resolution and rating lower than 8?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.f_id FROM song AS T1 WHERE T1.resolution = (SELECT MAX( T22.resolution) FROM song AS T22 WHERE T22.rating < 8)",
    "question": "What is the id of every song that has a resolution equal to that of a song with a rating below 8?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.f_id FROM song AS T1 WHERE T1.resolution = (SELECT AVG( T22.resolution) FROM song AS T22 WHERE T22.genre_is = 'modern')",
    "question": "What are the ids of all songs that have the same resolution of the average resolution in the modern genre?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages != 'bangla' GROUP BY T1.artist_name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Find the top 3 artists who have the largest number of songs works whose language is not Bangla."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages != 'bangla' GROUP BY T1.artist_name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What are the top 3 artists with the largest number of songs not in the language Bangla?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.f_id, T1.genre_is, T1.artist_name FROM song AS T1 WHERE T1.languages != 'english'    ORDER BY T1.rating ASC",
    "question": "List the id, genre and artist name of non-English songs ordered by rating."
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.f_id, T1.genre_is, T1.artist_name FROM song AS T1 WHERE T1.languages != 'english'    ORDER BY T1.rating ASC",
    "question": "What is the id, genre, and name of the artist for every non-English song ordered by ascending rating?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.duration, T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is != 'pop'    ORDER BY T2.song_name ASC",
    "question": "List the duration, file size and format of songs whose genre is not pop, ordered by title?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT T1.duration, T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is != 'pop'    ORDER BY T2.song_name ASC",
    "question": "What is the duration, file size, and song format for every non-pop song, ordered by title alphabetically?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT DISTINCT T1.artist_name FROM song AS T1 WHERE T1.languages = 'english'      UNION SELECT DISTINCT T2.artist_name FROM song AS T2 WHERE T2.rating > 8",
    "question": "Find the names of the artists who have produced English songs or have received rating higher than 8."
  },
  {
    "db_id": "music_1",
    "query": "SELECT DISTINCT T1.artist_name FROM song AS T1 WHERE T1.languages = 'english'     INTERSECT SELECT DISTINCT T2.artist_name FROM song AS T2 WHERE T2.rating > 8",
    "question": "What are the names of the different artists that have produced a song in English and have also received a rating higher than 8?"
  },
  {
    "db_id": "music_1",
    "query": "SELECT DISTINCT T1.artist_name FROM artist AS T1 WHERE T1.country = 'Bangladesh'",
    "question": "Find the names of the artists who are from Bangladesh."
  },
  {
    "db_id": "music_1",
    "query": "SELECT DISTINCT T1.artist_name FROM artist AS T1 WHERE T1.country = 'Bangladesh'     INTERSECT SELECT DISTINCT T2.artist_name FROM song AS T2 WHERE T2.rating > 7",
    "question": "What are the names of the different artists from Bangladesh who received a rating higher than a 7?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name != 'Boston Red Stockings'",
    "question": "What is average salary of the players in the team not named 'Boston Red Stockings' ?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name != 'Boston Red Stockings'",
    "question": "Compute the average salary of the players in the teams other than 'Boston Red Stockings'."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE T2.year != 1998",
    "question": "What are first and last names of players participating in all star game not in 1998?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE T2.year != 1998",
    "question": "List the first and last name for players who did not participate in all star game in 1998."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.team_id, T1.rank FROM team AS T1 JOIN home_game AS T2 ON T1.team_id = T2.team_id WHERE T2.year != 2014 GROUP BY T2.team_id  ORDER BY AVG( T2.attendance) DESC LIMIT 1",
    "question": "In all years except 2014, what are the id and rank of the team that has the largest average number of attendance?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.team_id, T1.rank FROM team AS T1 JOIN home_game AS T2 ON T1.team_id = T2.team_id WHERE T2.year != 2014 GROUP BY T2.team_id  ORDER BY AVG( T2.attendance) DESC LIMIT 1",
    "question": "Find the id and rank of the team that has the highest average attendance rate in all years except 2014."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*) FROM park AS T1 WHERE T1.state != 'NY'",
    "question": "How many parks are there not in the state of NY?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*) FROM park AS T1 WHERE T1.state != 'NY'",
    "question": "Show me the number of parks that are not in the state of NY."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name_first, T1.name_last FROM player AS T1 WHERE T1.death_year != ''",
    "question": "Find all the players' first name and last name who have non-empty death record."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name_first, T1.name_last FROM player AS T1 WHERE T1.death_year != ''",
    "question": "What are the first name and last name of the players whose death record is not empty?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*) FROM player AS T1 WHERE T1.birth_country = 'USA' OR T1.bats = 'R'",
    "question": "How many players born in USA are batters? That is, have the batter value 'R' or 'L'."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*) FROM player AS T1 WHERE T1.birth_country = 'USA' OR T1.bats = 'R'",
    "question": "Count the number of players who were born in USA or have bats information 'R'."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT AVG( T1.height) FROM player AS T1 JOIN player_college AS T3 ON T1.player_id = T3.player_id JOIN college AS T2 ON T3.college_id = T2.college_id WHERE T2.name_full != 'Yale University'",
    "question": "What is the average height of the players from the colleges that are not named 'Yale University'?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT AVG( T1.height) FROM player AS T1 JOIN player_college AS T3 ON T1.player_id = T3.player_id JOIN college AS T2 ON T3.college_id = T2.college_id WHERE T2.name_full != 'Yale University'",
    "question": "Find the average height of the players who do not belong to the college called 'Yale University'."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id WHERE T2.year = 1960",
    "question": "Which players won awards in 1960? Return their first names and last names."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name_first, T1.name_last FROM player AS T1 WHERE T1.weight > 220 AND T1.height < 75",
    "question": "List players' first name and last name who have weight greater than 220 and height shorter than 75."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name_first, T1.name_last FROM player AS T1 WHERE T1.weight > 220 AND T1.height < 75",
    "question": "What are the first name and last name of the players who have weight above 220 and height below 75?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year != 2008 GROUP BY T1.team_id_winner  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Find the name and id of the team that won the most times in all the years except 2008 postseason."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*), T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name != 'Boston Red Stockings' GROUP BY T1.year",
    "question": "What is the number of wins the team Boston Red Stockings didn't get in the postseasons each year in history?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*), T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name != 'Boston Red Stockings' GROUP BY T1.year",
    "question": "For each year, return the year and the number of times the team Boston Red Stockings did not win in the postseasons."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT * FROM postseason AS T1",
    "question": "What is the information about all the postseason games that team Boston Red Stockings participated in?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT * FROM postseason AS T1",
    "question": "What are all the teams that participated in postseason games?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*) FROM postseason AS T1 WHERE T1.year = 1885 OR T1.ties = 1",
    "question": "Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason or postseason."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT SUM( T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name = 'Boston Red Stockings' OR T1.year = 2010",
    "question": "What is the total salary paid by team Boston Red Stockings or in 2010?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT SUM( T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name = 'Boston Red Stockings' OR T1.year = 2010",
    "question": "What is the total salary expenses of team Boston Red Stockings or in 2010?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.salary FROM salary AS T1 WHERE T1.year != 2001   ORDER BY T1.salary DESC LIMIT 1",
    "question": "List the 3 highest salaries of the players in any year except 2001?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.salary FROM salary AS T1 WHERE T1.year = 2010",
    "question": "What were the salary values of players in 2010?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.salary FROM salary AS T1 WHERE T1.year = 2010",
    "question": "List all the salary values players received in 2010."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*) FROM park AS T1 WHERE T1.city != 'Atlanta'",
    "question": "How many parks do not belong to Atlanta city?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 OR T2.park_name = 'Columbia Park'",
    "question": "Count the number of games taken place in park \"Columbia Park\" in 1907 or any other year."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 OR T2.city = 'Atlanta'",
    "question": "Find the number of games taken place in city Atlanta in 2000 or 2001."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT SUM( T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T2.name = 'Boston Red Stockings' OR T1.year BETWEEN 2000 AND 2010",
    "question": "What is the total home game attendance of team Boston Red Stockings or from 2000 to 2010?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT SUM( T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T2.name = 'Boston Red Stockings' OR T1.year BETWEEN 2000 AND 2010",
    "question": "How many games in total did team Boston Red Stockings or any other team attend from 2000 to 2010?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT SUM( T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' OR T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990",
    "question": "How much did the the player with first name Len or last name Barker earn between 1985 to 1990 in total?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT SUM( T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' OR T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990",
    "question": "Compute the total salary that the player with first name Len or last name Barker received between 1985 to 1990."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN batting_postseason AS T4 ON T1.player_id = T4.player_id JOIN team AS T3 ON T4.team_id = T3.team_id JOIN salary AS T2 WHERE T2.year = 2005 AND T3.name = 'Washington Nationals'       EXCEPT SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN batting_postseason AS T4 ON T4.player_id = T4.player_id JOIN team AS T3 ON T4.team_id = T3.team_id JOIN salary AS T2 WHERE T2.year = 2007 AND T3.name = 'Washington Nationals'",
    "question": "List players' first name and last name who received salary from team Washington Nationals in 2005 but not in 2007."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN batting_postseason AS T4 ON T1.player_id = T4.player_id JOIN team AS T3 ON T4.team_id = T3.team_id JOIN salary AS T2 WHERE T2.year = 2005 AND T3.name = 'Washington Nationals'      UNION SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN batting_postseason AS T4 ON T4.player_id = T4.player_id JOIN team AS T3 ON T4.team_id = T3.team_id JOIN salary AS T2 WHERE T2.year = 2007 AND T3.name = 'Washington Nationals'",
    "question": "What are the first name and last name of the players who were paid salary by team Washington Nationals in either 2005 or 2007?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT SUM( T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T2.name = 'Boston Red Stockings' OR T1.year BETWEEN 1990 AND 2000",
    "question": "Count the total number of games the team Boston Red Stockings or any other team attended from 1990 to 2000."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name FROM team AS T1 JOIN home_game AS T2 ON T1.team_id = T2.team_id WHERE T2.year != 1980   ORDER BY T2.attendance ASC LIMIT 1",
    "question": "Which team had the least number of attendances in home games in all years except 1980?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.name FROM team AS T1 JOIN home_game AS T2 ON T1.team_id = T2.team_id WHERE T2.year != 1980   ORDER BY T2.attendance ASC LIMIT 1",
    "question": "Find the team that attended the least number of home games in all years except 1980."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.state FROM park AS T1  GROUP BY T1.state HAVING COUNT(*) < 2",
    "question": "List the names of states that have less than 2 parks."
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT COUNT(*) FROM team_franchise AS T1 WHERE T1.active != 'Y'",
    "question": "How many team franchises are inactive, with active value not 'Y'?"
  },
  {
    "db_id": "baseball_1",
    "query": "SELECT T1.city FROM park AS T1  GROUP BY T1.city HAVING COUNT(*) BETWEEN 1.0 AND 3.0",
    "question": "Find all the cities that have 1.0 to 3.0 parks."
  },
  {
    "db_id": "mountain_photos",
    "query": "SELECT COUNT(*) FROM camera_lens AS T1 WHERE T1.focal_length_mm >= 15",
    "question": "How many camera lenses have a focal length longer than or equal to 15 mm?"
  },
  {
    "db_id": "mountain_photos",
    "query": "SELECT AVG( T1.Prominence) FROM mountain AS T1 WHERE T1.Country != 'Morocco'",
    "question": "What are the average prominence of the mountains not in country 'Morocco'?"
  },
  {
    "db_id": "mountain_photos",
    "query": "SELECT T1.name, T1.Height, T1.Prominence FROM mountain AS T1 WHERE T1.Range = 'Aberdare Range'",
    "question": "What are the name, height and prominence of mountains which belong to the range 'Aberdare Range'?"
  },
  {
    "db_id": "mountain_photos",
    "query": "SELECT T1.name FROM camera_lens AS T1 WHERE T1.brand = 'Sigma' AND T1.brand = 'Olympus'",
    "question": "What are the names of photos taken with the lens brand 'Sigma' and 'Olympus'?"
  },
  {
    "db_id": "mountain_photos",
    "query": "SELECT DISTINCT T1.brand FROM camera_lens AS T1",
    "question": "What are the different kinds of lens brands?"
  },
  {
    "db_id": "mountain_photos",
    "query": "SELECT COUNT(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id",
    "question": "How many camera lenses are used in taking any photos?"
  },
  {
    "db_id": "mountain_photos",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.camera_lens_id) FROM photos AS T1 JOIN mountain AS T2 ON T1.mountain_id = T2.id WHERE T2.Country != 'Ethiopia'",
    "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country other than 'Ethiopia'?"
  },
  {
    "db_id": "mountain_photos",
    "query": "SELECT T1.brand FROM camera_lens AS T1 JOIN photos AS T3 ON T1.id = T3.camera_lens_id JOIN mountain AS T2 ON T3.mountain_id = T2.id WHERE T2.Range = 'Toubkal Atlas'       EXCEPT SELECT T1.brand FROM camera_lens AS T1 JOIN photos AS T3 ON T1.id = T3.camera_lens_id JOIN mountain AS T2 ON T3.mountain_id = T2.id WHERE T2.Range = 'Lasta Massif'",
    "question": "List the brands of lenses that took pictures of mountains with range 'Toubkal Atlas' but not pictures of mountains with range 'Lasta Massif'"
  },
  {
    "db_id": "mountain_photos",
    "query": "SELECT T1.name, T1.Prominence FROM mountain AS T1      INTERSECT SELECT T2.name, T2.Prominence FROM mountain AS T2 JOIN photos AS T4 ON T2.id = T4.mountain_id JOIN camera_lens AS T3 ON T4.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'",
    "question": "Show the name and prominence of the mountains whose picture is taken by a lens of brand 'Sigma'."
  },
  {
    "db_id": "mountain_photos",
    "query": "SELECT T1.name FROM camera_lens AS T1 WHERE T1.name NOT LIKE 'Digital'",
    "question": "List the camera lens names not containing substring \"Digital\"."
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Name FROM channel AS T1 WHERE T1.Owner = 'CCTV'",
    "question": "Find the names of channels that are owned by CCTV."
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Name FROM channel AS T1 WHERE T1.Owner = 'CCTV'",
    "question": "Which channels are owned by CCTV? Give me the channel names."
  },
  {
    "db_id": "program_share",
    "query": "SELECT * FROM program AS T1",
    "question": "what are the programs?"
  },
  {
    "db_id": "program_share",
    "query": "SELECT * FROM program AS T1",
    "question": "Show all programs."
  },
  {
    "db_id": "program_share",
    "query": "SELECT SUM( T1.Share_in_percent) FROM channel AS T1 WHERE T1.Owner != 'CCTV'",
    "question": "find the total percentage share of all channels not owned by CCTV."
  },
  {
    "db_id": "program_share",
    "query": "SELECT SUM( T1.Share_in_percent) FROM channel AS T1 WHERE T1.Owner != 'CCTV'",
    "question": "What is the total share (in percent) of all the channels not owned by CCTV?"
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day != 'Morning'",
    "question": "Find the names of the channels that are not broadcast in the morning."
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = 'Morning'      UNION SELECT T3.Name FROM channel AS T3 JOIN broadcast AS T4 ON T3.Channel_ID = T4.Channel_ID WHERE T4.Time_of_day = 'Night'",
    "question": "what are the names of the channels that broadcast in either morning or night?"
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = 'Morning'      UNION SELECT T3.Name FROM channel AS T3 JOIN broadcast AS T4 ON T3.Channel_ID = T4.Channel_ID WHERE T4.Time_of_day = 'Night'",
    "question": "Which channels broadcast either in the morning or at night? Give me the channel names."
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Name FROM program AS T1",
    "question": "Give me the names of the programs."
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID WHERE T2.Time_of_day = 'Morning'      UNION SELECT T3.Owner FROM program AS T3 JOIN broadcast AS T4 ON T3.Program_ID = T4.Program_ID WHERE T4.Time_of_day = 'Night'",
    "question": "find the program owners that have some programs in morning time or night time."
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID WHERE T2.Time_of_day = 'Morning'       EXCEPT SELECT T3.Owner FROM program AS T3 JOIN broadcast AS T4 ON T3.Program_ID = T4.Program_ID WHERE T4.Time_of_day = 'Night'",
    "question": "Who are the owners of the programs that broadcast in the morning but not at night?"
  },
  {
    "db_id": "program_share",
    "query": "SELECT DISTINCT T1.Owner FROM channel AS T1",
    "question": "what are the different channel owners?"
  },
  {
    "db_id": "program_share",
    "query": "SELECT DISTINCT T1.Owner FROM channel AS T1",
    "question": "List all the distinct channel owners."
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Name FROM program AS T1 WHERE T1.Origin = 'Beijing'",
    "question": "find the names of programs whose origin is Beijing."
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Name FROM program AS T1 WHERE T1.Origin = 'Beijing'",
    "question": "Which programs' origins are \"Beijing\"? Give me the program names."
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Name FROM channel AS T1 WHERE T1.Owner = 'CCTV' AND T1.Owner = 'HBS'",
    "question": "What are the names of the channels owned by CCTV and HBS?"
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Rating_in_percent, T1.Owner FROM channel AS T1",
    "question": "Find the rating ratio and channel owner for each channel."
  },
  {
    "db_id": "program_share",
    "query": "SELECT T1.Rating_in_percent, T1.Owner FROM channel AS T1",
    "question": "What is the rating of channel for each channel owner?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT * FROM Courses AS T1",
    "question": "What are the courses?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT * FROM Courses AS T1",
    "question": "Find all the courses offered."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.course_description FROM Courses AS T1 WHERE T1.course_name != 'database'",
    "question": "What are the descriptions of the courses with name not \"database\"?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.course_description FROM Courses AS T1 WHERE T1.course_name != 'database'",
    "question": "Return the description for the courses not named \"database\"."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 WHERE T1.personal_name != 'Cathrine'",
    "question": "What are the addresses of the course authors or tutors without personal name \"Cathrine\""
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 WHERE T1.personal_name != 'Cathrine'",
    "question": "Return the addresses of the course authors or tutors whose personal name is not \"Cathrine\"."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT( T1.address_line_1) FROM Course_Authors_and_Tutors AS T1",
    "question": "How many addresses are there in the table?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT( T1.address_line_1) FROM Course_Authors_and_Tutors AS T1",
    "question": "How many address lines are there in each course author or tutor?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT DISTINCT T1.student_id FROM Student_Course_Enrolment AS T1",
    "question": "What are the distinct student ids?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT DISTINCT T1.student_id FROM Student_Course_Enrolment AS T1",
    "question": "Find the distinct students enrolled in courses."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.course_id FROM Student_Course_Enrolment AS T1",
    "question": "What are the course ids of the courses enrolled in by students?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.course_id FROM Student_Course_Enrolment AS T1",
    "question": "Find the course IDs of all courses that have enrolled students."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.date_test_taken FROM Student_Tests_Taken AS T1 WHERE T1.test_result != 'Pass'",
    "question": "Find the dates of the tests taken with result not \"Pass\"."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT(*) FROM Student_Tests_Taken AS T1 WHERE T1.test_result != 'Fail'",
    "question": "How many tests have result not \"Fail\"?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.login_name FROM Students AS T1 WHERE T1.family_name != 'Ward'",
    "question": "What are the login names of the students with family name not \"Ward\"?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.login_name FROM Students AS T1 WHERE T1.family_name != 'Ward'",
    "question": "Return the login names of the students whose family name is not \"Ward\"."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 WHERE T1.family_name = 'Jaskolski' AND T1.family_name = 'Langosh'",
    "question": "What are the dates of the latest logon of the students with family name \"Jaskolski\" and \"Langosh\"?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 WHERE T1.family_name = 'Jaskolski' AND T1.family_name = 'Langosh'",
    "question": "Find the latest logon date of the students whose family name is \"Jaskolski\" and \"Langosh\"."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT(*) FROM Students AS T1 WHERE T1.personal_name NOT LIKE 'son'",
    "question": "How many students have personal names that do not contain the word \"son\"?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT(*) FROM Students AS T1 WHERE T1.personal_name NOT LIKE 'son'",
    "question": "Find the number of students who do not have the word \"son\" in their personal names."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT( T1.subject_name) FROM Subjects AS T1",
    "question": "How many subjects are there?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT( T1.subject_name) FROM Subjects AS T1",
    "question": "How many subjects are there."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT(*) FROM Course_Authors_and_Tutors AS T1     ORDER BY T1.personal_name ASC",
    "question": "How many course authors and tutors are there in alphabetical order of the personal name?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT(*) FROM Course_Authors_and_Tutors AS T1     ORDER BY T1.personal_name ASC",
    "question": "How many course authors and tutors are there?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name != 'advanced database'",
    "question": "Find the login name of the course author that does not teach the course with name \"advanced database\"."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name != 'advanced database'",
    "question": "Which course author does not teach the \"advanced database\" course? Give me his or her login name."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.address_line_1, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id  GROUP BY T2.author_id HAVING COUNT(*) <= 2",
    "question": "Find the addresses and author IDs of the course authors that teach at most two courses."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Course_Authors_and_Tutors AS T2 ON T1.author_id = T2.author_id WHERE T2.personal_name != 'Julio'",
    "question": "Find the names of courses taught by tutors who do not have personal name \"Julio\"."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Course_Authors_and_Tutors AS T2 ON T1.author_id = T2.author_id WHERE T2.personal_name != 'Julio'",
    "question": "What are the names of the courses taught by the tutors whose personal name is not \"Julio\"?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.course_name, T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name != 'Computer Science'",
    "question": "Find the names and descriptions of courses that do not belong to the subject named \"Computer Science\"."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.course_name, T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name != 'Computer Science'",
    "question": "What are the names and descriptions of the all courses not under the \"Computer Science\" subject?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name != 'Spanish'",
    "question": "What is the date of enrollment of the course not named \"Spanish\"?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result != 'Pass'",
    "question": "Find the enrollment date for all the tests that do not have \"Pass\" result."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result != 'Fail'",
    "question": "What are the completion dates of all the tests that have result not \"Fail\"?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name != 'Karson'",
    "question": "List the dates of enrollment and completion of the students with personal name not \"Karson\"."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name != 'Karson'",
    "question": "On what dates did the students whose personal name is not \"Karson\" enroll in and complete the courses?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = 'Zieme' OR T2.personal_name = 'Bernie'",
    "question": "List the dates of enrollment and completion of the students with family name \"Zieme\" or personal name \"Bernie\"."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = 'Zieme' OR T2.personal_name = 'Bernie'",
    "question": "On what dates did the student with family name \"Zieme\" or the student with personal name \"Bernie\" enroll in and complete the courses?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.student_id, T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id HAVING COUNT(*) < 2",
    "question": "Find the student ID and personal name of the student with less than two enrollments."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.student_id, T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id HAVING COUNT(*) >= 2",
    "question": "Find the student ID and middle name for all the students with at least two enrollments."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.student_id, T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id HAVING COUNT(*) >= 2",
    "question": "What are the student IDs and middle names of the students enrolled in at least two courses?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.personal_name FROM Students AS T1      INTERSECT SELECT T2.personal_name FROM Students AS T2",
    "question": "Find the personal names of students enrolled in every course."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.personal_name FROM Students AS T1",
    "question": "Find the personal names of all students."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT(*) FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id",
    "question": "How many students have at least one course enrollment?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT COUNT(*) FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id",
    "question": "Count the number of students who enrolled in at least one course."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1        EXCEPT SELECT T2.login_name FROM Students AS T2",
    "question": "Find the login name of course authors but not students."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1       UNION SELECT T2.login_name FROM Students AS T2",
    "question": "What are the login names used by some course authors or some students?"
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.personal_name FROM Course_Authors_and_Tutors AS T1        EXCEPT SELECT T2.personal_name FROM Students AS T2",
    "question": "Find the personal name of course authors but not students."
  },
  {
    "db_id": "e_learning",
    "query": "SELECT T1.personal_name FROM Course_Authors_and_Tutors AS T1       UNION SELECT T2.personal_name FROM Students AS T2",
    "question": "What are the personal names used by some course authors or some students?"
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Date_Claim_Made, T1.Claim_ID FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID = T2.Claim_ID  GROUP BY T2.Claim_ID HAVING COUNT(*) > 2",
    "question": "Which claims caused more than 2 settlements? List the date the claim was made and the claim id."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Date_Claim_Made, T1.Claim_ID FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID = T2.Claim_ID  GROUP BY T2.Claim_ID HAVING COUNT(*) > 2",
    "question": "Find the claims that led to more than two settlements. For each of them, return the date the claim was made and the id of the claim."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Customer_Details, T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_ID = T2.Customer_ID  GROUP BY T2.Customer_ID HAVING COUNT(*) >= 2",
    "question": "Give me the the customer details and id for the customers who had two or more policies."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Date_Claim_Made, T1.Date_Claim_Settled FROM Claims AS T1 WHERE T1.Amount_Claimed != (SELECT AVG( T22.Amount_Claimed) FROM Claims AS T22)",
    "question": "Give me the claim date, settlement date for all the claims whose claimed amount is not equal to the average."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Date_Claim_Made FROM Claims AS T1 WHERE T1.Amount_Settled >= (SELECT AVG( T22.Amount_Settled) FROM Claims AS T22)",
    "question": "Among all the claims, which settlements have a claimed amount that is more than the average? List the claim start date."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT COUNT(*), T2.Amount_Claimed FROM Settlements AS T1 JOIN Claims AS T2 ON T1.Claim_ID = T2.Claim_ID  GROUP BY T2.Amount_Claimed  ORDER BY T2.Date_Claim_Settled DESC LIMIT 1",
    "question": "How many settlements were made on claims with an amount claimed of $1,000,000? List the number and the claim id."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT COUNT(*), T2.Amount_Settled FROM Settlements AS T1 JOIN Claims AS T2 ON T1.Claim_ID = T2.Claim_ID  GROUP BY T2.Amount_Settled  ORDER BY T2.Date_Claim_Settled DESC LIMIT 1",
    "question": "Find the amount settled and the number of settlements made for the claim with the most recent settlement date."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Amount_Settled FROM Settlements AS T1",
    "question": "Retrieve the amount of settlement for each settlement."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Customer_Details, T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_ID = T2.Customer_ID  GROUP BY T2.Customer_ID HAVING COUNT(*) >= 1",
    "question": "Who are the customers that had at least 1 policy? List the customer details and id."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Customer_Details, T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_ID = T2.Customer_ID  GROUP BY T2.Customer_ID HAVING COUNT(*) < 1",
    "question": "Find the the customer details and id for the customers who had less than one policy."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Customer_Details) FROM Customers AS T1",
    "question": "How many distinct details of the customers are there?"
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Customer_Details) FROM Customers AS T1",
    "question": "Return the distinct count of distinct customer details."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT * FROM Settlements AS T1",
    "question": "What are the names of all the settlements?"
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT * FROM Settlements AS T1",
    "question": "List all the settlements made."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Payment_ID, T1.Date_Payment_Made, T1.Amount_Payment FROM Payments AS T1 WHERE T1.Payment_Method_Code != 'Visa'",
    "question": "Which Payments were processed with a payment method other than Visa? List the payment Id, the date and the amount."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Payment_ID, T1.Date_Payment_Made, T1.Amount_Payment FROM Payments AS T1 WHERE T1.Payment_Method_Code != 'Visa'",
    "question": "Give me the payment Id, the date and the amount for all the payments processed with a method different than Visa."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Customer_Details FROM Customers AS T1      INTERSECT SELECT T2.Customer_Details FROM Customers AS T2",
    "question": "List the details of the customers who have both policies."
  },
  {
    "db_id": "insurance_policies",
    "query": "SELECT T1.Customer_Details FROM Customers AS T1      INTERSECT SELECT T2.Customer_Details FROM Customers AS T2",
    "question": "Which customers have both policies? Find the details of these customers."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT( T1.Name) FROM Patient AS T1",
    "question": "How many patients made an appointment?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT( T1.Name) FROM Patient AS T1",
    "question": "How many patients have made appointments?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name, T1.Phone FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient  GROUP BY T2.Patient HAVING COUNT(*) < 1",
    "question": "what are name and phone number of patients who had no appointments?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name, T1.Phone FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient  GROUP BY T2.Patient HAVING COUNT(*) >= 1",
    "question": "Which patients made at least one appointment? Tell me the name and phone number of these patients."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT( T1.Name) FROM Physician AS T1",
    "question": "How many physicians took some appointment?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT( T1.Name) FROM Physician AS T1",
    "question": "How many physicians took appointments."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Physician AS T1",
    "question": "List the name of physicians."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Physician AS T1      INTERSECT SELECT T2.Name FROM Physician AS T2",
    "question": "Which physicians have taken all appointments? Find their names."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name, T2.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head JOIN Affiliated_With AS T3 ON T2.DepartmentID = T3.Department WHERE T3.PrimaryAffiliation != 1",
    "question": "Find the names of all physicians and their non-primary affiliated departments' names."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name, T2.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head JOIN Affiliated_With AS T3 ON T2.DepartmentID = T3.Department WHERE T3.PrimaryAffiliation != 1",
    "question": "What are the name and non-primary affiliated department name of each physician?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT( T1.Patient) FROM Stay AS T1 WHERE T1.Room != 112",
    "question": "How many patients stay in rooms other than 112?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT( T1.Patient) FROM Stay AS T1 WHERE T1.Room != 112",
    "question": "Count the number of patients who did not stay in room 112."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT( T1.SSN) FROM Patient AS T1 JOIN Physician AS T2 ON T1.PCP = T2.EmployeeID WHERE T2.Name != 'John Dorian'",
    "question": "Find the number of patients' prescriptions physician John Dorian did not make."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Medication AS T1 JOIN Prescribes AS T3 ON T1.Code = T3.Medication JOIN Patient AS T4 ON T3.Patient = T4.SSN JOIN Stay AS T2 ON T4.SSN = T2.Patient WHERE T2.Room != 111",
    "question": "Find the name of medication used on the patient who does not stay in room 111?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Medication AS T1 JOIN Prescribes AS T3 ON T1.Code = T3.Medication JOIN Patient AS T4 ON T3.Patient = T4.SSN JOIN Stay AS T2 ON T4.SSN = T2.Patient WHERE T2.Room != 111",
    "question": "What is the name of the medication used for the patient staying in a room other than 111?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Patient FROM Stay AS T1 WHERE T1.Room != 111   ORDER BY T1.StayStart DESC LIMIT 1",
    "question": "Find the patient who most recently stayed in a room other than 111."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Patient FROM Stay AS T1 WHERE T1.Room != 111   ORDER BY T1.StayStart DESC LIMIT 1",
    "question": "What is the id of the patient who stayed in a room other than 111 most recently?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP  GROUP BY T1.Name HAVING COUNT(*) >= 1",
    "question": "Find the name of physicians who are in charge of at least one patient."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT(*), T2.BlockCode FROM Room AS T1 JOIN Block AS T2 ON T1.BlockFloor = T2.BlockFloor  GROUP BY T2.BlockCode",
    "question": "How many rooms does each block have?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT(*), T2.BlockFloor FROM Room AS T1 JOIN Block AS T2 ON T1.BlockFloor = T2.BlockFloor  GROUP BY T2.BlockFloor",
    "question": "How many rooms are located for each block floor?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT T1.RoomType FROM Room AS T1",
    "question": "What types of rooms are there?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT T1.RoomType FROM Room AS T1",
    "question": "Find the distinct room types available."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT T1.Name, T1.Position FROM Physician AS T1 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician JOIN Medication AS T2 ON T3.Medication = T2.Code WHERE T2.Brand != 'X'",
    "question": "Find the name and position of physicians who prescribe some medication whose brand is not X?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT T1.Name, T1.Position FROM Physician AS T1 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician JOIN Medication AS T2 ON T3.Medication = T2.Code WHERE T2.Brand != 'X'",
    "question": "Which physicians do not prescribe a medication of brand X? Tell me the name and position of those physicians."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Physician AS T1 WHERE T1.Position NOT LIKE 'senior'",
    "question": "Find the name of physicians whose position title does not contain the word 'senior'."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Physician AS T1 WHERE T1.Position NOT LIKE 'senior'",
    "question": "What are the names of the physicians who do not have 'senior' in their titles."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT T1.Name FROM Patient AS T1 JOIN Stay AS T2 ON T1.SSN = T2.Patient WHERE T2.Room != 111",
    "question": "Find the names of all patients who have an undergoing treatment and are not staying in room 111."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT T1.Name FROM Patient AS T1 JOIN Stay AS T2 ON T1.SSN = T2.Patient WHERE T2.Room != 111",
    "question": "What are the names of patients who are staying in rooms other than 111 and have an undergoing treatment?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM Nurse AS T1     ORDER BY T1.Name ASC",
    "question": "How many distinct names are there in the nurse table?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM Nurse AS T1     ORDER BY T1.Name ASC",
    "question": "How many distinct names of nurses are there?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM Nurse AS T1",
    "question": "Find the number of unique names of nurses."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM Nurse AS T1",
    "question": "How many nurses are in charge of patients undergoing treatments?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM Medication AS T1     ORDER BY T1.Name ASC",
    "question": "How many distinct medications are there?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Physician, T1.Department FROM Affiliated_With AS T1 WHERE T1.PrimaryAffiliation != 1",
    "question": "What are each physician's employee id and department id not primarily affiliated."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT T1.Name FROM Department AS T1 JOIN Affiliated_With AS T2 ON T1.DepartmentID = T2.Department WHERE T2.PrimaryAffiliation != 1",
    "question": "List the names of departments where no physicians are primarily affiliated with."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT T1.Name FROM Department AS T1 JOIN Affiliated_With AS T2 ON T1.DepartmentID = T2.Department WHERE T2.PrimaryAffiliation != 1",
    "question": "What are the names of departments that do not have primarily affiliated physicians."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Nurse FROM On_Call AS T1 WHERE T1.BlockFloor = 1 OR T1.BlockCode = 1",
    "question": "What nurses are on call with block floor 1 or block code 1? Tell me their names."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Nurse FROM On_Call AS T1 WHERE T1.BlockFloor = 1 OR T1.BlockCode = 1",
    "question": "Find the ids of the nurses who are on call in block floor 1 or block code 1."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Physician AS T1 JOIN Undergoes AS T3 ON T1.EmployeeID = T3.Physician JOIN Procedures AS T2 ON T3.Procedures = T2.Code WHERE T2.Cost <= 5000",
    "question": "Find the physicians who are trained in a procedure that costs less than or equal to 5000."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT AVG( T1.Cost) FROM Procedures AS T1 JOIN Undergoes AS T3 ON T1.Code = T3.Procedures JOIN Physician AS T2 ON T3.Physician = T2.EmployeeID WHERE T2.Name != 'John Wen'",
    "question": "What is the average cost of procedures that physician John Wen was not trained in?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Procedures AS T1 JOIN Undergoes AS T3 ON T1.Code = T3.Procedures JOIN Physician AS T2 ON T3.Physician = T2.EmployeeID WHERE T2.Name != 'John Wen'",
    "question": "Find the names of procedures which physician John Wen was not trained in."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Procedures AS T1 JOIN Undergoes AS T3 ON T1.Code = T3.Procedures JOIN Physician AS T2 ON T3.Physician = T2.EmployeeID WHERE T2.Name != 'John Wen'",
    "question": "What are the names of procedures physician John Wen was not trained in?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Procedures AS T1 WHERE T1.Cost > 1000     INTERSECT SELECT T2.Name FROM Procedures AS T2 JOIN Undergoes AS T4 ON T2.Code = T4.Procedures JOIN Physician AS T3 ON T4.Physician = T3.EmployeeID WHERE T3.Name = 'John Wen'",
    "question": "Find all procedures which cost more than 1000 and which physician John Wen was trained in."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Procedures AS T1 WHERE T1.Cost > 1000",
    "question": "What are the procedures that cost more than 1000?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Procedures AS T1 WHERE T1.Cost > 1000      UNION SELECT T2.Name FROM Procedures AS T2 JOIN Undergoes AS T4 ON T2.Code = T4.Procedures JOIN Physician AS T3 ON T4.Physician = T3.EmployeeID WHERE T3.Name = 'John Wen'",
    "question": "Find the names of all procedures which cost more than 1000 or which physician John Wen was trained in?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Procedures AS T1 WHERE T1.Cost > 1000",
    "question": "Which procedures cost more than 1000?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Procedures AS T1 WHERE T1.Cost < 5000       EXCEPT SELECT T2.Name FROM Procedures AS T2 JOIN Undergoes AS T4 ON T2.Code = T4.Procedures JOIN Physician AS T3 ON T4.Physician = T3.EmployeeID WHERE T3.Name = 'John Wen'",
    "question": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was not trained in."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Procedures AS T1 WHERE T1.Cost < 5000",
    "question": "What procedures cost less than 5000?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = 'Surgery'      UNION SELECT T3.Name FROM Physician AS T3 JOIN Department AS T4 ON T3.EmployeeID = T4.Head WHERE T4.Name = 'Psychiatry'",
    "question": "Find the name of physicians who are affiliated with either Surgery or Psychiatry departments."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = 'Surgery'",
    "question": "Which physicians are affiliated with the Surgery department? Tell me their names."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT T1.Name FROM Patient AS T1      INTERSECT SELECT T2.Name FROM Patient AS T2 JOIN Prescribes AS T4 ON T2.SSN = T4.Patient JOIN Medication AS T3 ON T4.Medication = T3.Code WHERE T3.Name = 'Procrastin-X'",
    "question": "What are the names of patients who are taking the medication of Procrastin-X."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT(*) FROM Patient AS T1 WHERE T1.SSN IN (SELECT T22.Patient FROM Prescribes AS T22 JOIN Medication AS T23 ON T22.Medication = T23.Code WHERE T23.Name = 'Procrastin-X')",
    "question": "Find the number of patients who are using the medication of Procrastin-X."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT COUNT(*) FROM Patient AS T1 WHERE T1.SSN IN (SELECT T22.Patient FROM Prescribes AS T22 JOIN Medication AS T23 ON T22.Medication = T23.Code WHERE T23.Name = 'Procrastin-X')",
    "question": "How many patients are using Procrastin-X as medication?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT * FROM Appointment AS T1",
    "question": "What are the appointments?"
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT * FROM Appointment AS T1",
    "question": "Show all appointments."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM Nurse AS T1",
    "question": "Find the number of nurses who are on call."
  },
  {
    "db_id": "hospital_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM Nurse AS T1",
    "question": "How many distinct names of nurses on call?"
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT * FROM ship AS T1",
    "question": "What are the ships?"
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT * FROM ship AS T1",
    "question": "What are the ships?"
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT T1.Name FROM ship AS T1 WHERE T1.Nationality = 'United States'",
    "question": "List the name of ships whose nationality is \"United States\"."
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT T1.Name FROM ship AS T1 WHERE T1.Nationality = 'United States'",
    "question": "What are the names of the ships that are from the United States?"
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT T1.Nationality FROM ship AS T1  GROUP BY T1.Nationality HAVING COUNT(*) >= 2",
    "question": "List the nations that have at least two ships."
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT T1.Nationality FROM ship AS T1  GROUP BY T1.Nationality HAVING COUNT(*) < 2",
    "question": "What are the nations that have less than two ships?"
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT T1.Name FROM ship AS T1 JOIN mission AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Launched_Year < 1928",
    "question": "Show names of ships involved in a mission launched before 1928."
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality != 'United States'",
    "question": "Show the distinct fate of missions that involve ships with nationality not \"United States\""
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality != 'United States'",
    "question": "What are the different fates of the mission that did not involve ships from the United States?"
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT T1.Name FROM ship AS T1 JOIN mission AS T2 ON T1.Ship_ID = T2.Ship_ID",
    "question": "List the name of ships that are involved in any mission"
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT T1.Name FROM ship AS T1 JOIN mission AS T2 ON T1.Ship_ID = T2.Ship_ID",
    "question": "What are the names of the ships that are involved in any missions?"
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT T1.Type FROM ship AS T1 WHERE T1.Tonnage > 6000",
    "question": "Show the types of ships that have tonnage larger than 6000."
  },
  {
    "db_id": "ship_mission",
    "query": "SELECT T1.Type FROM ship AS T1 WHERE T1.Tonnage > 6000       EXCEPT SELECT T2.Type FROM ship AS T2 WHERE T2.Tonnage < 4000",
    "question": "What are the types of the ships that have tonnage more than 6000 but not those with tonnage less than 4000?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT * FROM list AS T1",
    "question": "Find all the students."
  },
  {
    "db_id": "student_1",
    "query": "SELECT * FROM list AS T1",
    "question": "What are the names of the students?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.LastName FROM list AS T1 WHERE T1.Classroom != 111",
    "question": "Find the last names of students not studying in room 111."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.LastName FROM list AS T1 WHERE T1.Classroom != 111",
    "question": "What are the last names of students not in room 111?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.FirstName FROM list AS T1 WHERE T1.Classroom != 108",
    "question": "Find the first names of students not studying in room 108."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.FirstName FROM list AS T1 WHERE T1.Classroom != 108",
    "question": "What are the first names of students not in room 108?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.FirstName FROM list AS T1 WHERE T1.Classroom != 107",
    "question": "What are the first names of students not studying in room 107?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.FirstName FROM list AS T1 WHERE T1.Classroom != 107",
    "question": "List the first names of all the students not in room 107."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Classroom), T1.Grade FROM list AS T1  GROUP BY T1.Grade",
    "question": "For each grade report the number of classrooms that are taught that grade. Report just the grade number and the number of classrooms."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Classroom), T1.Grade FROM list AS T1  GROUP BY T1.Grade",
    "question": "How many classes are in each grade?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.Grade FROM list AS T1 WHERE T1.Classroom != 103",
    "question": "Which grade is not studying in classroom 103?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.Grade FROM list AS T1 WHERE T1.Classroom != 103",
    "question": "Find the grade taught in all classrooms except 103."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.Grade FROM list AS T1 WHERE T1.Classroom != 105",
    "question": "Find the grade not studying in room 105."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.Grade FROM list AS T1 WHERE T1.Classroom != 105",
    "question": "Which grade is not studying in room 105?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.Classroom FROM list AS T1 WHERE T1.Grade != 4",
    "question": "Which classrooms are not used by grade 4?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.Classroom FROM list AS T1 WHERE T1.Grade != 4",
    "question": "Find the classrooms in which grade 4 is not studying."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.Classroom FROM list AS T1 WHERE T1.Grade != 5",
    "question": "Which classrooms are not used by grade 5?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.Classroom FROM list AS T1 WHERE T1.Grade != 5",
    "question": "Show me the classrooms grade 5 is not using."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.LastName FROM teachers AS T1 JOIN list AS T2 ON T1.classroom  =  T2.classroom WHERE T2.Grade != 5",
    "question": "Find the last names of the teachers that do not teach fifth grade."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.LastName FROM teachers AS T1 JOIN list AS T2 ON T1.classroom  =  T2.classroom WHERE T2.Grade != 5",
    "question": "what are the last names of the teachers who do not teach grade 5?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.FirstName FROM teachers AS T1 JOIN list AS T2 ON T1.classroom  =  T2.classroom WHERE T2.Grade != 1",
    "question": "Find the first names of the teachers that do not teach first grade."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.FirstName FROM teachers AS T1 JOIN list AS T2 ON T1.classroom  =  T2.classroom WHERE T2.Grade != 1",
    "question": "What are the first names of the teachers who do not teach grade 1?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.FirstName FROM teachers AS T1 WHERE T1.Classroom != 110",
    "question": "Find the first names of all the teachers that do not teach in classroom 110."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.FirstName FROM teachers AS T1 WHERE T1.Classroom != 110",
    "question": "Which teachers do not teach in classroom 110? Give me their first names."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.LastName FROM teachers AS T1 WHERE T1.Classroom != 109",
    "question": "Find the last names of teachers not teaching in classroom 109."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.LastName FROM teachers AS T1 WHERE T1.Classroom != 109",
    "question": "Which teachers do not teach in classroom 109? Give me their last names."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.FirstName), T1.LastName FROM teachers AS T1  GROUP BY T1.LastName",
    "question": "Report the number of distinct first names and last name of all the teachers, grouped by last name."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.FirstName), T1.LastName FROM teachers AS T1  GROUP BY T1.LastName",
    "question": "How many distinct first names are there for each last name?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.FirstName), T1.LastName FROM list AS T1  GROUP BY T1.LastName",
    "question": "Report the number of distinct first names and last name of all the students."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.FirstName), T1.LastName FROM list AS T1  GROUP BY T1.LastName",
    "question": "Show the number of students for each last name."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'OTHA' OR T2.LastName = 'MOYER'",
    "question": "Find all students taught by OTHA MOYER or any other teacher with the same first name or last name. Output the first and last names of the students."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'MARROTTE' OR T2.LastName = 'KIRK'",
    "question": "Find all students taught by MARROTTE OR KIRK. Output first and last names of students."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'MARROTTE' OR T2.LastName = 'KIRK'",
    "question": "Which are the first and last names of the students taught by MARROTTE KIRK or any other teacher with the same first name?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM teachers AS T1 JOIN list AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'EVELINA' OR T2.LastName = 'BROMLEY'",
    "question": "Find the first and last name of all the teachers that teach EVELINA or BROMLEY."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.FirstName, T1.LastName FROM teachers AS T1 JOIN list AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'EVELINA' OR T2.LastName = 'BROMLEY'",
    "question": "Which teachers teach the student named EVELINA or BROMLEY? Give me the first and last name  of the teachers."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.LastName FROM teachers AS T1 JOIN list AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'GELL' OR T2.LastName = 'TAMI'",
    "question": "Find the last names of all the teachers that teach GELL or TAMI."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.LastName FROM teachers AS T1 JOIN list AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'GELL' OR T2.LastName = 'TAMI'",
    "question": "What are the last names of the teachers who teach the student called GELL or TAMI?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'LORIA' OR T2.LastName = 'ONDERSMA'",
    "question": "How many students does LORIA or ONDERSMA teaches?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'KAWA' OR T2.LastName = 'GORDON'",
    "question": "How many students does KAWA or GORDON teaches?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'KAWA' OR T2.LastName = 'GORDON'",
    "question": "Find the number of students taught by the teachers KAWA or GORDON."
  },
  {
    "db_id": "student_1",
    "query": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'TARRING' OR T2.LastName = 'LEIA'",
    "question": "Find the number of students taught by TARRING or LEIA."
  },
  {
    "db_id": "student_1",
    "query": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'TARRING' OR T2.LastName = 'LEIA'",
    "question": "How many students are taught by teacher TARRING or teacher LEIA?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT COUNT(*) FROM teachers AS T1 JOIN list AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'CHRISSY' OR T2.LastName = 'NABOZNY'",
    "question": "How many teachers does the student named CHRISSY or NABOZNY have?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT COUNT(*) FROM teachers AS T1 JOIN list AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'CHRISSY' OR T2.LastName = 'NABOZNY'",
    "question": "Find the number of teachers who teach the student called CHRISSY or NABOZNY."
  },
  {
    "db_id": "student_1",
    "query": "SELECT COUNT(*) FROM teachers AS T1 JOIN list AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'MADLOCK' OR T2.LastName = 'RAY'",
    "question": "How many teachers does the student named MADLOCK or RAY have?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT COUNT(*) FROM teachers AS T1 JOIN list AS T2 ON T1.classroom = T2.classroom WHERE T2.FirstName = 'MADLOCK' OR T2.LastName = 'RAY'",
    "question": "Find the number of teachers who teach the student called MADLOCK RAY or the student called MADLOCK RAY."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.FirstName, T1.LastName FROM list AS T1 WHERE T1.Grade = 1",
    "question": "Find all first-grade students. Report their first and last names."
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.FirstName, T1.LastName FROM list AS T1 WHERE T1.Grade = 1",
    "question": "What are the first and last names of the first-grade students?"
  },
  {
    "db_id": "student_1",
    "query": "SELECT DISTINCT T1.LastName FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.Grade = 3 OR T2.FirstName != 'COVIN' AND T2.LastName != 'JEROME'",
    "question": "Find the last names of the students in third grade or the last names of the students in third grade that are not taught by COVIN JEROME."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.Classroom, COUNT(*) FROM list AS T1 WHERE T1.Grade != 0 GROUP BY T1.Classroom",
    "question": "For each grade non-zero classroom, report the total number of students."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.Classroom, COUNT(*) FROM list AS T1 WHERE T1.Grade != 0 GROUP BY T1.Classroom",
    "question": "For each grade non-zero classroom, return the classroom number and the count of students."
  },
  {
    "db_id": "student_1",
    "query": "SELECT T1.Classroom, COUNT(*) FROM list AS T1 WHERE T1.Grade != 4 GROUP BY T1.Classroom",
    "question": "Report the total number of students for each classroom that does not have a fourth-grade student."
  },
  {
    "db_id": "company_employee",
    "query": "SELECT COUNT(*) FROM company AS T1 WHERE T1.Headquarters != 'USA'",
    "question": "How many companies are not headquartered in the US?"
  },
  {
    "db_id": "company_employee",
    "query": "SELECT T1.Headquarters FROM company AS T1  GROUP BY T1.Headquarters HAVING COUNT(*) <= 2",
    "question": "Show the headquarters that have at most two companies."
  },
  {
    "db_id": "company_employee",
    "query": "SELECT T1.Headquarters FROM company AS T1 WHERE T1.Industry = 'Banking'       EXCEPT SELECT T2.Headquarters FROM company AS T2 WHERE T2.Industry = 'Oil AND gas'",
    "question": "Show the headquarters that have companies in banking industry but not in oil and gas industry."
  },
  {
    "db_id": "company_employee",
    "query": "SELECT T1.Name FROM people AS T1 JOIN employment AS T3 ON T1.People_ID = T3.People_ID JOIN company AS T2 ON T3.Company_ID = T2.Company_ID WHERE T2.Sales_in_Billion < 200",
    "question": "Show the names of employees that work for companies with sales smaller than 200."
  },
  {
    "db_id": "company_employee",
    "query": "SELECT T1.Name FROM people AS T1 JOIN employment AS T2 ON T1.People_ID = T2.People_ID",
    "question": "List the names of people that are employed by any company"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT * FROM film AS T1",
    "question": "What are the films?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT * FROM film AS T1",
    "question": "Show all films."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Director) FROM film AS T1",
    "question": "Count the distinct director of all films."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Director) FROM film AS T1",
    "question": "How many different film Directors?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Gross_in_dollar FROM film AS T1",
    "question": "What are the gross in dollars of films?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Gross_in_dollar FROM film AS T1",
    "question": "Return the gross sales in dollars across all films."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Type FROM film_market_estimation AS T1 WHERE T1.Year != 1995",
    "question": "What are the types of film market estimations not in year 1995?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Type FROM film_market_estimation AS T1 WHERE T1.Year != 1995",
    "question": "Return the types of film market estimations not in 1995."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT COUNT(*) FROM market AS T1 WHERE T1.Number_cities >= 300",
    "question": "How many markets have number of cities greater than or equal to 300?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT COUNT(*) FROM market AS T1 WHERE T1.Number_cities >= 300",
    "question": "Count the number of markets that have a number of cities greater than or equal to 300."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year != 1995",
    "question": "Show the distinct director of films with market estimation not in the year of 1995."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year != 1995",
    "question": "Who are the different directors of films which did not have market estimation in 1995?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT AVG( T1.Number_cities) FROM market AS T1 JOIN film_market_estimation AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Low_Estimate < 10000",
    "question": "What is the average number of cities of markets with low film market estimate smaller than 10000?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT AVG( T1.Number_cities) FROM market AS T1 JOIN film_market_estimation AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Low_Estimate < 10000",
    "question": "Give the average number of cities within markets that had a low market estimation smaller than 10000?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country != 'Japan'    ORDER BY T1.Year DESC",
    "question": "Please list the years of film market estimations when the market is not in country \"Japan\" in descending order."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country != 'Japan'    ORDER BY T1.Year DESC",
    "question": "What are the years of film market estimation for the market of countries other than Japan, ordered by year descending?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Studio FROM film AS T1  GROUP BY T1.Studio HAVING COUNT(*) <= 2",
    "question": "List the names of studios that have at most two films."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Studio FROM film AS T1  GROUP BY T1.Studio HAVING COUNT(*) > 2",
    "question": "What are the names of studios that have made more than two films?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID",
    "question": "List the title of films that have market estimation."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID",
    "question": "What are the titles of films that have a film market estimation?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Studio FROM film AS T1 WHERE T1.Director = 'Nicholas Meyer'      UNION SELECT T2.Studio FROM film AS T2 WHERE T2.Director = 'Walter Hill'",
    "question": "Show the studios that have produced films with director \"Nicholas Meyer\" or \"Walter Hill\"."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Studio FROM film AS T1 WHERE T1.Director = 'Nicholas Meyer'",
    "question": "What are the names of studios that have produced films with Nicholas Meyer?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Title, T1.Studio FROM film AS T1 WHERE T1.Studio NOT LIKE 'Universal'",
    "question": "Find the titles and studios of the films that are not produced by the film studio \"Universal\"."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Title, T1.Studio FROM film AS T1 WHERE T1.Studio NOT LIKE 'Universal'",
    "question": "What are the titles and studios of films that have not been produced by a studio whose name contains \"Universal\"?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Studio FROM film AS T1",
    "question": "Show the studios that have produced films."
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Title, T1.Director FROM film AS T1 WHERE T1.Film_ID IN (SELECT T22.Film_ID FROM film_market_estimation AS T22 JOIN market AS T23 ON T22.Market_ID = T23.Market_ID WHERE T23.Country = 'China')",
    "question": "What are the titles and directors of the films were presented in China?"
  },
  {
    "db_id": "film_rank",
    "query": "SELECT T1.Title, T1.Director FROM film AS T1 WHERE T1.Film_ID IN (SELECT T22.Film_ID FROM film_market_estimation AS T22 JOIN market AS T23 ON T22.Market_ID = T23.Market_ID WHERE T23.Country = 'China')",
    "question": "Return the titles and directors of films that were in the market of China."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT * FROM Ref_Calendar AS T1",
    "question": "What are all the calendar items?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT * FROM Ref_Calendar AS T1",
    "question": "Show all the calendar items."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT * FROM Ref_Document_Types AS T1",
    "question": "Show all document types."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT * FROM Ref_Document_Types AS T1",
    "question": "What are the document types?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Document_Type_Code FROM Ref_Document_Types AS T1 WHERE T1.Document_Type_Name != 'Paper'",
    "question": "What is the document type code for document type that is not \"Paper\"?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Document_Type_Code FROM Ref_Document_Types AS T1 WHERE T1.Document_Type_Name != 'Paper'",
    "question": "Find the code of the document type that is not \"Paper\"."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT COUNT(*) FROM All_Documents AS T1 WHERE T1.Document_Type_Code = 'CV' AND T1.Document_Type_Code = 'BK'",
    "question": "Show the number of documents with document type code CV and document type code BK."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT COUNT(*) FROM All_Documents AS T1 WHERE T1.Document_Type_Code = 'CV' AND T1.Document_Type_Code = 'BK'",
    "question": "How many documents have document type code CV and BK?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Date_Stored FROM All_Documents AS T1 WHERE T1.Document_Name != 'Marry CV'",
    "question": "What is the date when the document \"Marry CV\" was not stored?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Document_Type_Name FROM Ref_Document_Types AS T1 JOIN All_Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name != 'How to read a book'",
    "question": "What is the document type name for the document with name not \"How to read a book\"?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Document_Type_Name FROM Ref_Document_Types AS T1 JOIN All_Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name != 'How to read a book'",
    "question": "Find the document type name of all documents except \"How to read a book\"."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT * FROM Ref_Locations AS T1",
    "question": "Show all locations."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT * FROM Ref_Locations AS T1",
    "question": "What are the names of all locations in the database?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Location_Code FROM Ref_Locations AS T1 WHERE T1.Location_Name != 'Canada'",
    "question": "What is the location code for the country that is not \"Canada\"?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Location_Code FROM Ref_Locations AS T1 WHERE T1.Location_Name != 'Canada'",
    "question": "Show the location code of all the countries except \"Canada\"."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT * FROM Roles AS T1",
    "question": "What are the roles?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT * FROM Roles AS T1",
    "question": "List all the roles."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Role_Name, T1.Role_Description FROM Roles AS T1 WHERE T1.Role_Code != 'MG'",
    "question": "What are the name and description for role code not \"MG\"?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Role_Name, T1.Role_Description FROM Roles AS T1 WHERE T1.Role_Code != 'MG'",
    "question": "Find the name and description of all the roles except \"MG\"."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Role_Description FROM Roles AS T1 WHERE T1.Role_Name != 'Proof Reader'",
    "question": "What is the description of the role not named \"Proof Reader\"?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT * FROM Employees AS T1",
    "question": "What are the names of all the employees?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT * FROM Employees AS T1",
    "question": "Find all the employees we have."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Employee_Name, T1.Role_Code, T1.Date_of_Birth FROM Employees AS T1 WHERE T1.Employee_Name != 'Armani'",
    "question": "Show the name, role code, and date of birth for the employee with name not 'Armani'."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Employee_ID FROM Employees AS T1 WHERE T1.Employee_Name != 'Ebba'",
    "question": "What is the id for the employee not called Ebba?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Employee_ID FROM Employees AS T1 WHERE T1.Employee_Name != 'Ebba'",
    "question": "Show the id of the employee whose name is not Ebba."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Employee_Name FROM Employees AS T1 WHERE T1.Role_Code != 'HR'",
    "question": "Show the names of all the employees with role not \"HR\"."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Employee_Name FROM Employees AS T1 WHERE T1.Role_Code != 'HR'",
    "question": "Which employees do not have the role with code \"HR\"? Find their names."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Role_Code FROM Employees AS T1  GROUP BY T1.Role_Code HAVING COUNT(*) > 3",
    "question": "Show all role codes with more than 3 employees."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Role_Code FROM Employees AS T1  GROUP BY T1.Role_Code HAVING COUNT(*) < 3",
    "question": "What are the roles with fewer than three employees? Give me the role codes."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Employee_Name FROM Employees AS T1 JOIN Roles AS T2 ON T1.Role_Code = T2.Role_Code WHERE T2.Role_Name != 'Editor'",
    "question": "Show the names of employees with role name not Editor."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Employee_Name FROM Employees AS T1 JOIN Roles AS T2 ON T1.Role_Code = T2.Role_Code WHERE T2.Role_Name != 'Editor'",
    "question": "Find the names of all the employees whose the role name is not \"Editor\"."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Location_Code) FROM Document_Locations AS T1",
    "question": "How many different location codes are there for documents?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Location_Code) FROM Document_Locations AS T1",
    "question": "Give me the number of distinct location codes for documents."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Location_Name FROM Ref_Locations AS T1 JOIN Document_Locations AS T3 ON T1.Location_Code = T3.Location_Code JOIN All_Documents AS T2 ON T3.Document_ID = T2.Document_ID WHERE T2.Document_Name != 'Robin CV'",
    "question": "What is the location name of the documents that are not \"Robin CV\"?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Location_Code FROM Document_Locations AS T1  GROUP BY T1.Location_Code HAVING COUNT(*) < 3",
    "question": "Show the location codes with less than 3 documents."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Location_Code FROM Document_Locations AS T1  GROUP BY T1.Location_Code HAVING COUNT(*) < 3",
    "question": "What are the codes of the locations with less than three documents?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Employee_ID FROM Employees AS T1",
    "question": "Show the ids of the employees."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Employee_ID FROM Employees AS T1      INTERSECT SELECT T2.Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed AS T2",
    "question": "Which employees authorize destruction for any document? Give me their employee ids."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Destruction_Authorised_by_Employee_ID) FROM Documents_to_be_Destroyed AS T1",
    "question": "How many employees have authorized destruction?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Destruction_Authorised_by_Employee_ID) FROM Documents_to_be_Destroyed AS T1",
    "question": "How many employees authorize document destruction?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Destroyed_by_Employee_ID) FROM Documents_to_be_Destroyed AS T1",
    "question": "How many employees have destroyed a document?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Destroyed_by_Employee_ID) FROM Documents_to_be_Destroyed AS T1",
    "question": "How many employees have destroyed documents?"
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Employee_ID FROM Employees AS T1",
    "question": "Find the employee ids of all employees."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed AS T1        EXCEPT SELECT T2.Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed AS T2",
    "question": "Show the ids of all employees who have destroyed a document but not made an authorization to do this."
  },
  {
    "db_id": "cre_Doc_Tracking_DB",
    "query": "SELECT T1.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed AS T1      INTERSECT SELECT T2.Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed AS T2",
    "question": "Which employees have destroyed a document and also made an authorization to do so? Return their employee ids."
  },
  {
    "db_id": "club_1",
    "query": "SELECT * FROM Club AS T1",
    "question": "What are the names of all the clubs?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT * FROM Club AS T1",
    "question": "List all the clubs."
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT( T1.ClubName) FROM Club AS T1",
    "question": "How many clubs are there?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT( T1.ClubName) FROM Club AS T1",
    "question": "How many clubs are there?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT * FROM Student AS T1",
    "question": "What are the students' names?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT * FROM Student AS T1",
    "question": "List all students."
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Fname) FROM Student AS T1",
    "question": "How many distinct first names are there?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Fname) FROM Student AS T1",
    "question": "Find the number of distinct first names."
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT(*) FROM Club AS T1 WHERE T1.ClubName != 'Tennis Club'",
    "question": "How many members do not belong to the club \"Tennis Club\"?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT(*) FROM Club AS T1 WHERE T1.ClubName != 'Tennis Club'",
    "question": "Count the members of the clubs that are not named \"Tennis Club\"."
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT(*) FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.Fname = 'Linda' OR T2.LName = 'Smith'",
    "question": "How many clubs does \"Linda\" or \"Smith\" belong to?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT(*) FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.Fname = 'Linda' OR T2.LName = 'Smith'",
    "question": "How many clubs does \"Linda\" or \"Smith\" have membership for?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT(*) FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.Fname = 'Tracy' OR T2.LName = 'Kim'",
    "question": "Find the number of clubs where \"Tracy\" or \"Kim\" is a member."
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT(*) FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.Fname = 'Tracy' OR T2.LName = 'Kim'",
    "question": "How many students are named \"Tracy\" OR \"Kim\"?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T2.ClubName = 'Bootup Baltimore' OR T1.Sex = 'F'",
    "question": "Find all the members of club \"Bootup Baltimore\" or all the female students. Show the first name and last name."
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T2.ClubName = 'Bootup Baltimore' OR T1.Sex = 'F'",
    "question": "Give me the first name and last name for all the members of the club \"Bootup Baltimore\" or all the female members."
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T2.ClubName = 'Hopkins Student Enterprises' OR T1.Sex = 'M'",
    "question": "Find all the members of club \"Hopkins Student Enterprises\" or all the males. Show the first name and last name."
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T2.ClubName = 'Hopkins Student Enterprises' OR T1.Sex = 'M'",
    "question": "What are the first name and last name of each member in club \"Hopkins Student Enterprises\" or male?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T2.ClubName = 'Bootup Baltimore' OR T1.Major = 600",
    "question": "Which members of \"Bootup Baltimore\" or major in \"600\"? Give me their first names and last names."
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.ClubDesc FROM Club AS T1 WHERE T1.ClubName != 'Tennis Club'",
    "question": "What is the description of the club not named \"Tennis Club\"?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.ClubDesc FROM Club AS T1 WHERE T1.ClubName != 'Pen AND Paper Gaming'",
    "question": "What is the description of the club that is not \"Pen and Paper Gaming\"?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.ClubLocation FROM Club AS T1 WHERE T1.ClubName != 'Tennis Club'",
    "question": "What is the location of the club not named \"Tennis Club\"?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.ClubLocation FROM Club AS T1 WHERE T1.ClubName != 'Tennis Club'",
    "question": "Where is the club named \"Tennis Club\" not located?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.ClubLocation FROM Club AS T1 WHERE T1.ClubName != 'Hopkins Student Enterprises'",
    "question": "Where are the clubs that are not \"Hopkins Student Enterprises\" located?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.ClubLocation FROM Club AS T1 WHERE T1.ClubName != 'Hopkins Student Enterprises'",
    "question": "Tell me the location of the club that is not \"Hopkins Student Enterprises\"."
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.ClubName FROM Club AS T1 WHERE T1.ClubLocation != 'AKW'",
    "question": "Find the name of all the clubs not at \"AKW\"."
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.ClubName FROM Club AS T1 WHERE T1.ClubLocation != 'AKW'",
    "question": "Which clubs are not located at \"AKW\"? Return the club names."
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT(*) FROM Club AS T1 WHERE T1.ClubLocation != 'HHH'",
    "question": "How many clubs are not located at \"HHH\"?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT(*) FROM Club AS T1 WHERE T1.ClubLocation != 'HHH'",
    "question": "Count the number of clubs located at any place other than \"HHH\"."
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T2.ClubName = 'Bootup Baltimore' OR T3.Position = 'President'",
    "question": "What are the first and last name of the president of the club \"Bootup Baltimore\" or the president of the club \"Bootup Baltimore\"?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T2.ClubName = 'Bootup Baltimore' OR T3.Position = 'President'",
    "question": "Who is the president of the club \"Bootup Baltimore\" or the club \"Bootup Baltimore\"? Give me the first and last name."
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T2.ClubName = 'Hopkins Student Enterprises' OR T3.Position = 'CTO'",
    "question": "Who is a member of club \"Hopkins Student Enterprises\" or \"CTO\"? Show the first name and last name."
  },
  {
    "db_id": "club_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T2.ClubName = 'Hopkins Student Enterprises' OR T3.Position = 'CTO'",
    "question": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\" or \"Hopkins Student Enterprises\"?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Position) FROM Member_of_club AS T1 JOIN Club AS T2 ON T1.ClubID = T2.ClubID WHERE T2.ClubName != 'Bootup Baltimore'",
    "question": "How many different roles are there in all the clubs except \"Bootup Baltimore\"?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Position) FROM Member_of_club AS T1 JOIN Club AS T2 ON T1.ClubID = T2.ClubID WHERE T2.ClubName != 'Bootup Baltimore'",
    "question": "Count the number of different positions in all clubs except \"Bootup Baltimore\"."
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT(*) FROM Member_of_club AS T1 JOIN Club AS T2 ON T1.ClubID = T2.ClubID JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T2.ClubName = 'Bootup Baltimore' OR T3.Age > 18",
    "question": "Count the number of members in club \"Bootup Baltimore\" or whose age is above 18."
  },
  {
    "db_id": "club_1",
    "query": "SELECT COUNT(*) FROM Member_of_club AS T1 JOIN Club AS T2 ON T1.ClubID = T2.ClubID JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T2.ClubName = 'Bootup Baltimore' OR T3.Age < 18",
    "question": "Count the number of members in club \"Bootup Baltimore\" or whose age is below 18."
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT T1.ClubName FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.city_code != 'BAL'",
    "question": "Find the names of all the clubs that have at least a member from the city with city code not \"BAL\"."
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT T1.ClubName FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.city_code != 'HOU'",
    "question": "Find the names of the clubs that have no member from the city with city code \"HOU\"."
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT T1.ClubName FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.city_code != 'HOU'",
    "question": "Which clubs have no members from the city with code \"HOU\"? Give me the names of the clubs."
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.ClubName) FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.Fname = 'Eric' OR T2.LName = 'Tai'",
    "question": "How many clubs does the student named \"Eric\" or \"Tai\" belong to?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.ClubName) FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.Fname = 'Eric' OR T2.LName = 'Tai'",
    "question": "Count the number of clubs for which the student named \"Eric\" or \"Tai\" is a member."
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT T1.ClubName FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.Fname = 'Davis' OR T2.LName = 'Steven'",
    "question": "List the clubs having \"Davis\" or \"Steven\" as a member."
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT T1.ClubName FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.Fname = 'Davis' OR T2.LName = 'Steven'",
    "question": "What are the names of the clubs that have \"Davis\" or \"Steven\" as a member?"
  },
  {
    "db_id": "club_1",
    "query": "SELECT DISTINCT T1.ClubName FROM Club AS T1 JOIN Member_of_club AS T3 ON T1.ClubID = T3.ClubID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.Advisor != 1121",
    "question": "List the clubs that have no member with advisor \"1121\"."
  },
  {
    "db_id": "club_1",
    "query": "SELECT AVG( T1.Age) FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T2.ClubName != 'Hopkins Student Enterprises'",
    "question": "On average, how old are the members in the club that is not \"Hopkins Student Enterprises\"?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27'      UNION SELECT T3.grant_amount FROM Grants AS T3 WHERE T3.grant_end_date > '1989-03-16 18:27:16'",
    "question": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' or grant were ended after '1989-03-16 18:27:16'?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27'",
    "question": "What are the grant amounts for documents sent before '1986-08-26 20:49:27'?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_Outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper'      UNION SELECT T3.project_details FROM Projects AS T3 JOIN Project_Outcomes AS T4 ON T3.project_id = T4.project_id WHERE T4.outcome_code = 'Patent'",
    "question": "List the project details of the project producing either patent or paper as outcomes."
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_Outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper'      UNION SELECT T3.project_details FROM Projects AS T3 JOIN Project_Outcomes AS T4 ON T3.project_id = T4.project_id WHERE T4.outcome_code = 'Patent'",
    "question": "What are the details of the project that is producing either patents or papers as outcomes?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT SUM( T1.grant_amount) FROM Grants AS T1 JOIN Organisations AS T3 ON T1.organisation_id = T3.organisation_id JOIN Organisation_Types AS T2 ON T3.organisation_type = T2.organisation_type WHERE T2.organisation_type_description != 'Research'",
    "question": "What is the total grant amount of the organisations described as anything other than research?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT SUM( T1.grant_amount) FROM Grants AS T1 JOIN Organisations AS T3 ON T1.organisation_id = T3.organisation_id JOIN Organisation_Types AS T2 ON T3.organisation_type = T2.organisation_type WHERE T2.organisation_type_description != 'Research'",
    "question": "What is the total amount of grant money for non-research?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.date_from, T1.date_to FROM Project_Staff AS T1 WHERE T1.project_id IN (SELECT T22.project_id FROM Project_Staff AS T22  GROUP BY T22.project_id  ORDER BY COUNT(*) DESC LIMIT 1)     INTERSECT SELECT T2.date_from, T2.date_to FROM Project_Staff AS T2 WHERE T2.role_code = 'leader'",
    "question": "List from which date and to which date these staff work: project staff of the project which hires the most staffs and project staff of the project which has the leader"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.date_from, T1.date_to FROM Project_Staff AS T1 WHERE T1.project_id IN (SELECT T22.project_id FROM Project_Staff AS T22  GROUP BY T22.project_id  ORDER BY COUNT(*) DESC LIMIT 1)       EXCEPT SELECT T2.date_from, T2.date_to FROM Project_Staff AS T2 WHERE T2.role_code = 'leader'",
    "question": "From what date and to what date do the staff work on a project that has the most staff and does not have staff in a leader role?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.organisation_id, T1.organisation_details FROM Organisations AS T1 JOIN Grants AS T2 ON T1.organisation_id = T2.organisation_id  GROUP BY T2.organisation_id HAVING SUM( T2.grant_amount) >= 6000",
    "question": "What are the ids and details for all organizations that have grants of 6000 dollars or more?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.sent_date FROM Documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T4 ON T2.organisation_id = T4.organisation_id JOIN Organisation_Types AS T3 ON T4.organisation_type = T3.organisation_type WHERE T2.grant_amount > 5000 OR T3.organisation_type_description = 'Research'",
    "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described or the grant amount is more than 5000"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.sent_date FROM Documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T4 ON T2.organisation_id = T4.organisation_id JOIN Organisation_Types AS T3 ON T4.organisation_type = T3.organisation_type WHERE T2.grant_amount > 5000 OR T3.organisation_type_description = 'Research'",
    "question": "What are the send dates for all documents that have a grant amount of more than 5000 or are involved in research?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' AND T3.grant_amount > 100",
    "question": "What are the response received dates for the documents described as 'Regular' and granted with more than 100?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' AND T3.grant_amount > 100",
    "question": "What is the response received date for the document described as Regular that was granted more than 100 dollars?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.project_details FROM Projects AS T1 WHERE T1.project_id IN (SELECT T22.project_id FROM Project_Staff AS T22 WHERE T22.role_code = 'researcher')",
    "question": "List the project details of the projects which did hire any staff for a researcher role."
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.project_details FROM Projects AS T1 WHERE T1.project_id IN (SELECT T22.project_id FROM Project_Staff AS T22 WHERE T22.role_code = 'researcher')",
    "question": "What are the details for all projects that did hire any staff in a research role?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis'       EXCEPT SELECT T3.task_details, T3.task_id, T4.project_id FROM Tasks AS T3 JOIN Projects AS T4 ON T3.project_id = T4.project_id JOIN Project_Outcomes AS T5 ON T4.project_id = T5.project_id  GROUP BY T3.project_id HAVING COUNT(*) > 2",
    "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' but not have more than 2 outcomes?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis'       EXCEPT SELECT T3.task_details, T3.task_id, T4.project_id FROM Tasks AS T3 JOIN Projects AS T4 ON T3.project_id = T4.project_id JOIN Project_Outcomes AS T5 ON T4.project_id = T5.project_id  GROUP BY T3.project_id HAVING COUNT(*) > 2",
    "question": "What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' but do not have at least 3 outcomes?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.date_from, T1.date_to FROM Project_Staff AS T1 WHERE T1.role_code != 'researcher'",
    "question": "When do all the non-researcher role staff start to work, and when do they stop working?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT DISTINCT T1.role_code FROM Project_Staff AS T1",
    "question": "What are the different roles for the staff?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT DISTINCT T1.role_code FROM Project_Staff AS T1",
    "question": "What are the different roles on the project staff?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.grant_amount, T1.organisation_id FROM Grants AS T1",
    "question": "List the grant amount and organisation id for each grant."
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.grant_amount, T1.organisation_id FROM Grants AS T1",
    "question": "What is the grant amount and the organization id for each grant?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_Outcomes AS T3 ON T1.project_id = T3.project_id JOIN Research_Outcomes AS T2 ON T3.outcome_code = T2.outcome_code WHERE T2.outcome_description NOT LIKE 'Published'",
    "question": "List the project details of the projects with the research outcome not described with the substring 'Published'."
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_Outcomes AS T2 ON T1.project_id = T2.project_id",
    "question": "List the project details for projects that have an outcome."
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_Outcomes AS T2 ON T1.project_id = T2.project_id",
    "question": "What are the details of the project with outcomes?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.document_type_code FROM Document_Types AS T1 WHERE T1.document_description NOT LIKE 'Initial'",
    "question": "Which document type is not described with the prefix 'Initial'?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.document_type_code FROM Document_Types AS T1 WHERE T1.document_description NOT LIKE 'Initial'",
    "question": "What is the type of the document whose description does not start with the word 'Initial'?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T3 ON T1.grant_id = T3.grant_id JOIN Document_Types AS T2 ON T3.document_type_code = T2.document_type_code WHERE T2.document_description = 'Regular'      UNION SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T3 ON T1.grant_id = T3.grant_id JOIN Document_Types AS T2 ON T3.document_type_code = T2.document_type_code WHERE T2.document_description = 'Initial Application'",
    "question": "For grants with either documents described as 'Regular' or documents described as 'Initial Application', list its start date."
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T3 ON T1.grant_id = T3.grant_id JOIN Document_Types AS T2 ON T3.document_type_code = T2.document_type_code WHERE T2.document_description = 'Regular'",
    "question": "For grants that have descriptions of Regular, what are their start dates?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.organisation_type_description FROM Organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details != 'quo'",
    "question": "Find the organisation type description of the organisation detailed as not 'quo'."
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.organisation_type_description FROM Organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details != 'quo'",
    "question": "What is the type description of the organization whose detail is not listed as 'quo'?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.organisation_details FROM Organisations AS T1 JOIN Organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description != 'Sponsor'    ORDER BY T1.organisation_details ASC",
    "question": "What are all the details of the organisations not described as 'Sponsor'? Sort the result in an ascending order."
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.organisation_details FROM Organisations AS T1 JOIN Organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description != 'Sponsor'    ORDER BY T1.organisation_details ASC",
    "question": "What are the details of all organizations that are not described as Sponsors and sort the results in ascending order?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT COUNT(*) FROM Project_Outcomes AS T1 WHERE T1.outcome_code != 'Patent'",
    "question": "How many outcomes are generated from all the projects except Patent?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT COUNT(*) FROM Project_Outcomes AS T1 WHERE T1.outcome_code != 'Patent'",
    "question": "How many non-patent outcomes were listed for all the projects?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT COUNT(*) FROM Project_Staff AS T1 WHERE T1.role_code = 'leader' AND T1.date_from < '1989-04-24 23:51:54'",
    "question": "How many project staff worked as leaders and started working before '1989-04-24 23:51:54'?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT COUNT(*) FROM Project_Staff AS T1 WHERE T1.role_code = 'leader' AND T1.date_from < '1989-04-24 23:51:54'",
    "question": "How many project members were leaders and started working before '1989-04-24 23:51:54'?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.outcome_description FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T3 ON T1.outcome_code = T3.outcome_code JOIN Projects AS T2 ON T3.project_id = T2.project_id WHERE T2.project_details != 'sint'",
    "question": "What are the result description of the project whose detail is not 'sint'?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.outcome_description FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T3 ON T1.outcome_code = T3.outcome_code JOIN Projects AS T2 ON T3.project_id = T2.project_id WHERE T2.project_details != 'sint'",
    "question": "What is the description for the results whose project detail is not 'sint'?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.project_details FROM Projects AS T1 WHERE T1.organisation_id NOT IN (SELECT T22.organisation_id FROM Projects AS T22  GROUP BY T22.organisation_id  ORDER BY COUNT(*) DESC LIMIT 1)",
    "question": "List the project details of the projects not launched by the organisation"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT T1.project_details FROM Projects AS T1 WHERE T1.organisation_id NOT IN (SELECT T22.organisation_id FROM Projects AS T22  GROUP BY T22.organisation_id  ORDER BY COUNT(*) DESC LIMIT 1)",
    "question": "What are the details for the projects which were not launched by the organization with the most projects?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT * FROM Tasks AS T1",
    "question": "What are all the tasks?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT * FROM Tasks AS T1",
    "question": "What are the tasks?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT COUNT(*), T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id  GROUP BY T2.project_id",
    "question": "How many tasks does each project have? List the task count and the project id."
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT COUNT(*), T2.organisation_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id  GROUP BY T2.organisation_id",
    "question": "For each organisation id, how many tasks are there?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT COUNT( T1.outcome_description) FROM Research_Outcomes AS T1",
    "question": "How many outcomes are there?"
  },
  {
    "db_id": "tracking_grants_for_research",
    "query": "SELECT COUNT( T1.outcome_description) FROM Research_Outcomes AS T1",
    "question": "How many outcomes are there?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT DISTINCT T1.city FROM Person AS T1",
    "question": "What are the different cities are they from?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT DISTINCT T1.city FROM Person AS T1",
    "question": "What are the different cities that people originate from?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT DISTINCT T1.job FROM Person AS T1",
    "question": "What type of jobs do they have?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT DISTINCT T1.job FROM Person AS T1",
    "question": "What are the different jobs listed?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1 WHERE T1.gender = 'male' OR T1.age = (SELECT MIN( T22.age) FROM Person AS T22 WHERE T22.gender = 'male')",
    "question": "Who is the youngest male or male of any age?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.age FROM Person AS T1 WHERE T1.job = 'doctor' OR T1.name = 'Zach'",
    "question": "How old is the doctor or the person named Zach?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.age FROM Person AS T1 WHERE T1.job = 'doctor' OR T1.name = 'Zach'",
    "question": "What is the age of the doctor or the person named Zach?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1 WHERE T1.age >= 30",
    "question": "Who is the person whose age is equal to or above 30?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1 WHERE T1.age <= 30",
    "question": "What is the name of the person whose age is below or equal to 30?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT COUNT(*) FROM Person AS T1 WHERE T1.age > 30 OR T1.job = 'engineer'",
    "question": "How many people whose age is greater 30 or job is engineer?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT COUNT(*) FROM Person AS T1 WHERE T1.age > 30 OR T1.job = 'engineer'",
    "question": "HOw many people are older than 30 or are engineers?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.age, T1.gender FROM Person AS T1",
    "question": "What is the age and gender for each person?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.age, T1.gender FROM Person AS T1",
    "question": "What is the age and gender of each person?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.age, T1.job FROM Person AS T1",
    "question": "What is the age and job of each person?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.age, T1.job FROM Person AS T1",
    "question": "What is age and job title for each person?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.age, T1.job FROM Person AS T1",
    "question": "What is the age and job of each person?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT COUNT(*), T1.gender FROM Person AS T1 WHERE T1.age >= 40 GROUP BY T1.gender",
    "question": "Find the number of people who is over or equal to 40 for each gender."
  },
  {
    "db_id": "network_2",
    "query": "SELECT COUNT(*), T1.gender FROM Person AS T1 WHERE T1.age > 40 GROUP BY T1.gender",
    "question": "How many people are over 40 for each gender?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1 WHERE T1.age < (SELECT MIN( T22.age) FROM Person AS T22 WHERE T22.job = 'engineer')    ORDER BY T1.age ASC",
    "question": "Find the name of people whose age is less than any engineer sorted by their age."
  },
  {
    "db_id": "network_2",
    "query": "SELECT COUNT(*) FROM Person AS T1 WHERE T1.age != (SELECT MAX( T22.age) FROM Person AS T22 WHERE T22.job = 'engineer')",
    "question": "Find the number of people whose age is not equal to the maximum age of all engineers."
  },
  {
    "db_id": "network_2",
    "query": "SELECT COUNT(*) FROM Person AS T1 WHERE T1.age = (SELECT MAX( T22.age) FROM Person AS T22 WHERE T22.job = 'engineer')",
    "question": "How many people are exactly the same age as every engineer?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend = 'Dan'",
    "question": "Find the name and age of the person who is a friend of Dan."
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend = 'Dan'       EXCEPT SELECT T3.name, T3.age FROM Person AS T3 JOIN PersonFriend AS T4 ON T3.name = T4.friend WHERE T4.friend = 'Alice'",
    "question": "What are the names and ages of every person who is a friend of Dan but not Alice?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT DISTINCT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend = 'Dan' AND T2.friend = 'Alice'",
    "question": "Find the name and age of the person who is a friend of Dan and Alice."
  },
  {
    "db_id": "network_2",
    "query": "SELECT DISTINCT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend = 'Dan' AND T2.friend = 'Alice'",
    "question": "What are the different names and ages of every friend of Dan and Alice?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend IN (SELECT T23.name FROM Person AS T23 WHERE T23.age > 40)      UNION SELECT T3.name FROM Person AS T3 JOIN PersonFriend AS T4 ON T3.name = T4.friend WHERE T4.friend IN (SELECT T25.name FROM Person AS T25 WHERE T25.age < 30)",
    "question": "Find the name of the person who has friends with age above 40 or under age 30?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend IN (SELECT T23.name FROM Person AS T23 WHERE T23.age > 40)      UNION SELECT T3.name FROM Person AS T3 JOIN PersonFriend AS T4 ON T3.name = T4.friend WHERE T4.friend IN (SELECT T25.name FROM Person AS T25 WHERE T25.age < 30)",
    "question": "What are the names of every person who has a friend over 40 or under 30?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend IN (SELECT T23.name FROM Person AS T23 WHERE T23.age > 40)     INTERSECT SELECT T3.name FROM Person AS T3 JOIN PersonFriend AS T4 ON T3.name = T4.friend WHERE T4.friend IN (SELECT T25.name FROM Person AS T25 WHERE T25.age < 30)",
    "question": "Find the name of the person who has friends with age above 40 and under age 30?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend IN (SELECT T23.name FROM Person AS T23 WHERE T23.age > 40)     INTERSECT SELECT T3.name FROM Person AS T3 JOIN PersonFriend AS T4 ON T3.name = T4.friend WHERE T4.friend IN (SELECT T25.name FROM Person AS T25 WHERE T25.age < 30)",
    "question": "What are the names of the people who are older 40 and have friends under age 30?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1      INTERSECT SELECT T2.name FROM PersonFriend AS T2 JOIN Person AS T3 ON T2.friend = T3.name WHERE T3.job = 'student'",
    "question": "Find the name of the person who has both teacher and student friends."
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1      INTERSECT SELECT T2.name FROM PersonFriend AS T2 JOIN Person AS T3 ON T2.friend = T3.name WHERE T3.job = 'student'",
    "question": "What are the names of the people who have friends who are students?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.friend FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.friend = T2.name WHERE T2.name != 'Bob'",
    "question": "Who are the friends of people other than Bob?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend != 'Bob'",
    "question": "Find the name of persons who are not friends with Bob."
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend != 'Bob'",
    "question": "What are the names of all of my friends who are not Bob?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.friend FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.friend = T2.name WHERE T1.name = 'Alice' OR T2.gender = 'female'",
    "question": "Find the friends of Alice or the female friends of Alice."
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.friend FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.friend = T2.name WHERE T1.name = 'Alice' OR T2.gender = 'male' AND T2.job = 'doctor'",
    "question": "Find the male friend of Alice or the male friend of Alice whose job is a doctor?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.friend = T2.name WHERE T2.city != 'new york city'",
    "question": "Who has a friend that is not from new york city?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.friend = T2.name WHERE T2.city != 'new york city'",
    "question": "What are the names of all friends who are not from New York?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT DISTINCT T1.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.friend = T2.name WHERE T2.age > (SELECT AVG( T23.age) FROM Person AS T23)",
    "question": "Who has friends that are older than the average age?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT DISTINCT T1.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.friend = T2.name WHERE T2.age != (SELECT AVG( T23.age) FROM Person AS T23)",
    "question": "What are the different names of friends who are not the average age for a friend?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM PersonFriend AS T1 WHERE T1.friend = 'Alice' OR T1.year = (SELECT MIN( T22.year) FROM PersonFriend AS T22 WHERE T22.friend = 'Alice')",
    "question": "Find the name of persons who are friends with Alice or have the shortest years."
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM PersonFriend AS T1 WHERE T1.friend = 'Alice' OR T1.year = (SELECT MIN( T22.year) FROM PersonFriend AS T22 WHERE T22.friend = 'Alice')",
    "question": "What are the names of all people who are friends with Alice or have been friends with Alice for the shortest amount of time?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name, T1.age, T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend = 'Alice' OR T2.year = (SELECT MAX( T23.year) FROM PersonFriend AS T23 WHERE T23.friend = 'Alice')",
    "question": "Find the name, age, and job title of persons who are friends with Alice or have the longest years."
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name, T1.age, T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.friend = 'Alice' OR T2.year = (SELECT MAX( T23.year) FROM PersonFriend AS T23 WHERE T23.friend = 'Alice')",
    "question": "What are the names, ages, and jobs of all people who are friends with Alice or have been friends with Alice for the longest amount of time?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1      INTERSECT SELECT T2.name FROM PersonFriend AS T2",
    "question": "Who is the person that has a friend?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT T1.name FROM Person AS T1",
    "question": "What are the names of all people?"
  },
  {
    "db_id": "network_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM PersonFriend AS T1 WHERE T1.friend IN (SELECT T22.name FROM Person AS T22 WHERE T22.city = 'Austin')",
    "question": "What is the total number of people who has friend living in the city of Austin."
  },
  {
    "db_id": "network_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM PersonFriend AS T1 WHERE T1.friend IN (SELECT T22.name FROM Person AS T22 WHERE T22.city = 'Austin')",
    "question": "What is the total number of people who have friends living in Austin?"
  },
  {
    "db_id": "decoration_competition",
    "query": "SELECT * FROM member AS T1",
    "question": "What are the members?"
  },
  {
    "db_id": "decoration_competition",
    "query": "SELECT T1.Country FROM member AS T1  GROUP BY T1.Country HAVING COUNT(*) < 2",
    "question": "Which countries have fewer than two members?"
  },
  {
    "db_id": "decoration_competition",
    "query": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country != 'Canada'",
    "question": "Show the distinct leader names of colleges associated with members from countries other than \"Canada\"."
  },
  {
    "db_id": "decoration_competition",
    "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID",
    "question": "List the names of members who participated in at least one round."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_type_code FROM Documents AS T1  GROUP BY T1.document_type_code HAVING COUNT(*) >= 4",
    "question": "Find the types of documents with at least 4 documents."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_type_code FROM Documents AS T1  GROUP BY T1.document_type_code HAVING COUNT(*) < 4",
    "question": "What are the codes of types of documents of which there are less than four?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.access_count FROM Documents AS T1  GROUP BY T1.access_count  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Find the total access count of all documents in the most popular document type."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.access_count FROM Documents AS T1  GROUP BY T1.access_count  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the access count of the most common document?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.access_count FROM Documents AS T1",
    "question": "What is the access count of documents?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.access_count FROM Documents AS T1",
    "question": "Find the access count for each document?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_type_code FROM Documents AS T1 WHERE T1.document_name != 'David CV'",
    "question": "Return the type code of all documents except \"David CV\"."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_name FROM Documents AS T1  GROUP BY T1.document_name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Find the list of documents that are in the most three popular type."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_name FROM Documents AS T1  GROUP BY T1.document_name  ORDER BY COUNT(*) DESC LIMIT 1   UNION SELECT T2.document_name FROM Documents AS T2  GROUP BY T2.document_name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What are the names of documents that have either one of the three most common types or one of three most common structures?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.section_title FROM Document_Sections AS T1 JOIN Documents AS T2 ON T1.document_code = T2.document_code WHERE T2.document_name != 'David CV'",
    "question": "What are all the section titles of the documents that are not named \"David CV\"?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.section_title FROM Document_Sections AS T1 JOIN Documents AS T2 ON T1.document_code = T2.document_code WHERE T2.document_name != 'David CV'",
    "question": "Give the section titles of the documents with the name different than \"David CV\"."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_name FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code",
    "question": "Find all the name of documents with sections."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_name FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code",
    "question": "What are the names of documents that have sections?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT AVG( T1.access_count) FROM Documents AS T1 JOIN Document_Functional_Areas AS T3 ON T1.document_code = T3.document_code JOIN Functional_Areas AS T2 ON T3.functional_area_code = T2.functional_area_code WHERE T2.functional_area_description != 'Acknowledgement'",
    "question": "Find the average access counts of documents without functional area \"Acknowledgement\"."
  },
  {
    "db_id": "document_management",
    "query": "SELECT AVG( T1.access_count) FROM Documents AS T1 JOIN Document_Functional_Areas AS T3 ON T1.document_code = T3.document_code JOIN Functional_Areas AS T2 ON T3.functional_area_code = T2.functional_area_code WHERE T2.functional_area_description != 'Acknowledgement'",
    "question": "What are the average access counts of documents that do not have the functional area description \"Acknowledgement\"?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_name FROM Documents AS T1",
    "question": "Find names of the document with images."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_name FROM Documents AS T1",
    "question": "What are the names of documents that have images?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_name FROM Documents AS T1 WHERE T1.document_name NOT LIKE 'CV'",
    "question": "List all the document names which does not contain \"CV\"."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_name FROM Documents AS T1 WHERE T1.document_name NOT LIKE 'CV'",
    "question": "What are the names of documents that do not contain the substring \"CV\"?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT COUNT(*) FROM Users AS T1 WHERE T1.user_login != '1'",
    "question": "Count the number of users that are not logged in."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.access_count FROM Documents AS T1  GROUP BY T1.access_count  ORDER BY COUNT(*) ASC LIMIT 1",
    "question": "Find the access count of documents with the least popular structure."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.access_count FROM Documents AS T1  GROUP BY T1.access_count  ORDER BY COUNT(*) ASC LIMIT 1",
    "question": "What is the access count of documents that have the least common structure?"
  },
  {
    "db_id": "document_management",
    "query": "SELECT COUNT(*), T1.user_login FROM Users AS T1  GROUP BY T1.user_login",
    "question": "Find the number of users in each user login."
  },
  {
    "db_id": "document_management",
    "query": "SELECT T1.document_type_code FROM Documents AS T1  GROUP BY T1.document_type_code HAVING COUNT(*) >= 2",
    "question": "What document types have at least 2 corresponding documents?"
  },
  {
    "db_id": "company_office",
    "query": "SELECT * FROM Companies AS T1",
    "question": "What are the names of all the companies?"
  },
  {
    "db_id": "company_office",
    "query": "SELECT * FROM Companies AS T1",
    "question": "Show all companies."
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.name FROM Companies AS T1 WHERE T1.Headquarters = 'USA'",
    "question": "What are the names of companies whose headquarters are \"USA\"?"
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.name FROM Companies AS T1 WHERE T1.Headquarters = 'USA'",
    "question": "Find the names of the companies whose headquarters are located in \"USA\"."
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.Profits_billion FROM Companies AS T1",
    "question": "What are the profits of companies?"
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.Profits_billion FROM Companies AS T1",
    "question": "What are the profits companies make?"
  },
  {
    "db_id": "company_office",
    "query": "SELECT MAX( T1.Sales_billion), MIN( T1.Sales_billion) FROM Companies AS T1 WHERE T1.Industry = 'Banking'",
    "question": "What are the maximum and minimum sales of the companies whose industries are \"Banking\"."
  },
  {
    "db_id": "company_office",
    "query": "SELECT MAX( T1.Sales_billion), MIN( T1.Sales_billion) FROM Companies AS T1 WHERE T1.Industry = 'Banking'",
    "question": "Find the maximum and minimum sales of the companies that are in the \"Banking\" industry."
  },
  {
    "db_id": "company_office",
    "query": "SELECT DISTINCT T1.Industry FROM Companies AS T1",
    "question": "What are the different industries that the companies are in?"
  },
  {
    "db_id": "company_office",
    "query": "SELECT DISTINCT T1.Industry FROM Companies AS T1",
    "question": "List all distinct company industries."
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.name FROM buildings AS T1 WHERE T1.Status != 'on-hold'    ORDER BY T1.Stories ASC",
    "question": "Please show the names of the buildings whose status is not \"on-hold\", in ascending order of stories."
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.name FROM buildings AS T1 WHERE T1.Status != 'on-hold'    ORDER BY T1.Stories ASC",
    "question": "Find the names of the buildings not in \"on-hold\" status, and sort them in ascending order of building stories."
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.name FROM buildings AS T1 JOIN Office_locations AS T2 ON T1.id = T2.building_id",
    "question": "List the names of buildings that have company offices."
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.name FROM buildings AS T1 JOIN Office_locations AS T2 ON T1.id = T2.building_id",
    "question": "Which buildings have company offices? Give me the building names."
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.Industry FROM Companies AS T1 WHERE T1.Headquarters = 'USA'      UNION SELECT T2.Industry FROM Companies AS T2 WHERE T2.Headquarters = 'China'",
    "question": "Show the industries of companies whose headquarters are \"USA\" or companies whose headquarters are \"China\"."
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.Industry FROM Companies AS T1 WHERE T1.Headquarters = 'USA'       EXCEPT SELECT T2.Industry FROM Companies AS T2 WHERE T2.Headquarters = 'China'",
    "question": "Which industries have companies with headquarter in \"USA\" but not companies with headquarter in \"China\"?"
  },
  {
    "db_id": "company_office",
    "query": "SELECT COUNT(*) FROM Companies AS T1 WHERE T1.Industry = 'Banking' AND T1.Industry = 'Conglomerate'",
    "question": "Find the number of companies whose industry is \"Banking\" and \"Conglomerate\","
  },
  {
    "db_id": "company_office",
    "query": "SELECT COUNT(*) FROM Companies AS T1 WHERE T1.Industry = 'Banking' AND T1.Industry = 'Conglomerate'",
    "question": "How many companies are in \"Banking\" industry and \"Conglomerate\" industry?"
  },
  {
    "db_id": "company_office",
    "query": "SELECT T1.Headquarters FROM Companies AS T1  GROUP BY T1.Headquarters HAVING COUNT(*) >= 2",
    "question": "Show the headquarters shared by two or more companies."
  },
  {
    "db_id": "solvency_ii",
    "query": "SELECT * FROM Products AS T1",
    "question": "What are the products?"
  },
  {
    "db_id": "solvency_ii",
    "query": "SELECT T1.Product_Price FROM Products AS T1 WHERE T1.Product_Name = 'Dining' AND T1.Product_Name = 'Trading Policy'",
    "question": "Show the prices of the products named \"Dining\" and \"Trading Policy\"."
  },
  {
    "db_id": "solvency_ii",
    "query": "SELECT T1.Product_Price FROM Products AS T1",
    "question": "What are the prices for products?"
  },
  {
    "db_id": "solvency_ii",
    "query": "SELECT T1.Product_Type_Code FROM Products AS T1  GROUP BY T1.Product_Type_Code HAVING COUNT(*) > 2",
    "question": "Show the product type codes that have more than two products."
  },
  {
    "db_id": "solvency_ii",
    "query": "SELECT T1.Product_Type_Code FROM Products AS T1 WHERE T1.Product_Price > 4500      UNION SELECT T2.Product_Type_Code FROM Products AS T2 WHERE T2.Product_Price < 3000",
    "question": "Show the product type codes that have either products with price higher than 4500 or products with price lower than 3000."
  },
  {
    "db_id": "solvency_ii",
    "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID  GROUP BY T1.Product_Name HAVING COUNT(*) <= 2",
    "question": "Show the names of products that are in at most two events."
  },
  {
    "db_id": "solvency_ii",
    "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID",
    "question": "List the names of products that are in events."
  },
  {
    "db_id": "entertainment_awards",
    "query": "SELECT * FROM artwork AS T1",
    "question": "What are all the artworks?"
  },
  {
    "db_id": "entertainment_awards",
    "query": "SELECT T1.Name FROM artwork AS T1 WHERE T1.Type = 'Program Talent Show'",
    "question": "List the name of artworks whose type is \"Program Talent Show\"."
  },
  {
    "db_id": "entertainment_awards",
    "query": "SELECT T1.Festival_Name FROM festival_detail AS T1 WHERE T1.Year != 2007",
    "question": "What are the names of festivals held not in year 2007?"
  },
  {
    "db_id": "entertainment_awards",
    "query": "SELECT DISTINCT T1.Type FROM artwork AS T1 JOIN nomination AS T3 ON T1.Artwork_ID = T3.Artwork_ID JOIN festival_detail AS T2 ON T3.Festival_ID = T2.Festival_ID WHERE T2.Year != 2007",
    "question": "Show distinct types of artworks that are nominated in festivals except 2007."
  },
  {
    "db_id": "entertainment_awards",
    "query": "SELECT T1.Festival_Name FROM festival_detail AS T1 JOIN nomination AS T3 ON T1.Festival_ID = T3.Festival_ID JOIN artwork AS T2 ON T3.Artwork_ID = T2.Artwork_ID WHERE T2.Type != 'Program Talent Show'",
    "question": "Show the names of festivals that have not nominated artworks of type \"Program Talent Show\"."
  },
  {
    "db_id": "entertainment_awards",
    "query": "SELECT T1.Festival_ID, T2.Festival_Name FROM nomination AS T1 JOIN festival_detail AS T2 ON T1.Festival_ID = T2.Festival_ID  GROUP BY T1.Festival_ID HAVING COUNT(*) < 2",
    "question": "Show the ids and names of festivals that have less than two nominations for artworks."
  },
  {
    "db_id": "entertainment_awards",
    "query": "SELECT T1.Year FROM festival_detail AS T1  GROUP BY T1.Year HAVING COUNT(*) >= 1",
    "question": "List the year in which there are at least one festivals."
  },
  {
    "db_id": "entertainment_awards",
    "query": "SELECT T1.Name FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID",
    "question": "List the name of artworks that are nominated."
  },
  {
    "db_id": "entertainment_awards",
    "query": "SELECT T1.Year FROM festival_detail AS T1 WHERE T1.Location = 'United States'       EXCEPT SELECT T2.Year FROM festival_detail AS T2 WHERE T2.Location != 'United States'",
    "question": "In which year are there festivals inside the 'United States' but not outside the 'United States'?"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "query": "SELECT * FROM Premises AS T1",
    "question": "What are the premises?"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.premises_type) FROM Premises AS T1",
    "question": "How many distinct premise types are there?"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "query": "SELECT T1.customer_name, T1.customer_phone FROM Customers AS T1 JOIN Mailshot_Customers AS T2 ON T1.customer_id = T2.customer_id",
    "question": "Show the name and phone of the customer who received the mailshot."
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "query": "SELECT T1.customer_name, T1.customer_phone FROM Customers AS T1 JOIN Mailshot_Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code != 'No Response'",
    "question": "Show the name and phone for customers with a mailshot with outcome code not 'No Response'."
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Mailshot_Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code = 'Order' GROUP BY T1.customer_name HAVING COUNT(*) >= 2",
    "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'."
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "query": "SELECT T1.customer_name, T1.payment_method FROM Customers AS T1 JOIN Mailshot_Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code = 'Order'",
    "question": "What are the name and payment method of customers who have mailshots in 'Order' outcome."
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.address_type_code) FROM Customer_Addresses AS T1",
    "question": "How many distinct address type codes are there for all customer addresses?"
  },
  {
    "db_id": "customers_campaigns_ecommerce",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.shipping_method_code = 'FedEx' OR T2.order_status_code = 'Paid'",
    "question": "Show the names of customers having an order with shipping method FedEx or order status Paid."
  },
  {
    "db_id": "college_3",
    "query": "SELECT * FROM Course AS T1",
    "question": "What are the courses?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT * FROM Course AS T1",
    "question": "List all courses."
  },
  {
    "db_id": "college_3",
    "query": "SELECT COUNT(*) FROM Course AS T1 WHERE T1.Credits < 2",
    "question": "Count the number of courses with less than 2 credits."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.CName FROM Course AS T1 WHERE T1.Days != 'MTW'",
    "question": "Which courses are not taught on days MTW?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.CName FROM Course AS T1 WHERE T1.Days != 'MTW'",
    "question": "What are the course names for courses NOT taught on MTW?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT COUNT(*) FROM Department AS T1 WHERE T1.Division != 'AS'",
    "question": "What is the number of departments not in Division \"AS\"?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT COUNT(*) FROM Department AS T1 WHERE T1.Division != 'AS'",
    "question": "How many departments are not in the division AS?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.DPhone FROM Department AS T1 WHERE T1.Room != '268'",
    "question": "What are the phones of departments not in Room 268?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.DPhone FROM Department AS T1 WHERE T1.Room != '268'",
    "question": "Give the phones for departments not in room 268."
  },
  {
    "db_id": "college_3",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.StuID) FROM Enrolled_in AS T1 WHERE T1.Grade != 'B'",
    "question": "Find the number of students that have at least one grade that is not \"B\"."
  },
  {
    "db_id": "college_3",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.StuID) FROM Enrolled_in AS T1 WHERE T1.Grade != 'B'",
    "question": "How many students have had at least one grade that is not a \"B\"?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 WHERE T1.Fname NOT LIKE 'a'",
    "question": "Find the first names of students whose first names do not contain letter \"a\"."
  },
  {
    "db_id": "college_3",
    "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 WHERE T1.Fname NOT LIKE 'a'",
    "question": "What are the first names for students who do not have an \"a\" in their first name?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 WHERE T1.Sex = 'M' OR T1.Building = 'NEB'",
    "question": "Find the first names and last names of male (sex is M) or faculties who live in building NEB."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 WHERE T1.Sex = 'M' OR T1.Building = 'NEB'",
    "question": "What are the full names of faculties with sex M or who live in building NEB?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Room FROM Faculty AS T1 WHERE T1.Rank = 'Professor' OR T1.Building = 'NEB'",
    "question": "Find the rooms of faculties with rank professor or who live in building NEB."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Room FROM Faculty AS T1 WHERE T1.Rank = 'Professor' OR T1.Building = 'NEB'",
    "question": "What are the rooms for members of the faculty who are professors or who live in building NEB?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.DName FROM Department AS T1 WHERE T1.Building != 'Mergenthaler'",
    "question": "Find the department name that is not in Building \"Mergenthaler\"."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.DName FROM Department AS T1 WHERE T1.Building != 'Mergenthaler'",
    "question": "What is the name of the department in the Building not Mergenthaler?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT COUNT(*) FROM Course AS T1     ORDER BY T1.Credits ASC",
    "question": "How many courses are there?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT COUNT(*) FROM Course AS T1     ORDER BY T1.Credits ASC",
    "question": "How many courses are there?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.LName FROM Student AS T1 WHERE T1.Sex != 'F'    ORDER BY T1.Age DESC",
    "question": "Find the last name of male (sex is not F) students in the descending order of age."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Lname FROM Faculty AS T1 WHERE T1.Building != 'Barton'    ORDER BY T1.Lname ASC",
    "question": "Find the last names of faculties not in building Barton in alphabetic order."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Lname FROM Faculty AS T1 WHERE T1.Building != 'Barton'    ORDER BY T1.Lname ASC",
    "question": "What are the last names of faculty not in building Barton, sorted by last name?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname FROM Faculty AS T1 WHERE T1.Rank != 'Professor'    ORDER BY T1.Fname ASC",
    "question": "Find the first names of faculties of rank other than Professor in alphabetic order."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname FROM Faculty AS T1 WHERE T1.Rank != 'Professor'    ORDER BY T1.Fname ASC",
    "question": "What are the first names for all faculty people that are not professors, ordered by first name?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.CName FROM Course AS T1 JOIN Enrolled_in AS T2 ON T1.CID = T2.CID  GROUP BY T1.CName HAVING COUNT(*) <= 5",
    "question": "What are the name of courses that have at most five enrollments?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.CName FROM Course AS T1 JOIN Enrolled_in AS T2 ON T1.CID = T2.CID  GROUP BY T1.CName HAVING COUNT(*) > 5",
    "question": "Give the names of the courses with more than five enrollments."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 JOIN Course AS T2 ON T1.FacID = T2.Instructor WHERE T2.CName != 'COMPUTER LITERACY'",
    "question": "Find the first name and last name of the instructor of course that has course name not equal to COMPUTER LITERACY"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 JOIN Course AS T2 ON T1.FacID = T2.Instructor WHERE T2.CName != 'COMPUTER LITERACY'",
    "question": "What is the full name of the instructor who does not have a course named COMPUTER LITERACY?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.DName, T1.Room FROM Department AS T1 JOIN Course AS T2 ON T1.DNO = T2.DNO WHERE T2.CName != 'INTRODUCTION TO COMPUTER SCIENCE'",
    "question": "What are the department name and room for the courses other than INTRODUCTION TO COMPUTER SCIENCE?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Enrolled_in AS T3 ON T1.StuID = T3.StuID JOIN Gradeconversion AS T2 ON T3.Grade = T2.lettergrade WHERE T2.gradepoint > 3.8",
    "question": "Find the distinct student first names of all students that have grade point above 3.8 in one course."
  },
  {
    "db_id": "college_3",
    "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Enrolled_in AS T3 ON T1.StuID = T3.StuID JOIN Gradeconversion AS T2 ON T3.Grade = T2.lettergrade WHERE T2.gradepoint < 3.8",
    "question": "What are the distinct first names for students with a grade point of less than 3.8 in at least one course?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 JOIN Member_of AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO != 520",
    "question": "Find the full names of faculties who are not members of department with department number 520."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 JOIN Member_of AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO != 520",
    "question": "What are the full names of faculty members who are not a part of department 520?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Minor_in AS T2 ON T1.StuID = T2.StuID WHERE T2.DNO != 140",
    "question": "What are the first names and last names of the students that do not minor in the department with DNO 140."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Lname FROM Faculty AS T1 JOIN Member_of AS T3 ON T1.FacID = T3.FacID JOIN Department AS T2 ON T3.DNO = T2.DNO WHERE T2.DName != 'Computer Science'",
    "question": "Find the last names of faculties who are not members of computer science department."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Lname FROM Faculty AS T1 JOIN Member_of AS T3 ON T1.FacID = T3.FacID JOIN Department AS T2 ON T3.DNO = T2.DNO WHERE T2.DName != 'Computer Science'",
    "question": "What are the last names of faculty who are not part of the computer science department?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT AVG( T1.gradepoint) FROM Gradeconversion AS T1 JOIN Enrolled_in AS T3 ON T1.lettergrade = T3.Grade JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.LName != 'Smith'",
    "question": "Find the average grade point of student whose last name is not Smith."
  },
  {
    "db_id": "college_3",
    "query": "SELECT AVG( T1.gradepoint) FROM Gradeconversion AS T1 JOIN Enrolled_in AS T3 ON T1.lettergrade = T3.Grade JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.LName != 'Smith'",
    "question": "What is the average gradepoint for students with the last name not Smith?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT MAX( T1.gradepoint), MIN( T1.gradepoint) FROM Gradeconversion AS T1 JOIN Enrolled_in AS T3 ON T1.lettergrade = T3.Grade JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.city_code != 'NYC'",
    "question": "What is the maximum and minimum grade point of students who do not live in NYC?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.CName FROM Course AS T1 WHERE T1.Credits = 3     INTERSECT SELECT T2.CName FROM Course AS T2 WHERE T2.Credits = 1 AND T2.Hours = '4'",
    "question": "Find the names of courses that have both 3 credits and 1 credit but 4 hours."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.CName FROM Course AS T1 WHERE T1.Credits = 3",
    "question": "What are the names of courses that give 3 credits?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.DName FROM Department AS T1 WHERE T1.Division = 'AS'       EXCEPT SELECT T2.DName FROM Department AS T2 WHERE T2.Division = 'EN' AND T2.Building = 'NEB'",
    "question": "Find the names of departments that are in division AS but not in division EN and in Building NEB."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.DName FROM Department AS T1 WHERE T1.Division = 'AS'",
    "question": "What are the names of departments in division AS?"
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID",
    "question": "Find the first name of students enrolled in any course."
  },
  {
    "db_id": "college_3",
    "query": "SELECT T1.Fname FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID",
    "question": "What are the first names of all students that are enrolled in courses?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.product_type_code FROM Products AS T1",
    "question": "Find the product types."
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.product_type_code FROM Products AS T1",
    "question": "List all the distinct product types."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.address_details FROM Addresses AS T1 JOIN Customer_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id != 10",
    "question": "Return the address of all customers except customer 10."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.address_details FROM Addresses AS T1 JOIN Customer_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id != 10",
    "question": "What are the addresses for the customers with id not equal to 10?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.staff_id, T1.staff_gender FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code != 'Department Manager'",
    "question": "What are the staff ids and genders of all staffs whose job title is not Department Manager?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_type_code, T1.product_name, T1.product_price FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id WHERE T2.supplier_id != 3",
    "question": "Give me the product type, name and price for all the products not supplied by supplier id 3."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_type_code, T1.product_name, T1.product_price FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id WHERE T2.supplier_id != 3",
    "question": "Return the product type, name, and price for products not supplied by supplier 3."
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code != 'Pending'    ORDER BY T2.customer_id ASC",
    "question": "Return the distinct name of customers whose order status is not Pending, in the order of customer id."
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code != 'Pending'    ORDER BY T2.customer_id ASC",
    "question": "What are the distinct names of customers with an order status that is not Pending, sorted by customer id?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.customer_name, T1.customer_address FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'New'      UNION SELECT T3.customer_name, T3.customer_address FROM Customers AS T3 JOIN Customer_Orders AS T4 ON T3.customer_id = T4.customer_id WHERE T4.order_status_code = 'Pending'",
    "question": "Find the name and address of the customers who have either New or Pending orders."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.customer_name, T1.customer_address FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'New'",
    "question": "What are the names and addresses of customers who have New orders?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_id FROM Product_Suppliers AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2 OR T2.product_price > (SELECT AVG( T23.product_price) FROM Products AS T23)",
    "question": "Return ids of all the products that are supplied by supplier id 2 or are more expensive than the average price of all products."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.dept_store_id, T1.store_name FROM Department_Stores AS T1 JOIN Departments AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T2.department_name = 'marketing'",
    "question": "What are the ids and names of department stores with the marketing department?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_type_code FROM Products AS T1  GROUP BY T1.product_type_code HAVING AVG( T1.product_price) = (SELECT AVG( T22.product_price) FROM Products AS T22)",
    "question": "Find the product type whose average price is equal to the average price of all products."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_type_code FROM Products AS T1  GROUP BY T1.product_type_code HAVING AVG( T1.product_price) < (SELECT AVG( T22.product_price) FROM Products AS T22)",
    "question": "What is the code of the product type with an average price lower than the average price of all products?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.customer_id FROM Customer_Orders AS T1 WHERE T1.order_date = (SELECT MIN( T22.order_date) FROM Customer_Orders AS T22 WHERE T22.order_status_code = 'Cancelled')",
    "question": "Find the ids of all distinct customers who made order on the same day as the earliest order that was Cancelled."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.staff_id FROM Staff_Department_Assignments AS T1 WHERE T1.date_assigned_to = (SELECT MAX( T22.date_assigned_to) FROM Staff_Department_Assignments AS T22 WHERE T22.job_title_code = 'Clerical Staff')",
    "question": "What is id of the staff who had a Staff Department Assignment at the same time as the most recent Clerical Staff?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.staff_id FROM Staff_Department_Assignments AS T1 WHERE T1.date_assigned_to > (SELECT MAX( T22.date_assigned_to) FROM Staff_Department_Assignments AS T22 WHERE T22.job_title_code = 'Clerical Staff')",
    "question": "Return the id of the staff whose Staff Department Assignment was later than that of any Clerical Staff."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.customer_name, T1.customer_id FROM Customers AS T1 WHERE T1.customer_address NOT LIKE 'TN'",
    "question": "What are the names and ids of customers whose address does not contain TN?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.customer_name, T1.customer_id FROM Customers AS T1 WHERE T1.customer_address NOT LIKE 'TN'",
    "question": "Return the names and ids of customers who do not have TN in their address."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.staff_name, T1.staff_gender FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from NOT LIKE '2016'",
    "question": "Return the name and gender of the staff who was not assigned in 2016."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.staff_name FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id  GROUP BY T1.staff_name HAVING COUNT(*) >= 1",
    "question": "What are the names of staff who have been assigned at least one job?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.customer_phone FROM Customers AS T1        EXCEPT SELECT T2.supplier_phone FROM Suppliers AS T2",
    "question": "What are the phone numbers of all customers but not suppliers."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.customer_phone FROM Customers AS T1",
    "question": "Return the phone numbers for all customers."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_id FROM Order_Items AS T1  GROUP BY T1.product_id HAVING COUNT(*) > 3",
    "question": "Return the ids of all products that were ordered more than three times."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_id FROM Order_Items AS T1  GROUP BY T1.product_id HAVING COUNT(*) > 3",
    "question": "What are the ids of all products that were ordered more than 3 times?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_id, T1.product_name FROM Products AS T1 WHERE T1.product_price < 600 AND T1.product_price > 900",
    "question": "What are id and name of the products whose price is lower than 600 and higher than 900?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_id, T1.product_name FROM Products AS T1 WHERE T1.product_price < 600 AND T1.product_price > 900",
    "question": "Give the ids and names of products with price lower than 600 and higher than 900."
  },
  {
    "db_id": "department_store",
    "query": "SELECT AVG( T1.total_amount_purchased), AVG( T1.total_value_purchased) FROM Product_Suppliers AS T1 WHERE T1.supplier_id < (SELECT T22.supplier_id FROM Product_Suppliers AS T22  GROUP BY T22.supplier_id  ORDER BY COUNT(*) DESC LIMIT 1)",
    "question": "What are the average amount purchased and value purchased for the suppliers who supply less products than the supplier who supplies the most products."
  },
  {
    "db_id": "department_store",
    "query": "SELECT AVG( T1.total_amount_purchased), AVG( T1.total_value_purchased) FROM Product_Suppliers AS T1 WHERE T1.supplier_id > (SELECT T22.supplier_id FROM Product_Suppliers AS T22  GROUP BY T22.supplier_id  ORDER BY COUNT(*) DESC LIMIT 1)",
    "question": "Return the average total amount purchased and total value purchased for the suppliers who supply more than the supplier who supplies the greatest number of products."
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T3 ON T1.customer_id = T3.customer_id JOIN Order_Items AS T4 ON T3.order_id = T4.order_id JOIN Products AS T2 ON T4.product_id = T2.product_id WHERE T2.product_name != 'keyboard'",
    "question": "What are the distinct names of customers who have not purchased a keyboard?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.supplier_name, T1.supplier_phone FROM Suppliers AS T1 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id JOIN Products AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name != 'red jeans'",
    "question": "List the names and phone numbers of all the distinct suppliers who supply products other than red jeans."
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.supplier_name, T1.supplier_phone FROM Suppliers AS T1 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id JOIN Products AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name != 'red jeans'",
    "question": "What are the distinct names and phone numbers for suppliers who do not have red jeans?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.order_id, T1.customer_id FROM Customer_Orders AS T1 WHERE T1.order_status_code != 'Cancelled'    ORDER BY T1.order_date ASC",
    "question": "List the order id, customer id for orders not in Cancelled status, ordered by their order dates."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.order_id, T1.customer_id FROM Customer_Orders AS T1 WHERE T1.order_status_code != 'Cancelled'    ORDER BY T1.order_date ASC",
    "question": "What are the order ids and customer ids for orders that have not been Cancelled, sorted by their order dates?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.product_name FROM Products AS T1 JOIN Order_Items AS T3 ON T1.product_id = T3.product_id JOIN Customer_Orders AS T2 ON T3.order_id = T2.order_id  GROUP BY T1.product_name HAVING COUNT( T2.customer_id) > 2",
    "question": "Find the names of products that were bought by more than two distinct customers."
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.product_name FROM Products AS T1 JOIN Order_Items AS T3 ON T1.product_id = T3.product_id JOIN Customer_Orders AS T2 ON T3.order_id = T2.order_id  GROUP BY T1.product_name HAVING COUNT( T2.customer_id) > 2",
    "question": "What are the distinct names of products purchased by more than two different customers?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T3 ON T1.customer_id = T3.customer_id JOIN Order_Items AS T2 ON T3.order_id = T2.order_id  GROUP BY T1.customer_name HAVING COUNT( T2.product_id) < 3",
    "question": "Find the names of customers who have bought by less than three distinct products."
  },
  {
    "db_id": "department_store",
    "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T3 ON T1.customer_id = T3.customer_id JOIN Order_Items AS T2 ON T3.order_id = T2.order_id  GROUP BY T1.customer_name HAVING COUNT( T2.product_id) <= 3",
    "question": "What are the distinct names of customers who have purchased at most three different products?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.staff_name, T1.staff_gender FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Sales Person'      UNION SELECT T3.staff_name, T3.staff_gender FROM Staff AS T3 JOIN Staff_Department_Assignments AS T4 ON T3.staff_id = T4.staff_id WHERE T4.job_title_code = 'Clerical Staff'",
    "question": "Find the name and gender of the staff who has been assigned the job of Sales Person or Clerical Staff."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.staff_name, T1.staff_gender FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Sales Person'     INTERSECT SELECT T3.staff_name, T3.staff_gender FROM Staff AS T3 JOIN Staff_Department_Assignments AS T4 ON T3.staff_id = T4.staff_id WHERE T4.job_title_code = 'Clerical Staff'",
    "question": "What are the names and genders of staff who have held both the title Sales Person and Clerical Staff?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.customer_id, T1.customer_name FROM Customers AS T1 WHERE T1.customer_address LIKE '%WY%' OR T1.payment_method_code != 'Credit Card'",
    "question": "Find the id and name of customers whose address contains WY state or do not use credit card for payment."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.customer_id, T1.customer_name FROM Customers AS T1 WHERE T1.customer_address LIKE '%WY%' OR T1.payment_method_code != 'Credit Card'",
    "question": "What are the ids and names of customers with addressed that contain WY or who do not use a credit card for payment?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT AVG( T1.product_price) FROM Products AS T1 WHERE T1.product_type_code != 'Clothes'",
    "question": "Find the average price of all product except clothes."
  },
  {
    "db_id": "department_store",
    "query": "SELECT AVG( T1.product_price) FROM Products AS T1 WHERE T1.product_type_code != 'Clothes'",
    "question": "What is the average price of all products that are not clothes?"
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_name FROM Products AS T1 WHERE T1.product_type_code != 'Hardware'   ORDER BY T1.product_price DESC LIMIT 1",
    "question": "Find the name of the most expensive non-hardware product."
  },
  {
    "db_id": "department_store",
    "query": "SELECT T1.product_name FROM Products AS T1 WHERE T1.product_type_code != 'Hardware'   ORDER BY T1.product_price DESC LIMIT 1",
    "question": "What is the name of the non-hardware product with the greatest price?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT * FROM aircraft AS T1",
    "question": "What are the aircrafts?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT * FROM aircraft AS T1",
    "question": "What are the aircraft?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT COUNT( T1.Description) FROM aircraft AS T1",
    "question": "How many aircrafts are there?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT COUNT( T1.Description) FROM aircraft AS T1",
    "question": "How many descriptions are there for the aircrafts?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.International_Passengers, T1.Domestic_Passengers FROM airport AS T1 WHERE T1.Airport_Name != 'London Heathrow'",
    "question": "What are the number of international and domestic passengers of the airports not named London \"Heathrow\"?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT SUM( T1.Domestic_Passengers) FROM airport AS T1 WHERE T1.Airport_Name NOT LIKE 'London'",
    "question": "What are the total number of Domestic Passengers of airports that do not contain the word \"London\"."
  },
  {
    "db_id": "aircraft",
    "query": "SELECT SUM( T1.Domestic_Passengers) FROM airport AS T1 WHERE T1.Airport_Name NOT LIKE 'London'",
    "question": "What are the total number of domestic passengers at all airports except London?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Name FROM pilot AS T1 WHERE T1.Age > 25",
    "question": "What are the name of pilots aged more than 25?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Name FROM pilot AS T1 WHERE T1.Age > 25",
    "question": "what is the name of every pilot who is older than 25 years old?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID JOIN airport AS T2 ON T3.Airport_ID = T2.Airport_ID WHERE T2.Airport_Name != 'London Gatwick'",
    "question": "What are the names of all the aircrafts associated with all airports except London Gatwick airport?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Aircraft, T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID JOIN airport AS T2 ON T3.Airport_ID = T2.Airport_ID WHERE T2.Total_Passengers < 10000000",
    "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers smaller than 10000000."
  },
  {
    "db_id": "aircraft",
    "query": "SELECT AVG( T1.Total_Passengers) FROM airport AS T1 JOIN airport_aircraft AS T3 ON T1.Airport_ID = T3.Airport_ID JOIN aircraft AS T2 ON T3.Aircraft_ID = T2.Aircraft_ID WHERE T2.Aircraft != 'Robinson R-22'",
    "question": "What is the average total number of passengers of airports that are associated with aircraft other than \"Robinson R-22\"?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT AVG( T1.Total_Passengers) FROM airport AS T1 JOIN airport_aircraft AS T3 ON T1.Airport_ID = T3.Airport_ID JOIN aircraft AS T2 ON T3.Aircraft_ID = T2.Aircraft_ID WHERE T2.Aircraft != 'Robinson R-22'",
    "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" does not visit?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft  GROUP BY T1.Aircraft HAVING COUNT(*) > 2",
    "question": "List the names of aircrafts and that won matches more than twice."
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft  GROUP BY T1.Aircraft HAVING COUNT(*) > 2",
    "question": "What are the names of all aircrafts that have won a match more than twice?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft",
    "question": "List the names of aircrafts that won at least one match."
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft",
    "question": "What are the names of all aircrafts that have won at least one match?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID JOIN airport AS T2 ON T3.Airport_ID = T2.Airport_ID WHERE T2.Airport_Name = 'London Heathrow'",
    "question": "Show the names of aircrafts that are associated with an airport named \"London Heathrow\""
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID JOIN airport AS T2 ON T3.Airport_ID = T2.Airport_ID WHERE T2.Airport_Name = 'London Heathrow'      UNION SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID JOIN airport AS T2 ON T3.Airport_ID = T2.Airport_ID WHERE T2.Airport_Name = 'London Gatwick'",
    "question": "What are the names of all aircrafts that are associated with either London Heathrow or Gatwick airports?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT COUNT(*) FROM airport AS T1    ORDER BY T1.International_Passengers DESC LIMIT 1",
    "question": "Show the number of airports that have the largest number of international passengers."
  },
  {
    "db_id": "aircraft",
    "query": "SELECT COUNT(*) FROM airport AS T1    ORDER BY T1.International_Passengers DESC LIMIT 1",
    "question": "How many airports are there?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Name, T1.Age FROM pilot AS T1 JOIN match AS T2 ON T1.Pilot_Id = T2.Winning_Pilot WHERE T1.Age > 30 GROUP BY T2.Winning_Pilot  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "find the name and age of the pilot who has won the most number of times among the pilots who are older than 30."
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Name, T1.Age FROM pilot AS T1 JOIN match AS T2 ON T1.Pilot_Id = T2.Winning_Pilot WHERE T1.Age > 30 GROUP BY T2.Winning_Pilot  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the name and age of the pilot older than 30 who has won the most number of times?"
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Name FROM pilot AS T1 WHERE T1.Pilot_Id IN (SELECT T22.Winning_Pilot FROM match AS T22 WHERE T22.Country = 'Australia')",
    "question": "find the name of pilots who won the matches held in the country of Australia."
  },
  {
    "db_id": "aircraft",
    "query": "SELECT T1.Name FROM pilot AS T1 WHERE T1.Pilot_Id IN (SELECT T22.Winning_Pilot FROM match AS T22 WHERE T22.Country = 'Australia')",
    "question": "What are the names of the pilots that have won a match in Australia?"
  },
  {
    "db_id": "local_govt_and_lot",
    "query": "SELECT DISTINCT T1.service_type_code FROM Services AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details != 'Denesik AND Sons Party'",
    "question": "What is the distinct service types that are provided by the organization which does not have detail 'Denesik and Sons Party'?"
  },
  {
    "db_id": "local_govt_and_lot",
    "query": "SELECT T1.customer_id, T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T2.customer_id HAVING COUNT(*) < 3",
    "question": "What are the id and details of the customers who have less than 3 events?"
  },
  {
    "db_id": "local_govt_and_lot",
    "query": "SELECT DISTINCT T1.thing_id, T1.Type_of_Thing_Code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = 'Close' AND T2.Date_and_Date < '2017-06-19 02:59:21'",
    "question": "What are the distinct id and type of the thing that has the status 'Close' and has a status record before the date '2017-06-19 02:59:21'"
  },
  {
    "db_id": "local_govt_and_lot",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Location_Code) FROM Timed_Locations_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.service_details != 'Unsatisfied'",
    "question": "How many distinct locations have the things with service detail not 'Unsatisfied' been located in?"
  },
  {
    "db_id": "local_govt_and_lot",
    "query": "SELECT DISTINCT T1.Status_of_Thing_Code FROM Timed_Status_of_Things AS T1",
    "question": "What are the different status codes of things?"
  },
  {
    "db_id": "local_govt_and_lot",
    "query": "SELECT T1.organization_id FROM Organizations AS T1       UNION SELECT T2.parent_organization_id FROM Organizations AS T2",
    "question": "Which organizations are either a parent organization of others or are themselves a parent organization? List the organization id."
  },
  {
    "db_id": "local_govt_and_lot",
    "query": "SELECT T1.other_details FROM Residents AS T1 WHERE T1.other_details NOT LIKE 'Miss'",
    "question": "What are the resident details not containing the substring 'Miss'?"
  },
  {
    "db_id": "local_govt_and_lot",
    "query": "SELECT COUNT(*) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
    "question": "How many customers have at least one event?"
  },
  {
    "db_id": "local_govt_and_lot",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.date_moved_in) FROM Residents AS T1",
    "question": "How many distinct move in dates are there in the residents?"
  },
  {
    "db_id": "school_player",
    "query": "SELECT * FROM school AS T1",
    "question": "What are the names of all the schools?"
  },
  {
    "db_id": "school_player",
    "query": "SELECT * FROM school AS T1",
    "question": "Show all the schools."
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Enrollment FROM school AS T1 WHERE T1.Denomination = 'Catholic'",
    "question": "What are the enrollments of schools whose denomination is \"Catholic\"?"
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Enrollment FROM school AS T1 WHERE T1.Denomination = 'Catholic'",
    "question": "List the enrollment for each school that has \"Catholic\" as denomination."
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Enrollment FROM school AS T1",
    "question": "What is the enrollment of schools?"
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Enrollment FROM school AS T1",
    "question": "Take the school enrollment."
  },
  {
    "db_id": "school_player",
    "query": "SELECT DISTINCT T1.Position FROM player AS T1",
    "question": "What are the different positions of players?"
  },
  {
    "db_id": "school_player",
    "query": "SELECT DISTINCT T1.Position FROM player AS T1",
    "question": "List all distinct player positions."
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Location FROM school AS T1 JOIN player AS T2 ON T1.School_ID = T2.School_ID  GROUP BY T1.Location HAVING COUNT(*) < 1",
    "question": "Show the locations of schools that have less than 1 player."
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Location FROM school AS T1 JOIN player AS T2 ON T1.School_ID = T2.School_ID  GROUP BY T1.Location HAVING COUNT(*) < 1",
    "question": "Which schools have less than 1 player? Give me the school locations."
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Location FROM school AS T1 JOIN player AS T2 ON T1.School_ID = T2.School_ID",
    "question": "List the locations of schools that have at least one player."
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Location FROM school AS T1 JOIN player AS T2 ON T1.School_ID = T2.School_ID",
    "question": "Give me the school locations for schools that have at least one player."
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Denomination FROM school AS T1 WHERE T1.Founded < 1890       EXCEPT SELECT T2.Denomination FROM school AS T2 WHERE T2.Founded > 1900",
    "question": "Show the denomination of schools founded before 1890 that are not in schools founded after 1900"
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Nickname FROM school_details AS T1 WHERE T1.Division = 'Division 1'",
    "question": "Show the nicknames of schools that are in division 1."
  },
  {
    "db_id": "school_player",
    "query": "SELECT T1.Nickname FROM school_details AS T1 WHERE T1.Division = 'Division 1'",
    "question": "What are the nicknames of schools whose division is 1?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.District_name) FROM district AS T1     ORDER BY T1.City_Area DESC",
    "question": "How many different district names are there in order of descending city area?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.max_page_size FROM product AS T1  GROUP BY T1.max_page_size HAVING COUNT(*) >= 3",
    "question": "Find the list of page size which have more than or equal to 3 product listed"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.max_page_size FROM product AS T1  GROUP BY T1.max_page_size HAVING COUNT(*) >= 3",
    "question": "What is the maximum page size for everything that has at least 3 products listed?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.District_name FROM district AS T1 WHERE T1.City_Area > 10 AND T1.City_Population > 100000",
    "question": "Find the name all districts with city area greater than 10 and population larger than 100000"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.District_name FROM district AS T1 WHERE T1.City_Area > 10 AND T1.City_Population > 100000",
    "question": "What are the names of all districts with a city area greater than 10 and have more than 100000 people living there?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.City_Population FROM district AS T1    ORDER BY T1.City_Area DESC LIMIT 1",
    "question": "Find the population of the district with the largest area."
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.City_Population FROM district AS T1    ORDER BY T1.City_Area DESC LIMIT 1",
    "question": "What is the population of the city with the 3 largest areas?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.Store_Name FROM store AS T1 JOIN store_district AS T3 ON T1.Store_ID = T3.Store_ID JOIN district AS T2 ON T3.District_ID = T2.District_ID WHERE T2.District_name != 'Khanewal District'",
    "question": "Find the names of all stores not in Khanewal District."
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.Store_Name FROM store AS T1 JOIN store_district AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.District_ID < (SELECT T23.District_ID FROM district AS T23    ORDER BY T23.City_Population DESC LIMIT 1)",
    "question": "What are the names of all the stores in the districts with less population than the largest district by population?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.Headquartered_City FROM district AS T1 JOIN store_district AS T3 ON T1.District_ID = T3.District_ID JOIN store AS T2 ON T3.Store_ID = T2.Store_ID WHERE T2.Store_Name != 'Blackville'",
    "question": "What city is the headquarter of the store that is not Blackville?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.pages_per_minute_color FROM product AS T1",
    "question": "What is the pages per minute color?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.product FROM product AS T1 JOIN store_product AS T2 ON T1.product_id = T2.product_id JOIN store AS T3 ON T2.store_id = T3.store_id WHERE T3.store_name != 'Miramichi'",
    "question": "What products are available at stores other than \"Miramichi\"?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.product FROM product AS T1 JOIN store_product AS T2 ON T1.product_id = T2.product_id JOIN store AS T3 ON T2.store_id = T3.store_id WHERE T3.store_name != 'Miramichi'",
    "question": "What products are not sold at the store named Miramichi?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.product FROM product AS T1 WHERE T1.max_page_size = 'A4' OR T1.pages_per_minute_color < 5",
    "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5."
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.product FROM product AS T1 WHERE T1.max_page_size = 'A4' OR T1.pages_per_minute_color < 5",
    "question": "What are the products with the maximum page size A4 or that have a pages per minute color smaller than 5?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.product FROM product AS T1 WHERE T1.max_page_size = 'A4' AND T1.pages_per_minute_color < 5",
    "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5."
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.product FROM product AS T1 WHERE T1.max_page_size = 'A4' AND T1.pages_per_minute_color < 5",
    "question": "What are the products with the maximum page size eqal to A4 and a pages per minute color less than 5?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.product FROM product AS T1 WHERE T1.product NOT LIKE 'Scanner'",
    "question": "Find all the product whose name does not contain the word \"Scanner\"."
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.product FROM product AS T1 WHERE T1.product NOT LIKE 'Scanner'",
    "question": "What are all of the products whose name does not include the substring \"Scanner\"?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.product FROM product AS T1 WHERE T1.product > (SELECT T22.max_page_size FROM product AS T22  GROUP BY T22.max_page_size  ORDER BY COUNT(*) DESC LIMIT 1)",
    "question": "Find the name of the products that are using a max page size larger than the most frequently-used max page size."
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.product FROM product AS T1 WHERE T1.product < (SELECT T22.max_page_size FROM product AS T22  GROUP BY T22.max_page_size  ORDER BY COUNT(*) DESC LIMIT 1)",
    "question": "What are the names of all products that are less than the most frequently-used maximum page size?"
  },
  {
    "db_id": "store_product",
    "query": "SELECT SUM( T1.City_Population) FROM district AS T1 WHERE T1.City_Area < (SELECT AVG( T22.City_Area) FROM district AS T22)",
    "question": "Find the total population of the districts where the area is smaller than the average city area."
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.District_name FROM district AS T1 JOIN store_district AS T3 ON T1.District_ID = T3.District_ID JOIN store AS T2 ON T3.Store_ID = T2.Store_ID WHERE T2.Type = 'City Mall'",
    "question": "Find the names of districts where have city mall type stores."
  },
  {
    "db_id": "store_product",
    "query": "SELECT T1.District_name FROM district AS T1 JOIN store_district AS T3 ON T1.District_ID = T3.District_ID JOIN store AS T2 ON T3.Store_ID = T2.Store_ID WHERE T2.Type = 'City Mall'       EXCEPT SELECT T1.District_name FROM district AS T1 JOIN store_district AS T3 ON T1.District_ID = T3.District_ID JOIN store AS T2 ON T3.Store_ID = T2.Store_ID WHERE T2.Type = 'Village Store'",
    "question": "What are the names of the districts that have mall but not village store style shops?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT * FROM College AS T1",
    "question": "What are all the colleges in the database?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT * FROM College AS T1",
    "question": "What are the names of all the colleges?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT COUNT(*) FROM Player AS T1 WHERE T1.HS < 1000",
    "question": "How many players have less than 1000 hours of training?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT COUNT(*) FROM Player AS T1 WHERE T1.HS >= 1000",
    "question": "How many different players trained for at least 1000 hours?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.pName, T1.HS FROM Player AS T1 WHERE T1.HS <= 1500",
    "question": "What are the names and number of hours spent training for each player who trains for less than or equal to 1500 hours?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT T1.cName FROM Tryout AS T1",
    "question": "What are the names of the colleges that attend the tryout test?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT T1.cName FROM Tryout AS T1",
    "question": "What are the names of the colleges represented at tryouts?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT T1.pPos FROM Tryout AS T1",
    "question": "What are the different player positions?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT COUNT(*) FROM Tryout AS T1 WHERE T1.pPos != 'goalie'",
    "question": "How many students who are not playing the role of goalie?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT COUNT(*) FROM Tryout AS T1 WHERE T1.pPos != 'goalie'",
    "question": "What is the number of students not playing as a goalie?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT AVG( T1.enr) FROM College AS T1 WHERE T1.state != 'FL'",
    "question": "What is average enrollment of colleges not in the state FL?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT AVG( T1.enr) FROM College AS T1 WHERE T1.state != 'FL'",
    "question": "What is average number of students enrolled in colleges not in Florida?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT T1.pName FROM Player AS T1 WHERE T1.pName NOT LIKE 'a'",
    "question": "Find the players whose names do not contain letter 'a'."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT T1.pName FROM Player AS T1 WHERE T1.pName NOT LIKE 'a'",
    "question": "Who are the players that have names not containing the letter a?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName, T1.enr FROM College AS T1 WHERE T1.enr > 10000 OR T1.state = 'LA'",
    "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 or location is in state LA."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName, T1.enr FROM College AS T1 WHERE T1.enr > 10000 OR T1.state = 'LA'",
    "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled or are located in Louisiana?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT COUNT(*) FROM College AS T1     ORDER BY T1.enr ASC",
    "question": "How many colleges are there?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT COUNT(*) FROM College AS T1     ORDER BY T1.enr ASC",
    "question": "How many colleges are there?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM College AS T1 WHERE T1.enr >= 18000    ORDER BY T1.cName ASC",
    "question": "What is the name of every college in alphabetical order that has more than or equal to 18000 students enrolled?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.pName FROM Player AS T1 WHERE T1.yCard != 'yes'    ORDER BY T1.HS DESC",
    "question": "Find the name of players whose card is not yes in the descending order of training hours."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.pName FROM Player AS T1 WHERE T1.yCard != 'yes'    ORDER BY T1.HS DESC",
    "question": "What are the name of the players who did not receive a card in descending order of the hours of training?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.cName) FROM Tryout AS T1     ORDER BY T1.cName ASC",
    "question": "How many different colleges are involved in the tryout in alphabetical order?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT COUNT(*), T1.pPos FROM Tryout AS T1  GROUP BY T1.pPos   ORDER BY COUNT(*) DESC",
    "question": "Find the number of students who participate in the tryout for each position ordered by descending count."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT COUNT(*), T1.decision FROM Tryout AS T1  GROUP BY T1.decision   ORDER BY COUNT(*) DESC",
    "question": "How many students accepted\/rejected tryouts for each college by descending count?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.HS, T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID",
    "question": "For each player, what is the player's home state and position?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.state) FROM College AS T1",
    "question": "Find the number of states where have some college students in tryout."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.state) FROM College AS T1",
    "question": "How many different states have students trying out?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision != 'yes'",
    "question": "Find the states where have some college students in tryout and their decisions are not yes."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.pName, T2.cName FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision != 'yes'",
    "question": "Find the name and college of students whose decisions are not yes in the tryout."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.pName, T2.cName FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision != 'yes'",
    "question": "What are the names of all the players who did not receive a yes during tryouts, and also what are the names of their colleges?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.pName, T1.HS FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision != 'yes'",
    "question": "Find the name and hours of the students whose tryout decision is not yes."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.pName, T1.HS FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision != 'yes'",
    "question": "What are the names and hours spent practicing of every student who did not receive a yes at tryouts?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos != 'striker'",
    "question": "Find the states of the colleges that have students in the tryout who did not play in striker position."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos != 'striker'",
    "question": "What are the states of the colleges where students who did not try out for the striker position attend?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.pName FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' OR T2.pPos = 'striker'",
    "question": "Find the names of the students who are in the position of striker or got a yes tryout decision."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.pName FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' OR T2.pPos = 'striker'",
    "question": "What are the names of all students who successfully tried out for the position of striker or any other position?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T3 ON T1.cName = T3.cName JOIN Player AS T2 ON T3.pID = T2.pID WHERE T2.pName != 'Charles'",
    "question": "Find the state of the college which player Charles is not attending."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T3 ON T1.cName = T3.cName JOIN Player AS T2 ON T3.pID = T2.pID WHERE T2.pName != 'Charles'",
    "question": "In which state is the college that Charles does not attend?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT AVG( T1.HS), MAX( T1.HS) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision != 'yes'",
    "question": "Find the average and maximum hours for the students whose tryout decision is not yes."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT AVG( T1.HS), MAX( T1.HS) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision != 'yes'",
    "question": "What is the average and maximum number of hours students who did not make the team practiced?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT AVG( T1.HS) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision != 'no'",
    "question": "What is the average number of hours spent practicing for students who got accepted?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT MAX( T1.HS), T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS <= 1000 GROUP BY T2.pPos",
    "question": "What is the maximum training hours for the students whose training hours is less than or equal to 1000 in different positions?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM Tryout AS T1 JOIN Player AS T2 ON T1.pID = T2.pID WHERE T2.pName NOT LIKE 'D'",
    "question": "Which colleges do the tryout players whose name does not start with letter D go to?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM Tryout AS T1 JOIN Player AS T2 ON T1.pID = T2.pID WHERE T2.pName NOT LIKE 'D'",
    "question": "Which colleges do each player who did not try out go to?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM Tryout AS T1 WHERE T1.decision = 'yes' OR T1.pPos = 'goalie'",
    "question": "Which college has any student who is a goalie or succeeded in the tryout."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM Tryout AS T1 WHERE T1.decision = 'yes' OR T1.pPos = 'goalie'",
    "question": "What college has a student who successfully made the team in the role of a goalie or a player?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.pName FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T2.cName != (SELECT T23.cName FROM College AS T23    ORDER BY T23.enr DESC LIMIT 1)",
    "question": "What are the names of all tryout participants who are not from the largest college?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM College AS T1 WHERE T1.enr < 13000 AND T1.state = 'AZ'",
    "question": "Find the names of colleges in AZ with less than 13000 enrollment."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM College AS T1 WHERE T1.enr < 13000 AND T1.state = 'AZ'       EXCEPT SELECT T2.cName FROM College AS T2 WHERE T2.enr > 15000 AND T2.state = 'LA'",
    "question": "What are the names of colleges in AZ with less than 13,000 students that are not in LA?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM Tryout AS T1 WHERE T1.pPos = 'goalie'",
    "question": "What are the names of all schools that have students trying out for the position of goal."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'       EXCEPT SELECT T3.state FROM College AS T3 JOIN Tryout AS T4 ON T3.cName = T4.cName WHERE T4.pPos = 'mid'",
    "question": "Find the names of states that have some college students playing in goalie positions but not mid positions."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'       EXCEPT SELECT T3.state FROM College AS T3 JOIN Tryout AS T4 ON T3.cName = T4.cName WHERE T4.pPos = 'mid'",
    "question": "What are the names of the states that have some college students playing in the position of goalie but not in the position of mid-field?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT * FROM Tryout AS T1",
    "question": "Show me all the schools that have some students playing in goalie and mid positions."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT * FROM Tryout AS T1",
    "question": "What are the positions of the players in the team?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM Tryout AS T1 WHERE T1.pPos = 'mid'     INTERSECT SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = 'goalie'",
    "question": "Find the names of schools that have some players in the mid position and also in the goalie position."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM Tryout AS T1 WHERE T1.pPos = 'mid'     INTERSECT SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = 'goalie'",
    "question": "What are the names of the schools with some players in the mid position and some goalies?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'",
    "question": "Find the names of states that have some college students playing in the mid position."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'",
    "question": "What are the names of all the states with college students playing in the mid position?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT T1.state FROM College AS T1 WHERE T1.enr != (SELECT MAX( T22.enr) FROM College AS T22)",
    "question": "Find the states where have the colleges whose enrollments are not equal to the largest size."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT T1.state FROM College AS T1 WHERE T1.enr != (SELECT MAX( T22.enr) FROM College AS T22)",
    "question": "What are the states with colleges that have enrollments not equal to the some other college?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT T1.cName FROM College AS T1 WHERE T1.enr < (SELECT MIN( T22.enr) FROM College AS T22 WHERE T22.state = 'FL')",
    "question": "Find names of colleges with enrollment less than that of some (at least one) college in the FL state."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT T1.cName FROM College AS T1 WHERE T1.enr = (SELECT MAX( T22.enr) FROM College AS T22 WHERE T22.state = 'FL')",
    "question": "Find name of college with maximum enrollment among all colleges in the FL state."
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT SUM( T1.enr) FROM College AS T1 WHERE T1.cName IN (SELECT T22.cName FROM Tryout AS T22 WHERE T22.pPos = 'goalie')",
    "question": "What is the total number of enrollment of schools that have at least one goalie player?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT SUM( T1.enr) FROM College AS T1 WHERE T1.cName IN (SELECT T22.cName FROM Tryout AS T22 WHERE T22.pPos = 'goalie')",
    "question": "What is the total number of students enrolled in schools with goalies?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.state) FROM College AS T1 WHERE T1.enr = (SELECT AVG( T22.enr) FROM College AS T22)",
    "question": "How many states have a college with the same number of students as average?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.state) FROM College AS T1 WHERE T1.enr != (SELECT AVG( T22.enr) FROM College AS T22)",
    "question": "What is the number of states that has some colleges whose enrollment is not equal to the average enrollment?"
  },
  {
    "db_id": "soccer_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.state) FROM College AS T1 WHERE T1.enr = (SELECT AVG( T22.enr) FROM College AS T22)",
    "question": "How many states have colleges with average size?"
  },
  {
    "db_id": "device",
    "query": "SELECT * FROM device AS T1",
    "question": "What are the devices?"
  },
  {
    "db_id": "device",
    "query": "SELECT * FROM device AS T1",
    "question": "Show all the devices."
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Carrier FROM device AS T1 WHERE T1.Software_Platform = 'Android'",
    "question": "What are the carriers of devices whose software platforms are \"Android\"?"
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Carrier FROM device AS T1 WHERE T1.Software_Platform = 'Android'",
    "question": "Return the device carriers that have Android as their software platform."
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Quantity FROM stock AS T1",
    "question": "What are the quantities of stocks?"
  },
  {
    "db_id": "device",
    "query": "SELECT DISTINCT T1.Software_Platform FROM device AS T1",
    "question": "What are the different software platforms for devices?"
  },
  {
    "db_id": "device",
    "query": "SELECT DISTINCT T1.Software_Platform FROM device AS T1",
    "question": "List all the different software platforms."
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Open_Date, T1.Open_Year FROM shop AS T1 WHERE T1.Shop_Name != 'Apple'",
    "question": "List the open date of open year of the shop not named \"Apple\"."
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Open_Date, T1.Open_Year FROM shop AS T1 WHERE T1.Shop_Name != 'Apple'",
    "question": "What are the open dates and years for the shop not named Apple?"
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Shop_Name FROM shop AS T1 JOIN stock AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Shop_Name HAVING COUNT(*) >= 1",
    "question": "Show names of shops that have at least one kind of device in stock."
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Shop_Name FROM shop AS T1 JOIN stock AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Shop_Name HAVING COUNT(*) < 1",
    "question": "What are the names of shops that have no more than a single kind of device in stock?"
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Shop_Name FROM shop AS T1 JOIN stock AS T2 ON T1.Shop_ID = T2.Shop_ID",
    "question": "List the names of shops that have devices in stock."
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Shop_Name FROM shop AS T1 JOIN stock AS T2 ON T1.Shop_ID = T2.Shop_ID",
    "question": "What are the names of shops that have devices in stock?"
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Location FROM shop AS T1 WHERE T1.Open_Year > 2012",
    "question": "Show the locations of shops with open year later than 2012."
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Location FROM shop AS T1 WHERE T1.Open_Year > 2012      UNION SELECT T2.Location FROM shop AS T2 WHERE T2.Open_Year < 2008",
    "question": "Which locations contains both shops that opened after the year 2012 or shops that opened before 2008?"
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Carrier FROM device AS T1 JOIN stock AS T2 ON T1.Device_ID = T2.Device_ID",
    "question": "List the carriers of devices that have devices in stock."
  },
  {
    "db_id": "device",
    "query": "SELECT T1.Carrier FROM device AS T1 JOIN stock AS T2 ON T1.Device_ID = T2.Device_ID",
    "question": "What are the carriers of devices that are in stock somewhere?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT * FROM Bookings AS T1",
    "question": "What are all the bookings?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT * FROM Bookings AS T1",
    "question": "List all the bookings made."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT COUNT( T1.Order_Date) FROM Bookings AS T1",
    "question": "How many bookings are there?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT COUNT( T1.Order_Date) FROM Bookings AS T1",
    "question": "How many bookings are there?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT * FROM Customers AS T1",
    "question": "What are the customers?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT * FROM Customers AS T1",
    "question": "Show all the customers recorded."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Customer_Phone, T1.Customer_Email_Address FROM Customers AS T1 WHERE T1.Customer_Name != 'Harold'",
    "question": "Find the phone number and email address of all customers except \"Harold\"."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT COUNT( T1.Store_Name) FROM Drama_Workshop_Groups AS T1",
    "question": "How many Store_Name of drama workshop groups?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT COUNT( T1.Store_Name) FROM Drama_Workshop_Groups AS T1",
    "question": "How many store names are there in drama workshop groups?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.payment_method_code) FROM Invoices AS T1",
    "question": "How many distinct payment method codes are there in all the invoices?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.payment_method_code) FROM Invoices AS T1",
    "question": "Show me the distinct count of distinct payment method codes from the invoice record."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Marketing_Region_Descriptrion FROM Marketing_Regions AS T1 WHERE T1.Marketing_Region_Name != 'China'",
    "question": "What is the description of the marketing region not China?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Marketing_Region_Descriptrion FROM Marketing_Regions AS T1 WHERE T1.Marketing_Region_Name != 'China'",
    "question": "Find the marketing region description of all countries except China?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT DISTINCT T1.Product_Name FROM Products AS T1 WHERE T1.Product_Price < (SELECT AVG( T22.Product_Price) FROM Products AS T22)",
    "question": "What are the distinct names of the products that cost less than the average?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Customer_Phone FROM Performers AS T1 WHERE T1.Customer_Name != 'Ashley'",
    "question": "What is the phone number of the performer who is not named Ashley?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Customer_Phone FROM Performers AS T1 WHERE T1.Customer_Name != 'Ashley'",
    "question": "Find the phone number of all performers except \"Ashley\"."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Store_Name != 'FJA Filming'",
    "question": "Which city is the address of the store not named \"FJA Filming\" located in?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Store_Name != 'FJA Filming'",
    "question": "Find the city the store named \"FJA Filming\" is not in."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code != 'CA'",
    "question": "What are the states or counties of the address of the stores with marketing region code not \"CA\"?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code != 'CA'",
    "question": "Find the states or counties where the stores with marketing region code \"CA\" are not located."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name != 'Rob Dinning'",
    "question": "What is the name of the marketing region that the store Rob Dinning does not belong to?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name != 'Rob Dinning'",
    "question": "Return the name of the marketing region the store Rob Dinning is not located in."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price >= 100",
    "question": "What are the descriptions of the service types with product price equal to or above 100?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price < 100",
    "question": "Give me the descriptions of the service types that cost less than 100."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name != 'film'",
    "question": "What are the names of workshop groups in which services with product name \"film\" are not performed?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name != 'film'",
    "question": "Find the names of the workshop groups where services with product name \"film\" are not performed."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Product_Name FROM Products AS T1  GROUP BY T1.Product_Name HAVING AVG( T1.Product_Price) >= 1000000",
    "question": "What are the product names with average product price greater than or equal to 1000000?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT SUM( T1.Order_Quantity) FROM Order_Items AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name != 'photo'",
    "question": "What are the total order quantities of non-photo products?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT SUM( T1.Order_Quantity) FROM Order_Items AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name != 'photo'",
    "question": "Compute the total order quantities of the products that are not \"photo\"."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Other_Item_Details FROM Order_Items AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Price <= 2000",
    "question": "Find the order detail for the products with price below or equal to 2000."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity != '1'",
    "question": "What are the actual delivery dates of orders with quantity not equal to 1?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity != '1'",
    "question": "List the actual delivery date for all the orders with quantity not equal to 1"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Order_Items AS T3 ON T1.Order_ID = T3.Order_ID JOIN Products AS T2 ON T3.Product_ID = T2.Product_ID WHERE T2.Product_Price >= 1000",
    "question": "What are the order dates of orders with price higher than or equal to 1000?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Order_Items AS T3 ON T1.Order_ID = T3.Order_ID JOIN Products AS T2 ON T3.Product_ID = T2.Product_ID WHERE T2.Product_Price < 1000",
    "question": "Find the order dates of the orders with price below 1000."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT DISTINCT T1.Currency_Code FROM Drama_Workshop_Groups AS T1",
    "question": "What are the distinct currency codes for all drama workshop groups?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT DISTINCT T1.Currency_Code FROM Drama_Workshop_Groups AS T1",
    "question": "Find the distinct currency codes used in drama workshop groups."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Store_Name FROM Drama_Workshop_Groups AS T1 JOIN Addresses AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.City_Town != 'Feliciaberg'",
    "question": "What are the names of the drama workshop groups with address not in Feliciaberg city?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Store_Name FROM Drama_Workshop_Groups AS T1 JOIN Addresses AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.City_Town != 'Feliciaberg'",
    "question": "Return the the names of the drama workshop groups that are not located in Feliciaberg city."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Addresses AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.State_County != 'Alaska'",
    "question": "What are the email addresses of the drama workshop groups with address not in Alaska state?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Addresses AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.State_County != 'Alaska'",
    "question": "List the email addresses of the drama workshop groups located in states other than Alaska state."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.City_Town FROM Addresses AS T1      INTERSECT SELECT T2.City_Town FROM Addresses AS T2",
    "question": "Show all cities where at least one customer and one performer live in."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Store_Name FROM Drama_Workshop_Groups AS T1 JOIN Bookings AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Status_Code != 'stop'",
    "question": "What are the names of the workshop groups that have bookings with status code not \"stop\"?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Store_Name FROM Drama_Workshop_Groups AS T1 JOIN Bookings AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Status_Code != 'stop'",
    "question": "Which workshop groups have bookings with status code not \"stop\"? Give me the names."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT AVG( T1.Order_Quantity) FROM Invoices AS T1 WHERE T1.payment_method_code != 'MasterCard'",
    "question": "What is the average quantities ordered with payment method code not \"MasterCard\" on invoices?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT AVG( T1.Order_Quantity) FROM Invoices AS T1 WHERE T1.payment_method_code != 'MasterCard'",
    "question": "Check the invoices record and compute the average quantities ordered with the payment method not \"MasterCard\"."
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo'       EXCEPT SELECT T3.Service_Type_Description FROM Ref_Service_Types AS T3 JOIN Services AS T4 ON T3.Service_Type_Code = T4.Service_Type_Code WHERE T4.Product_Name = 'film'",
    "question": "What is the description of the service type which offers the photo product but not the film product?"
  },
  {
    "db_id": "cre_Drama_Workshop_Groups",
    "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo'       EXCEPT SELECT T3.Service_Type_Description FROM Ref_Service_Types AS T3 JOIN Services AS T4 ON T3.Service_Type_Code = T4.Service_Type_Code WHERE T4.Product_Name = 'film'",
    "question": "Give me the description of the service type that offers the photo product but not the film product."
  },
  {
    "db_id": "music_2",
    "query": "SELECT * FROM Band AS T1",
    "question": "What are the names of all the bands?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT * FROM Band AS T1",
    "question": "Find all the bands."
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Label) FROM Albums AS T1",
    "question": "How many distinct labels are there?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Label) FROM Albums AS T1",
    "question": "How many different album labels are there?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT * FROM Albums AS T1 WHERE T1.Year != 2012",
    "question": "Find all the albums not in 2012."
  },
  {
    "db_id": "music_2",
    "query": "SELECT * FROM Albums AS T1 WHERE T1.Year != 2012",
    "question": "return all columns of the albums not created in the year of 2012."
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT T1.StagePosition FROM Performance AS T1 JOIN Band AS T2 ON T1.Bandmate = T2.Id WHERE T2.Firstname != 'Solveig'",
    "question": "Find all the stage positions of the musicians with first name not \"Solveig\""
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT T1.StagePosition FROM Performance AS T1 JOIN Band AS T2 ON T1.Bandmate = T2.Id WHERE T2.Firstname != 'Solveig'",
    "question": "What are the different stage positions for all musicians whose first name is not \"Solveig\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT * FROM Songs AS T1",
    "question": "What are all the songs?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT * FROM Songs AS T1",
    "question": "Show all songs."
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Title FROM Songs AS T1 JOIN Vocals AS T3 ON T1.SongId = T3.SongId JOIN Band AS T2 ON T3.Bandmate = T2.Id WHERE T2.Lastname != 'Heilo'",
    "question": "Find all the songs performed by artists with last name not \"Heilo\""
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Title FROM Songs AS T1 JOIN Vocals AS T3 ON T1.SongId = T3.SongId JOIN Band AS T2 ON T3.Bandmate = T2.Id WHERE T2.Lastname != 'Heilo'",
    "question": "What are the names of the songs by the artist whose last name is not \"Heilo\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT COUNT(*) FROM Performance AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Flash'",
    "question": "How many songs do not have the title \"Flash\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT COUNT(*) FROM Performance AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Flash'",
    "question": "How many musicians play in the song that is not \"Flash\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Title FROM Songs AS T1 JOIN Vocals AS T3 ON T1.SongId = T3.SongId JOIN Band AS T2 ON T3.Bandmate = T2.Id WHERE T2.Firstname != 'Marianne'",
    "question": "Find all the songs produced by artists whose first name is not \"Marianne\"."
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.Title NOT LIKE ' the '",
    "question": "Find all the songs whose name does not contain the word \"the\"."
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.Title NOT LIKE ' the '",
    "question": "What are the names of the songs whose title does not have the word \"the\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Instrument) FROM Instruments AS T1",
    "question": "How many distinct instruments are used?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Instrument) FROM Instruments AS T1",
    "question": "How many different instruments are listed in the database?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Instrument FROM Instruments AS T1 JOIN Band AS T2 ON T1.BandmateId = T2.Id JOIN Vocals AS T4 ON T2.Id = T4.Bandmate JOIN Songs AS T3 ON T4.SongId = T3.SongId WHERE T2.Lastname = 'Heilo' OR T3.Title = 'Le Pop'",
    "question": "What instrument did the musician with last name \"Heilo\" or the musician in the song \"Le Pop\" use?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Instrument FROM Instruments AS T1 JOIN Band AS T2 ON T1.BandmateId = T2.Id JOIN Vocals AS T4 ON T2.Id = T4.Bandmate JOIN Songs AS T3 ON T4.SongId = T3.SongId WHERE T2.Lastname = 'Heilo' OR T3.Title = 'Le Pop'",
    "question": "What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\" or any other song with the title \"Le Pop\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT COUNT(*) FROM Instruments AS T1 WHERE T1.Instrument != 'drums'",
    "question": "How many songs have not used the instrument \"drums\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Instrument FROM Instruments AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Le Pop'",
    "question": "What instruments do the songs not named \"Le Pop\" use?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Instrument FROM Instruments AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Le Pop'",
    "question": "What are the instruments are used in the songs that are not named \"Le Pop\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Instrument) FROM Instruments AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Le Pop'",
    "question": "How many instruments does the song not named \"Le Pop\" use?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Instrument) FROM Instruments AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Le Pop'",
    "question": "How many different instruments are used in the songs that are not called \"Le Pop\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Instrument) FROM Instruments AS T1 JOIN Band AS T2 ON T1.BandmateId = T2.Id WHERE T2.Lastname != 'Heilo'",
    "question": "How many instrument does the musician with last name not \"Heilo\" use?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Instrument) FROM Instruments AS T1 JOIN Band AS T2 ON T1.BandmateId = T2.Id WHERE T2.Lastname != 'Heilo'",
    "question": "How many different instruments does the musician with the last name not \"Heilo\" use?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Instrument FROM Instruments AS T1 JOIN Band AS T2 ON T1.BandmateId = T2.Id WHERE T2.Lastname != 'Heilo'",
    "question": "Find all the instruments ever used by the musician with last name not \"Heilo\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Instrument FROM Instruments AS T1 JOIN Band AS T2 ON T1.BandmateId = T2.Id WHERE T2.Lastname != 'Heilo'",
    "question": "What are all the instruments used by the musician with the last name not \"Heilo\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Type FROM Vocals AS T1 JOIN Band AS T2 ON T1.Bandmate = T2.Id WHERE T2.Lastname != 'Heilo' GROUP BY T1.Type  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Which vocal type has the band mate with last name not \"Heilo\" played the most?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Type FROM Vocals AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Le Pop'",
    "question": "What are the vocal types used in songs other than \"Le Pop\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Type FROM Vocals AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Le Pop'",
    "question": "What are the types of vocals used in songs that are not called \"Le Pop\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT COUNT(*) FROM Vocals AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Demon Kitty Rag'",
    "question": "How many vocals are used in the songs that are not \"Demon Kitty Rag\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT T1.Title FROM Songs AS T1      INTERSECT SELECT T2.Title FROM Songs AS T2 JOIN Vocals AS T3 ON T2.SongId = T3.SongId WHERE T3.Type = 'lead'",
    "question": "Find all the songs that have a lead vocal."
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT T1.Title FROM Songs AS T1",
    "question": "What are the names of the songs?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Type) FROM Vocals AS T1",
    "question": "Find the number of different vocal types."
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Type) FROM Vocals AS T1",
    "question": "How many different types of vocals are there?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT * FROM Albums AS T1 WHERE T1.Year != 2010",
    "question": "What are the albums not produced in year 2010?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT * FROM Albums AS T1 WHERE T1.Year != 2010",
    "question": "What information is there on albums not from 2010?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Firstname, T1.Lastname FROM Band AS T1 JOIN Vocals AS T3 ON T1.Id = T3.Bandmate JOIN Songs AS T2 ON T3.SongId = T2.SongId WHERE T2.Title != 'Le Pop'",
    "question": "What is the first and last name of artist who did not perform \"Le Pop\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Instrument FROM Instruments AS T1 JOIN Band AS T2 ON T1.BandmateId = T2.Id JOIN Vocals AS T4 ON T2.Id = T4.Bandmate JOIN Songs AS T3 ON T4.SongId = T3.SongId WHERE T2.Lastname = 'Heilo' OR T3.Title = 'Badlands'",
    "question": "What instrument did the musician with last name \"Heilo\" or the musician who used the song \"Badlands\" use?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Instrument FROM Instruments AS T1 JOIN Band AS T2 ON T1.BandmateId = T2.Id JOIN Vocals AS T4 ON T2.Id = T4.Bandmate JOIN Songs AS T3 ON T4.SongId = T3.SongId WHERE T2.Lastname = 'Heilo' OR T3.Title = 'Badlands'",
    "question": "What instruments did the musician with the last name \"Heilo\" play in \"Badlands\" or any song with the title \"Badlands\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Instrument) FROM Instruments AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Badlands'",
    "question": "How many instruments does the song not called \"Badlands\" use?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Type FROM Vocals AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Badlands'",
    "question": "What are the vocal types used in songs other than \"Badlands\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Type FROM Vocals AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Badlands'",
    "question": "What types of vocals are used in the songs that are not named \"Badlands\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT COUNT(*) FROM Vocals AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Le Pop'",
    "question": "Find the number of vocal types used in songs that are not \"Le Pop\""
  },
  {
    "db_id": "music_2",
    "query": "SELECT COUNT(*) FROM Vocals AS T1 JOIN Songs AS T2 ON T1.SongId = T2.SongId WHERE T2.Title != 'Le Pop'",
    "question": "How many vocal types are used in the songs that are not called \"Le Pop\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT T1.Title FROM Songs AS T1      INTERSECT SELECT T2.Title FROM Songs AS T2 JOIN Vocals AS T3 ON T2.SongId = T3.SongId WHERE T3.Type = 'back'",
    "question": "What are the names of all songs with back vocals?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Type FROM Vocals AS T1 JOIN Band AS T2 ON T1.Bandmate = T2.Id WHERE T2.Firstname != 'Solveig' GROUP BY T1.Type  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Which vocal type has the band mate with first name not \"Solveig\" played the most?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Type FROM Vocals AS T1 JOIN Band AS T2 ON T1.Bandmate = T2.Id JOIN Songs AS T3 ON T1.SongId = T3.SongId WHERE T2.Lastname = 'Heilo' OR T3.Title = 'Der Kapitan'",
    "question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\" or \"Der Kapitan\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Type FROM Vocals AS T1 JOIN Band AS T2 ON T1.Bandmate = T2.Id WHERE T2.Firstname != 'Marianne' GROUP BY T1.Type  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Which vocal type has the band mate with first name not \"Marianne\" played the most?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Type FROM Vocals AS T1 JOIN Band AS T2 ON T1.Bandmate = T2.Id WHERE T2.Firstname != 'Marianne' GROUP BY T1.Type  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the vocal type of the band mate whose first name is not \"Marianne\" played the most?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Firstname, T1.Lastname FROM Band AS T1 JOIN Vocals AS T4 ON T1.Id = T4.Bandmate JOIN Songs AS T2 ON T4.SongId = T2.SongId JOIN Performance AS T3 ON T2.SongId = T3.SongId WHERE T2.Title = 'Der Kapitan' OR T3.StagePosition = 'back'",
    "question": "Who is performing in the back stage position for the song \"Der Kapitan\" or in the front stage position? Show the first name and last name."
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Firstname, T1.Lastname FROM Band AS T1 JOIN Vocals AS T4 ON T1.Id = T4.Bandmate JOIN Songs AS T2 ON T4.SongId = T2.SongId JOIN Performance AS T3 ON T2.SongId = T3.SongId WHERE T2.Title = 'Der Kapitan' OR T3.StagePosition = 'back'",
    "question": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\" or \"Der Kapitan\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT T1.Title FROM Songs AS T1",
    "question": "Find the name of songs."
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Title FROM Songs AS T1 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId JOIN Albums AS T2 ON T3.AlbumId = T2.AId WHERE T2.Title != 'A Kiss Before You Go: Live IN Hamburg'",
    "question": "What are the songs in albums that are not \"A Kiss Before You Go: Live in Hamburg\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Title FROM Songs AS T1 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId JOIN Albums AS T2 ON T3.AlbumId = T2.AId WHERE T2.Label != 'Universal Music Group'",
    "question": "What are all the songs in albums not under label \"Universal Music Group\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT T1.Title FROM Songs AS T1 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId JOIN Albums AS T2 ON T3.AlbumId = T2.AId WHERE T2.Label != 'Universal Music Group'",
    "question": "What are the names of all the songs whose album is not under the label of \"Universal Music Group\"?"
  },
  {
    "db_id": "music_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Title) FROM Songs AS T1 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId JOIN Albums AS T2 ON T3.AlbumId = T2.AId WHERE T2.Type != 'Studio'",
    "question": "Find the number of songs in all the non-studio albums."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Founder FROM Manufacturers AS T1 WHERE T1.Name != 'Sony'",
    "question": "Who is the founder of all manufacturers except Sony?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Founder FROM Manufacturers AS T1 WHERE T1.Name != 'Sony'",
    "question": "Return the founder of all manufacturers except Sony."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Headquarter FROM Manufacturers AS T1 WHERE T1.Founder != 'James'",
    "question": "Where is the headquarter of the company not founded by James?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Headquarter FROM Manufacturers AS T1 WHERE T1.Founder != 'James'",
    "question": "What is the headquarter of the company whose founder is not James?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT COUNT(*) FROM Manufacturers AS T1 WHERE T1.Founder != 'Andy'",
    "question": "Return the number of companies not created by Andy."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT SUM( T1.Revenue) FROM Manufacturers AS T1 WHERE T1.Headquarter != 'Austin'",
    "question": "Find the total revenue created by the companies whose headquarter is not located at Austin."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT SUM( T1.Revenue) FROM Manufacturers AS T1 WHERE T1.Headquarter != 'Austin'",
    "question": "What is the sum of revenue from companies with headquarters not in Austin?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Headquarter) FROM Manufacturers AS T1",
    "question": "How many different cities are listed?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Headquarter) FROM Manufacturers AS T1",
    "question": "Give the distinct count of distinct headquarters of manufacturers."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT COUNT(*) FROM Manufacturers AS T1 WHERE T1.Headquarter = 'Tokyo' AND T1.Headquarter = 'Beijing'",
    "question": "How many manufacturers have headquarters in both Tokyo and Beijing?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Founder FROM Manufacturers AS T1 WHERE T1.Name NOT LIKE 'S'",
    "question": "Find the founder of the company whose name does not begin with the letter 'S'."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Founder FROM Manufacturers AS T1 WHERE T1.Name NOT LIKE 'S'",
    "question": "Who is the founders of companies whose first letter is not S?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT SUM( T1.Revenue) FROM Manufacturers AS T1 WHERE T1.Headquarter = 'Tokyo' AND T1.Headquarter = 'Taiwan'",
    "question": "What is the total revenue of all companies whose main office is at Tokyo and Taiwan?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT SUM( T1.Revenue) FROM Manufacturers AS T1 WHERE T1.Headquarter = 'Tokyo' AND T1.Headquarter = 'Taiwan'",
    "question": "Return the total revenue of companies with headquarters in Tokyo and Taiwan."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code WHERE T2.Name = 'Creative Labs'      UNION SELECT T3.Name FROM Products AS T3 JOIN Manufacturers AS T4 ON T3.Manufacturer = T4.Code WHERE T4.Name = 'Sony'",
    "question": "Find the name of product that is produced by either Creative Labs or Sony."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code WHERE T2.Name = 'Creative Labs'       EXCEPT SELECT T3.Name FROM Products AS T3 JOIN Manufacturers AS T4 ON T3.Manufacturer = T4.Code WHERE T4.Name = 'Sony'",
    "question": "What are the names of products produced by Creative Labs but not by Sony?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Name FROM Manufacturers AS T1 WHERE T1.Revenue < (SELECT AVG( T22.Revenue) FROM Manufacturers AS T22)",
    "question": "Find the name of companies whose revenue is less than the average revenue of all companies."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Name FROM Manufacturers AS T1 WHERE T1.Revenue != (SELECT MIN( T22.Revenue) FROM Manufacturers AS T22 WHERE T22.Headquarter = 'Austin')",
    "question": "Find the name of companies whose revenue is not equal to the revenue of all companies based in Austin."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Name FROM Manufacturers AS T1 WHERE T1.Revenue = (SELECT MIN( T22.Revenue) FROM Manufacturers AS T22 WHERE T22.Headquarter = 'Austin')",
    "question": "What are the names of companies with revenue equal to the lowest revenue of any manufacturer in Austin?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT SUM( T1.Revenue) FROM Manufacturers AS T1 WHERE T1.Revenue < (SELECT MIN( T22.Revenue) FROM Manufacturers AS T22 WHERE T22.Headquarter = 'Austin')",
    "question": "Find the total revenue of companies whose revenue is smaller than the revenue of some companies based in Austin."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT SUM( T1.Revenue) FROM Manufacturers AS T1 WHERE T1.Revenue = (SELECT MIN( T22.Revenue) FROM Manufacturers AS T22 WHERE T22.Headquarter = 'Austin')",
    "question": "What is the total revenue of companies with revenue equal to the lowest revenue of any manufacturer in Austin?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Revenue, T1.Founder FROM Manufacturers AS T1",
    "question": "Find the revenue and founder of each company."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Revenue, T1.Founder FROM Manufacturers AS T1",
    "question": "What is the revenue of companies started by founder?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Revenue, T1.Name FROM Manufacturers AS T1",
    "question": "Find the revenue and manufacturer name for each manufacturer."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Revenue, T1.Name FROM Manufacturers AS T1",
    "question": "What is the revenue of each manufacturer?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Price, T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code",
    "question": "List all products' prices and manufacturers' names."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Price, T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code",
    "question": "What are the prices of products for each manufacturer?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name), T2.Founder FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code  GROUP BY T2.Founder",
    "question": "Find the number of different products that are produced by companies founded by different people."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name), T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code  GROUP BY T2.Name",
    "question": "How many different products are produced by each manufacturer?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM Products AS T1 WHERE T1.Name IN (SELECT T22.Name FROM Products AS T22 JOIN Manufacturers AS T23 ON T22.Manufacturer = T23.Code WHERE T23.Name = 'Sony')",
    "question": "Find number of products which Sony makes."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM Products AS T1 WHERE T1.Name IN (SELECT T22.Name FROM Products AS T22 JOIN Manufacturers AS T23 ON T22.Manufacturer = T23.Code WHERE T23.Name = 'Sony')",
    "question": "How many products are made by Sony?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Name FROM Manufacturers AS T1",
    "question": "Find the name of companies."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Name FROM Manufacturers AS T1      INTERSECT SELECT T2.Name FROM Manufacturers AS T2 JOIN Products AS T3 ON T2.Code = T3.Manufacturer WHERE T3.Name = 'DVD drive'",
    "question": "What are the names of companies that make DVD drives?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT COUNT( T1.Name) FROM Products AS T1",
    "question": "How many products are there in the store?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT COUNT( T1.Name) FROM Products AS T1",
    "question": "How many products are there?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Name FROM Products AS T1 WHERE T1.Price < 200",
    "question": "Select the name of the products with a price less than $200."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Name FROM Products AS T1 WHERE T1.Price < 200",
    "question": "What are the names of products with price less than 200?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Price FROM Products AS T1",
    "question": "Retrieve the price of all the products."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Price FROM Products AS T1",
    "question": "What are the prices of all products?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT AVG( T1.Price) FROM Products AS T1 WHERE T1.Manufacturer != 2",
    "question": "Compute the average price of all products with manufacturer code not equal to 2."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT AVG( T1.Price) FROM Products AS T1 WHERE T1.Manufacturer != 2",
    "question": "What is the average price of products with manufacturer codes not equal to 2?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT COUNT(*) FROM Products AS T1 WHERE T1.Price < 180",
    "question": "Compute the number of products with a price smaller than $180."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT COUNT(*) FROM Products AS T1 WHERE T1.Price > 180",
    "question": "How many products have prices higher than 180?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Name, T1.Price FROM Products AS T1 WHERE T1.Price > 180    ORDER BY T1.Price ASC",
    "question": "What are the names and prices of products that cost more than 180, sorted by price decreasing and name ascending?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT COUNT(*) FROM Products AS T1",
    "question": "How many products are there?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT COUNT(*) FROM Products AS T1",
    "question": "How many products are there?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Price, T1.Manufacturer FROM Products AS T1",
    "question": "Show the price and manufacturer of each product, showing only the manufacturer's code."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Price, T1.Manufacturer FROM Products AS T1",
    "question": "What are the prices and manufacturers of products?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Price, T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code",
    "question": "Select the price and manufacturer's name of each product."
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT T1.Price, T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code",
    "question": "What are the prices and manufacturer names of products?"
  },
  {
    "db_id": "manufactory_1",
    "query": "SELECT AVG( T1.Price), T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code  GROUP BY T2.Name HAVING AVG( T1.Price) > 150",
    "question": "Select the names of manufacturer whose products have an average price higher than $150."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_log_id, T1.log_entry_date FROM Problem_Log AS T1 WHERE T1.problem_id != 10",
    "question": "Find all the ids and dates of the logs for the problems whose id is not 10."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_log_id, T1.log_entry_date FROM Problem_Log AS T1 WHERE T1.problem_id != 10",
    "question": "For the problem with id not equal to 10, return the ids and dates of its problem logs."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT DISTINCT T1.staff_first_name, T1.staff_last_name FROM Staff AS T1 JOIN Problem_Log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id != 1",
    "question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is not 1."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT DISTINCT T1.problem_id, T1.problem_log_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Rylan' OR T2.staff_last_name = 'Homenick'",
    "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick or the staff named Rylan Homenick."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT DISTINCT T1.problem_id, T1.problem_log_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Rylan' OR T2.staff_last_name = 'Homenick'",
    "question": "Which problem id and log id are assigned to the staff named Rylan or Homenick?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT COUNT(*) FROM Problems AS T1 JOIN Product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name != 'voluptatem'",
    "question": "How many problems did the product not called \"voluptatem\" have in record?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT COUNT(*), T2.product_details FROM Problems AS T1 JOIN Product AS T2 ON T1.product_id = T2.product_id  GROUP BY T2.product_details  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "How many problems does the product with the most problems have? List the number of the problems and product details."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT COUNT(*), T2.product_details FROM Problems AS T1 JOIN Product AS T2 ON T1.product_id = T2.product_id  GROUP BY T2.product_details  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Which product has the most problems? Give me the number of problems and the product details."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_description FROM Problems AS T1 JOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name != 'Christop'",
    "question": "Give me a list of descriptions of the problems that are not reported by the staff whose first name is Christop."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_description FROM Problems AS T1 JOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name != 'Christop'",
    "question": "Which problems are reported by the staff with first name not \"Christop\"? Show the descriptions of the problems."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 JOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name != 'Bosco'",
    "question": "Find the ids of the problems that are not reported by the staff whose last name is Bosco."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 JOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name != 'Bosco'",
    "question": "Which problems are reported by the staff with last name not \"Bosco\"? Show the ids of the problems."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 WHERE T1.date_problem_reported < '1978-06-26'",
    "question": "What are the ids of the problems which are reported before 1978-06-26?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 WHERE T1.date_problem_reported >= '1978-06-26'",
    "question": "Find the ids of the problems reported on or after 1978-06-26."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 WHERE T1.date_problem_reported > '1978-06-26'",
    "question": "What are the ids of the problems which are reported after 1978-06-26?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 WHERE T1.date_problem_reported > '1978-06-26'",
    "question": "Which problems are reported after 1978-06-26? Give me the ids of the problems."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT COUNT(*), T2.product_name FROM Problems AS T1 JOIN Product AS T2 ON T1.product_id = T2.product_id  GROUP BY T2.product_name",
    "question": "For each product which has problems, what are the number of problems and the product name?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT COUNT(*), T2.product_details FROM Problems AS T1 JOIN Product AS T2 ON T1.product_id = T2.product_id  GROUP BY T2.product_details",
    "question": "For each product with some problems, list the count of problems and the product details."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT COUNT(*), T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.date_problem_reported < '1986-11-13' GROUP BY T1.product_id",
    "question": "For each product that has problems, find the number of problems reported before 1986-11-13 and the product id?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_name) FROM Product AS T1     ORDER BY T1.product_name ASC",
    "question": "How many distinct product names are there?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_name) FROM Product AS T1     ORDER BY T1.product_id ASC",
    "question": "How many distinct product names are there?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_name) FROM Product AS T1     ORDER BY T1.product_id ASC",
    "question": "How many distinct product names are there?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.product_id FROM Problems AS T1 JOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Dameon' AND T2.staff_last_name = 'Frami'",
    "question": "What are the id of problems reported by the staff named Dameon Frami?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.product_id FROM Problems AS T1 JOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Dameon' AND T2.staff_last_name = 'Frami'     INTERSECT SELECT T3.product_id FROM Problems AS T3 JOIN Staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Jolie' AND T4.staff_last_name = 'Weber'",
    "question": "Which problems were reported by the staff named Dameon Frami and Jolie Weber? Give me the ids of the problems."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.product_id FROM Problems AS T1 JOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop' AND T2.staff_last_name = 'Berge'      UNION SELECT T3.product_id FROM Problems AS T3 JOIN Staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Ashley' AND T4.staff_last_name = 'Medhurst'",
    "question": "What are the product ids for the problems reported by Christop Berge or with closure authorised by Ashley Medhurst?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.product_id FROM Problems AS T1 JOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop' AND T2.staff_last_name = 'Berge'      UNION SELECT T3.product_id FROM Problems AS T3 JOIN Staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Ashley' AND T4.staff_last_name = 'Medhurst'",
    "question": "For which product was there a problem reported by Christop Berge, or with closure authorised by Ashley Medhurst? Return the product ids."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 WHERE T1.date_problem_reported != (SELECT MIN( T22.date_problem_reported) FROM Problems AS T22 JOIN Staff AS T23 ON T22.reported_by_staff_id = T23.staff_id WHERE T23.staff_first_name = 'Lysanne' AND T23.staff_last_name = 'Turcotte')",
    "question": "What are the ids of the problems reported not on the date of the earliest problem reported by Lysanne Turcotte?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 WHERE T1.date_problem_reported = (SELECT MIN( T22.date_problem_reported) FROM Problems AS T22 JOIN Staff AS T23 ON T22.reported_by_staff_id = T23.staff_id WHERE T23.staff_first_name = 'Lysanne' AND T23.staff_last_name = 'Turcotte')",
    "question": "Which problems were reported on the date of the earliest problem reported by the staff Lysanne Turcotte? Give me the ids of the problems."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 WHERE T1.date_problem_reported < (SELECT MAX( T22.date_problem_reported) FROM Problems AS T22 JOIN Staff AS T23 ON T22.reported_by_staff_id = T23.staff_id WHERE T23.staff_first_name = 'Rylan' AND T23.staff_last_name = 'Homenick')",
    "question": "What are the ids of the problems reported before the date of any problems reported by Rylan Homenick?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 WHERE T1.date_problem_reported < (SELECT MAX( T22.date_problem_reported) FROM Problems AS T22 JOIN Staff AS T23 ON T22.reported_by_staff_id = T23.staff_id WHERE T23.staff_first_name = 'Rylan' AND T23.staff_last_name = 'Homenick')",
    "question": "Find the ids of the problems reported before the date of any problems reported by the staff Rylan Homenick."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 JOIN Product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'voluptatem' OR T1.date_problem_reported > '1995'",
    "question": "List the ids of the problems from the product \"voluptatem\" or reported after 1995?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.problem_id FROM Problems AS T1 JOIN Product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'voluptatem' OR T1.date_problem_reported > '1995'",
    "question": "What are the ids of the problems that are from the product \"voluptatem\" or are reported after 1995?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.staff_first_name, T1.staff_last_name FROM Staff AS T1 JOIN Problems AS T3 ON T1.staff_id = T3.reported_by_staff_id JOIN Product AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name = 'rem'",
    "question": "Find the first and last name of the staff members who reported problems from the product \"rem\"?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.staff_first_name, T1.staff_last_name FROM Staff AS T1 JOIN Problems AS T3 ON T1.staff_id = T3.reported_by_staff_id JOIN Product AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name = 'rem'",
    "question": "Which staff members reported problems from the product \"rem\"? Give me their first and last names."
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.product_name FROM Product AS T1 JOIN Problems AS T3 ON T1.product_id = T3.product_id JOIN Staff AS T2 ON T3.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Lacey' AND T2.staff_last_name = 'Bosco'       EXCEPT SELECT T1.product_name FROM Product AS T1 JOIN Problems AS T3 ON T1.product_id = T3.product_id JOIN Staff AS T2 ON T3.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Kenton' AND T2.staff_last_name = 'Champlin'",
    "question": "Find the products which have problems reported by Lacey Bosco but not by Kenton Champlin?"
  },
  {
    "db_id": "tracking_software_problems",
    "query": "SELECT T1.product_name FROM Product AS T1 JOIN Problems AS T3 ON T1.product_id = T3.product_id JOIN Staff AS T2 ON T3.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Lacey' AND T2.staff_last_name = 'Bosco'       EXCEPT SELECT T1.product_name FROM Product AS T1 JOIN Problems AS T3 ON T1.product_id = T3.product_id JOIN Staff AS T2 ON T3.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Kenton' AND T2.staff_last_name = 'Champlin'",
    "question": "Which products have problems reported by the staff named Lacey Bosco but not by the staff named Kenton Champlin?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT COUNT(*) FROM branch AS T1 WHERE T1.membership_amount < (SELECT AVG( T22.membership_amount) FROM branch AS T22)",
    "question": "What is the number of branches that have less than the average number of memberships?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT DISTINCT T1.City FROM branch AS T1 WHERE T1.membership_amount < '100'",
    "question": "Show all distinct city where branches with less than 100 memberships are located."
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT DISTINCT T1.City FROM branch AS T1 WHERE T1.membership_amount > '100'",
    "question": "What are the different cities that have more than 100 memberships?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Open_year FROM branch AS T1  GROUP BY T1.Open_year HAVING COUNT(*) > 2",
    "question": "List all open years when more than two shops are opened."
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Open_year FROM branch AS T1  GROUP BY T1.Open_year HAVING COUNT(*) > 2",
    "question": "What are the opening years in which more than two shops opened?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT MIN( T1.membership_amount), MAX( T1.membership_amount) FROM branch AS T1 WHERE T1.Open_year = '2011' AND T1.City = 'London'",
    "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 and located at city London."
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT MIN( T1.membership_amount), MAX( T1.membership_amount) FROM branch AS T1 WHERE T1.Open_year = '2011' AND T1.City = 'London'",
    "question": "What are the minimum and maximum membership amounts for all branches that opened in 2011 and are located in London?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.City, COUNT(*) FROM branch AS T1 WHERE T1.Open_year >= '2010' GROUP BY T1.City",
    "question": "Show the city and the number of branches opened after or in 2010 for each city."
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.City, COUNT(*) FROM branch AS T1 WHERE T1.Open_year <= '2010' GROUP BY T1.City",
    "question": "For each city, how many branches opened before or in 2010?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT DISTINCT T1.Level FROM member AS T1",
    "question": "What are the different levels of members?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT DISTINCT T1.Level FROM member AS T1",
    "question": "What are the different membership levels?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Name, COUNT(*) FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T2.Register_Year >= '2015' GROUP BY T1.Name",
    "question": "For each branch id, what are the names of the branches that were registered in or after 2015?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Name FROM member AS T1 JOIN membership_register_branch AS T2 ON T1.Member_ID = T2.Member_ID",
    "question": "Show member names with registered branch."
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Name FROM member AS T1 JOIN membership_register_branch AS T2 ON T1.Member_ID = T2.Member_ID",
    "question": "What are the names of the members that have registered at any branch?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Name, T1.City FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID",
    "question": "List the branch name and city of all branches that have registered members."
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Name, T1.City FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID",
    "question": "What are the names and cities of the branches that have any registered members?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Name, T1.Hometown FROM member AS T1 JOIN membership_register_branch AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Register_Year != '2016'",
    "question": "Show the member name and hometown who did not register a branch in 2016."
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Name, T1.Hometown FROM member AS T1 JOIN membership_register_branch AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Register_Year != '2016'",
    "question": "What are the member names and hometowns of those who did not register at a branch in 2016?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.City FROM branch AS T1 WHERE T1.Open_year = '2001' OR T1.membership_amount > '100'",
    "question": "Show all city with a branch opened in 2001 or a branch with more than 100 membership."
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.City FROM branch AS T1 WHERE T1.Open_year = '2001' OR T1.membership_amount > '100'",
    "question": "What are the cities that have a branch that opened in 2001 or a branch with more than 100 members?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.City FROM branch AS T1      INTERSECT SELECT T2.City FROM branch AS T2 WHERE T2.membership_amount > '100'",
    "question": "Show all cities with a branch having more than 100 memberships."
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.City FROM branch AS T1      INTERSECT SELECT T2.City FROM branch AS T2 WHERE T2.membership_amount > '100'",
    "question": "What are the cities that have branches with more than 100 members?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT SUM( T1.Total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T2.City = 'London' OR T1.Year = '2018'",
    "question": "How many total pounds were purchased in the year 2018 at all London branches or all branches in the year 2018?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT COUNT(*) FROM purchase AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Level != 6",
    "question": "What is the total number of purchases for members with level not equal to 6?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT COUNT(*) FROM purchase AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Level != 6",
    "question": "How many purchases are there for members not rated at level 6?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Name FROM branch AS T1 JOIN purchase AS T3 ON T1.Branch_ID = T3.Branch_ID JOIN member AS T2 ON T3.Member_ID = T2.Member_ID WHERE T2.Hometown = 'Louisville ,  Kentucky'       EXCEPT SELECT T1.Name FROM branch AS T1 JOIN purchase AS T3 ON T1.Branch_ID = T3.Branch_ID JOIN member AS T2 ON T3.Member_ID = T2.Member_ID WHERE T2.Hometown = 'Hiram ,  Georgia'",
    "question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky but not those from Hiram, Goergia?"
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Card_Number FROM member AS T1 WHERE T1.Hometown NOT LIKE 'Kentucky'",
    "question": "list the card number of all members whose hometown address does not include word \"Kentucky\"."
  },
  {
    "db_id": "shop_membership",
    "query": "SELECT T1.Card_Number FROM member AS T1 WHERE T1.Hometown NOT LIKE 'Kentucky'",
    "question": "What are the card numbers of members not from Kentucky?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT * FROM Student AS T1",
    "question": "Find all the students."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT * FROM Student AS T1",
    "question": "What are the names of all the students?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT * FROM Voting_record AS T1",
    "question": "Find all the voting records."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT * FROM Voting_record AS T1",
    "question": "What are all the voting records?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.President_Vote FROM Voting_record AS T1",
    "question": "Find the distinct president votes."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.President_Vote FROM Voting_record AS T1",
    "question": "What are the distinct president votes?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.LName FROM Student AS T1 WHERE T1.Major != 50",
    "question": "Find the last names of students with major not 50."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.LName FROM Student AS T1 WHERE T1.Major != 50",
    "question": "What are the last names of students not studying major 50?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.Fname FROM Student AS T1 WHERE T1.Age < 22",
    "question": "Find the first names of students with age below 22."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.Fname FROM Student AS T1 WHERE T1.Age >= 22",
    "question": "What are the first names of all the students aged above or equal to 22?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.Major FROM Student AS T1 WHERE T1.Sex != 'M'",
    "question": "What are the majors of female (sex is not M) students?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT AVG( T1.Age) FROM Student AS T1 WHERE T1.Sex != 'F'",
    "question": "What is the average age of male (sex is not F) students?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT MAX( T1.Age), MIN( T1.Age) FROM Student AS T1 WHERE T1.Major != 600",
    "question": "What are the maximum and minimum age of students with major not 600?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT MAX( T1.Age), MIN( T1.Age) FROM Student AS T1 WHERE T1.Major != 600",
    "question": "Tell me the ages of the oldest and youngest students studying non-major 600."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.Advisor FROM Student AS T1 WHERE T1.city_code != 'BAL'",
    "question": "Who are the advisors for students that do not live in a city with city code \"BAL\"?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.Advisor FROM Student AS T1 WHERE T1.city_code != 'BAL'",
    "question": "Show the advisors of the students whose city of residence does not have city code \"BAL\"."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.Secretary_Vote FROM Voting_record AS T1 WHERE T1.Election_Cycle != 'Fall'",
    "question": "What are the distinct secretary votes in the non-fall election cycle?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.Secretary_Vote FROM Voting_record AS T1 WHERE T1.Election_Cycle != 'Fall'",
    "question": "Return all the distinct secretary votes made in the non-fall election cycle."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.President_Vote FROM Voting_record AS T1 WHERE T1.Registration_Date != '08\/30\/2015'",
    "question": "What are the distinct president votes on dates other than 08\/30\/2015?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.President_Vote FROM Voting_record AS T1 WHERE T1.Registration_Date != '08\/30\/2015'",
    "question": "Show all the distinct president votes made on dates other than 08\/30\/2015."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Registration_Date), T1.Election_Cycle FROM Voting_record AS T1  GROUP BY T1.Election_Cycle",
    "question": "How many distinct registration dates are there for each election cycle?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.LName) FROM Student AS T1",
    "question": "Find the distinct number of last names of the students who have class president votes."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.LName) FROM Student AS T1",
    "question": "How many distinct last names are there of the students who have class president votes?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Fname) FROM Student AS T1",
    "question": "How many distinct first names are there of students who have class president votes?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.Age FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.Class_Senator_Vote WHERE T2.Election_Cycle != 'Fall'",
    "question": "Find the distinct ages of students who have secretary votes in the non-fall election cycle."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.Age FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.Class_Senator_Vote WHERE T2.Election_Cycle != 'Fall'",
    "question": "What are the distinct ages of students who have secretary votes in the non-fall election cycle?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Major) FROM Student AS T1",
    "question": "Find the distinct number of majors of students who have treasurer votes."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Major) FROM Student AS T1",
    "question": "How many distinct majors are there?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.Sex != 'F'",
    "question": "Find the first and last names of all the male (sex is not F) students who have president votes."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.Age != 18",
    "question": "Find the first and last name of all the students of age 18 who have no vice president votes."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.Age != 18",
    "question": "What are the first names and last names of the students who are not 18 years old and have vice president votes."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT COUNT(*) FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.Class_Senator_Vote WHERE T1.Sex = 'M' OR T2.Election_Cycle = 'Fall'",
    "question": "Count the number of male students who had class senator votes in the fall election cycle or any election cycle."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT COUNT(*) FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.Class_Senator_Vote WHERE T1.city_code = 'NYC' OR T2.Election_Cycle = 'Spring'",
    "question": "Find the number of students whose city code is NYC or who have class senator votes in the spring election cycle."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT COUNT(*) FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.Class_Senator_Vote WHERE T1.city_code = 'NYC' OR T2.Election_Cycle = 'Spring'",
    "question": "Which students live in the city with code \"NYC\" or have class senator votes in the spring election cycle? Count the numbers."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT AVG( T1.Age) FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.Class_Senator_Vote WHERE T1.city_code = 'NYC' OR T2.Election_Cycle = 'Spring'",
    "question": "Find the average age of students who live in the city with code \"NYC\" or have secretary votes in the spring election cycle."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT AVG( T1.Age) FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.Class_Senator_Vote WHERE T1.city_code = 'NYC' OR T2.Election_Cycle = 'Spring'",
    "question": "What is the average age of students who have city code \"NYC\" or have secretary votes for the spring election cycle?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT AVG( T1.Age) FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.Class_Senator_Vote WHERE T1.Sex = 'F' OR T2.Election_Cycle = 'Spring'",
    "question": "What is the average age of the female students or the female students with secretary votes in the spring election cycle?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.Fname FROM Student AS T1",
    "question": "Find the distinct first names of all the students."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.Fname FROM Student AS T1       UNION SELECT DISTINCT T2.Fname FROM Student AS T2 WHERE T2.city_code = 'PIT'",
    "question": "What are the distinct first names of the students who have vice president votes or reside in a city whose city code is PIT?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.LName FROM Student AS T1       UNION SELECT DISTINCT T2.LName FROM Student AS T2 WHERE T2.Advisor = 2192",
    "question": "Find the distinct last names of all the students who have president votes or whose advisor is 2192."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.LName FROM Student AS T1",
    "question": "What are the distinct last names of the students?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.LName FROM Student AS T1",
    "question": "Find the distinct last names of all the students."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT DISTINCT T1.LName FROM Student AS T1        EXCEPT SELECT DISTINCT T2.LName FROM Student AS T2 WHERE T2.Advisor = 8741",
    "question": "What are the distinct last names of the students who have president votes but do not have 8741 as the advisor?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.Advisor FROM Student AS T1  GROUP BY T1.Advisor HAVING COUNT(*) >= 2",
    "question": "Report all advisors that advise at least 2 students."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.Major FROM Student AS T1  GROUP BY T1.Major HAVING COUNT(*) > 3",
    "question": "Report all majors that have more than 3 students."
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.Major FROM Student AS T1  GROUP BY T1.Major HAVING COUNT(*) >= 3",
    "question": "What are the majors only more than or equal to three students are studying?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.Major FROM Student AS T1 WHERE T1.Sex != 'F' GROUP BY T1.Major  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the most common major among male (sex is not F) students?"
  },
  {
    "db_id": "voter_2",
    "query": "SELECT T1.Advisor FROM Student AS T1  GROUP BY T1.Advisor HAVING COUNT(*) >= 2",
    "question": "Which advisors are advising at least 2 students?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT * FROM Products AS T1",
    "question": "What are the products?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT * FROM Products AS T1",
    "question": "Show all products."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT * FROM Ref_Colors AS T1",
    "question": "What are the colors?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT * FROM Ref_Colors AS T1",
    "question": "Show all colors."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT * FROM Characteristics AS T1",
    "question": "What are all the characteristics?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT * FROM Characteristics AS T1",
    "question": "Show all characteristics."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT( T1.color_description) FROM Ref_Colors AS T1",
    "question": "How many colors are there?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT( T1.color_description) FROM Ref_Colors AS T1",
    "question": "How many colors are there?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.characteristic_name) FROM Characteristics AS T1",
    "question": "Find the number of distinct product characteristics."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.characteristic_name) FROM Characteristics AS T1",
    "question": "How many different names of the product characteristics?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name FROM Products AS T1 WHERE T1.product_category_code != 'Spices'",
    "question": "What are the names of products with category not \"Spices\"?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name FROM Products AS T1 WHERE T1.product_category_code != 'Spices'",
    "question": "Return the names of products not in the category 'Spices'."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name, T2.color_description, T1.product_description FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE T1.product_category_code != 'Herbs'",
    "question": "List the names, color descriptions and product descriptions of products with category not \"Herbs\"."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name, T2.color_description, T1.product_description FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE T1.product_category_code != 'Herbs'",
    "question": "What are the names, color descriptions, and product descriptions for products not in the 'Herbs' category?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 WHERE T1.product_category_code != 'Seeds'",
    "question": "How many products are there not under the category \"Seeds\"?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 WHERE T1.product_category_code != 'Seeds'",
    "question": "Count the number of products not in the category 'Seeds'."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 WHERE T1.product_category_code = 'Spices' OR T1.typical_buying_price > '1000'",
    "question": "Find the number of products with category \"Spices\" or typically sold above 1000."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 WHERE T1.product_category_code = 'Spices' OR T1.typical_buying_price > '1000'",
    "question": "How many products are in the 'Spices' category or have a typical price of over 1000?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_category_code, T1.typical_buying_price FROM Products AS T1 WHERE T1.product_name != 'cumin'",
    "question": "What is the category and typical buying price  of the product with name not \"cumin\"?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_category_code, T1.typical_buying_price FROM Products AS T1 WHERE T1.product_name != 'cumin'",
    "question": "Return the category code and typical price of all products except 'cumin'."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_category_code FROM Products AS T1 WHERE T1.product_name != 'flax'",
    "question": "Which category does the product not named \"flax\" belong to?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_category_code FROM Products AS T1 WHERE T1.product_name != 'flax'",
    "question": "What is the code of the category that the product with the name not 'flax' belongs to?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description != 'yellow'",
    "question": "What is the name of the product with the color description not 'yellow'?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description != 'yellow'",
    "question": "Give the name of the products that do not have a color description 'yellow'."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_category_description FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description NOT LIKE 't'",
    "question": "Find the category descriptions of the products whose descriptions do not include letter 't'."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_category_description FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description NOT LIKE 't'",
    "question": "What are the descriptions of the categories that products with product descriptions that do not contain the letter t are in?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.color_description FROM Ref_Colors AS T1 JOIN Products AS T2 ON T1.color_code = T2.color_code WHERE T2.product_name != 'catnip'",
    "question": "What is the color description of the products that are not named \"catnip\"?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.color_description FROM Ref_Colors AS T1 JOIN Products AS T2 ON T1.color_code = T2.color_code WHERE T2.product_name != 'catnip'",
    "question": "Give the color description for the products that are not 'catnip'."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.color_code, T2.color_description FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE T1.product_name != 'chervil'",
    "question": "What is the color code and description of the products not named \"chervil\"?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.color_code, T2.color_description FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE T1.product_name != 'chervil'",
    "question": "Return the color code and description for the products with the name not 'chervil'."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_id, T2.color_description FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code JOIN Product_Characteristics AS T3 ON T1.product_id = T3.product_id  GROUP BY T1.color_code HAVING COUNT(*) > 2",
    "question": "Find the id and color description of the products with more than 2 characteristics."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description != 'white'",
    "question": "List all the product names with the color description not \"white\"."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name, T1.typical_buying_price, T1.typical_selling_price FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description != 'yellow'",
    "question": "What are the name and typical buying and selling prices of the products that do not have color described as \"yellow\"?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name, T1.typical_buying_price, T1.typical_selling_price FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description != 'yellow'",
    "question": "Return the names and typical buying and selling prices for products that do not have 'yellow' as their color description."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Product_Characteristics AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name != 'sesame'",
    "question": "How many characteristics does the product named \"sesame\" not have?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Product_Characteristics AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name != 'sesame'",
    "question": "Count the number of characteristics the product 'sesame' does not have."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.characteristic_name) FROM Characteristics AS T1 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id JOIN Products AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name != 'sesame'",
    "question": "How many distinct characteristic names does the product \"cumin\" not have?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.characteristic_name) FROM Characteristics AS T1 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id JOIN Products AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name != 'sesame'",
    "question": "Count the number of different characteristic names the product 'cumin' does not have."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id JOIN Products AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name != 'sesame'",
    "question": "What are all the characteristic names of products that are not \"sesame\"?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.characteristic_name, T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id JOIN Products AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name != 'cumin'",
    "question": "List all the characteristic names and data types of products that are not \"cumin\"."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.characteristic_name, T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id JOIN Products AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name != 'cumin'",
    "question": "What are the names and data types of the characteristics of the products that are not 'cumin'?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id JOIN Products AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name = 'sesame' OR T1.characteristic_type_code = 'Grade'",
    "question": "List all characteristics of product named \"sesame\" or with type code \"Grade\"."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id JOIN Products AS T2 ON T3.product_id = T2.product_id WHERE T2.product_name = 'sesame' OR T1.characteristic_type_code = 'Grade'",
    "question": "What are the names of the characteristics of the product 'sesame' or that have the characteristic type code 'Grade'?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 WHERE T1.product_name != 'laurel'",
    "question": "How many characteristics does the product not named \"laurel\" have?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 WHERE T1.product_name != 'flax'",
    "question": "Find the number of characteristics that the product \"flax\" does not have."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 WHERE T1.product_name != 'flax'",
    "question": "Count the number of characteristics of the products that are not 'flax'."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code JOIN Product_Characteristics AS T4 ON T1.product_id = T4.product_id JOIN Characteristics AS T3 ON T4.characteristic_id = T3.characteristic_id WHERE T2.color_description = 'red' OR T3.characteristic_name = 'fast'",
    "question": "Find the name of the products that have the color description \"red\" or have the characteristic name \"fast\"."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code JOIN Product_Characteristics AS T4 ON T1.product_id = T4.product_id JOIN Characteristics AS T3 ON T4.characteristic_id = T3.characteristic_id WHERE T2.color_description = 'red' OR T3.characteristic_name = 'fast'",
    "question": "What are the names of the products that have a color description of 'red' or the 'fast' characteristic?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 JOIN Product_Characteristics AS T3 ON T1.product_id = T3.product_id JOIN Characteristics AS T2 ON T3.characteristic_id = T2.characteristic_id WHERE T2.characteristic_name != 'hot'",
    "question": "How many products do not have the characteristic named \"hot\"?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT DISTINCT T1.product_name FROM Products AS T1 JOIN Product_Characteristics AS T3 ON T1.product_id = T3.product_id JOIN Characteristics AS T2 ON T3.characteristic_id = T2.characteristic_id WHERE T2.characteristic_name != 'warm'",
    "question": "List the all the distinct names of the products with the characteristic name not 'warm'."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT DISTINCT T1.product_name FROM Products AS T1 JOIN Product_Characteristics AS T3 ON T1.product_id = T3.product_id JOIN Characteristics AS T2 ON T3.characteristic_id = T2.characteristic_id WHERE T2.characteristic_name != 'warm'",
    "question": "What are the different product names for products that do not have the 'warm' characteristic:?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code JOIN Product_Characteristics AS T4 ON T1.product_id = T4.product_id JOIN Characteristics AS T3 ON T4.characteristic_id = T3.characteristic_id WHERE T2.color_description = 'red' OR T3.characteristic_name = 'slow'",
    "question": "Find the number of the products that have their color described as \"red\" or have a characteristic named \"slow\"."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code JOIN Product_Characteristics AS T4 ON T1.product_id = T4.product_id JOIN Characteristics AS T3 ON T4.characteristic_id = T3.characteristic_id WHERE T2.color_description = 'red' OR T3.characteristic_name = 'slow'",
    "question": "How many products have the color description 'red' or the characteristic name 'slow'?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code JOIN Product_Characteristics AS T4 ON T1.product_id = T4.product_id JOIN Characteristics AS T3 ON T4.characteristic_id = T3.characteristic_id WHERE T2.color_description = 'white' AND T3.characteristic_name = 'hot'",
    "question": "Count the products that have the color description \"white\" and have the characteristic name \"hot\"."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code JOIN Product_Characteristics AS T4 ON T1.product_id = T4.product_id JOIN Characteristics AS T3 ON T4.characteristic_id = T3.characteristic_id WHERE T2.color_description = 'white' AND T3.characteristic_name = 'hot'",
    "question": "How many products have their color described as 'white' and have a characteristic with the name 'hot'?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_category_description FROM Ref_Product_Categories AS T1 WHERE T1.product_category_code != 'Spices'",
    "question": "Find the product category description of the product category with code not equal to \"Spices\"."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_category_description FROM Ref_Product_Categories AS T1 WHERE T1.product_category_code != 'Spices'",
    "question": "What is the description of the product category with the code not equal to 'Spices'?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_category_description, T1.unit_of_measure FROM Ref_Product_Categories AS T1 WHERE T1.product_category_code != 'Herbs'",
    "question": "Return the description and unit of measurement for products not in the 'Herbs' category."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.unit_of_measure FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_name != 'cumin'",
    "question": "What is the unit of measurement of all products except \"cumin\"?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.unit_of_measure FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_name != 'cumin'",
    "question": "Give the unit of measure for all products whose name is not 'cumin'."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.unit_of_measure, T1.product_category_code FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_name != 'chervil'",
    "question": "What are the unit of measure and category code for the products that are not 'chervil'?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code JOIN Ref_Product_Categories AS T3 ON T1.product_category_code = T3.product_category_code WHERE T2.color_description = 'white' OR T3.unit_of_measure != 'Handful'",
    "question": "Find the product names that are colored 'white' or do not have unit of measurement \"Handful\"."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.product_name FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code JOIN Ref_Product_Categories AS T3 ON T1.product_category_code = T3.product_category_code WHERE T2.color_description = 'white' OR T3.unit_of_measure != 'Handful'",
    "question": "What are the names of products that are 'white' in color or are not measured by the unit 'Handful'?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.characteristic_name, T1.other_characteristic_details, T1.characteristic_data_type FROM Characteristics AS T1      INTERSECT SELECT T2.characteristic_name, T2.other_characteristic_details, T2.characteristic_data_type FROM Characteristics AS T2",
    "question": "Give the names, details, and data types of characteristics that are found in all products."
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id JOIN Products AS T2 ON T3.product_id = T2.product_id  GROUP BY T1.characteristic_name HAVING COUNT(*) <= 2",
    "question": "What are characteristic names used at most twice across all products?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Ref_Colors AS T1 JOIN Products AS T2 ON T1.color_code = T2.color_code",
    "question": "How many colors are used by any product?"
  },
  {
    "db_id": "products_gen_characteristics",
    "query": "SELECT COUNT(*) FROM Ref_Colors AS T1 JOIN Products AS T2 ON T1.color_code = T2.color_code",
    "question": "Count the number of colors that are used in any products."
  },
  {
    "db_id": "swimming",
    "query": "SELECT * FROM event AS T1",
    "question": "What are the events?"
  },
  {
    "db_id": "swimming",
    "query": "SELECT * FROM stadium AS T1",
    "question": "What are the names of all the stadiums?"
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.name FROM stadium AS T1 WHERE T1.Capacity > (SELECT AVG( T22.Capacity) FROM stadium AS T22)",
    "question": "Find the names of stadiums whose capacity is larger than the average capacity."
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.Country FROM stadium AS T1 WHERE T1.Capacity > 60000",
    "question": "Which country has stadiums with capacity greater than 60000?"
  },
  {
    "db_id": "swimming",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.City) FROM stadium AS T1 WHERE T1.Opening_year <= 2006",
    "question": "How many cities have a stadium that was opened before or in the year of 2006?"
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.Country FROM stadium AS T1",
    "question": "Which countries have a stadium?"
  },
  {
    "db_id": "swimming",
    "query": "SELECT COUNT(*) FROM stadium AS T1 WHERE T1.Country = 'Russia'",
    "question": "How many stadiums are in country \"Russia\"?"
  },
  {
    "db_id": "swimming",
    "query": "SELECT DISTINCT T1.Nationality FROM swimmer AS T1",
    "question": "What are the different countries of the swimmers?"
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.meter_200, T1.meter_300 FROM swimmer AS T1 WHERE T1.Nationality != 'Australia'",
    "question": "Find all 200 meter and 300 meter results of swimmers with nationality not \"Australia\"."
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.name FROM swimmer AS T1 JOIN record AS T2 ON T1.ID = T2.Swimmer_ID WHERE T2.Result != 'Win'",
    "question": "Find the names of swimmers who has a result other than \"win\"."
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.name, T1.Capacity FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID WHERE T2.Name != 'World Junior'",
    "question": "Find the name and capacity of the stadium where the event named \"World Junior\" did not happen."
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID",
    "question": "Find the names of stadiums which have hosted any event."
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.name, T1.Nationality FROM swimmer AS T1 JOIN record AS T2 ON T1.ID = T2.Swimmer_ID WHERE T2.Result = 'Win' GROUP BY T2.Swimmer_ID HAVING COUNT(*) > 1",
    "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time."
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.name FROM swimmer AS T1 JOIN record AS T2 ON T1.ID = T2.Swimmer_ID",
    "question": "Find the names of the swimmers who have records."
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.name FROM swimmer AS T1 JOIN record AS T2 ON T1.ID = T2.Swimmer_ID WHERE T2.Result = 'Win'",
    "question": "Find the names of the swimmers who have \"win\" results in the record."
  },
  {
    "db_id": "swimming",
    "query": "SELECT T1.name FROM stadium AS T1 JOIN event AS T3 ON T1.ID = T3.Stadium_ID JOIN record AS T4 ON T3.ID = T4.Event_ID JOIN swimmer AS T2 ON T4.Swimmer_ID = T2.ID WHERE T2.Nationality != 'Australia'",
    "question": "Find the names of stadiums that some non-Australian swimmers have been to."
  },
  {
    "db_id": "swimming",
    "query": "SELECT COUNT(*) FROM swimmer AS T1",
    "question": "How many swimmers are there?"
  },
  {
    "db_id": "swimming",
    "query": "SELECT AVG( T1.Capacity) FROM stadium AS T1 WHERE T1.Opening_year != 2005",
    "question": "What is the average capacity of the stadiums that were not opened in year 2005?"
  },
  {
    "db_id": "railway",
    "query": "SELECT * FROM railway AS T1",
    "question": "What are the railways?"
  },
  {
    "db_id": "railway",
    "query": "SELECT MAX( T1.Level) FROM manager AS T1 WHERE T1.Country = 'Australia'",
    "question": "What is the maximum level of managers in countries that are \"Australia\"?"
  },
  {
    "db_id": "railway",
    "query": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name != 'Andaman Exp'",
    "question": "Show the builder of railways associated with the trains not named \"Andaman Exp\"."
  },
  {
    "db_id": "railway",
    "query": "SELECT T1.Railway_ID, T2.Location FROM train AS T1 JOIN railway AS T2 ON T1.Railway_ID = T2.Railway_ID  GROUP BY T1.Railway_ID HAVING COUNT(*) >= 1",
    "question": "Show id and location of railways that are associated with at least one train."
  },
  {
    "db_id": "railway",
    "query": "SELECT T1.ObjectNumber FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID",
    "question": "List the object number of railways that have trains."
  },
  {
    "db_id": "railway",
    "query": "SELECT T1.Country FROM manager AS T1 WHERE T1.Age > 50       EXCEPT SELECT T2.Country FROM manager AS T2 WHERE T2.Age < 46",
    "question": "Show the countries that have managers of age above 50 but not managers of age below 46."
  },
  {
    "db_id": "railway",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Country) FROM manager AS T1",
    "question": "Show the distinct number of countries of managers."
  },
  {
    "db_id": "customers_and_products_contacts",
    "query": "SELECT COUNT(*) FROM Addresses AS T1 WHERE T1.country != 'USA'",
    "question": "How many addresses are there not in country USA?"
  },
  {
    "db_id": "customers_and_products_contacts",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city) FROM Addresses AS T1",
    "question": "Show the number of distinct cities in the address record."
  },
  {
    "db_id": "customers_and_products_contacts",
    "query": "SELECT T1.customer_name, T1.customer_phone FROM Customers AS T1 JOIN Customer_Address_History AS T2 ON T1.customer_id = T2.customer_id",
    "question": "Show names and phones of customers who have address information."
  },
  {
    "db_id": "customers_and_products_contacts",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed'",
    "question": "Show the names of customers who have an order in completed status."
  },
  {
    "db_id": "customers_and_products_contacts",
    "query": "SELECT COUNT(*) FROM Products AS T1 WHERE T1.product_price = (SELECT AVG( T22.product_price) FROM Products AS T22)",
    "question": "How many products have a price equal to the average?"
  },
  {
    "db_id": "customers_and_products_contacts",
    "query": "SELECT T1.product_type_code, T1.product_name FROM Products AS T1 WHERE T1.product_price > 1000 AND T1.product_price < 500",
    "question": "Show the product type and name for the products with price higher than 1000 and lower than 500."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.dorm_name FROM Dorm AS T1 WHERE T1.student_capacity >= 300",
    "question": "What are the names of all the dorms that can accomdate at least 300 students?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*) FROM Student AS T1 WHERE T1.Sex = 'F' OR T1.Age < 25",
    "question": "How many female students (sex is F) or whose age is below 25?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*) FROM Student AS T1 WHERE T1.Sex = 'F' OR T1.Age < 25",
    "question": "How many girl students or younger than 25?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname FROM Student AS T1 WHERE T1.Age >= 20",
    "question": "Find the first name of students who is older than or equal to 20."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname FROM Student AS T1 WHERE T1.Age < 20",
    "question": "What are the first names of all students who are younger than 20?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname FROM Student AS T1 WHERE T1.city_code = 'PHL' OR T1.Age BETWEEN 20 AND 25",
    "question": "Find the first name of students living in city PHL or whose age is between 20 and 25."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname FROM Student AS T1 WHERE T1.city_code = 'PHL' OR T1.Age BETWEEN 20 AND 25",
    "question": "What is the first name of the students who are in age 20 to 25 or living in PHL city?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT * FROM Dorm AS T1",
    "question": "What are the dorms?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT * FROM Dorm AS T1",
    "question": "What are the dorms in the database?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT * FROM Dorm_amenity AS T1",
    "question": "Find all the amenities."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT * FROM Dorm_amenity AS T1",
    "question": "What are all the dorm amenities?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT * FROM Student AS T1",
    "question": "What are the students' names?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT * FROM Student AS T1",
    "question": "What are the students' names?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Age, T1.city_code FROM Student AS T1",
    "question": "Find the age and city code of all students."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Age, T1.city_code FROM Student AS T1",
    "question": "What is the age and city code for each student?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT AVG( T1.student_capacity), SUM( T1.student_capacity) FROM Dorm AS T1 WHERE T1.gender != 'X'",
    "question": "Find the average and total capacity of dorms for the students with gender not X."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT AVG( T1.student_capacity), SUM( T1.student_capacity) FROM Dorm AS T1 WHERE T1.gender != 'X'",
    "question": "What is the average and total capacity for all dorms who are not of gender X?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT DISTINCT T1.dormid FROM Has_amenity AS T1",
    "question": "Find the dorms that have some amenity."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT DISTINCT T1.dormid FROM Has_amenity AS T1",
    "question": "What dorms have amenities?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Has_amenity AS T2 ON T1.dormid = T2.dormid",
    "question": "Find the name of dorms that have any amenity"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Has_amenity AS T2 ON T1.dormid = T2.dormid",
    "question": "What are the names of all the dorms that have amenities?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT DISTINCT T1.gender FROM Dorm AS T1",
    "question": "Find the distinct gender for dorms."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT DISTINCT T1.gender FROM Dorm AS T1",
    "question": "What are the different genders in the dorms?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.student_capacity, T1.gender FROM Dorm AS T1 WHERE T1.dorm_name NOT LIKE 'Donor'",
    "question": "Find the capacity and gender type of the dorm whose name does not have substring \u2018Donor\u2019."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.student_capacity, T1.gender FROM Dorm AS T1 WHERE T1.dorm_name NOT LIKE 'Donor'",
    "question": "What is the student capacity and type of gender for the dorm whose name does not have the phrase Donor in it?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid JOIN Dorm_amenity AS T2 ON T3.amenid = T2.amenid WHERE T2.amenity_name = 'TV Lounge'       EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid JOIN Dorm_amenity AS T2 ON T3.amenid = T2.amenid WHERE T2.amenity_name = 'Study Room'",
    "question": "Find the name of dorms which have TV Lounge but not Study Room as amenities."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid JOIN Dorm_amenity AS T2 ON T3.amenid = T2.amenid WHERE T2.amenity_name = 'TV Lounge'",
    "question": "What is the name of the dorm with a TV Lounge listed as an amenity?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid JOIN Dorm_amenity AS T2 ON T3.amenid = T2.amenid WHERE T2.amenity_name = 'TV Lounge'      UNION SELECT T1.dorm_name FROM Dorm AS T1 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid JOIN Dorm_amenity AS T2 ON T3.amenid = T2.amenid WHERE T2.amenity_name = 'Study Room'",
    "question": "Find the name of dorms which have TV Lounge or Study Room as amenity."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid JOIN Dorm_amenity AS T2 ON T3.amenid = T2.amenid WHERE T2.amenity_name = 'TV Lounge'",
    "question": "What is the name of each dorm that has a TV Lounge?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.LName FROM Student AS T1 WHERE T1.Sex = 'F' AND T1.city_code = 'BAL'       EXCEPT SELECT T2.LName FROM Student AS T2 WHERE T2.Sex = 'M' AND T2.Age < 20",
    "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL but not male (sex is M) and in age of below 20."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.Age > (SELECT AVG( T22.Age) FROM Student AS T22)",
    "question": "Find the first and last name of students whose age is older than the average age."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.Age > (SELECT AVG( T22.Age) FROM Student AS T22)",
    "question": "What is the first and last name of all students who are older than average?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.city_code = 'HKG'    ORDER BY T1.Age ASC",
    "question": "List the first and last name of students who are living in the city with code HKG, and sorted the results by their ages."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.city_code = 'HKG'    ORDER BY T1.Age ASC",
    "question": "What are the first and last names of all students who are living in the city HKG and order the results by age?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T3 ON T1.amenid = T3.amenid JOIN Dorm AS T2 ON T3.dormid = T2.dormid WHERE T2.dorm_name != 'Anonymous Donor Hall'    ORDER BY T1.amenity_name ASC",
    "question": "List name of all amenities which Anonymous Donor Hall does not have, and sort the results in alphabetic order."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T3 ON T1.amenid = T3.amenid JOIN Dorm AS T2 ON T3.dormid = T2.dormid WHERE T2.dorm_name != 'Anonymous Donor Hall'    ORDER BY T1.amenity_name ASC",
    "question": "What are the amenities in alphabetical order that Anonymous Donor Hall does not have?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*), SUM( T1.student_capacity), T1.dorm_name FROM Dorm AS T1  GROUP BY T1.dorm_name",
    "question": "Find the number of students and total capacity for each dorm."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*), SUM( T1.student_capacity), T1.dorm_name FROM Dorm AS T1  GROUP BY T1.dorm_name",
    "question": "How many students are there and what is the total capacity for each dorm?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*), AVG( T1.Age), T1.Fname FROM Student AS T1  GROUP BY T1.Fname",
    "question": "Find the number and average age of students with the same first name."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*), AVG( T1.Age), T1.Fname FROM Student AS T1  GROUP BY T1.Fname",
    "question": "How many students live in each city and what are their average ages?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*), AVG( T1.Age), T1.city_code FROM Student AS T1 WHERE T1.Sex != 'M' GROUP BY T1.city_code",
    "question": "Find the average age and number of female students (with sex not M) from each city."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*), T1.city_code FROM Student AS T1  GROUP BY T1.city_code HAVING COUNT(*) < 1",
    "question": "How many students are from each city, and which cities have less than one student?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 WHERE T1.Major > (SELECT T22.Major FROM Student AS T22  GROUP BY T22.Major  ORDER BY COUNT(*) DESC LIMIT 1)",
    "question": "Find the first and last name of students who are in a major with more than one student."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*), T1.Sex FROM Student AS T1 WHERE T1.Age < (SELECT AVG( T22.Age) FROM Student AS T22) GROUP BY T1.Sex",
    "question": "Find the number of students whose age is younger than the average age for each gender."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*), T1.Sex FROM Student AS T1 WHERE T1.Age < (SELECT AVG( T22.Age) FROM Student AS T22) GROUP BY T1.Sex",
    "question": "How many students are younger than average for each gender?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Age, T2.dorm_name FROM Student AS T1 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid JOIN Dorm AS T2 ON T3.dormid = T2.dormid",
    "question": "Find the age and dorm name of students."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Age, T2.dorm_name FROM Student AS T1 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid JOIN Dorm AS T2 ON T3.dormid = T2.dormid",
    "question": "What is the age for each dorm and what are the names of each dorm?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*), T2.dorm_name FROM Lives_in AS T1 JOIN Dorm AS T2 ON T1.dormid = T2.dormid JOIN Student AS T3 ON T1.stuid = T3.StuID WHERE T3.Age >= 20 GROUP BY T2.dorm_name",
    "question": "Find the number of students who is older than or equal to 20 in each dorm."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*), T2.dorm_name FROM Lives_in AS T1 JOIN Dorm AS T2 ON T1.dormid = T2.dormid JOIN Student AS T3 ON T1.stuid = T3.StuID WHERE T3.Age < 20 GROUP BY T2.dorm_name",
    "question": "How many students are younger than 20 in each dorm?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname FROM Student AS T1 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid JOIN Dorm AS T2 ON T3.dormid = T2.dormid WHERE T2.dorm_name != 'Smith Hall'",
    "question": "What are the first names of all students who do not live in Smith Hall?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT AVG( T1.Age) FROM Student AS T1 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid JOIN Dorm AS T2 ON T3.dormid = T2.dormid WHERE T2.student_capacity > (SELECT MAX( T23.student_capacity) FROM Dorm AS T23)",
    "question": "What is the average age of students who are living in the dorm with a capacity larger than the dorm with the largest capacity?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*) FROM Lives_in AS T1 JOIN Dorm AS T2 ON T1.dormid = T2.dormid JOIN Student AS T3 ON T1.stuid = T3.StuID WHERE T2.dorm_name = 'Smith Hall' OR T3.Sex = 'F'",
    "question": "Find the number of female students (with F sex) or male students (with M sex) living in Smith Hall"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT COUNT(*) FROM Lives_in AS T1 JOIN Dorm AS T2 ON T1.dormid = T2.dormid JOIN Student AS T3 ON T1.stuid = T3.StuID WHERE T2.dorm_name = 'Smith Hall' OR T3.Sex = 'F'",
    "question": "How many female students live in Smith Hall or in any other dorm?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T3 ON T1.amenid = T3.amenid JOIN Dorm AS T2 ON T3.dormid = T2.dormid WHERE T2.dorm_name != 'Smith Hall'",
    "question": "Find the name of amenities that are not in Smith Hall dorm."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T3 ON T1.amenid = T3.amenid JOIN Dorm AS T2 ON T3.dormid = T2.dormid WHERE T2.dorm_name != 'Smith Hall'",
    "question": "What are the names of the amenities that Smith Hall does not have?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T3 ON T1.amenid = T3.amenid JOIN Dorm AS T2 ON T3.dormid = T2.dormid WHERE T2.dorm_name != 'Smith Hall'    ORDER BY T1.amenity_name ASC",
    "question": "Find the name of amenities that are not in Smith Hall dorm. ordered the results by amenity names."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T3 ON T1.amenid = T3.amenid JOIN Dorm AS T2 ON T3.dormid = T2.dormid WHERE T2.dorm_name != 'Smith Hall'    ORDER BY T1.amenity_name ASC",
    "question": "What amenities do the dorms that are not Smith Hall have in alphabetical order?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid WHERE T2.dormid NOT IN (SELECT T23.dormid FROM Lives_in AS T23 JOIN Dorm AS T24 ON T23.dormid = T24.dormid  GROUP BY T23.dormid  ORDER BY COUNT(*) DESC LIMIT 1)",
    "question": "What are the first names of all students who do not live in the dorm with the most amenities?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.dorm_name FROM Dorm AS T1      INTERSECT SELECT T2.dorm_name FROM Dorm AS T2 JOIN Has_amenity AS T4 ON T2.dormid = T4.dormid JOIN Dorm_amenity AS T3 ON T4.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'",
    "question": "What are the names of the dorm that has a TV Lounge?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid WHERE T2.dormid NOT IN (SELECT T23.dormid FROM Has_amenity AS T23 JOIN Dorm_amenity AS T24 ON T23.amenid = T24.amenid WHERE T24.amenity_name = 'TV Lounge')",
    "question": "Find the first and last name of students who are not living in the dorms that have amenity TV Lounge."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid WHERE T2.dormid NOT IN (SELECT T23.dormid FROM Has_amenity AS T23 JOIN Dorm_amenity AS T24 ON T23.amenid = T24.amenid WHERE T24.amenity_name = 'TV Lounge')",
    "question": "What are the first and last names of all students who are not living in a dorm with a TV Lounge?"
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid WHERE T2.dormid IN (SELECT T23.dormid FROM Has_amenity AS T23 JOIN Dorm_amenity AS T24 ON T23.amenid = T24.amenid WHERE T24.amenity_name = 'TV Lounge')",
    "question": "Find the first name and age of students who are living in the dorms that have amenity TV Lounge."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T3 ON T1.amenid = T3.amenid JOIN Dorm AS T4 ON T3.dormid = T4.dormid JOIN Lives_in AS T5 ON T4.dormid = T5.dormid JOIN Student AS T2 ON T5.stuid = T2.StuID WHERE T2.LName != 'Smith'",
    "question": "Find the name of amenities of the dorm where the student with last name not Smith is living in."
  },
  {
    "db_id": "dorm_1",
    "query": "SELECT T1.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T3 ON T1.amenid = T3.amenid JOIN Dorm AS T4 ON T3.dormid = T4.dormid JOIN Lives_in AS T5 ON T4.dormid = T5.dormid JOIN Student AS T2 ON T5.stuid = T2.StuID WHERE T2.LName != 'Smith'",
    "question": "What are the amenities in the dorm that a student who does not have the last name of Smith lives in?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT * FROM Customers AS T1",
    "question": "What are the customers?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT * FROM Customers AS T1",
    "question": "Show all customers."
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.town_city FROM Customers AS T1 WHERE T1.customer_type_code != 'Good Credit Rating' GROUP BY T1.town_city  ORDER BY COUNT(*) ASC LIMIT 1",
    "question": "Which city has the least number of customers whose type code is not \"Good Credit Rating\"?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_name) FROM Products AS T1    ORDER BY COUNT(*) ASC LIMIT 1",
    "question": "How many products has been complained by the customer who has filed least amount of complaints?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT COUNT( T1.phone_number) FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id    ORDER BY T2.date_complaint_raised DESC LIMIT 1",
    "question": "How many complaints have been filed by the customer who has filed the most recent complaint?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.email_address, T1.phone_number FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id",
    "question": "What are the emails and phone numbers of customers who have filed a complaint?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.phone_number FROM Customers AS T1        EXCEPT SELECT T2.phone_number FROM Staff AS T2",
    "question": "Find the phone number of all the customers but not the staff."
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.phone_number FROM Customers AS T1        EXCEPT SELECT T2.phone_number FROM Staff AS T2",
    "question": "What are the phone numbers of all customers but not of all staff members?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.product_description FROM Products AS T1 WHERE T1.product_name != 'Chocolate'",
    "question": "What is the description of the product not named \"Chocolate\"?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.product_description FROM Products AS T1 WHERE T1.product_name != 'Chocolate'",
    "question": "Return the description of all the products whose name is not \"Chocolate\"."
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.product_price FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id",
    "question": "Find the prices of products which has received complaints."
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.product_price FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id",
    "question": "What are the prices of products that have gotten a complaint?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.product_price, T1.product_category_code FROM Products AS T1",
    "question": "What is the price and category of each product?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.product_price, T1.product_category_code FROM Products AS T1",
    "question": "Return the price and category code of each product."
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT COUNT( T1.last_name) FROM Staff AS T1 JOIN Complaints AS T3 ON T1.staff_id = T3.staff_id JOIN Products AS T2 ON T3.product_id = T2.product_id    ORDER BY T2.product_price ASC LIMIT 1",
    "question": "How many staff members are in charge of the complaint on the product with the lowest price?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.complaint_status_code FROM Complaints AS T1  GROUP BY T1.complaint_status_code HAVING COUNT(*) < 3",
    "question": "Which complaint status has less than 3 records on file?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.last_name FROM Staff AS T1 WHERE T1.email_address NOT LIKE 'wrau'",
    "question": "Find the last name of the staff whose email address does not contain \"wrau\"."
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.last_name FROM Staff AS T1 WHERE T1.email_address NOT LIKE 'wrau'",
    "question": "What are the last names of staff with email addresses not containing the substring \"wrau\"?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT * FROM Customers AS T1  GROUP BY *  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the customer type with the most customers?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT DISTINCT T1.complaint_type_code FROM Complaints AS T1",
    "question": "What are the distinct complaint type codes in the database?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT DISTINCT T1.complaint_type_code FROM Complaints AS T1",
    "question": "List all the different complaint type codes."
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.address_line_1, T1.address_line_2 FROM Customers AS T1 WHERE T1.email_address != 'vbogisich@example.org'",
    "question": "Find the address line 1 and 2 of the customer with email not \"vbogisich@example.org\"."
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.address_line_1, T1.address_line_2 FROM Customers AS T1 WHERE T1.email_address != 'vbogisich@example.org'",
    "question": "What are lines 1 and 2 of the addressed of the customer with the email not \"vbogisich@example.org\"?"
  },
  {
    "db_id": "customer_complaints",
    "query": "SELECT T1.complaint_status_code, COUNT(*) FROM Complaints AS T1 WHERE T1.complaint_type_code != 'Product Failure' GROUP BY T1.complaint_status_code",
    "question": "Find the number of complaints with any type except Product Failure for each complaint status."
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT * FROM submission AS T1",
    "question": "What are the submissions?"
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT * FROM submission AS T1",
    "question": "Show all submissions."
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT T1.Author FROM submission AS T1 WHERE T1.College = 'Florida' AND T1.College = 'Temple'",
    "question": "Show the names of authors from college \"Florida\" and \"Temple\""
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT T1.Author FROM submission AS T1 WHERE T1.College = 'Florida' AND T1.College = 'Temple'",
    "question": "Which authors with submissions are from college \"Florida\" and \"Temple\"?"
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT T1.Scores FROM submission AS T1",
    "question": "What are the scores of submissions?"
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT T1.Scores FROM submission AS T1",
    "question": "Retrieve the scores of submissions."
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT T1.College FROM submission AS T1 WHERE T1.Scores > 90       EXCEPT SELECT T2.College FROM submission AS T2 WHERE T2.Scores < 80",
    "question": "Show the colleges that have authors with submission score larger than 90 but do not have authors with submission score smaller than 80."
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT T1.College FROM submission AS T1 WHERE T1.Scores > 90      UNION SELECT T2.College FROM submission AS T2 WHERE T2.Scores < 80",
    "question": "Which colleges have either authors with submission score above 90 or authors with submission score below 80?"
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT T1.Author FROM submission AS T1 JOIN Acceptance AS T2 ON T1.Submission_ID = T2.Submission_ID  GROUP BY T1.Author HAVING COUNT( T2.Workshop_ID) >= 1",
    "question": "Show the authors who have submissions to at least one workshop."
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT T1.Author FROM submission AS T1 JOIN Acceptance AS T2 ON T1.Submission_ID = T2.Submission_ID",
    "question": "List the authors who have submission to any workshop."
  },
  {
    "db_id": "workshop_paper",
    "query": "SELECT T1.Author FROM submission AS T1 JOIN Acceptance AS T2 ON T1.Submission_ID = T2.Submission_ID",
    "question": "Which authors submitted to any workshop?"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT * FROM Investors AS T1",
    "question": "Find all the investors."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT COUNT( T1.Investor_details) FROM Investors AS T1",
    "question": "How many investor details are there?"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.lot_details) FROM Lots AS T1",
    "question": "Show the number of distinct lot details."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.share_count FROM Transactions AS T1",
    "question": "What is the share of transactions?"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.transaction_id FROM Transactions AS T1 WHERE T1.transaction_type_code != 'PUR'",
    "question": "Show all transaction ids with transaction code not 'PUR'."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.date_of_transaction FROM Transactions AS T1 WHERE T1.transaction_type_code != 'SALE'",
    "question": "Show all dates of transactions whose type code is not \"SALE\"."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT AVG( T1.amount_of_transaction) FROM Transactions AS T1 WHERE T1.transaction_type_code != 'SALE'",
    "question": "Show the average amount of transactions with type code not \"SALE\"."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 WHERE T1.transaction_type_code != 'PUR'",
    "question": "Show the description of transaction type with code not equal to \"PUR\"."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT MIN( T1.amount_of_transaction) FROM Transactions AS T1 WHERE T1.transaction_type_code = 'PUR' OR T1.share_count > '50'",
    "question": "Show the minimum amount of transactions whose type code is \"PUR\" or whose share count is bigger than 50."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT MAX( T1.share_count) FROM Transactions AS T1 WHERE T1.amount_of_transaction >= 10000",
    "question": "Show the maximum share count of transactions where the amount is greater than or equal to 10000"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.date_of_transaction FROM Transactions AS T1 WHERE T1.share_count > '100' AND T1.amount_of_transaction > 1000",
    "question": "Show the dates of transactions if the share count is bigger than 100 and the amount is bigger than 1000."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.transaction_type_description, T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN Transactions AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count >= '10'",
    "question": "Show the transaction type descriptions and dates if the share count is greater than or equal to 10."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT DISTINCT T1.transaction_type_code FROM Transactions AS T1",
    "question": "What are the distinct transaction types used in the transactions?"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.lot_details FROM Lots AS T1 JOIN Investors AS T2 ON T1.investor_id = T2.investor_id WHERE T2.Investor_details != 'l'",
    "question": "Return the lot details of lots that do not belong to investors with details \"l\"?"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.purchase_details FROM Purchases AS T1 JOIN Transactions AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction >= 10000",
    "question": "What are the purchase details of transactions with amount bigger than or equal to 10000?"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.lot_details FROM Lots AS T1 JOIN Investors AS T3 ON T1.investor_id = T3.investor_id JOIN Transactions AS T2 ON T3.investor_id = T2.investor_id WHERE T2.share_count <= '50'",
    "question": "What are the lot details of lots associated with transactions with share count smaller than or equal to 50?"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.lot_details FROM Lots AS T1 JOIN Investors AS T3 ON T1.investor_id = T3.investor_id JOIN Transactions AS T2 ON T3.investor_id = T2.investor_id WHERE T2.share_count > '100' OR T2.transaction_type_code = 'PUR'",
    "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 or whose type code is \"PUR\"?"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.investor_id, COUNT(*) FROM Transactions AS T1 WHERE T1.transaction_type_code != 'SALE' GROUP BY T1.investor_id",
    "question": "Show the number of transactions with transaction type code not \"SALE\" for different investors if it is larger than 0."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.investor_id FROM Transactions AS T1 JOIN Investors AS T2 ON T1.investor_id = T2.investor_id  GROUP BY T1.investor_id HAVING COUNT(*) > 2",
    "question": "Show the ids of the investors who have more than two transactions."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.investor_id, T2.Investor_details FROM Transactions AS T1 JOIN Investors AS T2 ON T1.investor_id = T2.investor_id WHERE T1.transaction_type_code = 'SALE' GROUP BY T1.investor_id HAVING COUNT(*) >= 2",
    "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\"."
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.date_of_transaction FROM Transactions AS T1 WHERE T1.share_count >= '100' AND T1.amount_of_transaction >= 100",
    "question": "What are the dates of transactions with at least 100 share count and amount bigger than 100?"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.sales_details FROM Sales AS T1",
    "question": "What are the details of all sales?"
  },
  {
    "db_id": "tracking_share_transactions",
    "query": "SELECT T1.lot_details FROM Lots AS T1",
    "question": "What are the details of the lots which are used in any transactions?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT * FROM Hotels AS T1",
    "question": "What are the details of all hotels?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT * FROM Hotels AS T1",
    "question": "Find all the hotels."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT COUNT( T1.price_range) FROM Hotels AS T1",
    "question": "How many price ranges are there in hotels?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT COUNT( T1.price_range) FROM Hotels AS T1",
    "question": "Tell me how many price ranges are there for all the hotels."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Location_Name) FROM Locations AS T1",
    "question": "Show the number of distinct location names."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Location_Name) FROM Locations AS T1",
    "question": "How many distinct location names are there?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT COUNT( T1.Tourist_Details) FROM Visitors AS T1",
    "question": "How many visitors are there?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT COUNT( T1.Tourist_Details) FROM Visitors AS T1",
    "question": "How many visitors are there?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.price_range FROM Hotels AS T1 WHERE T1.star_rating_code != '5'",
    "question": "What are the price ranges of hotels that are not five star?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT AVG( T1.price_range) FROM Hotels AS T1 WHERE T1.star_rating_code = '5' OR T1.pets_allowed_yn = '1'",
    "question": "Show the average price range of hotels that have 5 star ratings or allow pets."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT AVG( T1.price_range) FROM Hotels AS T1 WHERE T1.star_rating_code = '5' OR T1.pets_allowed_yn = '1'",
    "question": "What is the average price range of five star hotels that allow pets or do not allow pets?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Address FROM Locations AS T1 WHERE T1.Location_Name != 'UK Gallery'",
    "question": "What is the address of the location that is not \"UK Gallery\"?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Address FROM Locations AS T1 WHERE T1.Location_Name != 'UK Gallery'",
    "question": "Find the address of all locations except \"UK Gallery\"."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Other_Details FROM Locations AS T1 WHERE T1.Location_Name != 'UK Gallery'",
    "question": "What is the detail of the location not UK Gallery?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Other_Details FROM Locations AS T1 WHERE T1.Location_Name != 'UK Gallery'",
    "question": "Return the detail of the location not named \"UK Gallery\"."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Location_Name FROM Locations AS T1 WHERE T1.Location_Name NOT LIKE 'film'",
    "question": "Which location names do not contain the word \"film\"?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Location_Name FROM Locations AS T1 WHERE T1.Location_Name NOT LIKE 'film'",
    "question": "Find all the locations whose names do not contain the word \"film\"."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT DISTINCT T1.Name FROM Photos AS T1",
    "question": "What are the distinct names associated with all the photos?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT DISTINCT T1.Name FROM Photos AS T1",
    "question": "List the distinct names associated with the photos."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Visit_Date) FROM Visits AS T1",
    "question": "How many distinct visit dates are there?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Visit_Date) FROM Visits AS T1",
    "question": "Find the number of distinct visit dates."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.How_to_Get_There != 'bus'",
    "question": "What are the names of the tourist attractions that cannot be accessed by bus?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.How_to_Get_There != 'bus'",
    "question": "Which tourist attractions can we get to by any means other than bus? Tell me the names of the attractions."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name, T1.Opening_Hours FROM Tourist_Attractions AS T1 WHERE T1.How_to_Get_There = 'bus' AND T1.How_to_Get_There = 'walk'",
    "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus and walk?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name, T1.Opening_Hours FROM Tourist_Attractions AS T1 WHERE T1.How_to_Get_There = 'bus' AND T1.How_to_Get_There = 'walk'",
    "question": "Find the names and opening hours of the tourist attractions that we get to by bus and walk."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T2.price_range >= 10000",
    "question": "What are the star rating descriptions of the hotels with price equal or above 10000?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T2.price_range >= 10000",
    "question": "Give me the star rating descriptions of the hotels that cost at least 10000."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Photos AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name != 'game1'",
    "question": "What is the name of the tourist attraction that is not associated with the photo \"game1\"?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Photos AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name != 'game1'",
    "question": "Which tourist attraction is not associated with the photo \"game1\"? Return its name."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name, T1.Description FROM Photos AS T1 JOIN Tourist_Attractions AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name != 'film festival'",
    "question": "What are the names and descriptions of the photos taken at the tourist attractions that are not \"film festival\"?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name, T1.Description FROM Photos AS T1 JOIN Tourist_Attractions AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name != 'film festival'",
    "question": "Find the names and descriptions of the photos taken at all tourist attractions except \"film festival\"."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Shop_Details FROM Shops AS T1 JOIN Tourist_Attractions AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There != 'walk'",
    "question": "What are the details of the shops that cannot be accessed by walk?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Shop_Details FROM Shops AS T1 JOIN Tourist_Attractions AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There != 'walk'",
    "question": "Find the details of the shops that cannot be reached by walk."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Staff AS T1 JOIN Tourist_Attractions AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name != 'US museum'",
    "question": "What is the name of the staff that is in charge of the attractions that are not named \"US museum\"?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Staff AS T1 JOIN Tourist_Attractions AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name != 'US museum'",
    "question": "Tell me the name of the staff in charge of the attractions other than \"US museum\"."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Visit_Date, T1.Visit_Details FROM Visits AS T1 JOIN Visitors AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T2.Tourist_Details != 'Vincent'",
    "question": "What are the visit date and details of the visitor whose detail is not 'Vincent'?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Visit_Date, T1.Visit_Details FROM Visits AS T1 JOIN Visitors AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T2.Tourist_Details != 'Vincent'",
    "question": "Find the visit date and details of the tourist whose detail is not 'Vincent'"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN Visitors AS T2 ON T3.Tourist_ID = T2.Tourist_ID WHERE T2.Tourist_Details != 'Vincent'",
    "question": "Which tourist attractions does the visitor with detail not 'Vincent' visit?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN Visitors AS T2 ON T3.Tourist_ID = T2.Tourist_ID WHERE T2.Tourist_Details != 'Vincent'",
    "question": "Show the tourist attractions not visited by the tourist whose detail is 'Vincent'."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name, T2.Visit_Date FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN Visitors AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = 'Vincent' AND T3.Tourist_Details = 'Vivian'",
    "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent and Vivian visited there?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name, T2.Visit_Date FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN Visitors AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = 'Vincent' AND T3.Tourist_Details = 'Vivian'",
    "question": "For each tourist attraction, return its name and the date when the tourists named Vincent and Vivian visited there."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name, T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  GROUP BY T2.Tourist_Attraction_ID HAVING COUNT(*) < 2",
    "question": "Show the names and ids of tourist attractions that are visited less than two times."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name, T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  GROUP BY T2.Tourist_Attraction_ID HAVING COUNT(*) > 2",
    "question": "Which tourist attractions are visited more than twice? Give me their names and ids."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name, T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  GROUP BY T2.Tourist_Attraction_ID HAVING COUNT(*) >= 1",
    "question": "Show the names and ids of tourist attractions that are visited at least once."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name, T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  GROUP BY T2.Tourist_Attraction_ID HAVING COUNT(*) >= 1",
    "question": "What are the names and ids of the tourist attractions that are visited at least once?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN Features AS T2 ON T3.Feature_ID = T2.Feature_ID WHERE T2.Feature_Details = 'park'",
    "question": "What are the names of the tourist attractions that have parking as their feature details?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN Features AS T2 ON T3.Feature_ID = T2.Feature_ID WHERE T2.Feature_Details = 'park'       EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN Features AS T2 ON T3.Feature_ID = T2.Feature_ID WHERE T2.Feature_Details = 'shopping'",
    "question": "Find the tourist attractions that have parking as their feature details but not shopping. What are the names of the attractions?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN Visitors AS T2 ON T3.Tourist_ID = T2.Tourist_ID WHERE T2.Tourist_Details = 'Vincent'",
    "question": "What are the names of the tourist attractions that Vincent visits?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN Visitors AS T2 ON T3.Tourist_ID = T2.Tourist_ID WHERE T2.Tourist_Details = 'Alison'     INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN Visitors AS T2 ON T3.Tourist_ID = T2.Tourist_ID WHERE T2.Tourist_Details = 'Rosalind'",
    "question": "What are the names of tourist attraction that both Alison and Rosalind visited?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN Visitors AS T2 ON T3.Tourist_ID = T2.Tourist_ID WHERE T2.Tourist_Details = 'Alison'     INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T5 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID JOIN Visitors AS T2 ON T3.Tourist_ID = T2.Tourist_ID WHERE T2.Tourist_Details = 'Rosalind'",
    "question": "Find the the names of the tourist attractions that the tourist named Alison and Rosalind both visited."
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT COUNT(*) FROM Visitors AS T1 JOIN Visits AS T2 ON T1.Tourist_ID = T2.Tourist_ID",
    "question": "How many tourists made at least one visit?"
  },
  {
    "db_id": "cre_Theme_park",
    "query": "SELECT COUNT(*) FROM Visitors AS T1 JOIN Visits AS T2 ON T1.Tourist_ID = T2.Tourist_ID",
    "question": "Count the number of tourists who visited any place."
  },
  {
    "db_id": "game_1",
    "query": "SELECT * FROM Video_Games AS T1",
    "question": "What are the attributes of all video games?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT * FROM Video_Games AS T1",
    "question": "What video games do you have?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT DISTINCT T1.GType FROM Video_Games AS T1",
    "question": "What are the distinct video game types?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT DISTINCT T1.GType FROM Video_Games AS T1",
    "question": "What are the different game types?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.GType) FROM Video_Games AS T1",
    "question": "How many distinct video game types are there?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.GType) FROM Video_Games AS T1",
    "question": "How many different types of video games are there?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.GName FROM Video_Games AS T1 WHERE T1.GType != 'Collectible card game'",
    "question": "Show all video games with type not Collectible card game."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.GName FROM Video_Games AS T1 WHERE T1.GType != 'Collectible card game'",
    "question": "What are the names of all video games that are not collectible cards?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.GType FROM Video_Games AS T1 WHERE T1.GName != 'Call of Destiny'",
    "question": "What is the type of video game that is not Call of Destiny."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.GType FROM Video_Games AS T1 WHERE T1.GName != 'Call of Destiny'",
    "question": "What type of games are not Call of Destiny?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT COUNT(*) FROM Video_Games AS T1 WHERE T1.GType != 'Massively multiplayer online game'",
    "question": "How many video games do not have type Massively multiplayer online game?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT COUNT(*) FROM Video_Games AS T1 WHERE T1.GType != 'Massively multiplayer online game'",
    "question": "Count the number of video games that are not of Massively multiplayer online game type ."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM Student AS T1 WHERE T1.city_code != 'CHI'",
    "question": "Show ids for all students who do not live in CHI."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM Student AS T1 WHERE T1.city_code != 'CHI'",
    "question": "What are the ids of all students who do not live in CHI?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM Student AS T1 WHERE T1.Advisor != 1121",
    "question": "Show ids for all students who do not have advisor 1121."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM Student AS T1 WHERE T1.Advisor != 1121",
    "question": "What are the ids of all students who do not have advisor number 1121?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.Fname FROM Student AS T1 WHERE T1.Major != 600",
    "question": "Show first name for all students with major not 600."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.Fname FROM Student AS T1 WHERE T1.Major != 600",
    "question": "What are the first names for all students who are not from the major numbered 600?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.Advisor FROM Student AS T1  GROUP BY T1.Advisor HAVING COUNT(*) <= 2",
    "question": "Show all advisors who have at most two students."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.Advisor FROM Student AS T1  GROUP BY T1.Advisor HAVING COUNT(*) > 2",
    "question": "What are the advisors"
  },
  {
    "db_id": "game_1",
    "query": "SELECT DISTINCT T1.SportName FROM SportsInfo AS T1",
    "question": "What are the names of all the sports?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT DISTINCT T1.SportName FROM SportsInfo AS T1",
    "question": "What are the different types of sports?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT DISTINCT T1.StuID FROM SportsInfo AS T1",
    "question": "Which students play sports?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT DISTINCT T1.StuID FROM SportsInfo AS T1",
    "question": "Which students are involved in sports?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM SportsInfo AS T1 WHERE T1.OnScholarship != 'Y'",
    "question": "List ids for all student who are not on scholarship."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM SportsInfo AS T1 WHERE T1.OnScholarship != 'Y'",
    "question": "What are the ids for all sporty students who are not on scholarship?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.LName FROM Student AS T1 JOIN SportsInfo AS T2 ON T1.StuID = T2.StuID WHERE T2.OnScholarship != 'Y'",
    "question": "Show last names for all student who are not on scholarship."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM SportsInfo AS T1  GROUP BY T1.StuID HAVING SUM( T1.HoursPerWeek) >= 10",
    "question": "What are the student IDs for everybody who worked for at least 10 hours per week on all sports?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.SportName FROM SportsInfo AS T1 WHERE T1.OnScholarship != 'Y' GROUP BY T1.SportName  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Which sport has most number of students not on scholarship?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.SportName FROM SportsInfo AS T1 WHERE T1.OnScholarship != 'Y' GROUP BY T1.SportName  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the sport with the most non-scholarship students?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM Student AS T1 WHERE T1.Major = 600       EXCEPT SELECT T2.StuID FROM SportsInfo AS T2 WHERE T2.OnScholarship = 'Y'",
    "question": "Show student ids who are not on scholarship and have major 600."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM Student AS T1 WHERE T1.Sex = 'F'",
    "question": "Show student ids who are female."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM Student AS T1 WHERE T1.Sex = 'F'",
    "question": "What are the ids of all female students?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM Student AS T1 WHERE T1.Sex = 'M'",
    "question": "Show all male student ids."
  },
  {
    "db_id": "game_1",
    "query": "SELECT SUM( T1.HoursPerWeek), SUM( T1.GamesPlayed) FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = 'David' OR T2.LName = 'Shieber'",
    "question": "Show total hours per week and number of games played for students with first name David or last name Shieber."
  },
  {
    "db_id": "game_1",
    "query": "SELECT SUM( T1.HoursPerWeek), SUM( T1.GamesPlayed) FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20",
    "question": "Show total hours per week and number of games played for students over 20."
  },
  {
    "db_id": "game_1",
    "query": "SELECT SUM( T1.HoursPerWeek), SUM( T1.GamesPlayed) FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age <= 20",
    "question": "What is the total number of hours per week and number of games played by students under or equal to 20?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT DISTINCT T1.StuID FROM Plays_Games AS T1",
    "question": "What are the student IDs of students who play video games?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT DISTINCT T1.StuID FROM Plays_Games AS T1",
    "question": "What are the different students who play games?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM Student AS T1",
    "question": "Show ids of students."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM Student AS T1",
    "question": "What are the ids of all students?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM SportsInfo AS T1",
    "question": "Show ids of students who play sports."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.StuID FROM SportsInfo AS T1",
    "question": "What are the ids of all students who played sports?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.GName FROM Video_Games AS T1 JOIN Plays_Games AS T2 ON T1.GameID = T2.GameID  GROUP BY T1.GName HAVING SUM( T2.Hours_Played) < 1000",
    "question": "Show all game names played by less than 1000 hours."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.GName FROM Video_Games AS T1 JOIN Plays_Games AS T2 ON T1.GameID = T2.GameID  GROUP BY T1.GName HAVING SUM( T2.Hours_Played) > 1000",
    "question": "What are the names of all the games that have been played for more than 1000 hours?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.GName FROM Video_Games AS T1 JOIN Plays_Games AS T3 ON T1.GameID = T3.GameID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.LName = 'Smith' OR T2.Fname = 'Linda'",
    "question": "Show all game names played by Linda Smith or any of her family members"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.GName FROM Video_Games AS T1 JOIN Plays_Games AS T3 ON T1.GameID = T3.GameID JOIN Student AS T2 ON T3.StuID = T2.StuID WHERE T2.LName = 'Smith' OR T2.Fname = 'Linda'",
    "question": "What are the names of all games played by Linda Smith or by any student with the last name Smith?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.Fname, T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM SportsInfo AS T22 WHERE T22.SportName = 'Football')",
    "question": "Find the first name and age of the students who are not playing Football."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.Fname, T1.Age FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM SportsInfo AS T22 WHERE T22.SportName = 'Football')",
    "question": "What are the first names and ages of all students who are not playing Football?"
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.LName, T1.Sex FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM Plays_Games AS T22 JOIN Video_Games AS T23 ON T22.GameID = T23.GameID WHERE T23.GName = 'Call of Destiny')",
    "question": "Find the last name and gender of the students who are not playing Call of Destiny."
  },
  {
    "db_id": "game_1",
    "query": "SELECT T1.LName, T1.Sex FROM Student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM Plays_Games AS T22 JOIN Video_Games AS T23 ON T22.GameID = T23.GameID WHERE T23.GName = 'Call of Destiny')",
    "question": "what is the last name and gender of all students who did not play both Call of Destiny and Works of Widenius?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT COUNT( T1.customer_name) FROM Customers AS T1",
    "question": "Find the number of customers."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT COUNT( T1.customer_name) FROM Customers AS T1",
    "question": "How many customers are there?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT * FROM Customers AS T1",
    "question": "What are the customers?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT * FROM Customers AS T1",
    "question": "Return all the customers."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.order_quantity FROM Order_Items AS T1",
    "question": "What are the order quantities of each order?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1 WHERE T1.payment_method != 'Cash'",
    "question": "What are the names of customers who do not use payment method \"Cash\"?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1 WHERE T1.payment_method != 'Cash'",
    "question": "Which customers do not use \"Cash\" for payment method? Return the customer names."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.payment_method) FROM Customers AS T1",
    "question": "How many distinct payment methods are there?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.payment_method) FROM Customers AS T1",
    "question": "Return the number of distinct payment methods used by customers."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_details) FROM Products AS T1",
    "question": "How many distinct products are there?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_details) FROM Products AS T1",
    "question": "Return the number of distinct product details."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1 WHERE T1.customer_name NOT LIKE 'Alex'",
    "question": "Find the name of all customers whose name does not contain \"Alex\"."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1 WHERE T1.customer_name NOT LIKE 'Alex'",
    "question": "Which customer's name does not contain \"Alex\"? Find the full name."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.product_details FROM Products AS T1 WHERE T1.product_details LIKE '%Latte%' AND T1.product_details LIKE '%Americano%'",
    "question": "Find the detail of products whose detail contains the word \"Latte\" and the word \"Americano\""
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.address_content FROM Addresses AS T1 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id JOIN Customers AS T2 ON T3.customer_id = T2.customer_id WHERE T2.customer_name != 'Maudie Kertzmann'",
    "question": "What is the address content of the customers not named \"Maudie Kertzmann\"?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.address_content FROM Addresses AS T1 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id JOIN Customers AS T2 ON T3.customer_id = T2.customer_id WHERE T2.customer_name != 'Maudie Kertzmann'",
    "question": "Return the address content for the customer whose name is not \"Maudie Kertzmann\"."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Addresses AS T3 ON T1.customer_id = T3.customer_id JOIN Addresses AS T2 ON T3.address_id = T2.address_id WHERE T2.state_province_county != 'Colorado'",
    "question": "Find the name of customers who are not living in Colorado?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Addresses AS T3 ON T1.customer_id = T3.customer_id JOIN Addresses AS T2 ON T3.address_id = T2.address_id WHERE T2.state_province_county != 'Colorado'",
    "question": "What are the names of customers who do not live in Colorado state?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.city FROM Addresses AS T1",
    "question": "Find the list of cities that customers are living in."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.city FROM Addresses AS T1",
    "question": "What are the cities where customers live?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city) FROM Addresses AS T1",
    "question": "How many distinct cities are there?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city) FROM Addresses AS T1",
    "question": "How many distinct cities are there?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.city FROM Addresses AS T1 WHERE T1.zip_postcode != '255'",
    "question": "Find the city without post code 255."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.city FROM Addresses AS T1 WHERE T1.zip_postcode != '255'",
    "question": "Which city is post code not 255 located in?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.state_province_county, T1.country FROM Addresses AS T1 WHERE T1.zip_postcode NOT LIKE '4'",
    "question": "Find the state and country of all cities with post code not starting with 4."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.state_province_county, T1.country FROM Addresses AS T1 WHERE T1.zip_postcode NOT LIKE '4'",
    "question": "What are the state and country of all the cities that do not have post codes starting with 4."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.country FROM Addresses AS T1  GROUP BY T1.country HAVING COUNT( T1.address_id) < 4",
    "question": "List the countries having less than 4 addresses listed."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.country FROM Addresses AS T1  GROUP BY T1.country HAVING COUNT( T1.address_id) >= 4",
    "question": "For which countries are there more than or equal to four distinct addresses listed?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT DISTINCT T1.channel_code FROM Customer_Contact_Channels AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name != 'Tillman Ernser'",
    "question": "Which contact channel has been used by the customer with name not \"Tillman Ernser\"?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name, T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T2.channel_code != 'Email'",
    "question": "Find the name and active date of the customer that do not use email as the contact channel."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name, T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T2.channel_code != 'Email'",
    "question": "What are the name and active date of the customers whose contact channel code is not email?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT SUM( T1.order_quantity) FROM Order_Items AS T1 JOIN Customer_Orders AS T3 ON T1.order_id = T3.order_id JOIN Customers AS T2 ON T3.customer_id = T2.customer_id WHERE T2.customer_name != 'Rodrick Heaney'",
    "question": "What is the total quantity of products purchased by all customers except \"Rodrick Heaney\"?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.customer_id) FROM Customer_Orders AS T1 WHERE T1.order_status != 'Cancelled'",
    "question": "How many customers have at least one order with status not \"Cancelled\"?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT COUNT(*) FROM Customer_Orders AS T1 WHERE T1.order_details != 'Second time'",
    "question": "How many orders have detail not \"Second time\"?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT COUNT(*) FROM Customer_Orders AS T1 WHERE T1.order_details != 'Second time'",
    "question": "Tell me the number of orders without \"Second time\" as order detail."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name, T2.order_date FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status != 'Delivered'",
    "question": "Find the customer name and date of the orders that do not have the status \"Delivered\"."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name, T2.order_date FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status != 'Delivered'",
    "question": "What are the customer name and date of the orders whose status is not \"Delivered\"."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT SUM( T1.order_quantity) FROM Order_Items AS T1 JOIN Customer_Orders AS T2 ON T1.order_id = T2.order_id WHERE T2.order_status != 'Cancelled'",
    "question": "What is the total number of products that are in orders with status not \"Cancelled\"?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT SUM( T1.order_quantity) FROM Order_Items AS T1 JOIN Customer_Orders AS T2 ON T1.order_id = T2.order_id WHERE T2.order_status != 'Cancelled'",
    "question": "Find the total quantity of products associated with the orders in the \"Not Cancelled\" status."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT SUM( T1.order_quantity) FROM Order_Items AS T1 JOIN Customer_Orders AS T2 ON T1.order_id = T2.order_id WHERE T2.order_date >= '2018-03-17 07:13:53'",
    "question": "What is the total amount of products purchased after or on 2018-03-17 07:13:53?"
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.address_content FROM Addresses AS T1 WHERE T1.city = 'East Julianaside' AND T1.state_province_county = 'Texas'       EXCEPT SELECT T2.address_content FROM Addresses AS T2 WHERE T2.city = 'Gleasonmouth' AND T2.state_province_county = 'Arizona'",
    "question": "Find all the addresses in East Julianaside, Texas but not in Gleasonmouth, Arizona."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.address_content FROM Addresses AS T1 WHERE T1.city = 'East Julianaside' AND T1.state_province_county = 'Texas'",
    "question": "What are all the addresses in East Julianaside, Texas."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1 WHERE T1.payment_method = 'Cash'",
    "question": "Find the name of customers who paid with Cash."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1 WHERE T1.payment_method = 'Cash'",
    "question": "What is the name of customers who use Cash as payment method."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1      INTERSECT SELECT T2.customer_name FROM Customers AS T2 JOIN Customer_Orders AS T4 ON T2.customer_id = T4.customer_id JOIN Order_Items AS T5 ON T4.order_id = T5.order_id JOIN Products AS T3 ON T5.product_id = T3.product_id WHERE T3.product_details = 'Latte'",
    "question": "Find the names of customers who ordered product Latte."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1",
    "question": "What are names of customers."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1      INTERSECT SELECT T2.customer_name FROM Customers AS T2",
    "question": "What are the names of customers who made an order."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T3 ON T1.customer_id = T3.customer_id JOIN Order_Items AS T4 ON T3.order_id = T4.order_id JOIN Products AS T2 ON T4.product_id = T2.product_id WHERE T2.product_details = 'Latte'       EXCEPT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T3 ON T1.customer_id = T3.customer_id JOIN Order_Items AS T4 ON T3.order_id = T4.order_id JOIN Products AS T2 ON T4.product_id = T2.product_id WHERE T2.product_details = 'Americano'",
    "question": "Find the names of customers who ordered Latte but not Americano."
  },
  {
    "db_id": "customers_and_addresses",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T3 ON T1.customer_id = T3.customer_id JOIN Order_Items AS T4 ON T3.order_id = T4.order_id JOIN Products AS T2 ON T4.product_id = T2.product_id WHERE T2.product_details = 'Latte'",
    "question": "What are the names of customers who have purchased product Latte?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT * FROM artist AS T1",
    "question": "What are the names of all the artists?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT * FROM artist AS T1",
    "question": "Show all the artists."
  },
  {
    "db_id": "music_4",
    "query": "SELECT COUNT( T1.Age) FROM artist AS T1",
    "question": "How many music artists are there?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT COUNT( T1.Age) FROM artist AS T1",
    "question": "How many ages are there in all music artists?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Age FROM artist AS T1",
    "question": "Return the age of all artists."
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Famous_Title FROM artist AS T1 WHERE T1.Artist != 'Triumfall'",
    "question": "What are the famous titles of the artists who are not \"Triumfall\"?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Famous_Title FROM artist AS T1 WHERE T1.Artist != 'Triumfall'",
    "question": "Return the famous titles of the artists who are not called \"Triumfall\"."
  },
  {
    "db_id": "music_4",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Famous_Release_date) FROM artist AS T1",
    "question": "How many distinct Famous release dates are there?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Category FROM music_festival AS T1 WHERE T1.Result != 'Awarded'",
    "question": "What are the category of music festivals with result not \"Awarded\"?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Category FROM music_festival AS T1 WHERE T1.Result != 'Awarded'",
    "question": "Return the categories of music festivals that do not have the result \"Awarded\"."
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Song FROM volume AS T1 WHERE T1.Weeks_on_Top < 1",
    "question": "What are the songs in volumes with less than 1 week on top?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT DISTINCT T1.Artist_ID FROM volume AS T1",
    "question": "What are the distinct artist ids?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT DISTINCT T1.Artist_ID FROM volume AS T1",
    "question": "List the distinct artist IDs."
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top >= 2",
    "question": "Please show the date of ceremony of the volumes that last more than or equal to 2 weeks on top."
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume WHERE T2.Result != 'Nominated'",
    "question": "Please show the songs that do not have result \"nominated\" at music festivals."
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume WHERE T2.Result != 'Nominated'",
    "question": "What are the songs in volumes that have not resulted in a nomination at music festivals?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Issue_Date FROM volume AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Artist != 'Gorgoroth'",
    "question": "Return the issue dates of volumes that are not by the artist named Gorgoroth."
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Song FROM volume AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Age < 32",
    "question": "What are the songs in volumes associated with the artist aged less than 32?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Song FROM volume AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Age < 32",
    "question": "Return names of songs in volumes that are by artists that are younger than 32 years old."
  },
  {
    "db_id": "music_4",
    "query": "SELECT AVG( T1.Weeks_on_Top) FROM volume AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Age < 25",
    "question": "What is the average weeks on top of volumes associated with the artist aged less than 25?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Category FROM music_festival AS T1  GROUP BY T1.Category HAVING COUNT(*) >= 1",
    "question": "What are the categories of music festivals for which there has been at least 1 music festival?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID",
    "question": "Find the famous titles of artists that have volumes."
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID",
    "question": "What are the famous titles of artists who have volumes?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2       EXCEPT SELECT T3.Famous_Title FROM artist AS T3 JOIN volume AS T4 ON T3.Artist_ID = T4.Artist_ID WHERE T4.Weeks_on_Top < 2",
    "question": "What are the famous titles of artists who have had volumes that spent more than 2 weeks on top but have not had volumes that spent less than 2 weeks on top?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 WHERE T1.Category = 'Best Song' OR T1.Result = 'Awarded'",
    "question": "What are the date of ceremony of music festivals with category \"Best Song\" or result \"Awarded\"?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 WHERE T1.Category = 'Best Song' OR T1.Result = 'Awarded'",
    "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" or result \"Awarded\"."
  },
  {
    "db_id": "music_4",
    "query": "SELECT DISTINCT T1.Artist_ID FROM volume AS T1",
    "question": "What are the distinct artist IDs?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT DISTINCT T1.Artist_ID FROM volume AS T1",
    "question": "List the artists who have had volumes."
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Issue_Date FROM volume AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Age < 23",
    "question": "What are the issue dates of volumes associated with the artist aged less than 23?"
  },
  {
    "db_id": "music_4",
    "query": "SELECT T1.Issue_Date FROM volume AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Age >= 23",
    "question": "Return the issue dates of volumes by artists who are at least 23 years old?"
  },
  {
    "db_id": "roller_coaster",
    "query": "SELECT * FROM roller_coaster AS T1",
    "question": "What are the roller coasters?"
  },
  {
    "db_id": "roller_coaster",
    "query": "SELECT T1.Name FROM country AS T1 WHERE T1.Languages = 'German'",
    "question": "List the names of countries whose language is \"German\"."
  },
  {
    "db_id": "roller_coaster",
    "query": "SELECT T1.Status FROM roller_coaster AS T1 WHERE T1.Length > 3300 AND T1.Height > 100",
    "question": "Show the statuses of roller coasters longer than 3300 and higher than 100."
  },
  {
    "db_id": "roller_coaster",
    "query": "SELECT T1.Status FROM roller_coaster AS T1  GROUP BY T1.Status HAVING COUNT(*) >= 2",
    "question": "List the status shared by two or more roller coaster."
  },
  {
    "db_id": "roller_coaster",
    "query": "SELECT COUNT(*) FROM country AS T1 WHERE T1.Country_ID IN (SELECT T22.Country_ID FROM roller_coaster AS T22 WHERE T22.Length > 3000)",
    "question": "How many countries have an roller coaster longer than 3000?"
  },
  {
    "db_id": "roller_coaster",
    "query": "SELECT T1.Name, T1.Area, T1.Population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.Speed > '60'",
    "question": "What are the country names, area and population which has roller coasters with speed higher"
  },
  {
    "db_id": "ship_1",
    "query": "SELECT DISTINCT T1.Rank FROM captain AS T1",
    "question": "What are the different captain ranks?"
  },
  {
    "db_id": "ship_1",
    "query": "SELECT DISTINCT T1.Rank FROM captain AS T1",
    "question": "List the ranks of captain."
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Class FROM captain AS T1  GROUP BY T1.Class HAVING COUNT(*) < 2",
    "question": "Which classes have less than two captains?"
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Class FROM captain AS T1  GROUP BY T1.Class HAVING COUNT(*) < 2",
    "question": "Give the classes that have less than two captains."
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Rank FROM captain AS T1 WHERE T1.Class = 'Cutter'       EXCEPT SELECT T2.Rank FROM captain AS T2 WHERE T2.Class = 'Armed schooner'",
    "question": "What are the ranks of captains that are in the Cutter class but not in the Armed schooner class?"
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Rank FROM captain AS T1      INTERSECT SELECT T2.Rank FROM captain AS T2 WHERE T2.Class = 'Third-rate ship of the line'",
    "question": "Find the captain rank that has captain in Third-rate ship of the line class."
  },
  {
    "db_id": "ship_1",
    "query": "SELECT * FROM Ship AS T1",
    "question": "what are the ships?"
  },
  {
    "db_id": "ship_1",
    "query": "SELECT * FROM Ship AS T1",
    "question": "List all the ships."
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Type FROM Ship AS T1 WHERE T1.Flag = 'Panama'       EXCEPT SELECT T2.Type FROM Ship AS T2 WHERE T2.Flag = 'Malta'",
    "question": "Find the ship type that are used by ships with Panama flag but not Malta flag."
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Type FROM Ship AS T1 WHERE T1.Flag = 'Panama'      UNION SELECT T2.Type FROM Ship AS T2 WHERE T2.Flag = 'Malta'",
    "question": "What types of ships have either Panama Flags or Malta flags?"
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Name FROM Ship AS T1 JOIN captain AS T2 ON T1.Ship_ID = T2.Ship_ID  GROUP BY T1.Name HAVING COUNT(*) >= 1",
    "question": "Find the name of the ships that have at least one captain."
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Name FROM Ship AS T1 JOIN captain AS T2 ON T1.Ship_ID = T2.Ship_ID  GROUP BY T1.Name HAVING COUNT(*) >= 1",
    "question": "What are the names of ships that have at least one captain?"
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Name, T1.Class FROM Ship AS T1 JOIN captain AS T2 ON T1.Ship_ID = T2.Ship_ID",
    "question": "what are the names and classes of the ships that have at least one captain?"
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Name, T1.Class FROM Ship AS T1 JOIN captain AS T2 ON T1.Ship_ID = T2.Ship_ID",
    "question": "Return the names and classes of ships that have a captain?"
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Name, T1.Flag FROM Ship AS T1 WHERE T1.Ship_ID IN (SELECT T22.Ship_ID FROM captain AS T22 WHERE T22.Rank = 'Midshipman')",
    "question": "Find the name and flag of ships that are steered by any captain with Midshipman rank."
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Name, T1.Flag FROM Ship AS T1 WHERE T1.Ship_ID IN (SELECT T22.Ship_ID FROM captain AS T22 WHERE T22.Rank = 'Midshipman')",
    "question": "What are the names and flags of ships that have a captain with the rank of Midshipman?"
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Name FROM Ship AS T1 JOIN captain AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Rank = 'Midshipman'      UNION SELECT T3.Name FROM Ship AS T3 JOIN captain AS T4 ON T3.Ship_ID = T4.Ship_ID WHERE T4.Rank = 'Lieutenant'",
    "question": "Find the name of the ships that are steered by either a captain with Midshipman rank or a captain with Lieutenant rank."
  },
  {
    "db_id": "ship_1",
    "query": "SELECT T1.Name FROM Ship AS T1 JOIN captain AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Rank = 'Midshipman'",
    "question": "What are the names of ships that are commanded by captains with the rank of Midshipman?"
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.Match_ID FROM match AS T1 WHERE T1.Competition != '1994 FIFA World Cup qualification'",
    "question": "Find the match ids of the cities that did not host competition \"1994 FIFA World Cup qualification\"?"
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.Match_ID FROM match AS T1 WHERE T1.Competition != '1994 FIFA World Cup qualification'",
    "question": "What is the match id of the competition not called \"1994 FIFA World Cup qualification\"?"
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year >= 2010",
    "question": "Find the cities which were once a host city after or equal to 2010?"
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year < 2010",
    "question": "Which cities served as a host city before 2010?"
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.Venue FROM match AS T1 JOIN hosting_city AS T3 ON T1.Match_ID = T3.Match_ID JOIN city AS T2 ON T3.Host_City = T2.City_ID WHERE T2.City = 'Nanjing ( Jiangsu )' OR T1.Competition = '1994 FIFA World Cup qualification'",
    "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\" or \"1994 FIFA World Cup qualification\"."
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.Jan FROM temperature AS T1 JOIN city AS T2 ON T1.City_ID = T2.City_ID WHERE T2.City != 'Shanghai'",
    "question": "Give me the temperature of all cities except Shanghai in January."
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.Jan FROM temperature AS T1 JOIN city AS T2 ON T1.City_ID = T2.City_ID WHERE T2.City != 'Shanghai'",
    "question": "What is the temperature of all cities except \"Shanghai\" city in January?"
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.Year FROM hosting_city AS T1 JOIN city AS T2 ON T1.Host_City = T2.City_ID WHERE T2.City != 'Taizhou ( Zhejiang )'",
    "question": "What is the host year of city not \"Taizhou ( Zhejiang )\"?"
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.Year FROM hosting_city AS T1 JOIN city AS T2 ON T1.Host_City = T2.City_ID WHERE T2.City != 'Taizhou ( Zhejiang )'",
    "question": "IN which year did city \"Taizhou ( Zhejiang )\" NOT serve as a host city?"
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID WHERE T2.Mar < T2.Jul       EXCEPT SELECT T3.City FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
    "question": "Which cities have lower temperature in March than in July and have not been once host cities?"
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID WHERE T2.Mar < T2.Dec      UNION SELECT T3.City FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
    "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec or which have been host cities."
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.City FROM city AS T1 WHERE T1.Regional_Population >= 10000000",
    "question": "Please give me a list of cities whose regional population is at least 10000000."
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.City FROM city AS T1 WHERE T1.Regional_Population >= 10000000",
    "question": "Which cities have regional population equal or above 10000000?"
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.City FROM city AS T1 WHERE T1.Regional_Population > 10000000     INTERSECT SELECT T2.City FROM city AS T2 WHERE T2.Regional_Population < 5000000",
    "question": "Please give me a list of cities whose regional population is over 8000000 and under 5000000."
  },
  {
    "db_id": "city_record",
    "query": "SELECT T1.City FROM city AS T1 WHERE T1.Regional_Population > 10000000",
    "question": "Which cities have regional population above 8000000?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.form_type_code) FROM Forms AS T1",
    "question": "How many types of forms are there?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.form_type_code) FROM Forms AS T1",
    "question": "How many different types of forms are there?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT T1.payment_method_code, T1.party_phone FROM Parties AS T1 WHERE T1.party_email != 'enrico09@example.com'",
    "question": "What is the payment method code and party phone of the party with the email not 'enrico09@example.com'?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id = T2.individual_id JOIN Organizations AS T3 ON T2.organization_id = T3.organization_id WHERE T3.organization_name != 'Labour Party'   ORDER BY T2.date_contact_to DESC LIMIT 1",
    "question": "Find the last name of the latest contact individual of the organization not named \"Labour Party\"."
  },
  {
    "db_id": "e_government",
    "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id = T2.individual_id JOIN Organizations AS T3 ON T2.organization_id = T3.organization_id WHERE T3.organization_name != 'Labour Party'   ORDER BY T2.date_contact_to DESC LIMIT 1",
    "question": "What is the last name of the contact individual from the organization that is not the Labour party organization who was contacted most recently?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id = T2.individual_id JOIN Organizations AS T3 ON T2.organization_id = T3.organization_id WHERE T3.uk_vat_number != (SELECT MAX( T24.uk_vat_number) FROM Organizations AS T24)   ORDER BY T2.date_contact_to ASC LIMIT 1",
    "question": "What is the last name of the first individual contacted from the organization with a UK Vat number that is not the maximum across all organizations?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT * FROM Services AS T1",
    "question": "What are the services?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT * FROM Services AS T1",
    "question": "List all services."
  },
  {
    "db_id": "e_government",
    "query": "SELECT T1.town_city FROM Addresses AS T1      INTERSECT SELECT T2.state_province_county FROM Addresses AS T2",
    "question": "Find the name of all the cities that are in both the cities and states."
  },
  {
    "db_id": "e_government",
    "query": "SELECT T1.town_city FROM Addresses AS T1        EXCEPT SELECT T2.state_province_county FROM Addresses AS T2",
    "question": "What are the names of all cities that are not states?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT COUNT(*) FROM Addresses AS T1 WHERE T1.state_province_county != 'Colorado'",
    "question": "How many cities are there not in state \"Colorado\"?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT COUNT(*) FROM Addresses AS T1 WHERE T1.state_province_county != 'Colorado'",
    "question": "Count the number of cities not in the state of Colorado."
  },
  {
    "db_id": "e_government",
    "query": "SELECT T1.payment_method_code FROM Parties AS T1  GROUP BY T1.payment_method_code HAVING COUNT(*) >= 3",
    "question": "Find the payment method code used by at least 3 parties."
  },
  {
    "db_id": "e_government",
    "query": "SELECT T1.organization_name FROM Organizations AS T1 WHERE T1.organization_name NOT LIKE 'Party'",
    "question": "Find the name of organizations whose names do not contain \"Party\"."
  },
  {
    "db_id": "e_government",
    "query": "SELECT T1.organization_name FROM Organizations AS T1 WHERE T1.organization_name NOT LIKE 'Party'",
    "question": "What are the names of organizations that do not contain the word \"Party\"?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT DISTINCT T1.payment_method_code FROM Parties AS T1",
    "question": "What are the distinct payment methods used by parties?"
  },
  {
    "db_id": "e_government",
    "query": "SELECT DISTINCT T1.payment_method_code FROM Parties AS T1",
    "question": "List all the different payment method codes used by parties."
  },
  {
    "db_id": "e_government",
    "query": "SELECT T1.state_province_county FROM Addresses AS T1 WHERE T1.line_1_number_building NOT LIKE '6862 Kaitlyn Knolls'",
    "question": "Give the state corresponding to the line number building not \"6862 Kaitlyn Knolls\"."
  },
  {
    "db_id": "e_government",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.individual_last_name) FROM Individuals AS T1",
    "question": "Find the number of distinct last names of individuals that have been contact individuals of an organization."
  },
  {
    "db_id": "e_government",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.individual_last_name) FROM Individuals AS T1",
    "question": "How many distinct last names of individuals who have been contact individuals for an organization?"
  },
  {
    "db_id": "school_bus",
    "query": "SELECT * FROM driver AS T1",
    "question": "What are the drivers' information?"
  },
  {
    "db_id": "school_bus",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Home_city) FROM driver AS T1",
    "question": "Show the number of different home cities."
  },
  {
    "db_id": "school_bus",
    "query": "SELECT T1.Party FROM driver AS T1 WHERE T1.Home_city = 'Hartford' OR T1.Age > 40",
    "question": "Show the party with drivers from Hartford or drivers older than 40."
  },
  {
    "db_id": "school_bus",
    "query": "SELECT T1.Home_city FROM driver AS T1       UNION SELECT T2.Home_city FROM driver AS T2 WHERE T2.Age > 40",
    "question": "Show all home cities or those having a driver older than 40."
  },
  {
    "db_id": "school_bus",
    "query": "SELECT T1.Name FROM driver AS T1 JOIN school_bus AS T2 ON T1.Driver_ID = T2.Driver_ID",
    "question": "Show the names of the drivers who have a school bus."
  },
  {
    "db_id": "school_bus",
    "query": "SELECT T1.Type FROM school AS T1  GROUP BY T1.Type HAVING COUNT(*) != 2",
    "question": "Show the types of schools that do not have two schools."
  },
  {
    "db_id": "school_bus",
    "query": "SELECT T1.School, T1.Type FROM school AS T1 JOIN school_bus AS T2 ON T1.School_ID = T2.School_ID",
    "question": "Show the school name and type for schools with a school bus."
  },
  {
    "db_id": "school_bus",
    "query": "SELECT COUNT(*) FROM driver AS T1 WHERE T1.Home_city = 'Hartford' AND T1.Age < 40",
    "question": "How many drivers are from Hartford city and younger than 40?"
  },
  {
    "db_id": "school_bus",
    "query": "SELECT T1.Name FROM driver AS T1 WHERE T1.Home_city = 'Hartford' OR T1.Age < 40",
    "question": "List names for drivers from Hartford city or younger than 40."
  },
  {
    "db_id": "flight_company",
    "query": "SELECT COUNT(*) FROM flight AS T1 WHERE T1.Velocity < 200",
    "question": "How many flights have a velocity smaller than 200?"
  },
  {
    "db_id": "flight_company",
    "query": "SELECT T1.Group_Equity_Shareholding FROM operate_company AS T1",
    "question": "What is group equity shareholding of the companies?"
  },
  {
    "db_id": "flight_company",
    "query": "SELECT T1.name FROM airport AS T1 WHERE T1.Country = 'Iceland'",
    "question": "What are the names of the airports which are in the country 'Iceland'?"
  },
  {
    "db_id": "flight_company",
    "query": "SELECT DISTINCT T1.Type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id WHERE T2.Velocity > 200",
    "question": "What are the distinct types of the companies that have operated any flights with velocity greater than 200?"
  },
  {
    "db_id": "flight_company",
    "query": "SELECT DISTINCT T1.Pilot FROM flight AS T1 JOIN airport AS T2 ON T1.airport_id = T2.id WHERE T2.Country = 'United States' AND T2.name = 'Billund Airport'",
    "question": "What are the different pilot names who had piloted a flight in the country 'United States' and in the airport named 'Billund Airport'?"
  },
  {
    "db_id": "flight_company",
    "query": "SELECT COUNT(*) FROM airport AS T1 WHERE T1.id IN (SELECT T22.airport_id FROM flight AS T22 WHERE T22.Pilot = 'Thompson')",
    "question": "How many airports have the pilot 'Thompson' driven an aircraft?"
  },
  {
    "db_id": "flight_company",
    "query": "SELECT T1.Pilot FROM flight AS T1 JOIN operate_company AS T2 ON T1.company_id = T2.id WHERE T2.Principal_activities = 'Cargo'",
    "question": "List the name of the pilots who have flied for a company that mainly provide 'Cargo' services."
  },
  {
    "db_id": "flight_company",
    "query": "SELECT T1.name FROM airport AS T1 WHERE T1.name NOT LIKE 'international'",
    "question": "Which of the airport names does not contain the word 'international'?"
  },
  {
    "db_id": "flight_company",
    "query": "SELECT T1.Country FROM airport AS T1  GROUP BY T1.Country HAVING COUNT(*) < 2",
    "question": "which countries have less than 2 airports?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Accounts AS T1",
    "question": "What are the accounts?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Accounts AS T1",
    "question": "Show all accounts."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Statements AS T1",
    "question": "What are all the statements we have?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Statements AS T1",
    "question": "Show all statements."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Documents AS T1",
    "question": "Show all documents."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Documents AS T1",
    "question": "Show all documents."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Type_Code, T1.Document_Name, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Noel CV' AND T1.Document_Name = 'King Book'",
    "question": "List the document type code, document name, and document description for the document with name 'Noel CV' and name 'King Book'."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Type_Code != 'BK'",
    "question": "Find names and ids of all documents with document type code not BK."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Type_Code != 'BK'",
    "question": "What are the names and ids of documents that do not have the type code BK?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT COUNT(*), T1.Project_ID FROM Documents AS T1 WHERE T1.Document_Type_Code != 'BK' GROUP BY T1.Project_ID",
    "question": "How many documents are with document type code not BK for each product id?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT COUNT(*), T1.Project_ID FROM Documents AS T1 WHERE T1.Document_Type_Code != 'BK' GROUP BY T1.Project_ID",
    "question": "Count the number of documents that do not have the type code BK that correspond to each product id."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Name, T1.Document_Date FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details != 'Graph Database project'",
    "question": "Show the document name and the document date for all documents on project with details not 'Graph Database project'."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Name, T1.Document_Date FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details != 'Graph Database project'",
    "question": "What are the names and dates for documents corresponding to project that does not have the details 'Graph Database project'?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Project_ID FROM Documents AS T1  GROUP BY T1.Project_ID HAVING COUNT(*) > 2",
    "question": "Show the ids for projects with more than 2 documents."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Project_ID FROM Documents AS T1  GROUP BY T1.Project_ID HAVING COUNT(*) < 2",
    "question": "What are project ids of projects that have less than 2 corresponding documents?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Type_Code FROM Documents AS T1  GROUP BY T1.Document_Type_Code HAVING COUNT(*) >= 3",
    "question": "Show the document type code with 3 or more documents."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Type_Code FROM Documents AS T1  GROUP BY T1.Document_Type_Code HAVING COUNT(*) > 3",
    "question": "What are the codes corresponding to document types for which there are more than 3 documents?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Statement_Details, T2.Document_Name FROM Statements AS T1 JOIN Documents AS T2 ON T1.Statement_ID = T2.Document_ID WHERE T1.Statement_Details != 'Private Project'",
    "question": "Show the statement detail and the corresponding document name for the statement with detail not 'Private Project'."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Statement_Details, T2.Document_Name FROM Statements AS T1 JOIN Documents AS T2 ON T1.Statement_ID = T2.Document_ID WHERE T1.Statement_Details != 'Private Project'",
    "question": "What are the details for statements with the details not 'Private Project', and what are the names of the corresponding documents?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Type_Description FROM Ref_Document_Types AS T1 WHERE T1.Document_Type_Name != 'Film'",
    "question": "What is the document type description for document type named not Film?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Type_Description FROM Ref_Document_Types AS T1 WHERE T1.Document_Type_Name != 'Film'",
    "question": "Return the description of all document types except 'Film'."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Projects AS T1",
    "question": "Show all projects."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Projects AS T1",
    "question": "What are the projects?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Project_ID, T1.Project_Details FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID  GROUP BY T2.Project_ID HAVING COUNT(*) <= 2",
    "question": "What is the project id and detail for the project with at most two documents?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Project_Details FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Document_Name != 'King Book'",
    "question": "What is the project detail for the project without document \"King Book\"?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Ref_Budget_Codes AS T1",
    "question": "What are the budget types?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Ref_Budget_Codes AS T1",
    "question": "Show all budget codes."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Budget_Type_Description FROM Ref_Budget_Codes AS T1 WHERE T1.Budget_Type_Code != 'ORG'",
    "question": "What is the description for the budget type with code not ORG?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Budget_Type_Description FROM Ref_Budget_Codes AS T1 WHERE T1.Budget_Type_Code != 'ORG'",
    "question": "Return the description of all the budget types that do not have the code ORG."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Documents_with_Expenses AS T1",
    "question": "What are the documents with expenses?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT * FROM Documents_with_Expenses AS T1",
    "question": "Show all documents with expenses."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_ID FROM Documents_with_Expenses AS T1 WHERE T1.Budget_Type_Code != 'SF'",
    "question": "What are the document ids for the budget type code not 'SF'?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_ID FROM Documents_with_Expenses AS T1 WHERE T1.Budget_Type_Code != 'SF'",
    "question": "Give the ids of documents with expenses that do not have the budget code 'SF'."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_ID FROM Documents_with_Expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code WHERE T2.Budget_Type_Description != 'Government'",
    "question": "Show ids for all documents with budget types not described as 'Government'."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_ID FROM Documents_with_Expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code WHERE T2.Budget_Type_Description != 'Government'",
    "question": "Give the ids for documents that do not have the budget description 'Government'."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_ID FROM Documents AS T1      INTERSECT SELECT T2.Document_ID FROM Documents_with_Expenses AS T2",
    "question": "What are the ids of documents which have expense budgets?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Type_Code = 'CV'     INTERSECT SELECT T2.Document_ID FROM Documents_with_Expenses AS T2",
    "question": "Show ids for all documents in type CV with expense budgets."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Name NOT LIKE 's'",
    "question": "What are the ids of documents with letter 's' not in the name with any expense budgets."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Name NOT LIKE 's'",
    "question": "Give the ids of documents that do not have expenses and do not contain the letter s in their names."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT COUNT(*) FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID",
    "question": "How many documents have at least one expense?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT COUNT(*) FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID",
    "question": "Count the number of documents that have expenses."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Budget_Type_Code = 'GV'       EXCEPT SELECT T3.Document_Date FROM Documents AS T3 JOIN Documents_with_Expenses AS T4 ON T3.Document_ID = T4.Document_ID WHERE T4.Budget_Type_Code = 'SF'",
    "question": "What are the dates for the documents with 'GV' type expenses but not 'SF' type expenses?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT T1.Document_Date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Budget_Type_Code = 'GV'",
    "question": "Give the dates of creation for documents that have budget type code 'GV'."
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT MAX( T1.Account_Details) FROM Accounts AS T1",
    "question": "What are the account details with the largest value?"
  },
  {
    "db_id": "cre_Docs_and_Epenses",
    "query": "SELECT MAX( T1.Account_Details) FROM Accounts AS T1",
    "question": "Return the account details with the greatest value."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT * FROM Scientists AS T1",
    "question": "Find all the scientists."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT * FROM Scientists AS T1",
    "question": "What are the names of all the scientists?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Hours FROM Projects AS T1",
    "question": "Find the hours of all projects."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT DISTINCT T1.Scientist FROM AssignedTo AS T1",
    "question": "What are the names of all the scientists assigned to any project?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT DISTINCT T1.Scientist FROM AssignedTo AS T1",
    "question": "List all the scientists assigned to any project."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT DISTINCT T1.Name FROM Projects AS T1",
    "question": "Find the names of all distinct projects."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT DISTINCT T1.Name FROM Projects AS T1",
    "question": "What are the names of the projects?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Hours FROM Projects AS T1",
    "question": "Find the hours of all projects."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Hours FROM Projects AS T1",
    "question": "What are the hours across all projects?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Name FROM Projects AS T1 WHERE T1.Hours < (SELECT AVG( T22.Hours) FROM Projects AS T22)",
    "question": "List the name of all projects that are operated shorter than the average working hours of all projects."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Name FROM Projects AS T1 WHERE T1.Hours = (SELECT AVG( T22.Hours) FROM Projects AS T22)",
    "question": "What are the names of projects that have taken the average number of hours for all projects?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Name FROM Projects AS T1 JOIN AssignedTo AS T3 ON T1.Code = T3.Project JOIN Scientists AS T2 ON T3.Scientist = T2.SSN WHERE T2.Name NOT LIKE 'Smith'",
    "question": "Find the name of the project for which a scientist whose name does not contain \u2018Smith\u2019 is assigned to."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Name FROM Projects AS T1 JOIN AssignedTo AS T3 ON T1.Code = T3.Project JOIN Scientists AS T2 ON T3.Scientist = T2.SSN WHERE T2.Name NOT LIKE 'Smith'",
    "question": "What is the name of the project that has a scientist assigned to it whose name does not contain 'Smith'?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT SUM( T1.Hours) FROM Projects AS T1 JOIN AssignedTo AS T3 ON T1.Code = T3.Project JOIN Scientists AS T2 ON T3.Scientist = T2.SSN WHERE T2.Name = 'Michael Rogers' AND T2.Name = 'Carol Smith'",
    "question": "Find the total hours of the projects that scientists named Michael Rogers and Carol Smith are assigned to."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT SUM( T1.Hours) FROM Projects AS T1 JOIN AssignedTo AS T3 ON T1.Code = T3.Project JOIN Scientists AS T2 ON T3.Scientist = T2.SSN WHERE T2.Name = 'Michael Rogers' AND T2.Name = 'Carol Smith'",
    "question": "What is the sum of hours for projects that scientists with the name Michael Rogers and Carol Smith are assigned to?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Name FROM Scientists AS T1 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist JOIN Projects AS T2 ON T3.Project = T2.Code WHERE T2.Name = 'Matter of Time'      UNION SELECT T1.Name FROM Scientists AS T1 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist JOIN Projects AS T2 ON T3.Project = T2.Code WHERE T2.Name = 'A Puzzling Parallax'",
    "question": "What are the names of any scientists who worked on projects named 'Matter of Time' or 'A Puzzling Pattern'?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT COUNT(*), T2.Name FROM AssignedTo AS T1 JOIN Projects AS T2 ON T1.Project = T2.Code WHERE T2.Hours < 300 GROUP BY T2.Name",
    "question": "Find the number of scientists involved for the projects that require less than 300 hours."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT COUNT(*), T2.Name FROM AssignedTo AS T1 JOIN Projects AS T2 ON T1.Project = T2.Code WHERE T2.Hours < 300 GROUP BY T2.Name",
    "question": "What are the names of projects that require less than 300 hours, and how many scientists are assigned to each?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.SSN, T1.Name FROM Scientists AS T1 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist JOIN Projects AS T2 ON T3.Project = T2.Code WHERE T2.Hours > (SELECT MAX( T23.Hours) FROM Projects AS T23)",
    "question": "Find the SSN and name of scientists who are assigned to projects with more than the average number of hours."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT COUNT( T1.Name) FROM Scientists AS T1",
    "question": "Find the number of scientists."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT COUNT( T1.Name) FROM Scientists AS T1",
    "question": "How many scientists are assigned to any project?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Name FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project",
    "question": "Select the project names which are assigned to employees."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Name FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project",
    "question": "What are the names of projects that have been assigned?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Name FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist",
    "question": "Find the name of scientists who are assigned to a project."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Name FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist",
    "question": "What are the names of scientists who have been assigned a project?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT COUNT(*) FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist",
    "question": "Find the number of scientists who are assigned to a project."
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT COUNT(*) FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist",
    "question": "How many scientists are assigned to at least one project?"
  },
  {
    "db_id": "scientist_1",
    "query": "SELECT T1.Name FROM Scientists AS T1      INTERSECT SELECT T2.Name FROM Scientists AS T2 JOIN AssignedTo AS T4 ON T2.SSN = T4.Scientist JOIN Projects AS T3 ON T4.Project = T3.Code WHERE T3.Hours = (SELECT MAX( T24.Hours) FROM Projects AS T24)",
    "question": "What are the names of scientists who are working on the project with the most hours?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 WHERE T1.Year != 2008",
    "question": "Find the names of all wines not produced in 2008."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 WHERE T1.Year != 2008",
    "question": "What are the names of all wines NOT produced in 2008?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Price FROM wine AS T1 WHERE T1.Year <= 2010",
    "question": "What are the prices of wines produced before or in the year of 2010?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Price FROM wine AS T1 WHERE T1.Year > 2010",
    "question": "Return the prices of wines produced after 2010."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 WHERE T1.Score < 90",
    "question": "List the names of all distinct wines that have scores lower than 90."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 WHERE T1.Score >= 90",
    "question": "What are the names of wines with scores equal to or higher than 90?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT DISTINCT T1.Name FROM wine AS T1 JOIN grapes AS T2 ON T1.Grape = T2.Grape WHERE T2.Color != 'Red'",
    "question": "List the names of all distinct wines that are not made of red color grape."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT DISTINCT T1.Name FROM wine AS T1 JOIN appellations AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Area != 'North Coast'",
    "question": "Find the names of all distinct wines that have appellations in any area other than North Coast."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT DISTINCT T1.Name FROM wine AS T1 JOIN appellations AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Area != 'North Coast'",
    "question": "What are the distinct names of wines that have appellations in areas other than the North Coast?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT COUNT(*) FROM wine AS T1 WHERE T1.Winery != 'Robert Biale'",
    "question": "How many wines are produced at wineries other than Robert Biale?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT COUNT(*) FROM wine AS T1 WHERE T1.Winery != 'Robert Biale'",
    "question": "Count the number of wines produced at all wineries except Robert Biale winery."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT COUNT(*) FROM appellations AS T1 WHERE T1.County != 'Napa'",
    "question": "How many appelations are not in Napa Country?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT COUNT(*) FROM appellations AS T1 WHERE T1.County != 'Napa'",
    "question": "Count the number of appelations not in Napa County."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT AVG( T1.Price) FROM wine AS T1 JOIN appellations AS T2 ON T1.Appelation = T2.Appelation WHERE T2.County != 'Sonoma'",
    "question": "Give me the average prices of wines that are produced by appelations not in Sonoma County."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT AVG( T1.Price) FROM wine AS T1 JOIN appellations AS T2 ON T1.Appelation = T2.Appelation WHERE T2.County != 'Sonoma'",
    "question": "What is the average price of wines produced in appelations not in Sonoma County?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name, T1.Score FROM wine AS T1 JOIN grapes AS T2 ON T1.Grape = T2.Grape WHERE T2.Color != 'White'",
    "question": "What are the names and scores of wines that are not made of white color grapes?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT MAX( T1.Price) FROM wine AS T1 JOIN appellations AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Area = 'Central Coast' OR T1.Year < 2005",
    "question": "Find the maximum price of wins from the appelations in Central Coast area or produced before the year of 2005."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT DISTINCT T1.Grape FROM grapes AS T1 JOIN wine AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'White' OR T2.Score > 90",
    "question": "Find the white grape used to produce wines with scores above 90 or all white grapes."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 JOIN grapes AS T2 ON T1.Grape = T2.Grape WHERE T2.Color = 'Red' OR T1.Price > 50",
    "question": "What are the wines that have prices higher than 50 or made of Red color grapes?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 JOIN grapes AS T2 ON T1.Grape = T2.Grape WHERE T2.Color = 'Red' OR T1.Price > 50",
    "question": "What are the names of wines made from red grapes or with prices above 50?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 JOIN appellations AS T2 ON T1.Appelation = T2.Appelation WHERE T2.County = 'Monterey' OR T1.Price < 50",
    "question": "What are the wines that have prices lower than 50 or have appelations in Monterey county?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 JOIN appellations AS T2 ON T1.Appelation = T2.Appelation WHERE T2.County = 'Monterey' OR T1.Price < 50",
    "question": "Give the names of wines with prices below 50 or with appelations in Monterey county."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Price, T1.Year FROM wine AS T1",
    "question": "What are the prices and years of all the wines?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Price, T1.Year FROM wine AS T1",
    "question": "What are the prices and years of all the wines?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT DISTINCT T1.Name FROM wine AS T1 WHERE T1.Price != (SELECT MIN( T22.Price) FROM wine AS T22 WHERE T22.Winery = 'John Anthony')",
    "question": "What are the distinct names of wines with prices not equal to the minimum price of wines from John Anthony winery."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM wine AS T1     ORDER BY T1.Name ASC",
    "question": "How many distinct names of wines are there, sorted in alphabetical order?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Name) FROM wine AS T1     ORDER BY T1.Price ASC",
    "question": "How many distinct names of wines are there, sorted by price ascending?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT AVG( T1.Price), AVG( T1.Cases) FROM wine AS T1 WHERE T1.Year = 2009 OR T1.Grape = 'Zinfandel'",
    "question": "What are the average prices and cases of wines produced in the year of 2009 or made of Zinfandel grape?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT MAX( T1.Price), MAX( T1.Score) FROM wine AS T1 WHERE T1.Appelation != 'St. Helena'",
    "question": "What are the maximum price and score of wines produced by all appelations except St. Helena?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT MAX( T1.Price), MAX( T1.Score) FROM wine AS T1 WHERE T1.Appelation != 'St. Helena'",
    "question": "Give the maximum price and score for wines produced outside the appelation St. Helena."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Price, AVG( T1.Score), T1.Appelation FROM wine AS T1  GROUP BY T1.Appelation",
    "question": "What are the average score of wines for each appelation?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Winery FROM wine AS T1  GROUP BY T1.Winery HAVING COUNT(*) > 4",
    "question": "Find the wineries that have more than four wines."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Winery FROM wine AS T1  GROUP BY T1.Winery HAVING COUNT(*) < 4",
    "question": "Which wineries produce less than four wines?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation  GROUP BY T1.County HAVING COUNT(*) < 3",
    "question": "Find the country of all appelations who have less than three wines."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation  GROUP BY T1.County HAVING COUNT(*) > 3",
    "question": "What are the countries for appelations with more than 3 wines?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 WHERE T1.Year != (SELECT MIN( T22.Year) FROM wine AS T22 WHERE T22.Winery = 'Brander')",
    "question": "What are the names of wines whose production year are not before the year of all wines by Brander winery?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 WHERE T1.Year > (SELECT MIN( T22.Year) FROM wine AS T22 WHERE T22.Winery = 'Brander')",
    "question": "What are the names of wines produced after any wine from the Brander winery?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 WHERE T1.Price < (SELECT MAX( T22.Price) FROM wine AS T22 WHERE T22.Year = 2006)",
    "question": "What are the names of wines that are less expensive then all wines made in the year 2006?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Name FROM wine AS T1 WHERE T1.Price < (SELECT MAX( T22.Price) FROM wine AS T22 WHERE T22.Year = 2006)",
    "question": "Give the names of wines with prices below any wine produced in 2006."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Winery FROM wine AS T1 JOIN grapes AS T2 ON T1.Grape = T2.Grape WHERE T2.Color != 'White' GROUP BY T1.Winery  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Which 3 wineries produce the most wines made from non-white grapes?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Grape, T1.Winery, T1.Year FROM wine AS T1 WHERE T1.Price >= 100    ORDER BY T1.Year ASC",
    "question": "List the grape, winery and year of the wines whose price is equal or bigger than 100 ordered by year."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Grape, T1.Winery, T1.Year FROM wine AS T1 WHERE T1.Price < 100    ORDER BY T1.Year ASC",
    "question": "What are the grapes, wineries and years for wines with price lower than 100, sorted by year?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Grape, T1.Appelation, T1.Name FROM wine AS T1 WHERE T1.Score >= 93    ORDER BY T1.Name ASC",
    "question": "List the grape, appelation and name of wines whose score is higher than or equal to 93 ordered by Name."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Grape, T1.Appelation, T1.Name FROM wine AS T1 WHERE T1.Score <= 93    ORDER BY T1.Name ASC",
    "question": "What are the grapes, appelations, and wines with scores below or equal to 93, sorted by Name?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.Appelation FROM wine AS T1 WHERE T1.Year > 2008",
    "question": "Find the appelations that produce wines after the year of 2008."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT AVG( T1.Price) FROM wine AS T1 WHERE T1.Appelation IN (SELECT T22.Appelation FROM appellations AS T22 WHERE T22.County = 'Sonoma')",
    "question": "Find the average price of wines that are produced from Sonoma county."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT AVG( T1.Price) FROM wine AS T1 WHERE T1.Appelation IN (SELECT T22.Appelation FROM appellations AS T22 WHERE T22.County = 'Sonoma')",
    "question": "What is the average price for wines produced in Sonoma county?"
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score >= 90 GROUP BY T1.County  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Find the county where produces the most number of wines with score equal to or higher than 90."
  },
  {
    "db_id": "wine_1",
    "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score < 90 GROUP BY T1.County  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the county that produces the most wines scoring lower than 90?"
  },
  {
    "db_id": "train_station",
    "query": "SELECT * FROM station AS T1",
    "question": "What are the names of all train stations?"
  },
  {
    "db_id": "train_station",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Location) FROM station AS T1",
    "question": "How many distinct locations are there in train stations?"
  },
  {
    "db_id": "train_station",
    "query": "SELECT T1.Name, T1.Total_Passengers FROM station AS T1 WHERE T1.Location = 'London'",
    "question": "Show the names and total passengers for all train stations in London."
  },
  {
    "db_id": "train_station",
    "query": "SELECT AVG( T1.Total_Passengers), MAX( T1.Total_Passengers) FROM station AS T1 WHERE T1.Location = 'London' AND T1.Location = 'Glasgow'",
    "question": "What is the average and maximum number of total passengers for train stations in London and Glasgow?"
  },
  {
    "db_id": "train_station",
    "query": "SELECT DISTINCT T1.Location FROM station AS T1 WHERE T1.Number_of_Platforms >= 15 OR T1.Total_Passengers > 25",
    "question": "Show all locations that have train stations with at least 15 platforms or train stations with more than 25 total passengers."
  },
  {
    "db_id": "train_station",
    "query": "SELECT T1.Location FROM station AS T1",
    "question": "Show all locations which have a train station."
  },
  {
    "db_id": "train_station",
    "query": "SELECT * FROM train AS T1",
    "question": "Show all the trains"
  },
  {
    "db_id": "train_station",
    "query": "SELECT T1.Name, T1.Time FROM train AS T1 JOIN train_station AS T3 ON T1.Train_ID = T3.Train_ID JOIN station AS T2 ON T3.Station_ID = T2.Station_ID WHERE T2.Location != 'London'    ORDER BY T1.Time DESC",
    "question": "Show all train names and times in stations not in London in descending order by train time."
  },
  {
    "db_id": "train_station",
    "query": "SELECT T1.Name FROM station AS T1 JOIN train_station AS T2 ON T1.Station_ID = T2.Station_ID  GROUP BY T1.Name HAVING COUNT(*) < 2",
    "question": "Show the station name with less than two trains."
  },
  {
    "db_id": "train_station",
    "query": "SELECT T1.Name FROM station AS T1 JOIN train_station AS T2 ON T1.Station_ID = T2.Station_ID",
    "question": "Show station names with any trains."
  },
  {
    "db_id": "train_station",
    "query": "SELECT T1.Name FROM station AS T1 JOIN train_station AS T3 ON T1.Station_ID = T3.Station_ID JOIN train AS T2 ON T3.Train_ID = T2.Train_ID WHERE T2.Name = 'Ananthapuri Express'       EXCEPT SELECT T1.Name FROM station AS T1 JOIN train_station AS T3 ON T1.Station_ID = T3.Station_ID JOIN train AS T2 ON T3.Train_ID = T2.Train_ID WHERE T2.Name = 'Guruvayur Express'",
    "question": "What are the names of the stations which serve \"Ananthapuri Express\" but not \"Guruvayur Express\" trains?"
  },
  {
    "db_id": "train_station",
    "query": "SELECT T1.Name FROM train AS T1 JOIN train_station AS T2 ON T1.Train_ID = T2.Train_ID WHERE T2.Station_ID IN (SELECT T23.Station_ID FROM station AS T23 WHERE T23.Location = 'London')",
    "question": "Find the names of the trains that pass at least one station located in London."
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT( T1.vehicle_id) FROM Vehicles AS T1",
    "question": "How many vehicles are there?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT( T1.vehicle_id) FROM Vehicles AS T1",
    "question": "How many vehicles are there?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT * FROM Vehicles AS T1",
    "question": "What are all the vehicles?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT * FROM Vehicles AS T1",
    "question": "What are the vehicles?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.vehicle_details FROM Vehicles AS T1 WHERE T1.vehicle_id != 1",
    "question": "What are the details of the cars that do not have id 1?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.date_of_birth FROM Staff AS T1 WHERE T1.first_name = 'Janessa' OR T1.last_name = 'Sawayn'",
    "question": "What is the birthday of the staff member with first name as Janessa or last name as Sawayn?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.date_of_birth FROM Staff AS T1 WHERE T1.first_name = 'Janessa' OR T1.last_name = 'Sawayn'",
    "question": "What is the date of birth for the staff member named Janessa or Sawayn?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.date_joined_staff FROM Staff AS T1 WHERE T1.first_name = 'Janessa' OR T1.last_name = 'Sawayn'",
    "question": "When did the staff member with first name as Janessa or last name as Sawayn join the company?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.date_joined_staff FROM Staff AS T1 WHERE T1.first_name = 'Janessa' OR T1.last_name = 'Sawayn'",
    "question": "When did any staff member named Janessa or Sawayn join the company?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.date_left_staff FROM Staff AS T1 WHERE T1.first_name = 'Janessa' OR T1.last_name = 'Sawayn'",
    "question": "When did the staff member with first name as Janessa or the staff member with last name as Sawayn leave the company?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.date_left_staff FROM Staff AS T1 WHERE T1.first_name = 'Janessa' OR T1.last_name = 'Sawayn'",
    "question": "When did any staff member named Janessa or Sawayn leave the company?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Staff AS T1 WHERE T1.first_name != 'Ludie'",
    "question": "How many staff do not have the first name Ludie?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Staff AS T1 WHERE T1.first_name != 'Ludie'",
    "question": "How many employees do not have a first name of Ludie?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.nickname FROM Staff AS T1 WHERE T1.first_name = 'Janessa' OR T1.last_name = 'Sawayn'",
    "question": "What is the nickname of staff with first name as Janessa or last name as Sawayn?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.nickname FROM Staff AS T1 WHERE T1.first_name = 'Janessa' OR T1.last_name = 'Sawayn'",
    "question": "What is the nickname of the employee named Janessa or Sawayn?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT * FROM Staff AS T1",
    "question": "What are the information of all staff?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT * FROM Staff AS T1",
    "question": "What are the names of all the employees?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' OR T2.last_name = 'Sawayn'",
    "question": "Which city does staff with first name as Janessa or last name as Sawayn live?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.country, T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' OR T2.last_name = 'Sawayn'",
    "question": "Which country and state does staff with first name as Janessa or last name as Sawayn lived?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT SUM( T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Rylan' OR T2.last_name = 'Goodwin'",
    "question": "How long is the total lesson time took by customer with first name as Rylan or last name as Goodwin?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' OR T2.last_name = 'Sawayn'",
    "question": "What is the zip code of staff with first name as Janessa or last name as Sawayn lived?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Addresses AS T1 WHERE T1.state_province_county != 'Georgia'",
    "question": "How many staff live in states other than Georgia?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Addresses AS T1 WHERE T1.state_province_county != 'Georgia'",
    "question": "How many employees do not live in Georgia?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.first_name, T1.last_name FROM Staff AS T1 JOIN Addresses AS T2 ON T1.staff_address_id = T2.address_id WHERE T2.city != 'Damianfort'",
    "question": "Find out the first name and last name of staff not lived in city Damianfort."
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.first_name, T1.last_name FROM Staff AS T1 JOIN Addresses AS T2 ON T1.staff_address_id = T2.address_id WHERE T2.city != 'Damianfort'",
    "question": "What is the first and last name of all employees who do not live in the city Damianfort?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.email_address, T1.date_of_birth FROM Customers AS T1 WHERE T1.first_name != 'Carole'",
    "question": "List email address and birthday of customer whose first name is not Carole."
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.email_address, T1.date_of_birth FROM Customers AS T1 WHERE T1.first_name != 'Carole'",
    "question": "What are the email addresses and date of births for all customers who do not have a first name of Carole?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.phone_number, T1.email_address FROM Customers AS T1 WHERE T1.amount_outstanding >= 2000",
    "question": "List phone number and email address of customer with 2000 or more outstanding balance."
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.phone_number, T1.email_address FROM Customers AS T1 WHERE T1.amount_outstanding < 2000",
    "question": "What are the phone numbers and email addresses of all customers who have an outstanding balance of less than 2000?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.customer_status_code, T1.cell_mobile_phone_number, T1.email_address FROM Customers AS T1 WHERE T1.first_name = 'Marina' AND T1.last_name = 'Kohler'",
    "question": "What is the status code, mobile phone number and email address of customer with last name as Kohler and first name as Marina?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.date_of_birth FROM Customers AS T1 WHERE T1.customer_status_code != 'Good Customer'",
    "question": "When are the birthdays of customer who are not classified as 'Good Customer' status?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.date_of_birth FROM Customers AS T1 WHERE T1.customer_status_code != 'Good Customer'",
    "question": "What is the date of birth of every customer whose status code is not 'Good Customer'?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.date_became_customer FROM Customers AS T1 WHERE T1.first_name = 'Carole' OR T1.last_name = 'Bernhard'",
    "question": "When did customer with first name as Carole or last name as Bernhard become a customer?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.date_became_customer FROM Customers AS T1 WHERE T1.first_name = 'Carole' OR T1.last_name = 'Bernhard'",
    "question": "When did Carole or Bernhard first become a customer?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT * FROM Customers AS T1",
    "question": "What are the details of all customers?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT * FROM Customers AS T1",
    "question": "What are the customers?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Rylan' OR T2.last_name = 'Goodwin' AND T1.lesson_status_code = 'Completed'",
    "question": "How many lessons taken by customer with first name as Rylan or last name as Goodwin were completed?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Rylan' OR T2.last_name = 'Goodwin' AND T1.lesson_status_code = 'Completed'",
    "question": "How many lessons did the customer Ryan Goodwin or Rylan Goodwin complete?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.first_name, T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city != 'Lockmanfurt'",
    "question": "List first name and last name of customers not lived in city Lockmanfurt."
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.first_name, T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city != 'Lockmanfurt'",
    "question": "What are the first and last names of all customers who did not live in Lockmanfurt?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.country FROM Addresses AS T1 JOIN Customers AS T2 ON T1.address_id = T2.customer_address_id WHERE T2.first_name = 'Carole' OR T2.last_name = 'Bernhard'",
    "question": "Which country does customer with first name as Carole or last name as Bernhard lived in?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.country FROM Addresses AS T1 JOIN Customers AS T2 ON T1.address_id = T2.customer_address_id WHERE T2.first_name = 'Carole' OR T2.last_name = 'Bernhard'",
    "question": "What is the country in which the customer Carole or Bernhard lived?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Customers AS T2 ON T1.address_id = T2.customer_address_id WHERE T2.first_name = 'Carole' OR T2.last_name = 'Bernhard'",
    "question": "What is zip code of customer with first name as Carole or last name as Bernhard?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Customers AS T2 ON T1.address_id = T2.customer_address_id WHERE T2.first_name = 'Carole' OR T2.last_name = 'Bernhard'",
    "question": "What is the zip code of the customer Carole or Bernhard?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT SUM( T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Carole' OR T2.last_name = 'Bernhard'",
    "question": "How much in total does customer with first name as Carole or last name as Bernhard paid?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT SUM( T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Carole' OR T2.last_name = 'Bernhard'",
    "question": "What is the total amount of moeny paid by the customer Carole or Bernhard?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Customers AS T1 JOIN Customer_Payments AS T2 ON T1.customer_id = T2.customer_id",
    "question": "List the number of customers that have at least one payment history."
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Customers AS T1 JOIN Customer_Payments AS T2 ON T1.customer_id = T2.customer_id",
    "question": "How many customers have payment histories?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Lessons AS T1 WHERE T1.lesson_status_code != 'Cancelled'",
    "question": "How many lessons were not in cancelled state?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' OR T2.last_name = 'Sawayn' AND T2.nickname LIKE '%s%'",
    "question": "List lesson id of all lessons taught by staff with first name as Janessa or last name as Sawayn and nickname containing letter 's'."
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name NOT LIKE 'a'",
    "question": "How many lessons taught by staff whose first name does not have letter 'a' in it?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name NOT LIKE 'a'",
    "question": "How many lessons were taught by a staff member whose first name does not have the letter 'a' in it?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT SUM( T1.lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' OR T2.last_name = 'Sawayn'",
    "question": "How long is the total lesson time taught by staff with first name as Janessa or last name as Sawayn?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT AVG( T1.price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' OR T2.last_name = 'Sawayn'",
    "question": "What is average lesson price taught by staff with first name as Janessa or last name as Sawayn?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT AVG( T1.price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' OR T2.last_name = 'Sawayn'",
    "question": "What is the average price for a lesson taught by Janessa Sawayn or any of her colleagues?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name != 'Ray'",
    "question": "How many lesson does customer with first name not Ray took?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name != 'Ray'",
    "question": "How many lessons did the customer with the first name not Ray take?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.last_name FROM Customers AS T1",
    "question": "What are the last names of customers?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.last_name FROM Customers AS T1        EXCEPT SELECT T2.last_name FROM Staff AS T2",
    "question": "What are the last names that are used by customers but not by staff?"
  },
  {
    "db_id": "driving_school",
    "query": "SELECT T1.first_name FROM Staff AS T1",
    "question": "What is the first name of all employees?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT * FROM Faculty AS T1",
    "question": "What are the names of all faculty?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT * FROM Faculty AS T1",
    "question": "What are the names of all faculty members?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Rank) FROM Faculty AS T1",
    "question": "How many distinct ranks do we have for faculty?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Rank) FROM Faculty AS T1",
    "question": "Find the number of distinct ranks for faculty."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Building) FROM Faculty AS T1",
    "question": "Show the number of distinct buildings that have faculty rooms."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Building) FROM Faculty AS T1",
    "question": "How many buildings have faculty offices?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.Phone, T1.Room, T1.Building FROM Faculty AS T1 WHERE T1.Fname = 'Jerry' OR T1.Lname = 'Prince'",
    "question": "Show the phone, room, and building for the faculty named Jerry or Prince."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.Phone, T1.Room, T1.Building FROM Faculty AS T1 WHERE T1.Fname = 'Jerry' OR T1.Lname = 'Prince'",
    "question": "What are the phone, room, and building of the faculty member called Jerry or Prince?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT COUNT(*) FROM Faculty AS T1 WHERE T1.Rank = 'Professor' OR T1.Building = 'NEB'",
    "question": "Count the number of Professors who have office in building NEB or who are Professors."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 WHERE T1.Rank != 'Instructor'",
    "question": "Show the first name and last name for all the non-instructors."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.Fname, T1.Lname FROM Faculty AS T1 WHERE T1.Rank != 'Instructor'",
    "question": "What are the first name and last name of all the non-instructors?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.StuID FROM Student AS T1 JOIN Participates_in AS T3 ON T1.StuID = T3.stuid JOIN Activity AS T4 ON T3.actid = T4.actid JOIN Faculty_Participates_in AS T5 ON T4.actid = T5.actid JOIN Faculty AS T2 ON T5.FacID = T2.FacID WHERE T2.Rank != 'Professor'",
    "question": "Show the ids of students whose advisors are not professors."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.StuID FROM Student AS T1 JOIN Participates_in AS T3 ON T1.StuID = T3.stuid JOIN Activity AS T4 ON T3.actid = T4.actid JOIN Faculty_Participates_in AS T5 ON T4.actid = T5.actid JOIN Faculty AS T2 ON T5.FacID = T2.FacID WHERE T2.Rank != 'Professor'",
    "question": "Which students do not have professors as their advisors? Find their student ids."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Participates_in AS T3 ON T1.StuID = T3.stuid JOIN Activity AS T4 ON T3.actid = T4.actid JOIN Faculty_Participates_in AS T5 ON T4.actid = T5.actid JOIN Faculty AS T2 ON T5.FacID = T2.FacID WHERE T2.Fname = 'Michael' OR T2.Lname = 'Goodrich'",
    "question": "Show first name and last name for all the students advised by Michael Goodrich or Michael Goodrich."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Participates_in AS T3 ON T1.StuID = T3.stuid JOIN Activity AS T4 ON T3.actid = T4.actid JOIN Faculty_Participates_in AS T5 ON T4.actid = T5.actid JOIN Faculty AS T2 ON T5.FacID = T2.FacID WHERE T2.Fname = 'Michael' OR T2.Lname = 'Goodrich'",
    "question": "Which students are advised by Michael Goodrich or Michael Hane? Give me their first and last names."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.FacID FROM Faculty AS T1 JOIN Faculty_Participates_in AS T3 ON T1.FacID = T3.FacID JOIN Activity AS T4 ON T3.actid = T4.actid JOIN Participates_in AS T5 ON T4.actid = T5.actid JOIN Student AS T2 ON T5.stuid = T2.StuID  GROUP BY T1.FacID HAVING COUNT(*) < 2",
    "question": "Show the ids for all the faculty members who have less than 2 students."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.FacID FROM Faculty AS T1",
    "question": "Show ids for the faculty members."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.FacID FROM Faculty AS T1",
    "question": "What are the ids of the faculty members."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT COUNT( T1.activity_name) FROM Activity AS T1",
    "question": "How many activities do we have?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT COUNT( T1.activity_name) FROM Activity AS T1",
    "question": "How many activities do we have?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT * FROM Activity AS T1",
    "question": "What are all the activities?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT * FROM Activity AS T1",
    "question": "Find all activities available."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT DISTINCT T1.FacID FROM Faculty_Participates_in AS T1",
    "question": "Which faculty members participate in an activity?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT DISTINCT T1.FacID FROM Faculty_Participates_in AS T1",
    "question": "Give me the list of faculty members who participate in an activity"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.FacID FROM Faculty AS T1      INTERSECT SELECT T2.FacID FROM Faculty_Participates_in AS T2",
    "question": "Show the ids of the faculty who participate in at least one activity."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.FacID FROM Faculty_Participates_in AS T1       UNION SELECT T2.Advisor FROM Student AS T2",
    "question": "Show the ids of all the faculty members who participate in an activity or advise a student."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.FacID FROM Faculty_Participates_in AS T1        EXCEPT SELECT T2.Advisor FROM Student AS T2",
    "question": "What are ids of the faculty members who participate in an activity but do not advise a student."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT COUNT(*) FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID WHERE T2.Fname = 'Mark' OR T2.Lname = 'Giuliano'",
    "question": "How many activities do Mark or Giuliano participate in?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT COUNT(*) FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID WHERE T2.Fname = 'Mark' OR T2.Lname = 'Giuliano'",
    "question": "Find the number of activities Mark or Giuliano is involved in."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.StuID FROM Student AS T1",
    "question": "What are the ids of the students"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.stuid FROM Participates_in AS T1        EXCEPT SELECT T2.StuID FROM Student AS T2 WHERE T2.Age < 20",
    "question": "Show the ids for all the students who participate in an activity and are not under 20."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.stuid FROM Participates_in AS T1       UNION SELECT T2.StuID FROM Student AS T2 WHERE T2.Age < 20",
    "question": "What are the ids of the students who are either under 20 years old or are involved in at least one activity."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.Lname FROM Faculty AS T1 WHERE T1.Rank = 'Professor'      UNION SELECT DISTINCT T2.Lname FROM Faculty AS T2 JOIN Faculty_Participates_in AS T4 ON T2.FacID = T4.FacID JOIN Activity AS T3 ON T4.actid = T3.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
    "question": "Find the first names of professors who are playing Canoeing or Kayaking."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.Lname FROM Faculty AS T1 WHERE T1.Rank = 'Professor'      UNION SELECT DISTINCT T2.Lname FROM Faculty AS T2 JOIN Faculty_Participates_in AS T4 ON T2.FacID = T4.FacID JOIN Activity AS T3 ON T4.actid = T3.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
    "question": "What are the first names of the professors who play Canoeing or Kayaking as activities?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.Lname FROM Faculty AS T1 JOIN Faculty_Participates_in AS T3 ON T1.FacID = T3.FacID JOIN Activity AS T2 ON T3.actid = T2.actid WHERE T2.activity_name = 'Canoeing'      UNION SELECT T1.Lname FROM Faculty AS T1 JOIN Faculty_Participates_in AS T3 ON T1.FacID = T3.FacID JOIN Activity AS T2 ON T3.actid = T2.actid WHERE T2.activity_name = 'Kayaking'",
    "question": "Find the first names of the faculty members who participate in Canoeing or Kayaking."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.Lname FROM Faculty AS T1 JOIN Faculty_Participates_in AS T3 ON T1.FacID = T3.FacID JOIN Activity AS T2 ON T3.actid = T2.actid WHERE T2.activity_name = 'Canoeing'",
    "question": "What are the last names of the faculty members playing Canoeing?"
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.stuid FROM Participates_in AS T1 JOIN Activity AS T2 ON T1.actid = T2.actid WHERE T2.activity_name = 'Canoeing'       EXCEPT SELECT T3.stuid FROM Participates_in AS T3 JOIN Activity AS T4 ON T3.actid = T4.actid WHERE T4.activity_name = 'Kayaking'",
    "question": "Find the ids of the students who participate in Canoeing but not in Kayaking."
  },
  {
    "db_id": "activity_1",
    "query": "SELECT T1.stuid FROM Participates_in AS T1 JOIN Activity AS T2 ON T1.actid = T2.actid WHERE T2.activity_name = 'Canoeing'      UNION SELECT T3.stuid FROM Participates_in AS T3 JOIN Activity AS T4 ON T3.actid = T4.actid WHERE T4.activity_name = 'Kayaking'",
    "question": "Which students participate in either Canoeing or Kayaking as their activities? Tell me their student ids."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.name FROM airports AS T1 WHERE T1.city != 'Goroka'",
    "question": "Find the name of the airport not in the city of Goroka."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.name FROM airports AS T1 WHERE T1.city != 'Goroka'",
    "question": "What are the names of the airports not in the city of Goroka?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.name, T1.city, T1.country, T1.elevation FROM airports AS T1 WHERE T1.city != 'New York'",
    "question": "Find the name, city, country, and altitude (or elevation) of the airports not in the city of New York."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.name, T1.city, T1.country, T1.elevation FROM airports AS T1 WHERE T1.city != 'New York'",
    "question": "What is the name, city, country, and elevation for every airport not in the city of New York?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT * FROM airlines AS T1",
    "question": "What are all the airlines?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT * FROM airlines AS T1",
    "question": "What are all the airlines?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM airlines AS T1 WHERE T1.country != 'Russia'",
    "question": "How many airlines does not have Russia as a country?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM airlines AS T1 WHERE T1.country != 'Russia'",
    "question": "What is the number of airlines not based in Russia?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT MAX( T1.elevation) FROM airports AS T1 WHERE T1.country != 'Iceland'",
    "question": "What is the maximum elevation of all airports not in the country of Iceland?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT MAX( T1.elevation) FROM airports AS T1 WHERE T1.country != 'Iceland'",
    "question": "What is the highest elevation of an airport in the country not named Iceland?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.country FROM airlines AS T1 WHERE T1.name NOT LIKE 'Orbit'",
    "question": "Find the country of the airlines whose name does not start with 'Orbit'."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.country FROM airlines AS T1 WHERE T1.name NOT LIKE 'Orbit'",
    "question": "What are the countries of all airlines whose names do not start with Orbit?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM airports AS T1 WHERE T1.name NOT LIKE 'International'",
    "question": "Find the number of airports whose name does not contain the word 'International'."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM airports AS T1 WHERE T1.name NOT LIKE 'International'",
    "question": "How many airports' names do not have the word Interanation in them?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city) FROM airports AS T1 WHERE T1.country != 'Greenland'",
    "question": "How many different cities do have some airport in the country not of Greenland?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city) FROM airports AS T1 WHERE T1.country != 'Greenland'",
    "question": "In how many cities are there airports in the countries other than Greenland?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.src_apid = T2.apid WHERE T2.country != 'Canada'",
    "question": "Find the number of routes whose destination airports are not in Canada."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.dst_apid) FROM routes AS T1 JOIN airlines AS T2 ON T1.alid = T2.alid WHERE T2.name != 'American Airlines'",
    "question": "What is the number of different different airports that are destinations for airlines other than American Airlines?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.country FROM airlines AS T1 WHERE T1.active != 'Y' GROUP BY T1.country  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Which countries has the most number of airlines whose active status is not 'Y'?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.country FROM airlines AS T1 WHERE T1.active != 'Y' GROUP BY T1.country  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What are the countries with the most airlines whose active status is not Y?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*), T1.city FROM airports AS T1  GROUP BY T1.city   ORDER BY COUNT(*) DESC",
    "question": "How many airports are there per city? Order the cities by decreasing number of airports."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*), T1.city FROM airports AS T1  GROUP BY T1.city   ORDER BY COUNT(*) DESC",
    "question": "What is the number of airports per city, ordered from most to least?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*), T1.city FROM airports AS T1 WHERE T1.country != 'United States' GROUP BY T1.city   ORDER BY COUNT(*) DESC",
    "question": "How many airports are there per city in the non-US countries ordered from most to least?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.city FROM airports AS T1 WHERE T1.country = 'United States' GROUP BY T1.city HAVING COUNT(*) > 3",
    "question": "What is the number of cities in the United States with more than 3 airports?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.city, COUNT(*) FROM airports AS T1  GROUP BY T1.city HAVING COUNT(*) >= 1",
    "question": "List the cities which have at least one airport and number of airports."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*), T2.country FROM routes AS T1 JOIN airports AS T2 ON T1.src_apid = T2.apid  GROUP BY T2.country",
    "question": "Find the number of routes for each source airport and the country name."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*), T2.city FROM routes AS T1 JOIN airports AS T2 ON T1.src_apid = T2.apid  GROUP BY T2.city",
    "question": "For each airport city, how many routes start at that airport?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*), T2.city FROM routes AS T1 JOIN airports AS T2 ON T1.src_apid = T2.apid  GROUP BY T2.city   ORDER BY COUNT(*) DESC",
    "question": "Find the number of routes and city name for each source airport, order the results by decreasing number of routes."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*), T2.iata FROM routes AS T1 JOIN airports AS T2 ON T1.src_apid = T2.apid  GROUP BY T2.iata   ORDER BY COUNT(*) DESC",
    "question": "For each  airport iata, how many routes start at that airport, ordered from most to least?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.elevation, T1.country FROM airports AS T1",
    "question": "Find the elevation and country of all airports."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.elevation, T1.country FROM airports AS T1",
    "question": "What is the elevation and country of each airport?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.src_apid = T2.apid WHERE T2.country != 'Italy'",
    "question": "Find the number of routes with destination airports not in Italy."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.src_apid = T2.apid WHERE T2.country != 'Italy'",
    "question": "What is the number of routes whose destinations are not Italian airports?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.src_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' OR T3.name = 'American Airlines'",
    "question": "Return the number of routes with destination airport in Italy or operated by the airline with name 'American Airlines'."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.src_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' OR T3.name = 'American Airlines'",
    "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy or operated by any airline whose name is in the list of airlines?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.src_apid = T2.apid WHERE T2.name != 'John F Kennedy International Airport'",
    "question": "What is the number of routes that do not end at John F Kennedy International Airport?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT COUNT(*) FROM routes AS T1 WHERE T1.dst_apid IN (SELECT T22.apid FROM airports AS T22 WHERE T22.country = 'Canada') OR T1.src_apid IN (SELECT T22.apid FROM airports AS T22 WHERE T22.country = 'United States')",
    "question": "Find the number of routes from the United States or Canada to Canada."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.rid FROM routes AS T1 WHERE T1.dst_apid IN (SELECT T22.apid FROM airports AS T22 WHERE T22.country = 'United States') OR T1.src_apid IN (SELECT T22.apid FROM airports AS T22 WHERE T22.country = 'United States')",
    "question": "Find the id of routes whose source or destination airports are in the United States."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.rid FROM routes AS T1 WHERE T1.dst_apid IN (SELECT T22.apid FROM airports AS T22 WHERE T22.country = 'United States') OR T1.src_apid IN (SELECT T22.apid FROM airports AS T22 WHERE T22.country = 'United States')",
    "question": "What is the id of the routes whose source or destination airports are in the United States?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country != 'China' GROUP BY T1.name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Find the busiest source airport that runs most number of routes not in China."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country != 'China' GROUP BY T1.name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the name of the airport with the most number of routes that start outside of China?"
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country != 'China' GROUP BY T1.name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "Find the busiest destination airport that runs most number of routes outside of China."
  },
  {
    "db_id": "flight_4",
    "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country != 'China' GROUP BY T1.name  ORDER BY COUNT(*) DESC LIMIT 1",
    "question": "What is the name of the airport that is the destination of the most number of routes that do not start in China?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.order_id FROM Shipments AS T1 WHERE T1.shipment_tracking_number != '3452'",
    "question": "Find the id of the order whose shipment tracking number is not \"3452\"."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.order_id FROM Shipments AS T1 WHERE T1.shipment_tracking_number != '3452'",
    "question": "Which order's shipment tracking number is not \"3452\"? Give me the id of the order."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.order_item_id FROM Order_Items AS T1 WHERE T1.product_id != 11",
    "question": "Find the ids of all the order items whose product id is not 11."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.order_item_id FROM Order_Items AS T1 WHERE T1.product_id != 11",
    "question": "Find all the order items whose product id is not 11. What are the order item ids?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status != 'Packing'",
    "question": "List the name of all the distinct customers who have orders with status not \"Packing\"."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status != 'Packing'",
    "question": "Which customers have orders with status not \"Packing\"? Give me the customer names."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT DISTINCT T1.customer_details FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status != 'On Road'",
    "question": "Find the details of all the distinct customers who have orders with status not \"On Road\"."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT DISTINCT T1.customer_details FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status != 'On Road'",
    "question": "What are the distinct customers who have orders with status not \"On Road\"? Give me the customer details?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.order_id, T1.order_status FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name != 'Jeramie'",
    "question": "Give me a list of id and status of orders which do not belong to the customer named \"Jeramie\"."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name != 'Jeramie'",
    "question": "Find the dates of orders which do not belong to the customer named \"Jeramie\"."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name != 'Jeramie'",
    "question": "What are the dates of the orders made by the customers who are not named \"Jeramie\"?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT DISTINCT T1.product_id FROM Order_Items AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id WHERE T2.date_order_placed >= '1975-01-01' OR T2.date_order_placed <= '1976-01-01'",
    "question": "What are the distinct ids of products ordered between 1975-01-01 or 1976-01-01??"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'      UNION SELECT T3.customer_name FROM Customers AS T3 JOIN Orders AS T4 ON T3.customer_id = T4.customer_id WHERE T4.order_status = 'Shipped'",
    "question": "Find the names of the customers who have order status either \"On Road\" or \"Shipped\"."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'",
    "question": "Which customers have \"On Road\" as order status? List the customer names."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.customer_id FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'      UNION SELECT T3.customer_id FROM Customers AS T3 JOIN Orders AS T4 ON T3.customer_id = T4.customer_id WHERE T4.order_status = 'Shipped'",
    "question": "Find the id of the customers who have order status either \"On Road\" or \"Shipped\"."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.customer_id FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'      UNION SELECT T3.customer_id FROM Customers AS T3 JOIN Orders AS T4 ON T3.customer_id = T4.customer_id WHERE T4.order_status = 'Shipped'",
    "question": "Which customers have either \"On Road\" or \"Shipped\" as order status? List the customer ids."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.date_order_placed FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number != '3452'",
    "question": "When was the order placed whose shipment tracking number is not 3452? Give me the date."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.date_order_placed FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number != '3452'",
    "question": "On which day was the order placed whose shipment tracking number is not 3452?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.date_order_placed FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number != 10",
    "question": "What is the placement date of the order whose invoice number is not 10?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.date_order_placed FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number != 10",
    "question": "On what day was every order placed that didn't have invoice number 10?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT COUNT(*), T2.product_name FROM Orders AS T1 JOIN Order_Items AS T3 ON T1.order_id = T3.order_id JOIN Products AS T2 ON T3.product_id = T2.product_id  GROUP BY T2.product_name",
    "question": "For each product, return its name and the number of times it was ordered."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.order_id FROM Shipments AS T1 WHERE T1.shipment_date < '2000-01-01'",
    "question": "Which orders have shipment before 2000-01-01? Give me the order ids."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.order_id FROM Shipments AS T1 WHERE T1.shipment_date != (SELECT MAX( T22.shipment_date) FROM Shipments AS T22)",
    "question": "Find the id of the order which is not shipped most recently."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.product_name) FROM Products AS T1     ORDER BY T1.product_name ASC",
    "question": "How many distinct products are there?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.order_id) FROM Orders AS T1     ORDER BY T1.date_order_placed ASC",
    "question": "How many distinct orders are there?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.invoice_number FROM Invoices AS T1 WHERE T1.invoice_date < '1989-09-03' AND T1.invoice_date > '2007-12-25'",
    "question": "Find the invoice numbers which are created between 1989-09-03 and 2007-12-25."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.invoice_number FROM Invoices AS T1 WHERE T1.invoice_date < '1989-09-03' AND T1.invoice_date > '2007-12-25'",
    "question": "What are the invoice numbers created between 1989-09-03 and 2007-12-25?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT DISTINCT T1.invoice_details FROM Invoices AS T1 WHERE T1.invoice_date < '1989-09-03' AND T1.invoice_date > '2007-12-25'",
    "question": "Find the distinct details of invoices which are created before 1989-09-03 and after 2007-12-25."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT DISTINCT T1.invoice_details FROM Invoices AS T1 WHERE T1.invoice_date < '1989-09-03' AND T1.invoice_date > '2007-12-25'",
    "question": "What are the distinct details of invoices created before 1989-09-03 and after 2007-12-25?"
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.customer_name, COUNT(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_name HAVING COUNT(*) > 2",
    "question": "For each customer who has more than two orders, find the customer name and number of orders made."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.customer_name, COUNT(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_name HAVING COUNT(*) > 2",
    "question": "Which customers have made more than two orders? Give me each customer name and number of orders made."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_name HAVING COUNT(*) > 2",
    "question": "Find the name of the customers who have more than two orders."
  },
  {
    "db_id": "tracking_orders",
    "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_name HAVING COUNT(*) > 2",
    "question": "What are the names of the customers who have made more than two orders?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT COUNT(*) FROM architect AS T1 WHERE T1.gender != 'female'",
    "question": "How many architects are not female?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT T1.length_meters, T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id = T2.id",
    "question": "What is the length in meters for the bridges and what are the architects' names?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT T1.name, T1.built_year FROM mill AS T1 WHERE T1.type != 'Grondzeiler'",
    "question": "What are the names and year of construction for the mills of all types except 'Grondzeiler'?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name), T1.nationality FROM architect AS T1  GROUP BY T1.nationality",
    "question": "How many distinct names and nationalities of architects who have ever built a mill are there?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT T1.name FROM mill AS T1 WHERE T1.location = 'Donceel'",
    "question": "What are the names of the mills which are located in 'Donceel'?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT T1.id, T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id  GROUP BY T2.architect_id HAVING COUNT(*) > 3",
    "question": "What are the ids and names of the architects who built more than 3 bridges ?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id  GROUP BY T2.architect_id HAVING COUNT(*) = 2   INTERSECT SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN mill AS T3 ON T1.id = T3.architect_id  GROUP BY T3.architect_id HAVING COUNT(*) = 1",
    "question": "What are the ids, names and genders of the architects who built two bridges and one mill?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT T1.location FROM bridge AS T1 WHERE T1.name = 'Kolob Arch' AND T1.name = 'Rainbow Bridge'",
    "question": "What is the location of the bridge named 'Kolob Arch' and 'Rainbow Bridge'?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT T1.name FROM mill AS T1 WHERE T1.name NOT LIKE 'Moulin'",
    "question": "Which of the mill names does not contain the french word 'Moulin'?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS T3 ON T1.architect_id = T3.id JOIN bridge AS T2 ON T3.id = T2.architect_id WHERE T2.length_meters < 80",
    "question": "What are the distinct name of the mills built by the architects who have also built a bridge shorter than 80 meters?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT COUNT(*) FROM architect AS T1 WHERE T1.id IN (SELECT T22.architect_id FROM mill AS T22 WHERE T22.built_year < 1850)",
    "question": "How many architects have built a mill before year 1850?"
  },
  {
    "db_id": "architecture",
    "query": "SELECT T1.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id = T2.id WHERE T2.nationality != 'American'    ORDER BY T1.length_feet ASC",
    "question": "show the name of all bridges that was not designed by american archtect, and sort the result by the bridge feet length."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT * FROM book_club AS T1",
    "question": "What are the book clubs?"
  },
  {
    "db_id": "culture_company",
    "query": "SELECT * FROM book_club AS T1",
    "question": "List all the book clubs."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Book_Title, T1.Author_or_Editor FROM book_club AS T1 WHERE T1.Year >= 1989",
    "question": "show the titles, and authors or editors for all books made after or in the year 1989."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Publisher) FROM book_club AS T1",
    "question": "Show the number of distinct publishers for books."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.Publisher) FROM book_club AS T1",
    "question": "How many different book publishers are there?"
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Category FROM book_club AS T1 WHERE T1.Year > 1989 GROUP BY T1.Category HAVING COUNT(*) >= 2",
    "question": "List categories that have at least two books after year 1989."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Category FROM book_club AS T1 WHERE T1.Year > 1989 GROUP BY T1.Category HAVING COUNT(*) >= 2",
    "question": "What categories have two or more corresponding books that were made after 1989?"
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Publisher FROM book_club AS T1 WHERE T1.Year = 1989",
    "question": "Show publishers with a book published in 1989."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Publisher FROM book_club AS T1 WHERE T1.Year = 1989       EXCEPT SELECT T2.Publisher FROM book_club AS T2 WHERE T2.Year = 1990",
    "question": "What are the publishers who have published a book in 1989 but not in 1990?"
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Publisher FROM book_club AS T1      INTERSECT SELECT T2.Publisher FROM book_club AS T2 WHERE T2.Year = 1989",
    "question": "Which publishers published a book in 1989?"
  },
  {
    "db_id": "culture_company",
    "query": "SELECT DISTINCT T1.Director FROM movie AS T1",
    "question": "What are the names of the movie directors?"
  },
  {
    "db_id": "culture_company",
    "query": "SELECT DISTINCT T1.Director FROM movie AS T1",
    "question": "List all the directors."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Director FROM movie AS T1 WHERE T1.Year = 2000      UNION SELECT T2.Director FROM movie AS T2 WHERE T2.Year = 1999",
    "question": "Show all director names who have a movie in either year 1999 or 2000."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Director FROM movie AS T1 WHERE T1.Year = 2000",
    "question": "Which directors had a movie in the year 2000?"
  },
  {
    "db_id": "culture_company",
    "query": "SELECT AVG( T1.Budget_million), MAX( T1.Budget_million), MIN( T1.Budget_million) FROM movie AS T1 WHERE T1.Year > 2000",
    "question": "What is the average, maximum, and minimum budget for all movies after 2000."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT AVG( T1.Budget_million), MAX( T1.Budget_million), MIN( T1.Budget_million) FROM movie AS T1 WHERE T1.Year <= 2000",
    "question": "Return the average, maximum, and minimum budgets in millions for movies made before or in the year 2000."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.Publisher != 'Alyson'",
    "question": "List all company names with a book published by someone other than Alyson."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.Publisher != 'Alyson'",
    "question": "What are all the company names that have a book published by someone other than Alyson?"
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Title, T2.Book_Title FROM movie AS T1 JOIN culture_company AS T3 ON T1.movie_id = T3.movie_id JOIN book_club AS T2 ON T3.book_club_id = T2.book_club_id WHERE T3.Incorporated_in != 'China'",
    "question": "Show the movie titles and book titles for all companies not in China."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Title, T2.Book_Title FROM movie AS T1 JOIN culture_company AS T3 ON T1.movie_id = T3.movie_id JOIN book_club AS T2 ON T3.book_club_id = T2.book_club_id WHERE T3.Incorporated_in != 'China'",
    "question": "What are the titles of movies and books corresponding to companies not incorporated in China?"
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Company_name FROM culture_company AS T1 JOIN movie AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Year != 1999",
    "question": "Show all company names with a movie not directed in year 1999."
  },
  {
    "db_id": "culture_company",
    "query": "SELECT T1.Company_name FROM culture_company AS T1 JOIN movie AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Year != 1999",
    "question": "What are all company names that have a corresponding movie directed in a year other than 1999?"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.state_name FROM city AS T22 WHERE T22.population = (SELECT MAX( T43.population) FROM city AS T43))",
    "question": "which rivers do not run through the state with the largest city in the us"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1 WHERE T1.state_name != 'new mexico'",
    "question": "how big is not new mexico"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1 WHERE T1.state_name != 'new mexico'",
    "question": "what is the area of states other than new mexico"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1 WHERE T1.state_name != 'new mexico'",
    "question": "how large is not new mexico"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1 WHERE T1.state_name != 'new mexico'",
    "question": "what is the area of the states other than new mexico"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1 WHERE T1.state_name != 'new mexico'",
    "question": "what is the size of all states except new mexico"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1 WHERE T1.state_name != 'new mexico'",
    "question": "what is the area of states other than new mexico in square kilometers"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "how many people live in states other than california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "how many people reside in states other than california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "how many residents live in states other than california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "what are the population of states other than california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "what is the population of states other than california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "how many people are not in the state of california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "what can you tell me about the population of states other than california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "how many people are there in states other than california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "how many citizens in states other than california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "how many people stay in states other than california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name != 'california'",
    "question": "how many citizens live in states other than california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.state_name != 'texas'",
    "question": "give me the cities not in texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.state_name != 'texas'",
    "question": "tell me what cities are not in texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.state_name != 'texas'",
    "question": "what cities are not located in texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.state_name != 'texas'",
    "question": "what are the cities not in texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.state_name != 'texas'",
    "question": "what cities not in texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.state_name != 'texas'",
    "question": "give me the cities which are not in texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1 WHERE T1.capital != 'albany'",
    "question": "what is the area of the state that is not albany"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lake_name FROM lake AS T1 WHERE T1.state_name != 'california'",
    "question": "give me the lakes not in california"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM state AS T1",
    "question": "how many states are there"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM state AS T1",
    "question": "how many states are there?"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM state AS T1",
    "question": "how many states are there in usa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "which states do ohio river not flow through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "what states does the ohio river not run through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "which states do not border the ohio river"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "what states does the ohio not run through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "which states does the ohio river not run through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "which states does the ohio not run through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "which states does the ohio river not pass through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "what are the states that the ohio does not run through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "which state does not have the ohio river"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "what states have rivers not named ohio"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "through which states does the ohio not flow"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "what states are not next to the ohio"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "through which states does the ohio not run"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.river_name != 'ohio'",
    "question": "what states does the ohio river not go through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.population != (SELECT MAX( T22.population) FROM state AS T22)",
    "question": "what state is not the largest in population"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.population > (SELECT MAX( T22.population) FROM state AS T22)",
    "question": "which state has a bigger population than the biggest state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.population > (SELECT MAX( T22.population) FROM state AS T22)",
    "question": "which state has a population greater than the maximum population of any state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lowest_elevation FROM highlow AS T1 WHERE T1.state_name != 'pennsylvania'",
    "question": "what is the lowest elevation in states other than pennsylvania"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point, T1.state_name FROM highlow AS T1 WHERE T1.lowest_elevation != '0'",
    "question": "what is the highest point in each state whose lowest point is not sea level"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.length = (SELECT MAX( T22.length) FROM river AS T22 WHERE T22.traverse = 'texas') OR T1.traverse = 'texas'",
    "question": "what is the longest river that flows through texas or through the state of texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.traverse != 'idaho'",
    "question": "how many rivers are not in idaho"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.traverse != 'idaho'",
    "question": "give me the number of rivers not in idaho"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.traverse != 'idaho'",
    "question": "how many rivers does idaho not have"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.traverse != 'idaho'",
    "question": "how many rivers are there not in idaho"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.traverse != 'idaho'",
    "question": "how many rivers do not run through idaho"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.traverse != 'idaho'",
    "question": "how many rivers are not found in idaho"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.traverse != 'idaho'",
    "question": "how many rivers not in idaho"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "what states do not neighbor kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "which states do not border kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "what states do not border kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "give me the states that do not border kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "what states are not next to kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "what states border the states that do not border kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "which state does not border kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "which states do not adjoin kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "states not bordering kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "which state does not border kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "name all the rivers not in illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "rivers not in illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what are all the rivers not in illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what are the rivers not in illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what rivers are not in illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what rivers are there not in illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what rivers do not run through illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what rivers do not flow through illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what river does not flow through illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what are the rivers not in the state of illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "name the rivers not in illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what are the rivers not of illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "which rivers are not in illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "which rivers do not flow through illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what is the river that does not cross over illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse != 'illinois'",
    "question": "what river does not run through illinois"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "what state is not springfield in"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "where is not springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "springfield is not in what state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "what states do not have cities named springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "which states do not have cities named springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "which state is not springfield in"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "what states do not have a city named springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "what state does not have the city springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "what states do not have towns named springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "what state is not springfield located in"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "in which state is not springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "which state is the city springfield not located in"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "what states in the united states do not have a city of springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.area > (SELECT MAX( T22.area) FROM state AS T22)",
    "question": "what is the population of the states with an area greater than the largest area"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM city AS T1 WHERE T1.city_name != 'boulder'",
    "question": "what is the population of cities that are not boulder"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM city AS T1 WHERE T1.city_name != 'boulder'",
    "question": "what is the population of all cities except boulder city"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM city AS T1 WHERE T1.city_name != 'boulder'",
    "question": "what is the population in cities other than boulder"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM city AS T1 WHERE T1.city_name != 'boulder'",
    "question": "people not in boulder"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM city AS T1 WHERE T1.city_name != 'boulder'",
    "question": "how many inhabitants do cities have that are not boulder"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.length > (SELECT MAX( T22.length) FROM river AS T22)",
    "question": "which states lie on a river with a length greater than the length of the longest river in the united states"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.density FROM state AS T1 WHERE T1.area < (SELECT MIN( T22.area) FROM state AS T22)",
    "question": "what is the population density of the states with an area less than the smallest area"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM highlow AS T1 WHERE T1.highest_elevation = (SELECT T22.highest_elevation FROM highlow AS T22 WHERE T22.state_name = 'colorado')",
    "question": "which states have the highest point in colorado"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM highlow AS T1 WHERE T1.highest_elevation = (SELECT T22.highest_elevation FROM highlow AS T22 WHERE T22.state_name = 'colorado')",
    "question": "which states have the highest point that is the same as the highest point in colorado"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM highlow AS T1 WHERE T1.highest_elevation < (SELECT T22.highest_elevation FROM highlow AS T22 WHERE T22.state_name = 'colorado')",
    "question": "what states high point are lower than that of colorado"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_elevation FROM highlow AS T1 WHERE T1.state_name != 'delaware'",
    "question": "what is the highest elevation in states other than delaware"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_elevation FROM highlow AS T1 WHERE T1.state_name != 'delaware'",
    "question": "how high is the highest point of states other than delaware"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_elevation FROM highlow AS T1 WHERE T1.state_name != 'delaware'",
    "question": "how tall is the highest point in states that are not delaware"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_elevation FROM highlow AS T1 WHERE T1.state_name != 'delaware'",
    "question": "what is the highest point in states other than delaware in meters"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_elevation FROM highlow AS T1 WHERE T1.state_name != 'delaware'",
    "question": "how high is the highest point in states that are not delaware"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.population > (SELECT MAX( T22.population) FROM city AS T22)",
    "question": "what state has a city with a population larger than the largest city in the state with the largest population"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.area != (SELECT MAX( T22.area) FROM state AS T22)",
    "question": "give me all the states that are not the largest state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.state_name NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'mississippi')",
    "question": "what are the highest points of states not bordering mississippi"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.state_name NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'mississippi')",
    "question": "what are the high points of states not bordering mississippi"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.state_name NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'colorado')   ORDER BY T1.highest_elevation DESC LIMIT 1",
    "question": "what is the highest point in states not bordering colorado"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.state_name NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'colorado')   ORDER BY T1.highest_elevation DESC LIMIT 1",
    "question": "what is the highest point in the states not bordering colorado"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.density < (SELECT MIN( T22.density) FROM state AS T22)",
    "question": "which state has a population density less than the smallest population density"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.state_name != 'texas'",
    "question": "what is the highest point in states other than texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.state_name != 'texas'",
    "question": "what is the high point of states that are not texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 JOIN border_info AS T2 ON T1.state_name = T2.border",
    "question": "what states share a border with another state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 JOIN border_info AS T2 ON T1.state_name = T2.border",
    "question": "name the states which have a border"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM highlow AS T1 WHERE T1.lowest_elevation > (SELECT T22.lowest_elevation FROM highlow AS T22 WHERE T22.state_name = 'alabama')",
    "question": "count the states which have elevations higher than what alabama has"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_elevation FROM highlow AS T1 WHERE T1.highest_point != 'guadalupe peak'",
    "question": "how high is the highest mountain that is not guadalupe peak"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_elevation FROM highlow AS T1 WHERE T1.highest_point != 'guadalupe peak'",
    "question": "how tall is the highest point that is not guadalupe peak"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_elevation FROM highlow AS T1 WHERE T1.highest_point != 'guadalupe peak'",
    "question": "what is the maximum elevation of all peaks except guadalupe peak"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.length FROM river AS T1 WHERE T1.river_name != 'rio grande'",
    "question": "how long is the river that is not the rio grande river"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.length FROM river AS T1 WHERE T1.river_name != 'rio grande'",
    "question": "what is the length of the river that is not the rio grande river"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.length FROM river AS T1 WHERE T1.river_name != 'rio grande'",
    "question": "what length is the river that is not the rio grande"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.length FROM river AS T1 WHERE T1.river_name != 'rio grande'",
    "question": "how long is the river that is not the rio grande"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.length FROM river AS T1 WHERE T1.river_name != 'rio grande'",
    "question": "how long is the river that is not the rio grande river in miles"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.length FROM river AS T1 WHERE T1.river_name != 'rio grande'",
    "question": "how long is any river that is not rio grande"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.capital) FROM state AS T1 WHERE T1.state_name != 'rhode island'",
    "question": "how many capitals does not rhode island have"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1",
    "question": "what are the names of all the cities in the united states"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1",
    "question": "what are the names of all the cities"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1",
    "question": "what are the names of all the cities"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1",
    "question": "what are the names of all cities"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1",
    "question": "what are the names of the cities in us"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.river_name != 'colorado'",
    "question": "how many rivers are there that are not colorado"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.river_name != 'colorado'",
    "question": "how many rivers are not called colorado"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM city AS T1 WHERE T1.city_name = 'seattle' OR T1.state_name = 'washington'",
    "question": "what is the population of seattle or washington"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM city AS T1 WHERE T1.city_name = 'seattle' OR T1.state_name = 'washington'",
    "question": "how many people live in seattle or washington"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM city AS T1 WHERE T1.city_name > (SELECT T22.capital FROM state AS T22 WHERE T22.state_name = 'texas')",
    "question": "how many people live in cities with names greater than the capital of texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM city AS T1 WHERE T1.city_name < (SELECT T22.capital FROM state AS T22 WHERE T22.state_name = 'texas')",
    "question": "what is the size of the city that is smaller than the capital of texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1",
    "question": "what is the population of each state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1",
    "question": "what are the names of all the states"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1",
    "question": "what are the names of all the states"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1",
    "question": "what are the names of all the states in the usa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1",
    "question": "what are the names of all states"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1",
    "question": "what are the names of the states in the united states"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1",
    "question": "what are the names of states in united states"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.border) FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "how many states do not border kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.border) FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "how many states do not border kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.border) FROM border_info AS T1 WHERE T1.state_name != 'kentucky'",
    "question": "number of states not bordering kentucky"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.border) FROM border_info AS T1 WHERE T1.state_name NOT IN (SELECT T22.state_name FROM state AS T22 WHERE T22.population = (SELECT MAX( T43.population) FROM state AS T43))",
    "question": "how many states do not border the state with the largest population"
  },
  {
    "db_id": "geo",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.state_name) FROM state AS T1 JOIN river AS T2 ON T1.state_name = T2.traverse",
    "question": "how many states have rivers"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM highlow AS T1 WHERE T1.highest_elevation = (SELECT T22.highest_elevation FROM highlow AS T22 WHERE T22.state_name = (SELECT T43.state_name FROM state AS T43 WHERE T43.capital = (SELECT T64.city_name FROM city AS T64 WHERE T64.population = (SELECT MAX( T85.population) FROM city AS T85))))",
    "question": "how many states have a point of the same elevation as the highest point of the state with the largest capital city in the us"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 WHERE T1.state_name != 'texas'",
    "question": "what are the capital city in the states other than texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 WHERE T1.state_name != 'texas'",
    "question": "what is the capital of states that are not texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 WHERE T1.state_name != 'texas'",
    "question": "what is the capital of the state that is not texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 WHERE T1.state_name != 'texas'",
    "question": "what is capital of states other than texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 WHERE T1.state_name != 'texas'",
    "question": "what is the capital of the state that is not texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 WHERE T1.state_name != 'texas'",
    "question": "can you tell me the capital of states that are not texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 JOIN border_info AS T2 ON T1.state_name = T2.border WHERE T2.state_name != 'texas'",
    "question": "what are the capitals of states that do not border texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 JOIN border_info AS T2 ON T1.state_name = T2.border WHERE T2.state_name != 'texas'",
    "question": "what are the capital cities of the states which do not border texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 JOIN border_info AS T2 ON T1.state_name = T2.border WHERE T2.state_name != 'texas'",
    "question": "what are the capitals of the states that do not border texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 JOIN border_info AS T2 ON T1.state_name = T2.border WHERE T2.state_name != 'texas'",
    "question": "which capitals are in the states that do not border texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what are the cities in states that do not run through the mississippi"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.highest_point) FROM highlow AS T1",
    "question": "how many states have the highest point of more than 1000 meters"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.density) FROM state AS T1",
    "question": "how many us states have population densities"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what are the populations of states that do not run through the mississippi river"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what are the populations of states that do not run through the mississippi"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what are the populations of the states that do not run through the mississippi"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what are the populations of states that do not run through the mississippi river"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what are the populations of the states that do not run through the mississippi"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what are the populations of the states that do not run through the mississippi river"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what are the populations of states that do not traverse the mississippi river"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what are the populations of the states that do not run through the mississippi river"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 JOIN border_info AS T2 ON T1.state_name = T2.border WHERE T2.state_name != 'texas'",
    "question": "what are the populations of states which do not border texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.population > (SELECT MAX( T22.population) FROM city AS T22)",
    "question": "what city has a population greater than the largest city"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.population > (SELECT MAX( T22.population) FROM city AS T22)",
    "question": "which cities have population greater than the largest capital"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.population > (SELECT MAX( T22.population) FROM city AS T22)",
    "question": "what cities have populations larger than that of new york"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 JOIN city AS T2 ON T1.state_name = T2.state_name WHERE T2.city_name != 'durham'",
    "question": "what is the capital of states that do not have cities named durham"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1",
    "question": "what is the area of each state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1",
    "question": "what is the area of each state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1",
    "question": "what is the area of each state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.density FROM state AS T1 WHERE T1.state_name != 'wyoming'",
    "question": "what is the density of the state that is not wyoming"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.density FROM state AS T1 WHERE T1.state_name != 'wyoming'",
    "question": "what is the population density of all states except wyoming"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.density FROM state AS T1 WHERE T1.state_name != 'wyoming'",
    "question": "what is the density of any state other than wyoming"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.mountain_name FROM mountain AS T1 WHERE T1.mountain_altitude > (SELECT MAX( T22.mountain_altitude) FROM mountain AS T22)",
    "question": "what are the mountains in the us that are higher than the highest mountain in the us"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.mountain_name FROM mountain AS T1 WHERE T1.mountain_altitude > (SELECT MAX( T22.mountain_altitude) FROM mountain AS T22)",
    "question": "what are the mountains in america that are taller than the tallest mountain in america"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.mountain_name FROM mountain AS T1 WHERE T1.mountain_altitude != (SELECT MAX( T22.mountain_altitude) FROM mountain AS T22)",
    "question": "what are the mountains in the united states that are not the tallest"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.state_name NOT IN (SELECT T22.state_name FROM state AS T22 WHERE T22.capital = 'des moines')",
    "question": "what is the highest point in the state not having capital des moines"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.state_name NOT IN (SELECT T22.state_name FROM state AS T22 WHERE T22.capital = 'des moines')",
    "question": "what is the highest point in the state not having the capital des moines"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.highest_elevation > (SELECT MAX( T22.highest_elevation) FROM highlow AS T22)",
    "question": "what is the highest point in the country that is higher than the highest point in the world"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.highest_elevation < (SELECT MAX( T22.highest_elevation) FROM highlow AS T22)",
    "question": "what is the highest point in the us that is lower than the highest point in the us"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 WHERE T1.highest_elevation > (SELECT MAX( T22.highest_elevation) FROM highlow AS T22)",
    "question": "what is the highest point in the united states that is higher than the highest point in the united kingdom"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.area = (SELECT MAX( T2.area) FROM state AS T2 WHERE T2.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'california')) OR T1.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'california')",
    "question": "what is the largest state bordering california or the largest state bordering a state bordering california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.area = (SELECT MAX( T2.area) FROM state AS T2 WHERE T2.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'california')) OR T1.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'california')",
    "question": "what is the largest state that borders california or the largest state that borders the largest state that borders california"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.length = (SELECT MAX( T2.length) FROM river AS T2 WHERE T2.traverse IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'tennessee')) OR T1.traverse IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'tennessee')",
    "question": "what is the longest river in the states that border tennessee or states that border tennessee"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.length = (SELECT MAX( T2.length) FROM river AS T2 WHERE T2.traverse IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'tennessee')) OR T1.traverse IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'tennessee')",
    "question": "what is the longest river that flows through a state that borders tennessee or what is the longest river that flows through a state that borders tennessee"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.length = (SELECT MAX( T2.length) FROM river AS T2 WHERE T2.traverse IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'tennessee')) OR T1.traverse IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'tennessee')",
    "question": "what is the longest river that runs through a state that borders tennessee or that tennessee borders"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lowest_point FROM highlow AS T1 WHERE T1.state_name != 'iowa'",
    "question": "what is the lowest point in states other than iowa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lowest_point FROM highlow AS T1 WHERE T1.state_name != 'iowa'",
    "question": "what is the lowest point in states other than iowa in meters"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lowest_point FROM highlow AS T1 WHERE T1.state_name != 'iowa'",
    "question": "where is the lowest point in the states that are not iowa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lowest_point FROM highlow AS T1 WHERE T1.state_name != 'iowa'",
    "question": "what is the lowest point of states that are not iowa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lowest_point FROM highlow AS T1 WHERE T1.state_name != 'iowa'",
    "question": "where is the lowest spot in the states that are not iowa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lowest_point FROM highlow AS T1 WHERE T1.lowest_elevation < (SELECT MIN( T22.lowest_elevation) FROM highlow AS T22)",
    "question": "where is the lowest point in the us with a elevation lower than the lowest point in the us"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lowest_point FROM highlow AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')   ORDER BY T1.lowest_elevation ASC LIMIT 1",
    "question": "what is the lowest point of all states not through which the mississippi river runs through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lowest_point FROM highlow AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')   ORDER BY T1.lowest_elevation ASC LIMIT 1",
    "question": "which is the lowest point of the states that the mississippi does not run through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.density > (SELECT MAX( T22.density) FROM state AS T22)",
    "question": "which state has a higher population density than the state with the highest population density"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.density > (SELECT MAX( T22.density) FROM state AS T22)",
    "question": "which state has a density greater than the greatest density"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.density > (SELECT MAX( T22.density) FROM state AS T22)",
    "question": "what state has a population density greater than the state with the largest population density"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.density > (SELECT MAX( T22.density) FROM state AS T22)",
    "question": "which state has a density greater than the density of the state with the largest density"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1 WHERE T1.density > (SELECT MAX( T22.density) FROM state AS T22)",
    "question": "how many people live in the states with a population density greater than the population density of the state with the largest population density"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.area = (SELECT MIN( T2.area) FROM state AS T2 WHERE T2.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'texas')) OR T1.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'texas')",
    "question": "what is the smallest state bordering texas or texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.area = (SELECT MIN( T2.area) FROM state AS T2 WHERE T2.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'texas')) OR T1.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'texas')",
    "question": "what is the smallest state that borders texas or alabama"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.area = (SELECT MIN( T2.area) FROM state AS T2 WHERE T2.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'texas')) OR T1.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'texas')",
    "question": "which state has the smallest area that borders texas or texas borders that state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.area != (SELECT MIN( T22.area) FROM state AS T22)",
    "question": "which state is not the smallest"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'alabama')",
    "question": "what rivers are not in states that border alabama"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'alabama')",
    "question": "which rivers do not run through states bordering alabama"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'alabama')",
    "question": "what rivers do not flow through states that alabama borders"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'oklahoma')   ORDER BY T1.population DESC LIMIT 1",
    "question": "what state that does not border oklahoma has the highest population"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM highlow AS T1 WHERE T1.highest_elevation > (SELECT MAX( T22.highest_elevation) FROM highlow AS T22 WHERE T22.state_name IN (SELECT T43.traverse FROM river AS T43 WHERE T43.river_name = 'colorado'))",
    "question": "what state has the highest point of those the colorado river traverses that is higher than the highest point of those the colorado river traverses"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'colorado')",
    "question": "what states do not border colorado"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what states do not border states that the mississippi runs through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "which states do not border states through which the mississippi traverses"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "what states do not border states which the mississippi runs through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM border_info AS T1 WHERE T1.border = 'texas' OR T1.state_name IN (SELECT T22.traverse FROM river AS T22 WHERE T22.length > 750)",
    "question": "what states border texas or have a major river"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM mountain AS T1",
    "question": "how many mountains"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM mountain AS T1 WHERE T1.mountain_altitude < (SELECT MAX( T22.mountain_altitude) FROM mountain AS T22)",
    "question": "where are the mountains of the united states that are less than the highest mountain of the united states"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.density FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.length = (SELECT MAX( T43.length) FROM river AS T43))",
    "question": "which is the density of the state that the largest river in the united states does not run through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.river_name IN (SELECT T22.river_name FROM river AS T22 WHERE T22.traverse = 'tennessee')",
    "question": "which rivers run through tennessee"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.river_name IN (SELECT T22.river_name FROM river AS T22 WHERE T22.traverse = 'tennessee')",
    "question": "what rivers run through tennessee"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.country_name = 'usa'",
    "question": "which rivers run through usa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name IN (SELECT T43.state_name FROM state AS T43 WHERE T43.capital = 'atlanta'))",
    "question": "which rivers do not run through states that border the state with the capital atlanta"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name IN (SELECT T43.state_name FROM state AS T43 WHERE T43.capital = 'atlanta'))",
    "question": "what rivers do not run through the states that border the state with the capital atlanta"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM highlow AS T1 WHERE T1.highest_elevation < (SELECT MAX( T22.highest_elevation) FROM highlow AS T22)",
    "question": "what state contains a point with a lower elevation than the highest point in the us"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM highlow AS T1 WHERE T1.lowest_elevation < (SELECT MIN( T22.lowest_elevation) FROM highlow AS T22)",
    "question": "which state has a lower elevation than the state with the lowest elevation"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM highlow AS T1 WHERE T1.lowest_elevation = (SELECT MIN( T2.lowest_elevation) FROM highlow AS T2 WHERE T2.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'idaho')) OR T1.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'idaho')",
    "question": "which state has the lowest point or borders idaho"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM mountain AS T1 WHERE T1.mountain_name != 'whitney'",
    "question": "which state is not mount whitney in"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM mountain AS T1 WHERE T1.mountain_name != 'whitney'",
    "question": "in what state is mount whitney not"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM mountain AS T1 WHERE T1.mountain_name != 'whitney'",
    "question": "where is not mount whitney"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.traverse) FROM river AS T1",
    "question": "how many rivers"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.traverse) FROM river AS T1",
    "question": "how many states have rivers running through them"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM city AS T1 WHERE T1.city_name = 'austin' OR T1.population > 150000",
    "question": "which states have a major city named austin or have a population greater than 150,000"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.population = (SELECT MAX( T1.population) FROM city AS T1 WHERE T1.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'california')) OR T1.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'california')",
    "question": "what is the largest city in a state that borders california or is california itself"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.city_name FROM city AS T1 WHERE T1.population = (SELECT MAX( T1.population) FROM city AS T1 WHERE T1.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'california')) OR T1.state_name IN (SELECT T3.border FROM border_info AS T3 WHERE T3.state_name = 'california')",
    "question": "what is the largest city in states that border california or states that border california"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.traverse IN (SELECT T22.state_name FROM state AS T22 WHERE T22.capital = 'albany')",
    "question": "how many rivers traverse the state with the capital albany"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 WHERE T1.state_name NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name IN (SELECT T43.border FROM border_info AS T43 WHERE T43.state_name = 'texas'))",
    "question": "what is the capital of the state that does not border the state that borders texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.capital != 'salem'",
    "question": "what state is not salem the capital of"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.capital != 'salem'",
    "question": "what states capital is not salem"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.capital != 'salem'",
    "question": "which state is not capitalized by salem"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.capital != 'salem'",
    "question": "what state does not have the capital salem"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.state_name FROM state AS T22 WHERE T22.population = (SELECT MAX( T43.population) FROM state AS T43))",
    "question": "what rivers do not flow through the state with the largest population"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.area = (SELECT MAX( T1.area) FROM state AS T1 WHERE T1.state_name IN (SELECT T2.state_name FROM border_info AS T2 WHERE T2.border IN (SELECT T1.state_name FROM state AS T1 WHERE T1.population = (SELECT MAX( T1.population) FROM state AS T1)))) OR T1.state_name IN (SELECT T2.state_name FROM border_info AS T2 WHERE T2.border IN (SELECT T1.state_name FROM state AS T1 WHERE T1.population = (SELECT MAX( T1.population) FROM state AS T1)))",
    "question": "what is the largest state that borders the state with the highest population or the state with the largest area"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1",
    "question": "what are the names of rivers in us"
  },
  {
    "db_id": "geo",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.capital) FROM state AS T1",
    "question": "how many distinct capitals are there in the usa"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "how many states have a city that is not named springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "how many states have a city not called springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "how many states have cities not named springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM city AS T1 WHERE T1.city_name != 'springfield'",
    "question": "how many states have cities or towns not named springfield"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lake_name FROM lake AS T1 WHERE T1.state_name NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'texas')",
    "question": "what are the lakes not in states bordering texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.highest_elevation) FROM highlow AS T1",
    "question": "how many states have the highest elevation"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.traverse) FROM river AS T1 WHERE T1.river_name != 'missouri'",
    "question": "how many states do not run the missouri river"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.traverse) FROM river AS T1 WHERE T1.river_name != 'missouri'",
    "question": "how many states does the missouri river not flow through"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.traverse) FROM river AS T1 WHERE T1.river_name != 'missouri'",
    "question": "how many states does the missouri river not run through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population \/ T1.area FROM state AS T1 WHERE T1.state_name != 'pennsylvania'",
    "question": "what is the average population per square km in states other than pennsylvania"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name IN (SELECT T43.border FROM border_info AS T43 WHERE T43.state_name = 'florida'))",
    "question": "what states border states that do not border states that border florida"
  },
  {
    "db_id": "geo",
    "query": "SELECT DISTINCT T1.state_name FROM border_info AS T1",
    "question": "what are the names of the states that border at least one other state"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.border) FROM border_info AS T1 WHERE T1.border IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'new mexico') OR T1.state_name = 'colorado'",
    "question": "how many states border colorado or border new mexico"
  },
  {
    "db_id": "geo",
    "query": "SELECT SUM( T1.population) FROM state AS T1 JOIN border_info AS T2 ON T1.state_name = T2.border WHERE T2.state_name != 'texas'",
    "question": "what is the total population of the states that do not border texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.lake_name) FROM lake AS T1",
    "question": "how many lakes are there in us"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.mountain_altitude FROM mountain AS T1 WHERE T1.mountain_name != 'mckinley'",
    "question": "what is the height of all the mountains that are not mckinley"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.traverse FROM river AS T1 WHERE T1.length < (SELECT MIN( T22.length) FROM river AS T22)",
    "question": "what states do the rivers that are shorter than the shortest river run through"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.state_name FROM highlow AS T22 WHERE T22.lowest_elevation = (SELECT MIN( T43.lowest_elevation) FROM highlow AS T43))",
    "question": "which rivers do not run through the state with the lowest elevation in the usa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.state_name FROM highlow AS T22 WHERE T22.lowest_elevation = (SELECT MIN( T43.lowest_elevation) FROM highlow AS T43))",
    "question": "what rivers do not run through the state with the lowest point in the usa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.mountain_name FROM mountain AS T1 WHERE T1.state_name != 'alaska'",
    "question": "what mountains are not in alaska"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'colorado')",
    "question": "how many rivers do not run through the states bordering colorado"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 JOIN river AS T2 ON T1.state_name = T2.traverse",
    "question": "what state has a river"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.city_name) FROM city AS T1 WHERE T1.state_name != 'texas'",
    "question": "how many cities are not in texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.city_name) FROM city AS T1 WHERE T1.state_name != 'texas'",
    "question": "how many cities do not belong to texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.area) FROM state AS T1",
    "question": "how many states are there"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name IN (SELECT T43.state_name FROM state AS T43 WHERE T43.population = (SELECT MAX( T64.population) FROM state AS T64)))",
    "question": "what rivers do not flow through states that border the state with the largest population"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.length = (SELECT MAX( T43.length) FROM river AS T43))",
    "question": "which states do not border the longest river in the usa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.density FROM state AS T1 WHERE T1.population < (SELECT MIN( T22.population) FROM state AS T22)",
    "question": "what is the population density of the states with a population less than the smallest population"
  },
  {
    "db_id": "geo",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.border) FROM border_info AS T1 WHERE T1.state_name NOT IN (SELECT T22.traverse FROM river AS T22 WHERE T22.river_name = 'mississippi')",
    "question": "how many states do not border the mississippi river"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.state_name) FROM state AS T1",
    "question": "how many states have a capital that is the highest point in the state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM city AS T1 WHERE T1.city_name > (SELECT T22.capital FROM state AS T22 WHERE T22.area = (SELECT MIN( T43.area) FROM state AS T43))",
    "question": "what is the population of the city that is bigger than the capital of the smallest state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name NOT IN (SELECT T22.state_name FROM state AS T22 WHERE T22.population = (SELECT MAX( T43.population) FROM state AS T43))",
    "question": "what states border states that do not border the state with the largest population"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.area FROM state AS T1",
    "question": "what is the area of each state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.capital FROM state AS T1 JOIN city AS T2 ON T1.state_name = T2.state_name WHERE T2.population > 150000",
    "question": "which capitals are major cities"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.city_name) FROM city AS T1",
    "question": "how many cities are in usa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.country_name FROM state AS T1 WHERE T1.state_name != 'massachusetts'",
    "question": "where is not massachusetts"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1",
    "question": "how many rivers are in the us"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.city_name) FROM city AS T1 WHERE T1.city_name != 'austin'",
    "question": "how many cities named austin are there not in the usa"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.density FROM state AS T1 WHERE T1.capital != 'austin'",
    "question": "what is the population density in the states that do not have austin as their capital"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.lowest_elevation FROM highlow AS T1 WHERE T1.lowest_point != 'death valley'",
    "question": "what is the elevation of the lowest point that is not death valley"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.population FROM state AS T1",
    "question": "what is the population of the us by state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.river_name FROM river AS T1 WHERE T1.traverse NOT IN (SELECT T22.state_name FROM state AS T22 WHERE T22.area = (SELECT MAX( T43.area) FROM state AS T43))",
    "question": "what rivers do not flow through the largest state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.border FROM border_info AS T1 WHERE T1.state_name != 'texas'",
    "question": "what states border states that border states that border states that do not border texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.state_name IN (SELECT T22.border FROM border_info AS T22 WHERE T22.state_name = 'texas')",
    "question": "which states borders texas"
  },
  {
    "db_id": "geo",
    "query": "SELECT COUNT( T1.river_name) FROM river AS T1 JOIN state AS T2 ON T1.traverse = T2.state_name WHERE T2.state_name > (SELECT T23.state_name FROM state AS T23 WHERE T23.population = (SELECT MAX( T44.population) FROM state AS T44))",
    "question": "how many rivers are in the states with populations greater than the state with the largest population"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_point FROM highlow AS T1 JOIN state AS T2 ON T1.state_name = T2.state_name WHERE T2.area < (SELECT MIN( T23.area) FROM state AS T23)",
    "question": "what is the highest point in the states with an area less than the smallest state"
  },
  {
    "db_id": "geo",
    "query": "SELECT T1.highest_elevation FROM highlow AS T1 JOIN state AS T2 ON T1.state_name = T2.state_name WHERE T2.area > (SELECT MAX( T23.area) FROM state AS T23)",
    "question": "how high is the highest point in the largest state with area greater than the area of the largest state"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "papers that are coauthored by Peter Mertens or Dina Barbian"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "papers written by Peter Mertens or Dina Barbian"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "what are the papers that have Peter Mertens or Dina Barbian as co-authors"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "What papers have Peter Mertens or Dina Barbian written ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "what paper did Peter Mertens or Dina Barbian write ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "Has Peter Mertens or Dina Barbian written a paper together ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "Papers by Peter Mertens or Dina Barbian"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "papers by Peter Mertens or Dina Barbian"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "What papers were written by Peter Mertens or Dina Barbian"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "papers by Peter Mertens or Dina Barbian"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "papers written by Peter Mertens or Dina Barbian"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "When did Peter Mertens or Dina Barbian collaborate ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "Have Peter Mertens or Dina Barbian written a paper together ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "Peter Mertens or Dina Barbian as co-authors"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "Which papers have Peter Mertens or Dina Barbian as co-authors ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "papers coauthored by Peter Mertens or Dina Barbian"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "What papers have been written by Peter Mertens or Dina Barbian ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "What papers have been written by Peter Mertens or Dina Barbian ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Peter Mertens' OR T2.authorName = 'Dina Barbian'",
    "question": "What papers have been written by Peter Mertens or Dina Barbian ."
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName != 'syntactic parsing' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "who is the most published author in non-syntactic parsing ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName != 'syntactic parsing' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "who has the most publications in non-syntactic parsing ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName != 'syntactic parsing' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "who has written the most papers on topics other than syntactic parsing ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName != 'syntactic parsing' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "List prominent scholars not in syntactic parsing ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName != 'syntactic parsing' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "Who are the authors with the most published papers not in syntactic parsing ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName != 'syntactic parsing' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "top non-syntactic parsing author"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName != 'syntactic parsing' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "top author not in syntactic parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN writes AS T4 ON T3.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId WHERE T2.authorName != 'noah a smith'",
    "question": "How many citation noah a smith does not have ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN writes AS T4 ON T3.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId WHERE T2.authorName != 'noah a smith'",
    "question": "How many times was noah a smith not cited ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T2.venueName != 'chi'",
    "question": "papers not at chi"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T2.venueName != 'chi'",
    "question": "papers not in chi"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T2.venueName != 'chi'",
    "question": "Papers not on chi"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN author AS T3 ON T2.authorId = T3.authorId WHERE T3.authorName = 'mirella lapata' OR T1.year = 2016 GROUP BY T2.authorId",
    "question": "Has mirella lapata written any papers in 2016 or has any author written any papers in 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "What papers has not been written by sharon goldwater ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "papers not by sharon goldwater"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "what did all authors write that are not sharon goldwater ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "papers where sharon goldwater is not an author"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "Papers not authored by sharon goldwater"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "papers not written by sharon goldwater"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "Papers not by sharon goldwater"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "Papers not written by sharon goldwater"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "which papers has sharon goldwater not written ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "papers not written by sharon goldwater"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "papers not written by sharon goldwater"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "What papers are not authored by sharon goldwater ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'sharon goldwater'",
    "question": "papers not by sharon goldwater ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'monte carlo simulation' OR T1.year > 2011",
    "question": "are there any monte carlo simulation papers or papers since 2011 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'monte carlo simulation' OR T1.year > 2011",
    "question": "monte carlo simulation papers or later than 2011"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'monte carlo simulation' OR T1.year > 2011",
    "question": "monte carlo simulation or later than 2011"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'monte carlo simulation' OR T1.year > 2011",
    "question": "monte carlo simulation papers or papers since 2011"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'David M. Blei' OR T3.venueName = 'AISTATS'",
    "question": "How many papers did David M. Blei publish at AISTATS or at other venues ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'David M. Blei' OR T3.venueName = 'AISTATS'",
    "question": "How many papers does David M. Blei have in AISTATS or any other venue ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'David M. Blei' OR T3.venueName = 'AISTATS'",
    "question": "How many papers has David M. Blei published in AISTATS or in other venues ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'David M. Blei' OR T3.venueName = 'AISTATS'",
    "question": "how many papers does David M. Blei have in AISTATS or any other venue ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'David M. Blei' OR T3.venueName = 'AISTATS'",
    "question": "how many papers are there by David M. Blei or in AISTATS ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'David M. Blei' OR T3.venueName = 'AISTATS'",
    "question": "How many papers David M. Blei has in AISTATS or in other venues ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'David M. Blei' OR T3.venueName = 'AISTATS'",
    "question": "How many papers does David M. Blei have in AISTATS or any other venue"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 WHERE T1.title != 'machine networks for one shot learning'",
    "question": "List all academic papers except those on machine networks for one shot learning"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T2 ON T1.citingPaperId = T2.paperId JOIN venue AS T3 ON T2.venueId = T3.venueId WHERE T2.year = 2010 OR T3.venueName = 'EMNLP' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "most cited papers in EMNLP or in 2010"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T2 ON T1.citingPaperId = T2.paperId JOIN venue AS T3 ON T2.venueId = T3.venueId WHERE T2.year = 2010 OR T3.venueName = 'EMNLP' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "which papers have been cited the most in 2010 or in EMNLP ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid JOIN venue AS T4 ON T4.venueid = T3.venueid WHERE T1.datasetname = 'RGB-D Object Dataset' OR T3.title = 'Class consistent multi-modal fusion with binary features' AND t3.year  =  2016 AND t4.venuename = 'CVPR'",
    "question": "What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features or any other paper applied to RGB-D Object Dataset dataset ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid JOIN venue AS T4 ON T4.venueid = T3.venueid WHERE T1.datasetname = 'RGB-D Object Dataset' OR T3.title = 'Class consistent multi-modal fusion with binary features' AND t3.year  =  2016 AND t4.venuename = 'CVPR'",
    "question": "What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features or any paper applied to RGB-D Object Dataset ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'",
    "question": "How many papers are not in deep learning ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'",
    "question": "How many papers are not about deep learning ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'",
    "question": "How many papers are not related to deep learning ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName != 'Christopher D. Manning'",
    "question": "How many papers do not have Christopher D. Manning as an author ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId WHERE T2.authorName != 'Luke Zettlemoyer'",
    "question": "what kind of papers do not Luke Zettlemoyer publish"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId WHERE T2.authorName != 'Luke Zettlemoyer'",
    "question": "Keyphrases not used by Luke Zettlemoyer"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId WHERE T2.authorName != 'Luke Zettlemoyer'",
    "question": "What keywords are in papers by authors other than Luke Zettlemoyer ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId WHERE T2.authorName != 'Luke Zettlemoyer'",
    "question": "keywords not used by Luke Zettlemoyer"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId WHERE T2.authorName != 'Luke Zettlemoyer'",
    "question": "keyphrases not used by Luke Zettlemoyer"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId WHERE T2.authorName != 'Luke Zettlemoyer'",
    "question": "What topic does Luke Zettlemoyer not write about ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId WHERE T2.authorName != 'Luke Zettlemoyer'",
    "question": "what topics do authors other than Luke Zettlemoyer publish in"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId WHERE T2.authorName != 'Luke Zettlemoyer'",
    "question": "keywords in the papers not written by Luke Zettlemoyer"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId WHERE T2.authorName != 'Luke Zettlemoyer'",
    "question": "keyphrases not used by Luke Zettlemoyer ."
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId WHERE T2.authorName != 'Luke Zettlemoyer'",
    "question": "topics not used by Luke Zettlemoyer"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1",
    "question": "What are the paper ids ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId JOIN paper AS T4 ON T1.paperId = T4.paperId JOIN paperKeyphrase AS T5 ON T4.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T2.authorName = 'Ed Desmond' OR T3.keyphraseName = 'Semantic Parsing'",
    "question": "How many papers by Ed Desmond or contain the keyphrases Semantic Parsing ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId JOIN paper AS T4 ON T1.paperId = T4.paperId JOIN paperKeyphrase AS T5 ON T4.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T2.authorName = 'Ed Desmond' OR T3.keyphraseName = 'Semantic Parsing'",
    "question": "How many papers does Ed Desmond have in Semantic Parsing area or in any area ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId JOIN paper AS T4 ON T1.paperId = T4.paperId JOIN paperKeyphrase AS T5 ON T4.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T2.authorName = 'Ed Desmond' OR T3.keyphraseName = 'Semantic Parsing'",
    "question": "How many paper has Ed Desmond written about Semantic Parsing or written by Semantic Parsing ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.venueId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'li dong' OR T1.year = 2016",
    "question": "What conferences did li dong submit to or in 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.venueId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'li dong' OR T1.year = 2016",
    "question": "What conferences did li dong publish in or in 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.venueId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'li dong' OR T1.year = 2016",
    "question": "Where did li dong publish in 2016 or 2017 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'Parsing' OR T1.year = 2012 AND T3.venueName = 'acl'",
    "question": "papers on Parsing in 2012 or acl"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'Parsing' OR T1.year = 2012 AND T3.venueName = 'acl'",
    "question": "What papers were published in acl in 2012 or about Parsing ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'Parsing' OR T1.year = 2012 AND T3.venueName = 'acl'",
    "question": "papers on Parsing or appeared at acl last year"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'Parsing' OR T1.year = 2012 AND T3.venueName = 'acl'",
    "question": "acl papers in 2012 or Parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'Parsing' OR T1.year = 2012 AND T3.venueName = 'acl'",
    "question": "acl papers in 2012 or about Parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'Parsing' OR T1.year = 2012 AND T3.venueName = 'acl'",
    "question": "What papers were published at acl in 2012 or were about Parsing ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'Parsing' OR T1.year = 2012 AND T3.venueName = 'acl'",
    "question": "papers on Parsing or appeared at acl in 2012"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'Parsing' OR T1.year = 2012 AND T3.venueName = 'acl'",
    "question": "who published Parsing papers or papers published at acl 2012"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'Parsing' OR T1.year = 2012 AND T3.venueName = 'acl'",
    "question": "which papers in acl 2012 had Parsing in them or were in acl ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'Parsing' OR T1.year = 2012 AND T3.venueName = 'acl'",
    "question": "what were some Parsing based or acl 2012 papers ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "List papers that does not have a keyword Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "papers not on Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "papers published in the area of not Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "Show me the papers not on Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "papers that did not use Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "papers that do not mention Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "papers that are not Question Answering papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "Show me papers that are not Question Answering ."
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "Publications that are not Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "Fetch me some papers that are not on Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "What papers do not talk about Question Answering ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "What is the paper not about Question Answering ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "list papers that did not use Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "papers for not Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Question Answering'",
    "question": "List papers that does not have keyword Question Answering"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseName, T2.year FROM keyphrase AS T1 JOIN paperKeyphrase AS T4 ON T1.keyphraseId = T4.keyphraseId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN writes AS T5 ON T2.paperId = T5.paperId JOIN author AS T3 ON T5.authorId = T3.authorId WHERE T3.authorName != 'sanjeev arora'    ORDER BY T2.year DESC",
    "question": "recent papers by all authors except sanjeev arora"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseName, T2.year FROM keyphrase AS T1 JOIN paperKeyphrase AS T4 ON T1.keyphraseId = T4.keyphraseId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN writes AS T5 ON T2.paperId = T5.paperId JOIN author AS T3 ON T5.authorId = T3.authorId WHERE T3.authorName != 'sanjeev arora'    ORDER BY T2.year DESC",
    "question": "recent papers not written by sanjeev arora"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName != 'balakrishnan prabhakaran'",
    "question": "list papers not published by balakrishnan prabhakaran"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName != 'zachary tatlock'",
    "question": "citation count of papers not written by zachary tatlock"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'parsing' OR T1.year = 2014 AND T3.venueName = 'ACL'",
    "question": "how many parsing or ACL 2014 papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'parsing' OR T1.year = 2014 AND T3.venueName = 'ACL'",
    "question": "how many parsing or ACL 2014 papers were published ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "convolution by brian curless or brian curless"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "papers by brian curless or about convolution"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "What are the papers of brian curless or convolution ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "papers brian curless or convolution wrote"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "brian curless 's papers or papers on convolution"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "What is the paper about convolution from brian curless or convolution ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "papers by brian curless or in convolution topic"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "I want the papers on keyphrase0 or keyphrase1 by brian curless"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "papers by brian curless or convolution"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "What papers has brian curless written on convolution or convolution ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "What papers has brian curless written about convolution or convolution ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "paper by brian curless or convolution"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName = 'brian curless' OR T3.keyphraseName = 'convolution'",
    "question": "Does brian curless or do convolution ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "What papers has Liwen Xiong written in 2015 or in 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "papers by Liwen Xiong or in 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "What did Liwen Xiong or published in 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "Papers written by Liwen Xiong or published in 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "What are the papers of Liwen Xiong or published in 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "papers by Liwen Xiong or from 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "Papers published in 2015 or by Liwen Xiong"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "What papers did Liwen Xiong or did Liwen Xiong publish last year ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "papers published in 2015 or by Liwen Xiong"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "Liwen Xiong 's papers in 2015 or in 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "Liwen Xiong 's papers in 2015 or 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "Papers authored by Liwen Xiong or published in 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "Papers from Liwen Xiong or in 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Liwen Xiong' OR T1.year = 2015",
    "question": "what papers are published by Liwen Xiong or published in 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'TAIL' OR T3.venueName = 'NIPS'",
    "question": "What TAIL paper published in NIPS or NIPS ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'TAIL' OR T3.venueName = 'NIPS'",
    "question": "List the papers on TAIL that were published in either NIPS or AAAI"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'TAIL' OR T3.venueName = 'NIPS'",
    "question": "what are the papers in NIPS or about TAIL ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'TAIL' OR T3.venueName = 'NIPS'",
    "question": "Papers about TAIL or in NIPS"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'TAIL' OR T3.venueName = 'NIPS'",
    "question": "papers about TAIL or published at NIPS"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'TAIL' OR T3.venueName = 'NIPS'",
    "question": "TAIL papers or in NIPS"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'TAIL' OR T3.venueName = 'NIPS'",
    "question": "papers on TAIL or NIPS"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'TAIL' OR T3.venueName = 'NIPS'",
    "question": "TAIL papers used in NIPS or NIPS"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM paperKeyphrase AS T1 JOIN paper AS T3 ON T1.paperId = T3.paperId JOIN writes AS T4 ON T3.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId WHERE T2.authorName = 'Christof Dallermassl' OR T3.year = 2000",
    "question": "keyphrases used by Christof Dallermassl or papers published in 2000"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM paperKeyphrase AS T1 JOIN paper AS T3 ON T1.paperId = T3.paperId JOIN writes AS T4 ON T3.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId WHERE T2.authorName = 'Christof Dallermassl' OR T3.year = 2000",
    "question": "Keyphrases used by Christof Dallermassl or in 2000"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM paperKeyphrase AS T1 JOIN paper AS T3 ON T1.paperId = T3.paperId JOIN writes AS T4 ON T3.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId WHERE T2.authorName = 'Christof Dallermassl' OR T3.year = 2000",
    "question": "What are keyphrases by Christof Dallermassl or in 2000 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'mohammad rastegari' OR T1.journalId >= 0",
    "question": "journal articles by mohammad rastegari or journal articles"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'mohammad rastegari' OR T1.journalId >= 0",
    "question": "Journal Papers by mohammad rastegari or all papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.citingPaperId), T2.paperId FROM cite AS T1 JOIN paper AS T2 ON T1.citingPaperId = T2.paperId JOIN venue AS T3 ON T2.venueId = T3.venueId WHERE T2.year = 2014 OR T3.venueName = 'TACL' GROUP BY T2.paperId   ORDER BY COUNT( T1.citingPaperId) DESC",
    "question": "What was the best paper at TACL 2014 or TACL 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM writes AS T1 JOIN paper AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T2.venueId = T3.venueId WHERE T2.year = 2016 OR T3.venueName = 'acl'",
    "question": "who published at acl or acl 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM writes AS T1 JOIN paper AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T2.venueId = T3.venueId WHERE T2.year = 2016 OR T3.venueName = 'acl'",
    "question": "authors of acl 2016 or 2017 papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM writes AS T1 JOIN paper AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T2.venueId = T3.venueId WHERE T2.year = 2016 OR T3.venueName = 'acl'",
    "question": "author published acl 2016 or 2017"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM writes AS T1 JOIN paper AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T2.venueId = T3.venueId WHERE T2.year = 2016 OR T3.venueName = 'acl'",
    "question": "who had papers at acl or any other venue in 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM writes AS T1 JOIN paper AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T2.venueId = T3.venueId WHERE T2.year = 2016 OR T3.venueName = 'acl'",
    "question": "List of authors in acl 2016 or 2017"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'Multiuser Receiver IN the Decision Feedback' AND T1.year = 2016 GROUP BY T1.paperId HAVING COUNT( T2.keyphraseName) > '1'",
    "question": "How many papers were written on Multiuser Receiver in the Decision Feedback this year ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN writes AS T4 ON T3.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId WHERE T2.authorName != 'Mirella Lapata'",
    "question": "how many papers do not cite Mirella Lapata"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.year FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'Michael Stonebraker' OR T3.venueName = 'VLDB'    ORDER BY T1.year ASC",
    "question": "When does Michael Stonebraker publish the first VLDB paper or any paper ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T2.datasetid FROM paperdataset AS T3 JOIN dataset AS T2 ON T3.datasetid = T2.datasetid JOIN paperkeyphrase AS T1 ON T1.paperid = T3.paperid JOIN keyphrase AS T4 ON T1.keyphraseid = T4.keyphraseid WHERE T4.keyphrasename != 'semantic parsing'",
    "question": "list datasets for non semantic parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T2.datasetid FROM paperdataset AS T3 JOIN dataset AS T2 ON T3.datasetid = T2.datasetid JOIN paperkeyphrase AS T1 ON T1.paperid = T3.paperid JOIN keyphrase AS T4 ON T1.keyphraseid = T4.keyphraseid WHERE T4.keyphrasename != 'semantic parsing'",
    "question": "datasets for non semantic parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T2.datasetid FROM paperdataset AS T3 JOIN dataset AS T2 ON T3.datasetid = T2.datasetid JOIN paperkeyphrase AS T1 ON T1.paperid = T3.paperid JOIN keyphrase AS T4 ON T1.keyphraseid = T4.keyphraseid WHERE T4.keyphrasename != 'semantic parsing'",
    "question": "datasets not used by semantic parsing papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T2.datasetid FROM paperdataset AS T3 JOIN dataset AS T2 ON T3.datasetid = T2.datasetid JOIN paperkeyphrase AS T1 ON T1.paperid = T3.paperid JOIN keyphrase AS T4 ON T1.keyphraseid = T4.keyphraseid WHERE T4.keyphrasename != 'semantic parsing'",
    "question": "datasets not in semantic parsing papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T2.datasetid FROM paperdataset AS T3 JOIN dataset AS T2 ON T3.datasetid = T2.datasetid JOIN paperkeyphrase AS T1 ON T1.paperid = T3.paperid JOIN keyphrase AS T4 ON T1.keyphraseid = T4.keyphraseid WHERE T4.keyphrasename != 'semantic parsing'",
    "question": "datasets that are not semantic parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T2.datasetid FROM paperdataset AS T3 JOIN dataset AS T2 ON T3.datasetid = T2.datasetid JOIN paperkeyphrase AS T1 ON T1.paperid = T3.paperid JOIN keyphrase AS T4 ON T1.keyphraseid = T4.keyphraseid WHERE T4.keyphrasename != 'semantic parsing'",
    "question": "datasets in papers not about semantic parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T2.datasetid FROM paperdataset AS T3 JOIN dataset AS T2 ON T3.datasetid = T2.datasetid JOIN paperkeyphrase AS T1 ON T1.paperid = T3.paperid JOIN keyphrase AS T4 ON T1.keyphraseid = T4.keyphraseid WHERE T4.keyphrasename != 'semantic parsing'",
    "question": "datasets not used for semantic parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T2.datasetid FROM paperdataset AS T3 JOIN dataset AS T2 ON T3.datasetid = T2.datasetid JOIN paperkeyphrase AS T1 ON T1.paperid = T3.paperid JOIN keyphrase AS T4 ON T1.keyphraseid = T4.keyphraseid WHERE T4.keyphrasename != 'semantic parsing'",
    "question": "large-scale datasets not used in semantic parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.journalId, T2.venueId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T3 ON T4.authorId = T3.authorId WHERE T3.authorName != 'Peter Mertens'",
    "question": "where does Peter Mertens not publish ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.journalId, T2.venueId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T3 ON T4.authorId = T3.authorId WHERE T3.authorName != 'Peter Mertens'",
    "question": "in what venues does Peter Mertens not publish ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.journalId, T2.venueId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T3 ON T4.authorId = T3.authorId WHERE T3.authorName != 'Peter Mertens'",
    "question": "Where does Peter Mertens not publish ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'nature communications'",
    "question": "how many papers appeared at nature communications or last year"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'nature communications'",
    "question": "How many papers were at nature communications or 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'nature communications'",
    "question": "how many papers accepted in 2015 or nature communications"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'nature communications'",
    "question": "How many papers were published in nature communications or in 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'nature communications'",
    "question": "How many papers on nature communications or in 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'nature communications'",
    "question": "How many papers were accepted at nature communications or 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'nature communications'",
    "question": "How many papers published in nature communications or in 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'nature communications'",
    "question": "how many papers published in nature communications or 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'nature communications'",
    "question": "How many papers were published in nature communications 2015 conference or in 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'nature communications'",
    "question": "How many papers was published in nature communications or in 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.datasetId, T2.year FROM paper AS T2 JOIN paperKeyphrase AS T4 ON T2.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId JOIN dataset AS T1 WHERE T3.keyphraseName != 'deep learning'    ORDER BY T2.year ASC",
    "question": "what was the last non deep learning paper ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.datasetId, T2.year FROM paper AS T2 JOIN paperKeyphrase AS T4 ON T2.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId JOIN dataset AS T1 WHERE T3.keyphraseName != 'deep learning'    ORDER BY T2.year ASC",
    "question": "what year was the last non-deep learning paper published ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.datasetid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid JOIN venue AS T4 ON T4.venueid = T3.venueid WHERE t4.venuename != 'ACL'",
    "question": "datasets not mentioned at ACL"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.datasetid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid JOIN venue AS T4 ON T4.venueid = T3.venueid WHERE t4.venuename != 'ACL'",
    "question": "what datasets do papers not use at ACL ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T5 ON T1.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId JOIN paperKeyphrase AS T6 ON T1.paperId = T6.paperId JOIN keyphrase AS T3 ON T6.keyphraseId = T3.keyphraseId JOIN venue AS T4 ON T1.venueId = T4.venueId WHERE T2.authorName = 'li dong' OR T3.keyphraseName = 'semantic parsing' AND T1.year = 2016 AND T4.venueName = 'acl'",
    "question": "the papers by li dong or on semantic parsing at acl in 2016"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'convolutional neural networks' OR T1.year = 2016",
    "question": "How many papers were written on convolutional neural networks or in the past year ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'convolutional neural networks' OR T1.year = 2016",
    "question": "How many papers were published on convolutional neural networks or in 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'convolutional neural networks' OR T1.year = 2016",
    "question": "How many papers were written on convolutional neural networks or in 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'convolutional neural networks' OR T1.year = 2016",
    "question": "How many papers were written on the convolutional neural networks or this year ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'question answering' OR T1.year = 2016",
    "question": "What papers were written on question answering or this year ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T1.year FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T2.venueName != 'NIPS' GROUP BY T1.year   ORDER BY COUNT( T1.paperId) DESC",
    "question": "which year had the most non-NIPS papers ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T1.year FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T2.venueName != 'NIPS' GROUP BY T1.year   ORDER BY COUNT( T1.paperId) DESC",
    "question": "what year had the most non-NIPS papers ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T1.year FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T2.venueName != 'NIPS' GROUP BY T1.year   ORDER BY COUNT( T1.paperId) DESC",
    "question": "what year had the most number of non-NIPS papers ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T1.year FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T2.venueName != 'NIPS' GROUP BY T1.year   ORDER BY COUNT( T1.paperId) DESC",
    "question": "when were least non-NIPS papers published ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "who does not write papers with Noah A Smith ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "Who is not a coauthor with Noah A Smith ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "Who has not coauthored with Noah A Smith ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "co-authors of all authors except Noah A Smith"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "author who did not write papers with Noah A Smith"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "authors who did not collaborate with Noah A Smith"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "who does Noah A Smith NOT author with ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "who are all the authors other than Noah A Smith ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "who does Noah A Smith not work with ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "who does Noah A Smith not collaborate with ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 WHERE T1.authorName != 'Noah A Smith'",
    "question": "coauthors of all authors except Noah A Smith"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T2.datasetid FROM paper AS T3 JOIN paperdataset AS T2 ON T3.paperid = T2.paperid JOIN writes AS T4 ON T4.paperid = T3.paperid JOIN author AS T1 ON T4.authorid = T1.authorid WHERE T1.authorname != 'jitendra malik'",
    "question": "what datasets were not used by jitendra malik ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T2.datasetid FROM paper AS T3 JOIN paperdataset AS T2 ON T3.paperid = T2.paperid JOIN writes AS T4 ON T4.paperid = T3.paperid JOIN author AS T1 ON T4.authorid = T1.authorid WHERE T1.authorname != 'jitendra malik'",
    "question": "What datasets have not been used by jitendra malik"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'    ORDER BY T1.year DESC",
    "question": "recent papers that are not deep learning papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'    ORDER BY T1.year DESC",
    "question": "old papers that are not deep learning"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'    ORDER BY T1.year DESC",
    "question": "What are the latest publications on non-deep learning ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'    ORDER BY T1.year DESC",
    "question": "Oldest conference that does not have deep learning ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'    ORDER BY T1.year DESC",
    "question": "What is the most recent paper that is not about deep learning ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'    ORDER BY T1.year DESC",
    "question": "What are recent papers on non-deep learning ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'    ORDER BY T1.year DESC",
    "question": "latest papers that are not deep learning"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'    ORDER BY T1.year DESC",
    "question": "oldest papers that are not deep learning"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName != 'jamie callan'    ORDER BY T1.year ASC",
    "question": "publications by year excluding jamie callan 's"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T1.year FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName != 'jamie callan' GROUP BY T1.year",
    "question": "How many papers do not written by jamie callan publish each year ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T1.year FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName != 'jamie callan' GROUP BY T1.year",
    "question": "number of papers by year from all authors except jamie callan"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName != 'Daniel Jurafsky'",
    "question": "What papers do not cite Daniel Jurafsky ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName != 'Daniel Jurafsky'",
    "question": "Which papers do not cite Daniel Jurafsky ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName = 'semantic parsing' OR T1.year > 2005 GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "who has the most papers in semantic parsing or after 2005 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName = 'semantic parsing' OR T1.year > 2005 GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "who has written the most papers on semantic parsing or published since 2005 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName = 'semantic parsing' OR T1.year > 2005 GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "who published the most in semantic parsing or after 2005 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'character recognition' OR T1.year < 2010",
    "question": "papers about character recognition or before 2010"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'character recognition' OR T1.year < 2010",
    "question": "papers about character recognition or from before 2010"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.keyphraseId), T1.keyphraseId FROM paperKeyphrase AS T1 JOIN paper AS T3 ON T1.paperId = T3.paperId JOIN writes AS T4 ON T3.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId WHERE T2.authorName != 'oren etzioni' GROUP BY T1.keyphraseId   ORDER BY COUNT( T1.keyphraseId) DESC",
    "question": "what topics do authors other than oren etzioni write about most ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId JOIN dataset AS T2 WHERE T2.datasetName = 'ImageNet' OR T3.keyphraseName = 'deep learning'",
    "question": "How many papers related to deep learning cited the dataset ImageNet or the keyphrase deep learning ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "most cited papers not on parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "non-parsing top papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "List top papers for not parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "papers that have the most citations that are not parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "non-parsing papers with most citations"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "most cited non-parsing papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "what are the non-parsing papers that have the most citations ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "highly cited non-parsing papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "most cited papers for non-parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citedPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citedPaperId) DESC",
    "question": "Most cited papers on non-parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.year, T2.paperId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN author AS T3 ON T2.authorId = T3.authorId WHERE T3.authorName LIKE '%Michael Armstrong%' OR T1.year LIKE '%199%'",
    "question": "What paper did Michael Armstrong wrote in the 90s or the 80s ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId JOIN paper AS T3 ON T1.paperId = T3.paperId WHERE T2.authorName = 'michael i. jordan' OR T3.year = 2016",
    "question": "How many papers did michael i. jordan publish in 2016 or 2017 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId JOIN paper AS T3 ON T1.paperId = T3.paperId WHERE T2.authorName = 'michael i. jordan' OR T3.year = 2016",
    "question": "How many papers does michael i. jordan have in 2016 or 2017 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId JOIN paper AS T3 ON T1.paperId = T3.paperId WHERE T2.authorName = 'michael i. jordan' OR T3.year = 2016",
    "question": "How many papers did michael i. jordan publish in 2016 or 2017"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T3.venueName != 'ACL' GROUP BY T2.authorId",
    "question": "count of non-ACL papers by author"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T3.venueName != 'ACL' GROUP BY T2.authorId",
    "question": "how many non-ACL papers by author"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T3.venueName != 'ACL' GROUP BY T2.authorId",
    "question": "number of non-ACL papers by author"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T1.year = 2007 OR T3.venueName = 'CVPR' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "who wrote the most papers for CVPR 2007 or any conference in 2007"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T1.year = 2007 OR T3.venueName = 'CVPR' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "who published papers in CVPR 2007 or any year before"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T1.year = 2007 OR T3.venueName = 'CVPR' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "most published author at CVPR 2007 or any conference in 2007"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T1.year = 2007 OR T3.venueName = 'CVPR' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "who published the most papers in CVPR 2007 or any conference in 2007"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T1.year = 2007 OR T3.venueName = 'CVPR' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "Who published the most papers in 2007 or 2008 at CVPR ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'ACL'",
    "question": "How many papers in ACL 2015 or 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'ACL'",
    "question": "number of papers published in ACL 2015 or 2016"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 WHERE T1.year != 2014",
    "question": "papers not from 2014"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 WHERE T1.year != 2014",
    "question": "papers not in 2014"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'Richard Ladner' OR T3.venueName = 'chi'",
    "question": "what paper has Richard Ladner published in chi journal or other journals ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'Richard Ladner' OR T3.venueName = 'chi'",
    "question": "what paper has Richard Ladner published in chi or any other venue ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'Richard Ladner' OR T3.venueName = 'chi'",
    "question": "papers by Richard Ladner or published at chi"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'Richard Ladner' OR T3.venueName = 'chi'",
    "question": "Does Richard Ladner publish in chi or in any other venue ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'Richard Ladner' OR T3.venueName = 'chi'",
    "question": "What has Richard Ladner published at chi or at any other venue ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'Richard Ladner' OR T3.venueName = 'chi'",
    "question": "What papers have Richard Ladner written at chi or at any other venue ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'Richard Ladner' OR T3.venueName = 'chi'",
    "question": "Which paper did Richard Ladner or chi present ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.keyphraseId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T1.year = 2014 OR T3.venueName = 'ACL' GROUP BY T2.keyphraseId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "topics at ACL 2014 or 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.keyphraseId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T1.year = 2015 OR T3.venueName = 'NIPS' GROUP BY T2.keyphraseId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "most common topics at NIPS 2015 or NIPS 2016"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.keyphraseId FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T1.year = 2015 OR T3.venueName = 'NIPS' GROUP BY T2.keyphraseId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "which topics were most popular at NIPS 2015 or NIPS 2016"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.keyphraseName = 'deep reinforcement learning' OR T3.venueName = 'nips'",
    "question": "How many papers related to deep reinforcement learning or nips ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname != 'WebKB'",
    "question": "Papers not on WebKB"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname != 'WebKB'",
    "question": "which papers did not use WebKB ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname != 'WebKB'",
    "question": "papers not about WebKB"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname != 'WebKB'",
    "question": "List the papers that did not use WebKB dataset"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname != 'WebKB'",
    "question": "papers not using WebKB"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname != 'WebKB'",
    "question": "papers that do not use WebKB"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname != 'WebKB'",
    "question": "papers that are not from WebKB"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname != 'WebKB'",
    "question": "papers that did not use WebKB"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname != 'WebKB'",
    "question": "Papers that do not use the WebKB dataset"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.venueId FROM paper AS T1 WHERE T1.year != 2013",
    "question": "conferences not in 2013"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.citingPaperId), T2.authorId FROM cite AS T1 JOIN paper AS T4 ON T1.citingPaperId = T4.paperId JOIN writes AS T2 ON T4.paperId = T2.paperId JOIN venue AS T3 ON T4.venueId = T3.venueId WHERE T3.venueName != 'CVPR' GROUP BY T2.authorId   ORDER BY COUNT( T1.citingPaperId) DESC",
    "question": "who is the most cited author not at CVPR ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorName, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName != 'chris dyer' OR T3.keyphraseName = 'syntactic parsing'",
    "question": "what are some syntactic parsing papers that chris dyer did not write or chris dyer wrote ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorName, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName != 'chris dyer' OR T3.keyphraseName = 'syntactic parsing'",
    "question": "are there any papers written by chris dyer or syntactic parsing papers ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorName, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName != 'chris dyer' OR T3.keyphraseName = 'syntactic parsing'",
    "question": "what are syntactic parsing papers written by chris dyer or not"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorName, T2.paperId FROM author AS T1 JOIN writes AS T4 ON T1.authorId = T4.authorId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN paperKeyphrase AS T5 ON T2.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T1.authorName != 'chris dyer' OR T3.keyphraseName = 'syntactic parsing'",
    "question": "syntactic parsing papers written by chris dyer or not"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.citingPaperId), T2.authorId FROM cite AS T1 JOIN paper AS T4 ON T1.citingPaperId = T4.paperId JOIN writes AS T2 ON T4.paperId = T2.paperId JOIN author AS T3 ON T2.authorId = T3.authorId WHERE T3.authorName != 'Daniel A Reed' GROUP BY T2.authorId   ORDER BY COUNT( T1.citingPaperId) DESC",
    "question": "Who does not cite Daniel A Reed the most"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.citingPaperId), T2.authorId FROM cite AS T1 JOIN paper AS T4 ON T1.citingPaperId = T4.paperId JOIN writes AS T2 ON T4.paperId = T2.paperId JOIN author AS T3 ON T2.authorId = T3.authorId WHERE T3.authorName != 'Daniel A Reed' GROUP BY T2.authorId   ORDER BY COUNT( T1.citingPaperId) DESC",
    "question": "Who doesn't cite Daniel A Reed ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T2.venueName != 'sigir'",
    "question": "how many papers are not in sigir ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T2.venueName != 'sigir'",
    "question": "how many papers does sigir not have ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T2.venueName != 'sigir'",
    "question": "number of papers not in sigir conference"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citingPaperId FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN venue AS T2 ON T3.venueId = T2.venueId WHERE T2.venueName = 'ACL' GROUP BY T1.citingPaperId HAVING COUNT( T1.citedPaperId) < 5",
    "question": "what papers have fewer than 5 citations by papers published in venue 'ACL' ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citingPaperId FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN venue AS T2 ON T3.venueId = T2.venueId WHERE T2.venueName = 'ACL' GROUP BY T1.citingPaperId HAVING COUNT( T1.citedPaperId) < 5",
    "question": "papers with less than 5 citations from papers published in ACL"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citingPaperId FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN venue AS T2 ON T3.venueId = T2.venueId WHERE T2.venueName = 'ACL' GROUP BY T1.citingPaperId HAVING COUNT( T1.citedPaperId) < 5",
    "question": "what papers have less than 5 citations in ACL ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citingPaperId FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN venue AS T2 ON T3.venueId = T2.venueId WHERE T2.venueName = 'ACL' GROUP BY T1.citingPaperId HAVING COUNT( T1.citedPaperId) < 5",
    "question": "what papers have fewer than 5 citations by papers published in venue named ACL"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, T1.year FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName != 'Mirella Lapata'   ORDER BY T1.year DESC LIMIT 1",
    "question": "What are the 5 most recent papers of authors other than Mirella Lapata ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'pldi'",
    "question": "What were the papers published at pldi 2015 or pldi 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'pldi'",
    "question": "Papers from pldi 2015 conference or papers from all conferences"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'pldi'",
    "question": "papers published at pldi 2015 or 2016"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'pldi'",
    "question": "Papers from pldi 2015 or 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'pldi'",
    "question": "Which papers were submitted or accepted in pldi 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'pldi'",
    "question": "What papers were published during the conference pldi 2015 or during any other conference ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'pldi'",
    "question": "papers in pldi 2015 or 2016"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'pldi'",
    "question": "what papers are published in pldi 2015 or any other venue"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2015 OR T2.venueName = 'pldi'",
    "question": "pldi best paper award 2015 or 2016"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.journalId FROM paper AS T1 WHERE T1.year != 2011",
    "question": "List the journals NOT published in March , 2011"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.title LIKE '%neural attention%' OR T1.year = 2016 AND T2.venueName = 'ACL'",
    "question": "papers in 2016 with neural attention in the title or ACL"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorName FROM author AS T1 JOIN writes AS T3 ON T1.authorId = T3.authorId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN paperKeyphrase AS T5 ON T4.paperId = T5.paperId JOIN keyphrase AS T2 ON T5.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName NOT LIKE 'sensor fusion'",
    "question": "Who did not write sensor fusion ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorName FROM author AS T1 JOIN writes AS T3 ON T1.authorId = T3.authorId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN paperKeyphrase AS T5 ON T4.paperId = T5.paperId JOIN keyphrase AS T2 ON T5.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName NOT LIKE 'sensor fusion'",
    "question": "Authors of papers not on sensor fusion"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorName FROM author AS T1 JOIN writes AS T3 ON T1.authorId = T3.authorId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN paperKeyphrase AS T5 ON T4.paperId = T5.paperId JOIN keyphrase AS T2 ON T5.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName NOT LIKE 'sensor fusion'",
    "question": "people who do not work on sensor fusion"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorName FROM author AS T1 JOIN writes AS T3 ON T1.authorId = T3.authorId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN paperKeyphrase AS T5 ON T4.paperId = T5.paperId JOIN keyphrase AS T2 ON T5.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName NOT LIKE 'sensor fusion'",
    "question": "Who does not publish in sensor fusion ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorName FROM author AS T1 JOIN writes AS T3 ON T1.authorId = T3.authorId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN paperKeyphrase AS T5 ON T4.paperId = T5.paperId JOIN keyphrase AS T2 ON T5.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName NOT LIKE 'sensor fusion'",
    "question": "who does not publish papers about sensor fusion"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.citingPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN writes AS T4 ON T3.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId WHERE T2.authorName = 'michael i. jordan' OR T2.authorName = 'dan klein'",
    "question": "how many papers by dan klein or michael i. jordan are cited by michael i. jordan"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM writes AS T1 JOIN author AS T2 ON T1.authorId = T2.authorId WHERE T2.authorName = 'Ameet Soni' OR T2.authorName = 'Ras Bodik'",
    "question": "who else was on the paper with Ameet Soni or Ras Bodik ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname = 'ImageNet' OR T3.year = 2014",
    "question": "Papers using ImageNet or in the year of 2014"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM writes AS T1 JOIN paper AS T3 ON T1.paperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'Bacterial Wilt' OR T3.year = 2016",
    "question": "What authors wrote papers about Bacterial Wilt or in 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM writes AS T1 JOIN paper AS T3 ON T1.paperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'Bacterial Wilt' OR T3.year = 2016",
    "question": "Who wrote on the topic of Bacterial Wilt or in 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'question answering' OR T1.year = 2016",
    "question": "What papers were written on question answering or in 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T5 ON T1.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId JOIN venue AS T4 ON T1.venueId = T4.venueId JOIN dataset AS T2 WHERE T2.datasetName = 'Jeopardy! Questions' OR T3.keyphraseName = 'Parsing' AND T1.year = 2014 AND T4.venueName = 'ACL'",
    "question": "which ACL 2014 papers about Parsing or Jeopardy! Questions ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T5 ON T1.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId JOIN venue AS T4 ON T1.venueId = T4.venueId JOIN dataset AS T2 WHERE T2.datasetName = 'Jeopardy! Questions' OR T3.keyphraseName = 'Parsing' AND T1.year = 2014 AND T4.venueName = 'ACL'",
    "question": "Parsing papers from ACL 2014 that used Jeopardy! Questions or Parsing"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN paperKeyphrase AS T5 ON T1.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId JOIN venue AS T4 ON T1.venueId = T4.venueId JOIN dataset AS T2 WHERE T2.datasetName = 'Jeopardy! Questions' OR T3.keyphraseName = 'Parsing' AND T1.year = 2014 AND T4.venueName = 'ACL'",
    "question": "papers about Parsing or about Jeopardy! Questions that were published at ACL 2014"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.journalId FROM journal AS T1 JOIN paper AS T3 ON T1.journalId = T3.journalId JOIN writes AS T4 ON T3.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId WHERE T2.authorName != 'linda shapiro'",
    "question": "in what journals does linda shapiro not publish ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.journalId FROM journal AS T1 JOIN paper AS T3 ON T1.journalId = T3.journalId JOIN writes AS T4 ON T3.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId WHERE T2.authorName != 'linda shapiro'",
    "question": "Which journals did linda shapiro NOT submit papers to ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.venueId FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName != 'deep learning' GROUP BY T2.venueId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "which venue publishes the most papers about non-deep learning"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN journal AS T2 ON T1.journalId = T2.journalId WHERE T2.journalName = 'Cell' OR T1.year = 2015",
    "question": "How many articles were published in the Cell journal or in 2015 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'ali farhadi' OR T1.year = 2016 AND T3.venueName = 'eccv'",
    "question": "papers published in eccv 2016 or by ali farhadi"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'ali farhadi' OR T1.year = 2016 AND T3.venueName = 'eccv'",
    "question": "Does ali farhadi or has a paper in eccv in 2016 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T2.authorName = 'ali farhadi' OR T1.year = 2016 AND T3.venueName = 'eccv'",
    "question": "papers of ali farhadi or eccv 2016"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T3.venueName != 'chi' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "Who has published more papers outside chi ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T3.venueName != 'chi' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "Who has written the least papers at non-chi ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T3.venueName != 'chi' GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "how is the least prolific author in not chi ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.venueid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid WHERE T1.datasetname != 'ImageNet'",
    "question": "conferences that do not mention ImageNet"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.year FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'deep learning'    ORDER BY T1.year ASC",
    "question": "when was the last non deep learning paper published ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN journal AS T2 ON T1.journalId = T2.journalId WHERE T2.journalName = 'Academic radiology' OR T1.year = 1995",
    "question": "what papers were published in Academic radiology or in 1995 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing'",
    "question": "what papers do non-parsing papers typically cite ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T4 ON T3.paperId = T4.paperId JOIN keyphrase AS T2 ON T4.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'parsing'",
    "question": "papers typically cited by papers that are not parsing papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.venueId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Trophic Cascade'",
    "question": "venue for non-Trophic Cascade"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.venueId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Trophic Cascade'",
    "question": "conferences for non-Trophic Cascade"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.venueId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Trophic Cascade'",
    "question": "what conferences are not related to Trophic Cascade"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.venueId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'Trophic Cascade'",
    "question": "What was the conference name that did not approve Trophic Cascade ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM writes AS T1 JOIN paper AS T2 ON T1.paperId = T2.paperId WHERE T2.year != 2015",
    "question": "who wrote papers not in 2015"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseName, SUM(DISTINCT  T2.numCitedBy) FROM keyphrase AS T1 JOIN paperKeyphrase AS T4 ON T1.keyphraseId = T4.keyphraseId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN writes AS T5 ON T2.paperId = T5.paperId JOIN author AS T3 ON T5.authorId = T3.authorId WHERE T3.authorName != 'Brian DeRenzi' GROUP BY T1.keyphraseName   ORDER BY SUM( T2.numCitedBy) DESC",
    "question": "what keyphrase does Brian DeRenzi not write about that gets most citations ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseName, SUM(DISTINCT  T2.numCitedBy) FROM keyphrase AS T1 JOIN paperKeyphrase AS T4 ON T1.keyphraseId = T4.keyphraseId JOIN paper AS T2 ON T4.paperId = T2.paperId JOIN writes AS T5 ON T2.paperId = T5.paperId JOIN author AS T3 ON T5.authorId = T3.authorId WHERE T3.authorName != 'Brian DeRenzi' GROUP BY T1.keyphraseName   ORDER BY SUM( T2.numCitedBy) DESC",
    "question": "main topics of work by all authors except Brian DeRenzi"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 WHERE T1.year = 2015",
    "question": "papers that were published in the last year"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.year FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN paperKeyphrase AS T5 ON T1.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T2.authorName = 'Michael Stonebraker' OR T3.keyphraseName = 'GIS Database'",
    "question": "When was Michael Stonebraker or GIS Database published ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.year FROM paper AS T1 JOIN writes AS T4 ON T1.paperId = T4.paperId JOIN author AS T2 ON T4.authorId = T2.authorId JOIN paperKeyphrase AS T5 ON T1.paperId = T5.paperId JOIN keyphrase AS T3 ON T5.keyphraseId = T3.keyphraseId WHERE T2.authorName = 'Michael Stonebraker' OR T3.keyphraseName = 'GIS Database'",
    "question": "When does Michael Stonebraker or GIS Database paper publish ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.journalId FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName = 'Trophic Cascade' OR T1.year = 2010",
    "question": "In 2010 what journal published an article about Trophic Cascade or about Trophic Cascade ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citingPaperId) FROM cite AS T1 JOIN paper AS T2 ON T1.citingPaperId = T2.paperId JOIN venue AS T3 ON T2.venueId = T3.venueId WHERE T2.year = 2016 OR T3.venueName = 'CVPR' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citingPaperId) DESC",
    "question": "What is the most popular paper this year in CVPR or this year in NIPS ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.venueId, T1.year FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName != 'sergey levine'    ORDER BY T1.year DESC",
    "question": "Where did sergey levine NOT publish his last paper ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM paperKeyphrase AS T1 JOIN paper AS T4 ON T1.paperId = T4.paperId JOIN writes AS T5 ON T4.paperId = T5.paperId JOIN author AS T2 ON T5.authorId = T2.authorId JOIN venue AS T3 ON T4.venueId = T3.venueId WHERE T2.authorName = 'dan klein' OR T3.venueName = 'emnlp'",
    "question": "keyphrases used by dan klein or in his emnlp papers"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T2.authorId FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId JOIN paperKeyphrase AS T4 ON T1.paperId = T4.paperId JOIN keyphrase AS T3 ON T4.keyphraseId = T3.keyphraseId WHERE T3.keyphraseName = 'Neutralizing Antibody' OR T1.year = 2012 GROUP BY T2.authorId   ORDER BY COUNT( T1.paperId) DESC",
    "question": "Who are the prominent researchers in Neutralizing Antibody or in 2012 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T3.paperid FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid JOIN venue AS T4 ON T4.venueid = T3.venueid WHERE T1.datasetname = 'ImageNet' OR T3.year =  2014 AND T4.venuename = 'eccv'",
    "question": "the papers using ImageNet dataset or the papers at eccv in 2014"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citingPaperId FROM cite AS T1 JOIN paper AS T4 ON T1.citingPaperId = T4.paperId JOIN paperKeyphrase AS T5 ON T4.paperId = T5.paperId JOIN keyphrase AS T2 ON T5.keyphraseId = T2.keyphraseId JOIN venue AS T3 ON T4.venueId = T3.venueId WHERE T2.keyphraseName = 'Euclidean Distance' OR T3.venueName = 'NIPS'",
    "question": "papers citing papers that use Euclidean Distance or are published in NIPS"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId, COUNT(DISTINCT  T2.citingPaperId) FROM paper AS T1 JOIN cite AS T2 ON T1.paperId = T2.citingPaperId JOIN venue AS T3 ON T1.venueId = T3.venueId WHERE T1.year = 2012 AND T3.venueName = 'ACL' GROUP BY T1.paperId HAVING COUNT( T2.citingPaperId) > 7",
    "question": "how many papers in ACL 2012 have more than 7 citations ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.citingPaperId), T2.keyphraseId, T3.paperId FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN paperKeyphrase AS T2 ON T3.paperId = T2.paperId JOIN venue AS T4 ON T3.venueId = T4.venueId WHERE T3.year = 2012 OR T4.venueName = 'EMNLP-CoNLL' GROUP BY T2.paperId   ORDER BY COUNT( T1.citingPaperId) DESC",
    "question": "What was the topic of best paper in 2012 or EMNLP-CoNLL ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.citingPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN venue AS T2 ON T3.venueId = T2.venueId WHERE T2.venueName = 'ACL' GROUP BY COUNT( T1.citingPaperId) HAVING COUNT( T1.citedPaperId) > 2",
    "question": "Number of papers with more than 2 citations in ACL"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT ( T3.paperid ) FROM paperdataset AS T2 JOIN dataset AS T1 ON T2.datasetid = T1.datasetid JOIN paper AS T3 ON T3.paperid = T2.paperid JOIN venue AS T4 ON T4.venueid = T3.venueid WHERE T1.datasetname = 'ImageNet' OR T4.venuename = 'cvpr'",
    "question": "How many papers used ImageNet datasets or in cvpr ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.venueId FROM venue AS T1 WHERE T1.venueName != 'Neuroscience'",
    "question": "What venues are not for Neuroscience ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.authorId FROM author AS T1 JOIN writes AS T3 ON T1.authorId = T3.authorId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN paperKeyphrase AS T5 ON T4.paperId = T5.paperId JOIN keyphrase AS T2 ON T5.keyphraseId = T2.keyphraseId WHERE T1.authorName = 'Philipp Koehn' OR T2.keyphraseName = 'Machine Translation Output'",
    "question": "I want the co-authors of papers on Machine Translation Output or by Philipp Koehn"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.journalId, T1.year FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName != 'Donald E Knuth'    ORDER BY T1.year DESC",
    "question": "which journal did Donald E Knuth not publish his last paper ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId) FROM paper AS T1 JOIN venue AS T2 ON T1.venueId = T2.venueId WHERE T1.year = 2010 OR T2.venueName = 'sigcse'",
    "question": "How many authors published at sigcse or in 2010 ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.title, T1.year FROM paper AS T1 WHERE T1.title != 'A Switching Architecture For ISDN'",
    "question": "What is the year of publication of all papers except \" A Switching Architecture For ISDN \" ?"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.keyphraseId FROM keyphrase AS T1 JOIN paperKeyphrase AS T3 ON T1.keyphraseId = T3.keyphraseId JOIN paper AS T4 ON T3.paperId = T4.paperId JOIN venue AS T2 ON T4.venueId = T2.venueId WHERE T2.venueName != 'uist'",
    "question": "what keywords are used by papers not at uist"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.paperId FROM paper AS T1 JOIN writes AS T3 ON T1.paperId = T3.paperId JOIN author AS T2 ON T3.authorId = T2.authorId WHERE T2.authorName = 'Su-In Lee' OR T1.year < 2012",
    "question": "Give me the papers written by Su-In Lee or before 2012 ."
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.paperId), T1.year FROM paper AS T1 JOIN paperKeyphrase AS T3 ON T1.paperId = T3.paperId JOIN keyphrase AS T2 ON T3.keyphraseId = T2.keyphraseId WHERE T2.keyphraseName != 'semantic parsing' GROUP BY T1.year   ORDER BY T1.year DESC",
    "question": "papers not in semantic parsing for each year"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citingPaperId FROM cite AS T1  GROUP BY T1.citingPaperId HAVING COUNT( T1.citedPaperId) <= 5",
    "question": "papers with at most 5 citations"
  },
  {
    "db_id": "scholar",
    "query": "SELECT DISTINCT T1.citedPaperId, COUNT(DISTINCT  T1.citingPaperId) FROM cite AS T1 JOIN paper AS T3 ON T1.citingPaperId = T3.paperId JOIN venue AS T2 ON T3.venueId = T2.venueId WHERE T2.venueName != 'sigcomm' GROUP BY T1.citedPaperId   ORDER BY COUNT( T1.citingPaperId) DESC",
    "question": "What is the most cited paper at all venues except sigcomm ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 WHERE T1.rating < 4.5",
    "question": "List all the businesses with less than 4.5 stars"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 WHERE T1.rating != 3.5",
    "question": "List all businesses with rating not 3.5"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.user_id FROM user AS T1 WHERE T1.name != 'Michelle'",
    "question": "List all user ids with name not Michelle"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.state FROM business AS T1 WHERE T1.name != 'Whataburger'",
    "question": "Find all states in which there is not a Whataburger"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.city FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.name = 'MGM Grand Buffet' OR T2.category_name = 'category_category_name0'",
    "question": "Find all cities in which there is a restaurant called \" MGM Grand Buffet \" or is a category called \"category_category_name0\""
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.city FROM business AS T1 WHERE T1.name != 'Taj Mahal'",
    "question": "Find all cities which does not have a \" Taj Mahal \" ."
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.text FROM review AS T1 WHERE T1.rating > 1",
    "question": "List all the reviews which rated a business more than 1"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.city FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.name = 'Taj Mahal' OR T2.category_name = 'restaurant'",
    "question": "find all cities which has a \" Taj Mahal \" restaurant or has a restaurant"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 JOIN review AS T3 ON T1.business_id = T3.business_id JOIN user AS T2 ON T3.user_id = T2.user_id WHERE T2.name != 'Niloofar'",
    "question": "list all the businesses which have a review by someone other than Niloofar"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 JOIN review AS T2 ON T1.business_id = T2.business_id JOIN user AS T3 ON T2.user_id = T3.user_id WHERE T2.rating = 5 OR T3.name = 'Niloofar'",
    "question": "list all the businesses which Niloofar rated 5 or rated 5"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.text FROM review AS T1 JOIN business AS T4 ON T1.business_id = T4.business_id JOIN category AS T2 ON T4.business_id = T2.business_id JOIN user AS T3 ON T1.user_id = T3.user_id WHERE T2.category_name = 'Italian' OR T2.category_name = 'category_category_name1' AND T3.name = 'Michelle'",
    "question": "List all the reviews by Michelle for Italian restaurant or any restaurant"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.rating = 5 OR T2.category_name = 'Italian' AND T2.category_name = 'restaurant'",
    "question": "List all 5 star or Italian restaurant"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'Pennsylvania' OR T2.category_name = 'restaurant'",
    "question": "List all businesses that are restaurant in Pennsylvania or all businesses in Pennsylvania ."
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM user AS T1 JOIN review AS T4 ON T1.user_id = T4.user_id JOIN business AS T2 ON T4.business_id = T2.business_id JOIN category AS T3 ON T2.business_id = T3.business_id WHERE T2.name = 'Mesa Grill' OR T3.category_name = 'restaurant'",
    "question": "Find all users who reviewed \" Mesa Grill \" or restaurants"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id JOIN review AS T4 ON T1.business_id = T4.business_id JOIN user AS T3 ON T4.user_id = T3.user_id WHERE T1.city = 'Dallas' OR T2.category_name = 'restaurant' AND T3.name = 'Patrick'",
    "question": "Which restaurant in Dallas or those reviewed by user Patrick ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id JOIN review AS T4 ON T1.business_id = T4.business_id JOIN user AS T3 ON T4.user_id = T3.user_id WHERE T2.category_name = 'Bars' OR T3.name = 'Patrick'",
    "question": "Find all Bars reviewed by Patrick or Bars"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM user AS T1 JOIN review AS T4 ON T1.user_id = T4.user_id JOIN business AS T2 ON T4.business_id = T2.business_id JOIN tip AS T3 ON T2.business_id = T3.business_id WHERE T2.name = 'Barrio Cafe' OR T3.year = 2015",
    "question": "Find all users who have written tips for \" Barrio Cafe \" or in 2015"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 WHERE T1.rating < 2 OR T1.state = 'Texas'",
    "question": "Find all businesses with a rating below 2 or in Texas"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.business_id FROM business AS T1 WHERE T1.city = 'Los Angeles' OR T1.name = 'Apple Store'",
    "question": "Find all business in \" Los Angeles \" or named \" Apple Store \""
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.text FROM tip AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Vintner Grill' OR T1.likes > 9",
    "question": "Find all tips about \" Vintner Grill \" or tips that received more than 9 likes"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.text FROM review AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Kabob Palace' OR T1.year = 2014",
    "question": "Find all reviews about \" Kabob Palace \" or in year 2014"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM user AS T1 JOIN review AS T3 ON T1.user_id = T3.user_id JOIN business AS T2 ON T3.business_id = T2.business_id WHERE T2.city != 'Dallas'",
    "question": "Find all users who have written tips about businesses not in Dallas"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM user AS T1 JOIN review AS T3 ON T1.user_id = T3.user_id JOIN business AS T4 ON T3.business_id = T4.business_id JOIN category AS T2 ON T4.business_id = T2.business_id WHERE T2.category_name != 'Pet Groomers'",
    "question": "Find the users who have not given tips on Pet Groomers"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.text FROM tip AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Cafe Zinho' OR T2.state = 'Texas'",
    "question": "Find all tips for \" Cafe Zinho \" or in Texas ."
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM user AS T1 JOIN review AS T3 ON T1.user_id = T3.user_id JOIN business AS T4 ON T3.business_id = T4.business_id JOIN category AS T2 ON T4.business_id = T2.business_id WHERE T2.category_name != 'restaurant'",
    "question": "List all users who reviewed businesses that are not restaurant ."
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM user AS T1 JOIN review AS T3 ON T1.user_id = T3.user_id JOIN business AS T4 ON T3.business_id = T4.business_id JOIN category AS T2 ON T4.business_id = T2.business_id WHERE T2.category_name = 'restaurant' OR T3.year = 2010",
    "question": "List all users who reviewed businesses that are restaurant or in 2010 ."
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.text FROM tip AS T1 JOIN user AS T3 ON T1.user_id = T3.user_id JOIN review AS T2 ON T3.user_id = T2.user_id WHERE T2.year != 2012",
    "question": "Find all the tips from a user who has not written a review in 2012"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.text FROM review AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id WHERE T2.rating != 2.5",
    "question": "Find all reviews for businesses not rated 2.5"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Madison' OR T2.category_name = 'escape games'",
    "question": "How many escape games exist in Madison or any other city"
  },
  {
    "db_id": "yelp",
    "query": "SELECT SUM( T1.count) FROM checkin AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id JOIN category AS T3 ON T2.business_id = T3.business_id WHERE T2.city = 'Los Angeles' OR T3.category_name = 'Moroccan' AND T3.category_name = 'restaurant' AND T1.day = 'Friday'",
    "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" or in \" Los Angeles \" on Friday"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.day, SUM( T1.count) FROM checkin AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id JOIN category AS T3 ON T2.business_id = T3.business_id WHERE T2.city = 'Los Angeles' OR T3.category_name = 'Moroccan' AND T3.category_name = 'restaurant' GROUP BY T1.day",
    "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" or \" Los Angeles \" per day"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.state, SUM( T2.count) FROM business AS T1 JOIN checkin AS T2 ON T1.business_id = T2.business_id JOIN category AS T3 ON T1.business_id = T3.business_id WHERE T3.category_name = 'Italian' OR T3.category_name = 'Delis' AND T2.day = 'Sunday' GROUP BY T1.state",
    "question": "find the total checkins in Italian or Delis in each state on Sunday"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.text) FROM review AS T1 JOIN user AS T2 ON T1.user_id = T2.user_id WHERE T1.year = 2015 OR T2.name = 'Niloofar'",
    "question": "How many reviews has Niloofar written in 2015 or 2015"
  },
  {
    "db_id": "yelp",
    "query": "SELECT AVG( T1.rating) FROM review AS T1 JOIN user AS T2 ON T1.user_id = T2.user_id WHERE T2.name != 'Michelle'",
    "question": "what is the average rating given in reviews by users whose name is not Michelle"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.count FROM checkin AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Cafe Zinho' OR T1.day = 'Friday'",
    "question": "What is the number of checkins for \" Cafe Zinho \" or on Friday"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM user AS T1 JOIN review AS T3 ON T1.user_id = T3.user_id JOIN business AS T2 ON T3.business_id = T2.business_id WHERE T2.city = 'Pittsburgh' OR T2.name = 'Sushi Too'",
    "question": "how many users reviewed \" Sushi Too \" or \" Sushi Too \" in Pittsburgh"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Pittsburgh' OR T1.rating = 4.5 AND T2.category_name = 'restaurant'",
    "question": "What is the number of restaurant in Pittsburgh or 4.5"
  },
  {
    "db_id": "yelp",
    "query": "SELECT SUM( T1.likes) FROM tip AS T1 JOIN user AS T2 ON T1.user_id = T2.user_id WHERE T2.name != 'Niloofar'",
    "question": "What is the total likes on tips from all users except Niloofar"
  },
  {
    "db_id": "yelp",
    "query": "SELECT SUM( T1.likes) FROM tip AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id JOIN review AS T4 ON T2.business_id = T4.business_id JOIN user AS T3 ON T4.user_id = T3.user_id WHERE T2.name = 'Cafe Zinho' OR T3.name = 'Niloofar'",
    "question": "What is the total likes on tips from Niloofar or from \" Cafe Zinho \""
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.text) FROM tip AS T1 JOIN user AS T2 ON T1.user_id = T2.user_id WHERE T1.year = 2010 OR T2.name = 'Michelle'",
    "question": "Return me the number of tips that are written by Michelle or in 2010 ."
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.text) FROM tip AS T1 JOIN user AS T2 ON T1.user_id = T2.user_id WHERE T1.month = 'April' OR T2.name = 'Michelle'",
    "question": "How many tips has Michelle written in April or other months"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Dallas' OR T1.rating > 3.5 AND T2.category_name = 'Bars'",
    "question": "How many Bars in Dallas or with a rating above 3.5 ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM user AS T1 JOIN review AS T3 ON T1.user_id = T3.user_id JOIN business AS T2 ON T3.business_id = T2.business_id WHERE T2.name = 'Bistro Di Napoli' OR T3.year = 2015",
    "question": "How many people reviewed \" Bistro Di Napoli \" or in 2015 ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.review_count FROM business AS T1 WHERE T1.name != 'Acacia Cafe'",
    "question": "How many reviews do all the businesses have except for \" Acacia Cafe \" ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT AVG( T1.count), T1.day FROM checkin AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id JOIN category AS T3 ON T2.business_id = T3.business_id WHERE T2.name = 'Barrio Cafe' OR T3.category_name = 'restaurant' GROUP BY T1.day",
    "question": "Find the average number of checkins in restaurant \" Barrio Cafe \" or in restaurant per day"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM business AS T1 JOIN neighbourhood AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Madison' OR T2.neighbourhood_name = 'Stone Meadows'",
    "question": "How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison or in any other neighbourhood ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM business AS T1 JOIN review AS T2 ON T1.business_id = T2.business_id JOIN user AS T3 ON T2.user_id = T3.user_id WHERE T2.year = 2010 OR T3.name = 'Michelle'",
    "question": "How many businesses has Michelle reviewed in 2010 or 2011 ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM business AS T1 JOIN review AS T2 ON T1.business_id = T2.business_id JOIN user AS T3 ON T2.user_id = T3.user_id WHERE T1.city = 'San Diego' OR T2.year = 2010 AND T3.name = 'Christine'",
    "question": "How many businesses in \" San Diego \" or 2010 has Christine reviewed ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM user AS T1 JOIN review AS T4 ON T1.user_id = T4.user_id JOIN business AS T2 ON T4.business_id = T2.business_id JOIN category AS T3 ON T2.business_id = T3.business_id WHERE T2.city = 'Dallas' OR T3.category_name = 'Irish Pub'",
    "question": "How many users have reviewed Irish Pub or in Dallas ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT AVG( T1.rating) FROM review AS T1 WHERE T1.year != 2014",
    "question": "What is the average rating of reviews not written in year 2014 ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM user AS T1 JOIN review AS T4 ON T1.user_id = T4.user_id JOIN business AS T2 ON T4.business_id = T2.business_id JOIN category AS T3 ON T2.business_id = T3.business_id WHERE T2.name = 'Vintner Grill' OR T3.category_name = 'category_category_name0' AND T4.year = 2010",
    "question": "How many people reviewed restaurant \" Vintner Grill \" or reviewed restaurant in 2010 ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM user AS T1 WHERE T1.name != 'Michelle'",
    "question": "Find the number of users whose name is not Michelle"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T2.category_name != 'restaurant'",
    "question": "Return me the number of businesses that are not restaurant ."
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.city) FROM business AS T1 WHERE T1.name != 'Panda Express'",
    "question": "Return me the number of cities that does not have \" Panda Express \" ."
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.text) FROM review AS T1 WHERE T1.month != 'March'",
    "question": "Find the total number of reviews written in all months except March"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.text), T1.user_id FROM tip AS T1  GROUP BY T1.user_id",
    "question": "Find the number of tips written by each user"
  },
  {
    "db_id": "yelp",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.neighbourhood_name) FROM neighbourhood AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'Madison' OR T2.rating = 5",
    "question": "How many neighbourhoods have a business with rating 5 in Madison or rating 5 ?"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.neighbourhood_name FROM neighbourhood AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id WHERE T2.city != 'Madison' GROUP BY T1.neighbourhood_name  ORDER BY COUNT( T2.name) DESC LIMIT 1",
    "question": "which neighbourhood has the most number of businesses not in Madison"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Dallas' OR T1.state = 'Texas' AND T2.category_name = 'Valet Service' AND T2.category_name = 'restaurant'",
    "question": "Find all restaurant with Valet Service in Dallas or Texas"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM user AS T1 JOIN review AS T2 ON T1.user_id = T2.user_id  GROUP BY T1.name HAVING AVG( T2.rating) > 3",
    "question": "Find users whose average review rating is above 3"
  },
  {
    "db_id": "yelp",
    "query": "SELECT T1.name FROM business AS T1 JOIN review AS T2 ON T1.business_id = T2.business_id WHERE T2.month != 'April' GROUP BY T1.name  ORDER BY COUNT( T2.text) DESC LIMIT 1",
    "question": "Find the business with the most number of reviews in all months except April"
  },
  {
    "db_id": "academic",
    "query": "SELECT COUNT( T1.keyword) FROM keyword AS T1",
    "question": "return me the number of keywords ."
  },
  {
    "db_id": "academic",
    "query": "SELECT COUNT( T1.name) FROM organization AS T1",
    "question": "return me the number of organizations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM organization AS T1 WHERE T1.continent != 'North America'",
    "question": "return me all the organizations not in \" North America \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T4 ON T1.aid = T4.aid JOIN publication AS T3 ON T4.pid = T3.pid JOIN journal AS T2 ON T3.jid = T2.jid WHERE T2.name = 'PVLDB' OR T3.year = 2010",
    "question": "return me the authors who have papers in PVLDB or in 2010 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T4 ON T1.aid = T4.aid JOIN publication AS T3 ON T4.pid = T3.pid JOIN journal AS T2 ON T3.jid = T2.jid WHERE T2.name = 'PVLDB' OR T3.year > 2010",
    "question": "return me the authors who have papers in PVLDB or papers published after 2010 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T4 ON T1.aid = T4.aid JOIN publication AS T3 ON T4.pid = T3.pid JOIN conference AS T2 ON T3.cid = T2.cid WHERE T2.name = 'VLDB' OR T3.year = 2002",
    "question": "return me the authors who have papers in VLDB conference or in 2002 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T4 ON T1.aid = T4.aid JOIN publication AS T3 ON T4.pid = T3.pid JOIN conference AS T2 ON T3.cid = T2.cid WHERE T2.name = 'VLDB' OR T3.year < 2002",
    "question": "return me the authors who have papers in VLDB conference or papers before 2002 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T4 ON T1.aid = T4.aid JOIN publication AS T3 ON T4.pid = T3.pid JOIN conference AS T2 ON T3.cid = T2.cid WHERE T2.name = 'VLDB' OR T3.year < 2002 AND T3.year > 1995",
    "question": "return me the authors who have papers in VLDB conference before 2002 after 1995 or in VLDB conference ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM domain AS T1 JOIN domain_journal AS T3 ON T1.did = T3.did JOIN journal AS T2 ON T3.jid = T2.jid WHERE T2.name != 'PVLDB'",
    "question": "return me the area of all journals except PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T3 ON T1.aid = T3.aid JOIN publication AS T4 ON T3.pid = T4.pid JOIN journal AS T2 ON T4.jid = T2.jid WHERE T2.name != 'PVLDB'",
    "question": "return me the authors who have papers not in PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM organization AS T1 JOIN author AS T2 ON T2.oid = T1.oid WHERE T2.name != 'H. V. Jagadish'",
    "question": "return me the organization \" H. V. Jagadish \" is not in ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM conference AS T1 JOIN publication AS T3 ON T1.cid = T3.cid JOIN writes AS T4 ON T3.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid WHERE T2.name != 'H. V. Jagadish'",
    "question": "return me the conferences, which do not have papers by \" H. V. Jagadish \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM domain AS T1 JOIN domain_author AS T3 ON T1.did = T3.did JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name != 'H. V. Jagadish'",
    "question": "return me the domain where \" H. V. Jagadish \" is not focused ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM conference AS T1 JOIN publication AS T2 ON T1.cid = T2.cid WHERE T2.title != 'Making database systems usable'",
    "question": "return me the conference, which did not publish \" Making database systems usable \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name != 'PVLDB'",
    "question": "return me the papers not on PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name = 'PVLDB' OR T1.year > 2000",
    "question": "return me the papers on PVLDB or after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name = 'VLDB' OR T1.year > 2000",
    "question": "return me the papers on VLDB conference or after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN journal AS T3 ON T1.jid = T3.jid WHERE T2.name = 'H. V. Jagadish' OR T3.name = 'PVLDB'",
    "question": "return me the papers by \" H. V. Jagadish \" or on PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN conference AS T3 ON T1.cid = T3.cid WHERE T2.name = 'H. V. Jagadish' OR T3.name = 'VLDB'",
    "question": "return me the papers by \" H. V. Jagadish \" or on VLDB conference ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T3 ON T1.pid = T3.pid JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' OR T1.year > 2000",
    "question": "return me the papers by \" H. V. Jagadish \" or after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN journal AS T3 ON T1.jid = T3.jid WHERE T2.name = 'H. V. Jagadish' OR T3.name = 'PVLDB' AND T1.year > 2000",
    "question": "return me the papers by \" H. V. Jagadish \" or on PVLDB after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN conference AS T3 ON T1.cid = T3.cid WHERE T2.name = 'H. V. Jagadish' OR T3.name = 'VLDB' AND T1.year > 2000",
    "question": "return me the papers by \" H. V. Jagadish \" or on VLDB conference after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM domain AS T1 JOIN domain_conference AS T3 ON T1.did = T3.did JOIN conference AS T2 ON T3.cid = T2.cid WHERE T2.name != 'VLDB'",
    "question": "return me the area of all the conferences except VLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T3 ON T1.aid = T3.aid JOIN publication AS T4 ON T3.pid = T4.pid JOIN conference AS T2 ON T4.cid = T2.cid WHERE T2.name != 'VLDB'",
    "question": "return me the authors who have papers in the conferences other than VLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.keyword FROM keyword AS T1 JOIN domain_keyword AS T3 ON T1.kid = T3.kid JOIN domain AS T2 ON T3.did = T2.did WHERE T2.name != 'Databases'",
    "question": "return me all the keywords in all the areas except Databases ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN publication_keyword AS T3 ON T1.pid = T3.pid JOIN keyword AS T2 ON T3.kid = T2.kid WHERE T2.keyword != 'Natural Language'",
    "question": "return me all the papers, which do not contain the keyword \" Natural Language \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.keyword FROM keyword AS T1 JOIN publication_keyword AS T3 ON T1.kid = T3.kid JOIN publication AS T2 ON T3.pid = T2.pid WHERE T2.title != 'Making database systems usable'",
    "question": "return me the keywords of all the publications except \" Making database systems usable \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN domain_author AS T5 ON T2.aid = T5.aid JOIN domain AS T6 ON T5.did = T6.did JOIN domain_keyword AS T7 ON T6.did = T7.did JOIN keyword AS T3 ON T7.kid = T3.kid WHERE T2.name = 'H. V. Jagadish' OR T3.keyword = 'User Study'",
    "question": "return me the papers of \" H. V. Jagadish \" or containing keyword \" User Study \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid JOIN publication_keyword AS T4 ON T1.pid = T4.pid JOIN keyword AS T3 ON T4.kid = T3.kid WHERE T2.name = 'PVLDB' OR T3.keyword = 'Keyword search'",
    "question": "return me the papers in PVLDB containing keyword \" Keyword search \" or any other keyword ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T2.name FROM domain_author AS T4 JOIN author AS T1 ON T4.aid = T1.aid JOIN DOMAIN AS T3 ON T3.did = T4.did JOIN organization AS T2 ON T2.oid = T1.oid WHERE t3.name != 'Databases'",
    "question": "return me all the organizations not in Databases area ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T2.name FROM domain_author AS T4 JOIN author AS T1 ON T4.aid = T1.aid JOIN DOMAIN AS T3 ON T3.did = T4.did JOIN organization AS T2 ON T2.oid = T1.oid WHERE T3.name = 'Databases' OR T2.continent = 'North America'",
    "question": "return me all the organizations in Databases area or located in \" North America \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN domain_author AS T4 ON T1.aid = T4.aid JOIN domain AS T2 ON T4.did = T2.did JOIN organization AS T3 WHERE T2.name = 'Databases' OR T3.name = 'University of Michigan'",
    "question": "return me all the researchers in Databases area or in \" University of Michigan \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T5.title FROM organization AS T3 JOIN author AS T1 ON T3.oid = T1.oid JOIN writes AS T4 ON T4.aid = T1.aid JOIN publication AS T5 ON T4.pid = T5.pid JOIN conference AS T2 ON T5.cid = T2.cid WHERE T2.name = 'VLDB' OR T3.name = 'University of Michigan'",
    "question": "return me all the papers in VLDB conference or in \" University of Michigan \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T5.title FROM organization AS T2 JOIN author AS T1 ON T2.oid = T1.oid JOIN writes AS T4 ON T4.aid = T1.aid JOIN publication AS T5 ON T4.pid = T5.pid JOIN journal AS T3 ON T5.jid = T3.jid WHERE T3.name = 'PVLDB' OR T2.name = 'University of Michigan'",
    "question": "return me all the papers in PVLDB or in \" University of Michigan \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T5.title FROM organization AS T2 JOIN author AS T1 ON T2.oid = T1.oid JOIN writes AS T4 ON T4.aid = T1.aid JOIN publication AS T5 ON T4.pid = T5.pid JOIN journal AS T3 ON T5.jid = T3.jid WHERE T3.name = 'PVLDB' OR T2.name  = 'University of Michigan' AND T5.year > 2000",
    "question": "return me all the papers in PVLDB or in \" University of Michigan \" after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN domain_publication AS T3 ON T1.pid = T3.pid JOIN domain AS T2 ON T3.did = T2.did WHERE T2.name = 'Databases' OR T1.citation_num > 200",
    "question": "return me the paper in Databases area or with more than 200 citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name = 'VLDB' OR T1.citation_num > 200",
    "question": "return me the paper in VLDB conference or with more than 200 citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T3 ON T1.pid = T3.pid JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' OR T1.citation_num > 200",
    "question": "return me the paper by \" H. V. Jagadish \" or with more than 200 citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN journal AS T3 ON T1.jid = T3.jid WHERE T2.name = 'H. V. Jagadish' OR T3.name = 'PVLDB' AND T1.citation_num > 200",
    "question": "return me the papers by \" H. V. Jagadish \" or on PVLDB with more than 200 citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN conference AS T3 ON T1.cid = T3.cid WHERE T2.name = 'H. V. Jagadish' OR T3.name = 'VLDB' AND T1.citation_num > 200",
    "question": "return me the papers by \" H. V. Jagadish \" or on VLDB conference with more than 200 citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN domain_publication AS T3 ON T1.pid = T3.pid JOIN domain AS T2 ON T3.did = T2.did WHERE T2.name = 'Databases' OR T1.citation_num > 200 AND T1.year > 2000",
    "question": "return me the paper after 2000 in Databases area or with more than 200 citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name = 'PVLDB' OR T1.citation_num > 200 AND T1.year > 2000",
    "question": "return me the paper after 2000 in PVLDB or with more than 200 citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name = 'VLDB' OR T1.citation_num > 200 AND T1.year > 2000",
    "question": "return me the paper after 2000 in VLDB conference or with more than 200 citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM conference AS T1 JOIN publication AS T3 ON T1.cid = T3.cid JOIN writes AS T4 ON T3.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid WHERE T2.name != 'H. V. Jagadish'",
    "question": "return me the number of conferences which do not have papers by \" H. V. Jagadish \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 WHERE T1.title = 'Making database systems usable' OR T1.year < 2010",
    "question": "return me the number of citations of \" Making database systems usable \" or before 2010 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name != 'PVLDB'",
    "question": "return me the number of papers on journals other than PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 WHERE T1.year < 2000",
    "question": "return me the number of papers before 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name = 'PVLDB' OR T1.year > 2000",
    "question": "return me the number of papers on PVLDB or after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name = 'VLDB' OR T1.year > 2000",
    "question": "return me the number of papers on VLDB conference or after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN journal AS T3 ON T1.jid = T3.jid WHERE T2.name = 'H. V. Jagadish' OR T3.name = 'PVLDB'",
    "question": "return me the number of papers by \" H. V. Jagadish \" or on PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN conference AS T3 ON T1.cid = T3.cid WHERE T2.name = 'H. V. Jagadish' OR T3.name = 'VLDB'",
    "question": "return me the number of papers by \" H. V. Jagadish \" or on VLDB conference ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN writes AS T3 ON T1.pid = T3.pid JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' OR T1.year > 2000",
    "question": "return me the number of papers by \" H. V. Jagadish \" or after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN journal AS T3 ON T1.jid = T3.jid WHERE T2.name = 'H. V. Jagadish' OR T3.name = 'PVLDB' AND T1.year > 2000",
    "question": "return me the number of papers by \" H. V. Jagadish \" or on PVLDB after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN conference AS T3 ON T1.cid = T3.cid WHERE T2.name = 'H. V. Jagadish' OR T3.name = 'VLDB' AND T1.year > 2000",
    "question": "return me the number of papers by \" H. V. Jagadish \" or on VLDB conference after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT T1.keyword FROM keyword AS T1",
    "question": "return me the keywords ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.keyword) FROM keyword AS T1 JOIN domain_keyword AS T3 ON T1.kid = T3.kid JOIN domain AS T2 ON T3.did = T2.did WHERE T2.name != 'Databases'",
    "question": "return me the number of keywords in non-Databases area ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN publication_keyword AS T3 ON T1.pid = T3.pid JOIN keyword AS T2 ON T3.kid = T2.kid WHERE T2.keyword != 'Natural Language'",
    "question": "return me the number of papers which do not contain the keyword \" Natural Language \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.keyword) FROM keyword AS T1 JOIN publication_keyword AS T3 ON T1.kid = T3.kid JOIN publication AS T4 ON T3.pid = T4.pid JOIN conference AS T2 ON T4.cid = T2.cid WHERE T2.name != 'VLDB'",
    "question": "return me the number of keywords in all conference except VLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.keyword) FROM keyword AS T1 JOIN publication_keyword AS T3 ON T1.kid = T3.kid JOIN publication AS T4 ON T3.pid = T4.pid JOIN journal AS T2 ON T4.jid = T2.jid WHERE T2.name != 'PVLDB'",
    "question": "return me the number of keywords in journals other than PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN domain_author AS T5 ON T2.aid = T5.aid JOIN domain AS T6 ON T5.did = T6.did JOIN domain_keyword AS T7 ON T6.did = T7.did JOIN keyword AS T3 ON T7.kid = T3.kid WHERE T2.name = 'H. V. Jagadish' OR T3.keyword = 'User Study'",
    "question": "return me the number of the papers of \" H. V. Jagadish \" or containing keyword \" User Study \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid JOIN publication_keyword AS T4 ON T1.pid = T4.pid JOIN keyword AS T3 ON T4.kid = T3.kid WHERE T2.name = 'VLDB' OR T3.keyword = 'Information Retrieval'",
    "question": "return me the number of papers in VLDB conference or containing keyword \" Information Retrieval \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT T1.name FROM organization AS T1",
    "question": "return me the name of the organizations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM organization AS T1 WHERE T1.continent != 'North America'",
    "question": "return me the number of the organizations not in \" North America \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT COUNT(DISTINCT T2.name) FROM domain_author AS T4 JOIN author AS T1 ON T4.aid = T1.aid JOIN DOMAIN AS T3 ON T3.did = T4.did JOIN organization AS T2 ON T2.oid = T1.oid WHERE T3.name != 'Databases'",
    "question": "return me the number of organizations not in Databases area ."
  },
  {
    "db_id": "academic",
    "query": "SELECT COUNT(DISTINCT T2.name) FROM domain_author AS T4 JOIN author AS T1 ON T4.aid = T1.aid JOIN DOMAIN AS T3 ON T3.did = T4.did JOIN organization AS T2 ON T2.oid = T1.oid WHERE T3.name = 'Databases' OR T2.continent = 'North America'",
    "question": "return me the number of organizations in Databases area or located in \" North America \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN domain_publication AS T4 ON T1.pid = T4.pid JOIN domain AS T2 ON T4.did = T2.did JOIN organization AS T3 WHERE T2.name = 'Databases' OR T3.name = 'University of Michigan'",
    "question": "return me the number of papers in \" University of Michigan \" or Databases area ."
  },
  {
    "db_id": "academic",
    "query": "SELECT COUNT(DISTINCT T4.title) FROM organization AS T2 JOIN author AS T1 ON T2.oid = T1.oid JOIN writes AS T3 ON T3.aid = T1.aid JOIN publication AS T4 ON T3.pid = T4.pid WHERE T2.name = 'University of Michigan' OR T4.year > 2000",
    "question": "return me the number of papers after 2000 in \" University of Michigan \" or in any other organization ."
  },
  {
    "db_id": "academic",
    "query": "SELECT COUNT(DISTINCT T5.title) FROM organization AS T3 JOIN author AS T1 ON T3.oid = T1.oid JOIN writes AS T4 ON T4.aid = T1.aid JOIN publication AS T5 ON T4.pid = T5.pid JOIN conference AS T2 ON T5.cid = T2.cid WHERE T2.name = 'VLDB' OR T3.name = 'University of Michigan'",
    "question": "return me the number of papers in VLDB conference or in \" University of Michigan \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT COUNT(DISTINCT T5.title) FROM organization AS T2 JOIN author AS T1 ON T2.oid = T1.oid JOIN writes AS T4 ON T4.aid = T1.aid JOIN publication AS T5 ON T4.pid = T5.pid JOIN journal AS T3 ON T5.jid = T3.jid WHERE T3.name = 'PVLDB' OR T2.name = 'University of Michigan'",
    "question": "return me the number of papers in PVLDB or in \" University of Michigan \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT COUNT(DISTINCT T5.title) FROM organization AS T2 JOIN author AS T1 ON T2.oid = T1.oid JOIN writes AS T4 ON T4.aid = T1.aid JOIN publication AS T5 ON T4.pid = T5.pid JOIN journal AS T3 ON T5.jid = T3.jid WHERE T3.name = 'PVLDB' OR T2.name = 'University of Michigan' AND T5.year > 2000",
    "question": "return me the number of papers in PVLDB or in \" University of Michigan \" after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM author AS T1 JOIN domain_author AS T4 ON T1.aid = T4.aid JOIN domain AS T2 ON T4.did = T2.did JOIN organization AS T3 WHERE T2.name = 'Databases' OR T3.name = 'University of Michigan'",
    "question": "return me the number of researchers in Databases area or in \" University of Michigan \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM author AS T1 JOIN writes AS T3 ON T1.aid = T3.aid JOIN publication AS T4 ON T3.pid = T4.pid JOIN journal AS T2 ON T4.jid = T2.jid WHERE T2.name != 'PVLDB'",
    "question": "return me the number of authors who have papers in journals other than PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM author AS T1 JOIN writes AS T3 ON T1.aid = T3.aid JOIN publication AS T4 ON T3.pid = T4.pid JOIN conference AS T2 ON T4.cid = T2.cid WHERE T2.name != 'VLDB'",
    "question": "return me the number of authors who have papers in the conferences other than VLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name = 'PVLDB' OR T1.year < 2000",
    "question": "return me the number of papers published on PVLDB or before 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name = 'VLDB' OR T1.year < 2000",
    "question": "return me the number of papers published in the VLDB conference or before 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT SUM( T1.citation_num) FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name != 'PVLDB'",
    "question": "return me the total citations of all the papers not in PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.citation_num FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name != 'PVLDB'",
    "question": "return me the citations of each paper not in PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT SUM( T1.citation_num) FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name = 'PVLDB' OR T1.year = 2005",
    "question": "return me the total citations of papers in PVLDB or in 2005 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.year, SUM( T1.citation_num) FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name != 'PVLDB' GROUP BY T1.year",
    "question": "return me the total citations of papers not in PVLDB in each year ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title), T1.year FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name != 'PVLDB' GROUP BY T1.year",
    "question": "return me the number of papers published in each year in journals other than PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.citation_num FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name != 'VLDB'",
    "question": "return me the citations of each paper in the conference other than VLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT SUM( T1.citation_num) FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name = 'VLDB' OR T1.year = 2005",
    "question": "return me the total citations of papers in the VLDB conference or in 2005 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT SUM( T1.citation_num) FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name = 'VLDB' OR T1.year < 2005",
    "question": "return me the total citations of papers in the VLDB conference or before 2005 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.year, SUM( T1.citation_num) FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name != 'VLDB' GROUP BY T1.year",
    "question": "return me the total citations of papers in the conferences other than VLDB in each year ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title), T1.year FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name != 'VLDB' GROUP BY T1.year",
    "question": "return me the number of papers published in each conference except VLDB in each year ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 WHERE T1.name = 'H. V. Jagadish' OR T1.name = 'Divesh Srivastava'",
    "question": "return me the authors who have cooperated either with \" H. V. Jagadish \" or \" Divesh Srivastava \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T3 ON T1.aid = T3.aid JOIN publication AS T2 ON T3.pid = T2.pid WHERE T1.name = 'H. V. Jagadish' OR T2.year > 2000",
    "question": "return me the authors who have cooperated with \" H. V. Jagadish \" or published after 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T3 ON T1.pid = T3.pid JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' OR T2.name = 'Divesh Srivastava'",
    "question": "return me the papers written by \" H. V. Jagadish \" or \" Divesh Srivastava \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T3 ON T1.pid = T3.pid JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' OR T2.name = 'Yunyao Li' AND T1.year > 2005",
    "question": "return me the papers written by \" H. V. Jagadish \" or \" Yunyao Li \" after 2005 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN journal AS T3 ON T1.jid = T3.jid WHERE T2.name = 'H. V. Jagadish' OR T2.name = 'Yunyao Li' AND T3.name = 'PVLDB'",
    "question": "return me the papers written by \" H. V. Jagadish \" or \" Yunyao Li \" on PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T4 ON T1.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid JOIN journal AS T3 ON T1.jid = T3.jid WHERE T2.name = 'H. V. Jagadish' OR T2.name = 'Yunyao Li' AND T3.name = 'PVLDB' AND T1.year > 2005",
    "question": "return me the papers written by \" H. V. Jagadish \" or \" Yunyao Li \" on PVLDB after 2005 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 WHERE T1.name != 'H. V. Jagadish'",
    "question": "return me the authors who have not cooperated with \" H. V. Jagadish \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T3 ON T1.pid = T3.pid JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' OR T2.name = 'Divesh Srivastava' AND T1.year < 2000",
    "question": "return me the papers written by \" H. V. Jagadish \" or \" Divesh Srivastava \" before 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 WHERE T1.name != 'H. V. Jagadish'",
    "question": "return me the authors who have not cited the papers by \" H. V. Jagadish \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN writes AS T3 ON T1.pid = T3.pid JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' OR T2.name = 'Divesh Srivastava'",
    "question": "return me the number of papers written by \" H. V. Jagadish \" or \" Divesh Srivastava \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM publication AS T1 JOIN writes AS T3 ON T1.pid = T3.pid JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' OR T2.name = 'Divesh Srivastava' AND T1.year < 2000",
    "question": "return me the number of papers written by \" H. V. Jagadish \" or \" Divesh Srivastava \" before 2000 ."
  },
  {
    "db_id": "academic",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM author AS T1 WHERE T1.name != 'H. V. Jagadish'",
    "question": "return me the number of authors who have not cooperated with \" H. V. Jagadish \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T3 ON T1.pid = T3.pid JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' OR T2.name = 'Divesh Srivastava' AND T1.citation_num > 200",
    "question": "return me the papers written by \" H. V. Jagadish \" or \" Divesh Srivastava \" with more than 200 citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM conference AS T1 JOIN publication AS T2 ON T1.cid = T2.cid JOIN publication_keyword AS T4 ON T2.pid = T4.pid JOIN keyword AS T3 ON T4.kid = T3.kid WHERE T3.keyword != 'Relational Database' GROUP BY T1.name  ORDER BY COUNT( T2.title) DESC LIMIT 1",
    "question": "return me the conference that has the most number of papers not containing keyword \" Relational Database \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM journal AS T1 JOIN publication AS T2 ON T1.jid = T2.jid JOIN publication_keyword AS T4 ON T2.pid = T4.pid JOIN keyword AS T3 ON T4.kid = T3.kid WHERE T3.keyword != 'Relational Database' GROUP BY T1.name  ORDER BY COUNT( T2.title) DESC LIMIT 1",
    "question": "return me the journal that has the most number of papers not containing keyword \" Relational Database \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.keyword FROM keyword AS T1 JOIN publication_keyword AS T4 ON T1.kid = T4.kid JOIN publication AS T2 ON T4.pid = T2.pid JOIN conference AS T3 ON T2.cid = T3.cid WHERE T3.name != 'VLDB' GROUP BY T1.keyword  ORDER BY COUNT( T2.title) DESC LIMIT 1",
    "question": "return me the keyword, which have been contained by the most number of papers in conference except VLDB conference ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.keyword FROM keyword AS T1 JOIN publication_keyword AS T4 ON T1.kid = T4.kid JOIN publication AS T2 ON T4.pid = T2.pid JOIN journal AS T3 ON T2.jid = T3.jid WHERE T3.name != 'PVLDB' GROUP BY T1.keyword  ORDER BY COUNT( T2.title) DESC LIMIT 1",
    "question": "return me the keyword, which have been contained by the most number of papers in journals other than PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T5 ON T1.aid = T5.aid JOIN publication AS T2 ON T5.pid = T2.pid JOIN domain_publication AS T6 ON T2.pid = T6.pid JOIN domain AS T3 ON T6.did = T3.did JOIN organization AS T4 WHERE T3.name = 'Databases' OR T4.name = 'University of Michigan' GROUP BY T1.name  ORDER BY SUM( T2.citation_num) DESC LIMIT 1",
    "question": "return me the author in the \" University of Michigan \" whose papers in Databases area or any other area have the most total citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN writes AS T3 ON T1.pid = T3.pid JOIN author AS T2 ON T3.aid = T2.aid WHERE T2.name = 'Divesh Srivastava' OR T2.name = 'H. V. Jagadish'   ORDER BY T1.citation_num DESC LIMIT 1",
    "question": "return me the papers written by \" Divesh Srivastava \" or \" H. V. Jagadish \" with the most number of citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM conference AS T1 JOIN publication AS T3 ON T1.cid = T3.cid JOIN writes AS T4 ON T3.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' GROUP BY T1.name HAVING COUNT( T3.title) > '10'",
    "question": "return me the conferences, which have more than 10 papers by \" H. V. Jagadish \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM journal AS T1 JOIN publication AS T3 ON T1.jid = T3.jid JOIN writes AS T4 ON T3.pid = T4.pid JOIN author AS T2 ON T4.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' GROUP BY T1.name HAVING COUNT( T3.title) > '10'",
    "question": "return me the journals, which have more than 10 papers by \" H. V. Jagadish \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 WHERE T1.year < 2000   ORDER BY T1.citation_num DESC LIMIT 1",
    "question": "return me the paper before 2000 with the most citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN domain_publication AS T3 ON T1.pid = T3.pid JOIN domain AS T2 ON T3.did = T2.did WHERE T2.name = 'Databases' OR T1.year > 2000   ORDER BY T1.citation_num DESC LIMIT 1",
    "question": "return me the paper after 2000 in Databases area or in all area with the most citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN journal AS T2 ON T1.jid = T2.jid WHERE T2.name = 'PVLDB' OR T1.year > 2000   ORDER BY T1.citation_num DESC LIMIT 1",
    "question": "return me the paper after 2000 in PVLDB or with the most citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.title FROM publication AS T1 JOIN conference AS T2 ON T1.cid = T2.cid WHERE T2.name = 'VLDB' OR T1.year > 2000   ORDER BY T1.citation_num DESC LIMIT 1",
    "question": "return me the paper after 2000 in VLDB conference or with the most citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T4 ON T1.aid = T4.aid JOIN publication AS T3 ON T4.pid = T3.pid JOIN journal AS T2 ON T3.jid = T2.jid WHERE T2.name = 'PVLDB' GROUP BY T1.name HAVING COUNT( T3.title) > '10'",
    "question": "return me the authors who have more than 10 papers in PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T4 ON T1.aid = T4.aid JOIN publication AS T2 ON T4.pid = T2.pid JOIN journal AS T3 ON T2.jid = T3.jid WHERE T3.name != 'PVLDB' GROUP BY T1.name  ORDER BY COUNT( T2.title) DESC LIMIT 1",
    "question": "return me the authors who have the most number of papers in journals other than PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN domain_author AS T4 ON T1.aid = T4.aid JOIN domain AS T5 ON T4.did = T5.did JOIN domain_keyword AS T6 ON T5.did = T6.did JOIN keyword AS T2 ON T6.kid = T2.kid JOIN publication_keyword AS T7 ON T2.kid = T7.kid JOIN publication AS T3 ON T7.pid = T3.pid WHERE T2.keyword = 'Relational Database' GROUP BY T1.name HAVING COUNT( T3.title) > '10'",
    "question": "return me the authors who have more than 10 papers containing keyword \" Relational Database \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM conference AS T1 JOIN publication AS T3 ON T1.cid = T3.cid JOIN publication_keyword AS T4 ON T3.pid = T4.pid JOIN keyword AS T2 ON T4.kid = T2.kid WHERE T2.keyword = 'Relational Database' GROUP BY T1.name HAVING COUNT( T3.title) > '60'",
    "question": "return me the conferences, which have more than 60 papers containing keyword \" Relational Database \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM journal AS T1 JOIN publication AS T3 ON T1.jid = T3.jid JOIN publication_keyword AS T4 ON T3.pid = T4.pid JOIN keyword AS T2 ON T4.kid = T2.kid WHERE T2.keyword = 'Relational Database' GROUP BY T1.name HAVING COUNT( T3.title) > '60'",
    "question": "return me the journals, which have more than 60 papers containing keyword \" Relational Database \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.keyword FROM keyword AS T1 JOIN publication_keyword AS T4 ON T1.kid = T4.kid JOIN publication AS T3 ON T4.pid = T3.pid JOIN conference AS T2 ON T3.cid = T2.cid WHERE T2.name = 'VLDB' GROUP BY T1.keyword HAVING COUNT( T3.title) > '100'",
    "question": "return me the keywords, which have been contained by more than 100 papers in VLDB conference ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.keyword FROM keyword AS T1 JOIN publication_keyword AS T4 ON T1.kid = T4.kid JOIN publication AS T3 ON T4.pid = T3.pid JOIN journal AS T2 ON T3.jid = T2.jid WHERE T2.name = 'PVLDB' GROUP BY T1.keyword HAVING COUNT( T3.title) > '100'",
    "question": "return me the keywords, which have been contained by more than 100 papers in PVLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.keyword FROM keyword AS T1 JOIN publication_keyword AS T4 ON T1.kid = T4.kid JOIN publication AS T3 ON T4.pid = T3.pid JOIN writes AS T5 ON T3.pid = T5.pid JOIN author AS T2 ON T5.aid = T2.aid WHERE T2.name = 'H. V. Jagadish' GROUP BY T1.keyword HAVING COUNT( T3.title) > '10'",
    "question": "return me the keywords, which have been contained by more than 10 papers of \" H. V. Jagadish \" ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T4 ON T1.aid = T4.aid JOIN publication AS T3 ON T4.pid = T3.pid JOIN conference AS T2 ON T3.cid = T2.cid WHERE T2.name = 'VLDB' GROUP BY T1.name HAVING COUNT( T3.title) > '10'",
    "question": "return me the authors who have more than 10 papers in the VLDB conference ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T4 ON T1.aid = T4.aid JOIN publication AS T2 ON T4.pid = T2.pid JOIN conference AS T3 ON T2.cid = T3.cid WHERE T3.name != 'VLDB' GROUP BY T1.name  ORDER BY COUNT( T2.title) DESC LIMIT 1",
    "question": "return me the author who has the most number of papers in the conference other than VLDB ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN writes AS T4 ON T1.aid = T4.aid JOIN publication AS T3 ON T4.pid = T3.pid JOIN organization AS T2 WHERE T2.name = 'University of Michigan' GROUP BY T1.name HAVING SUM( T3.citation_num) < 5000",
    "question": "return me the author in the \" University of Michigan \" whose papers have less than 5000 total citations ."
  },
  {
    "db_id": "academic",
    "query": "SELECT T1.name FROM author AS T1 JOIN domain_author AS T5 ON T1.aid = T5.aid JOIN domain AS T2 ON T5.did = T2.did JOIN domain_publication AS T6 ON T2.did = T6.did JOIN publication AS T4 ON T6.pid = T4.pid JOIN organization AS T3 WHERE T2.name = 'Databases' AND T3.name = 'University of Michigan' GROUP BY T1.name HAVING SUM( T4.citation_num) < 5000",
    "question": "return me the author in the \" University of Michigan \" in Databases area whose papers have less than 5000 total citations ."
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.release_year FROM movie AS T1 WHERE T1.title != 'The Imitation Game'",
    "question": "What year is the movie \" The Imitation Game \" not from ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.release_year FROM movie AS T1 WHERE T1.title != 'The Imitation Game'",
    "question": "What year was the movie \" The Imitation Game \" not produced"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.birth_year FROM actor AS T1 WHERE T1.name != 'Benedict Cumberbatch'",
    "question": "What year was \" Benedict Cumberbatch \" not born ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.birth_year FROM actor AS T1 WHERE T1.name != 'Benedict Cumberbatch'",
    "question": "In what year was \" Benedict Cumberbatch \" not born"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.nationality FROM actor AS T1 WHERE T1.name != 'Christoph Waltz'",
    "question": "What is the nationality of the actor \" not Christoph Waltz \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.title FROM movie AS T1 WHERE T1.release_year != 2015",
    "question": "Find all movies not produced in 2015"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.birth_city != 'Tehran'",
    "question": "Find all actors not born in \" Tehran \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.birth_city != 'Tehran'",
    "question": "Find all actors not born in Tehran"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.birth_city != 'Tehran'",
    "question": "Which actors were not born in Tehran"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.nationality != 'Afghanistan'",
    "question": "Find all actors who are not from Afghanistan"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.nationality != 'Afghanistan'",
    "question": "Find all actors not from Afghanistan"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.nationality != 'Afghanistan'",
    "question": "Give me the name of all the actors not from Afghanistan"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.birth_year != 1984",
    "question": "Find all actors who were not born in 1984"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.birth_year FROM actor AS T1 WHERE T1.name != 'actor_name0'",
    "question": "In what year was \" actor_name0 \" not born ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.birth_city FROM director AS T1 WHERE T1.name != 'director_name0'",
    "question": "In what city was \" director_name0 \" not born ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.budget FROM movie AS T1 WHERE T1.title != 'Finding Nemo'",
    "question": "How much was the budget of all movies except \" Finding Nemo \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T3.title FROM director AS T2 JOIN directed_by AS T1 ON T2.did = T1.did JOIN movie AS T3 ON T3.mid = T1.msid WHERE T2.name = 'Steven Spielberg' OR T3.release_year > 2006",
    "question": "Find all movies directed by \" Steven Spielberg \" or after 2006"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.name FROM director AS T2 JOIN directed_by AS T1 ON T2.did = T1.did JOIN movie AS T3 ON T3.mid = T1.msid WHERE T3.title != 'James Bond'",
    "question": "Who is the director of the movie \" not James Bond \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.name FROM director AS T2 JOIN directed_by AS T1 ON T2.did = T1.did JOIN movie AS T3 ON T3.mid = T1.msid WHERE T3.title != 'James Bond'",
    "question": "Who did not direct the movie \" James Bond \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.name FROM director AS T2 JOIN directed_by AS T1 ON T2.did = T1.did JOIN movie AS T3 ON T3.mid = T1.msid WHERE T3.title != 'James Bond'",
    "question": "List \" non James Bond \" directors"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 JOIN cast AS T2 ON T1.aid = T2.aid JOIN movie AS T3 ON T3.mid = T2.msid WHERE T2.role = 'Alan Turing' OR T3.title = 'The Imitation Game'",
    "question": "Find the actor who played \" Alan Turing \" in any movie or any role in movie \" The Imitation Game \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.genre FROM genre AS T2 JOIN classification AS T1 ON T2.gid = T1.gid JOIN movie AS T3 ON T3.mid = T1.msid WHERE T3.title != 'Jurassic Park'",
    "question": "What is the genre of the movies that are not \" Jurassic Park \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.title FROM written_by AS T3 JOIN movie AS T1 ON T3.msid = T1.mid JOIN writer AS T2 ON T3.wid = T2.wid WHERE T2.name != 'Matt Damon'",
    "question": "Find all movies not written by \" Matt Damon \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.title FROM producer AS T2 JOIN made_by AS T4 ON T2.pid = T4.pid JOIN copyright AS T5 ON T4.msid = T5.msid JOIN written_by AS T6 ON T5.msid = T6.msid JOIN writer AS T3 ON T6.wid = T3.wid JOIN movie AS T1 WHERE T2.name = 'Woody Allen' OR T3.name = 'Woody Allen'",
    "question": "Find all movies written and produced by \" Woody Allen \" or written by \" Woody Allen \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.title FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN movie AS T2 ON T2.mid = T3.msid WHERE T1.name != 'Robin Wright'",
    "question": "Find all movies not featuring \" Robin Wright \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.title FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN movie AS T2 ON T2.mid = T3.msid WHERE T1.name != 'Robin Wright'",
    "question": "What are all the movies not featuring \" Robin Wright \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.title FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN movie AS T2 ON T2.mid = T3.msid WHERE T1.name != 'Robin Wright'",
    "question": "Find all movies in which \" Robin Wright \" does not appear"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.budget FROM movie AS T1 WHERE T1.release_year = 2007 OR T1.title = 'Juno'",
    "question": "What was the budget of the movie Juno from 2007 or ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.birth_city = 'Austin' OR T1.birth_year > 1980",
    "question": "Find all actors born in \" Austin \" or after 1980"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.birth_city = 'Austin' OR T1.birth_year > 1980",
    "question": "Who are the actors born in \" Austin \" or after 1980 ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.birth_city = 'Austin' OR T1.birth_year > 1980",
    "question": "Find all actors from Austin or born after 1980"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T3.title FROM director AS T2 JOIN directed_by AS T1 ON T2.did = T1.did JOIN movie AS T3 ON T3.mid = T1.msid WHERE T2.birth_city != 'Los Angeles'",
    "question": "Find all movies by directors not born in \" Los Angeles \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.birth_city = 'New York City' OR T1.birth_year = 1984",
    "question": "Find all actors who were born in \" New York City \" or in 1984"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T3.title FROM tags AS T2 JOIN keyword AS T1 ON T2.kid = T1.id JOIN movie AS T3 ON T2.msid = T3.mid WHERE T1.keyword != 'nuclear weapons'",
    "question": "Find all movies not about nuclear weapons"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T3.title FROM tags AS T2 JOIN keyword AS T1 ON T2.kid = T1.id JOIN movie AS T3 ON T2.msid = T3.mid WHERE T1.keyword != 'nuclear weapons'",
    "question": "What are the movies not related to nuclear weapons"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T3.title FROM director AS T2 JOIN directed_by AS T1 ON T2.did = T1.did JOIN movie AS T3 ON T3.mid = T1.msid WHERE T2.name != 'Alfred Hitchcock'",
    "question": "Which movies did \" Alfred Hitchcock \" not direct ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.title FROM actor AS T2 JOIN cast AS T4 ON T2.aid = T4.aid JOIN copyright AS T5 ON T4.msid = T5.msid JOIN directed_by AS T6 ON T5.msid = T6.msid JOIN director AS T3 ON T6.did = T3.did JOIN movie AS T1 WHERE T2.name = 'Taraneh Alidoosti' OR T3.name = 'Asghar Farhadi'",
    "question": "Find all movies directed by \" Asghar Farhadi \" or featuring \" Taraneh Alidoosti \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.title FROM actor AS T2 JOIN cast AS T4 ON T2.aid = T4.aid JOIN copyright AS T5 ON T4.msid = T5.msid JOIN directed_by AS T6 ON T5.msid = T6.msid JOIN director AS T3 ON T6.did = T3.did JOIN movie AS T1 WHERE T2.name = 'Taraneh Alidoosti' OR T3.name = 'Asghar Farhadi'",
    "question": "What are all the movies featuring \" Taraneh Alidoosti \" OR directed by \" Asghar Farhadi \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.title FROM actor AS T2 JOIN cast AS T4 ON T2.aid = T4.aid JOIN copyright AS T5 ON T4.msid = T5.msid JOIN directed_by AS T6 ON T5.msid = T6.msid JOIN director AS T3 ON T6.did = T3.did JOIN movie AS T1 WHERE T2.name = 'Taraneh Alidoosti' OR T3.name = 'Asghar Farhadi'",
    "question": "How many movies are there that are directed by \" Asghar Farhadi \" or featuring \" Taraneh Alidoosti \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.title FROM actor AS T2 JOIN cast AS T4 ON T2.aid = T4.aid JOIN copyright AS T5 ON T4.msid = T5.msid JOIN directed_by AS T6 ON T5.msid = T6.msid JOIN director AS T3 ON T6.did = T3.did JOIN movie AS T1 WHERE T2.name = 'Taraneh Alidoosti' OR T3.name = 'Asghar Farhadi'",
    "question": "List all the movies in which \" Taraneh Alidoosti \" played or directed by \" Asghar Farhadi \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.title FROM producer AS T1 JOIN made_by AS T3 ON T1.pid = T3.pid JOIN tv_series AS T2 ON T2.sid = T3.msid WHERE T1.name != 'Shonda Rhimes'",
    "question": "What are all the tv series not created by \" Shonda Rhimes \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.name FROM written_by AS T3 JOIN movie AS T1 ON T3.msid = T1.mid JOIN writer AS T2 ON T3.wid = T2.wid WHERE T1.title != 'The Truman Show'",
    "question": "Who is the writer of the movies that are not \" The Truman Show \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.title FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN tv_series AS T2 ON T2.sid = T3.msid WHERE T1.name != 'Scott Foley'",
    "question": "What are the series not featuring \" Scott Foley \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.title FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN tv_series AS T2 ON T2.sid = T3.msid WHERE T1.name != 'Scott Foley'",
    "question": "What are the series in which \" Scott Foley \" is not an actor ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM director AS T1 JOIN directed_by AS T3 ON T1.did = T3.did JOIN copyright AS T4 ON T3.msid = T4.msid JOIN cast AS T5 ON T4.msid = T5.msid JOIN actor AS T2 ON T5.aid = T2.aid WHERE T2.name != 'Kate Winslet'",
    "question": "Find the directors of all movies not featuring \" Kate Winslet \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM producer AS T1 JOIN made_by AS T3 ON T1.pid = T3.pid JOIN copyright AS T4 ON T3.msid = T4.msid JOIN cast AS T5 ON T4.msid = T5.msid JOIN actor AS T2 ON T5.aid = T2.aid WHERE T2.name != 'Kate Winslet'",
    "question": "Find the producers of all movies in which \" Kate Winslet \" is not an actor"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.birth_year > 1980 OR T1.nationality = 'Italy'",
    "question": "Find all actors born after 1980 or from Italy"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.birth_city = 'New York City' OR T1.birth_year > 1980 AND T1.gender = 'female'",
    "question": "Find all the female actors born in \" New York City \" or after 1980"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM director AS T1 WHERE T1.nationality != 'Afghanistan'",
    "question": "Find all the directors who are not from Afghanistan"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM cast AS T2 JOIN actor AS T1 ON T2.aid = T1.aid JOIN movie AS T3 ON T3.mid = T2.msid WHERE T3.title != 'Camp X-Ray'",
    "question": "Find the actors who did not play in the movie \" Camp X-Ray \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM cast AS T2 JOIN actor AS T1 ON T2.aid = T1.aid JOIN movie AS T3 ON T3.mid = T2.msid WHERE T1.nationality = 'Canada' OR T3.title = 'James Bond'",
    "question": "Find all actors who acted in \" James Bond \" movies or all actors from Canada"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 JOIN cast AS T2 ON T1.aid = T2.aid WHERE T2.role != 'Mr. Bean'",
    "question": "who did not act the role of \" Mr. Bean \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.genre FROM genre AS T1 JOIN classification AS T3 ON T1.gid = T3.gid JOIN copyright AS T4 ON T3.msid = T4.msid JOIN directed_by AS T5 ON T4.msid = T5.msid JOIN director AS T2 ON T5.did = T2.did WHERE T2.name != 'Asghar Farhadi'",
    "question": "what are the genres of movies not directed by \" Asghar Farhadi \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.title FROM movie AS T1 JOIN cast AS T2 ON T1.mid = T2.msid WHERE T2.role != 'Daffy Duck'",
    "question": "Which movie did not have the character \" Daffy Duck \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.role FROM cast AS T2 JOIN actor AS T1 ON T2.aid = T1.aid JOIN movie AS T3 ON T3.mid = T2.msid WHERE T3.title != 'Daddy Long Legs'",
    "question": "What are the major roles in the movies not named \" Daddy Long Legs \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T3.name FROM director AS T3 JOIN directed_by AS T2 ON T3.did = T2.did JOIN movie AS T4 ON T4.mid = T2.msid JOIN tags AS T5 ON T5.msid = T4.mid JOIN keyword AS T1 ON T5.kid = T1.id WHERE T1.keyword != 'nuclear weapons'",
    "question": "List all the directors of movies not about nuclear weapons"
  },
  {
    "db_id": "imdb",
    "query": "SELECT COUNT(DISTINCT T2.title) FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN movie AS T2 ON T2.mid = T3.msid WHERE T1.name = 'Jennifer Aniston' AND T2.release_year < 2010",
    "question": "What is the number of movies in which \" Jennifer Aniston \" acted before 2010 ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT COUNT(DISTINCT t1.name) FROM cast AS T2 JOIN actor AS T1 ON T2.aid = T1.aid JOIN movie AS T3 ON T3.mid  = T2.msid WHERE T3.title != 'Saving Private Ryan'",
    "question": "What is the number of actors in the movies not named \" Saving Private Ryan \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT COUNT(DISTINCT T3.title) FROM director AS T2 JOIN directed_by AS T1 ON T2.did = T1.did JOIN movie AS T3 ON T3.mid = T1.msid WHERE T2.name != 'Steven Spielberg'",
    "question": "How many movies did \" Steven Spielberg \" not direct ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM movie AS T1 WHERE T1.release_year != 2013",
    "question": "How many movies were produced in the year other than 2013 ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.title) FROM movie AS T1 WHERE T1.release_year != 2013",
    "question": "What is the number of movies produced in all years except 2013 ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT COUNT(DISTINCT T3.title) ,  T3.release_year FROM director AS T2 JOIN directed_by AS T1 ON T2.did = T1.did JOIN movie AS T3 ON T3.mid = T1.msid WHERE T2.name != 'Woody Allen' GROUP BY T3.release_year",
    "question": "What is the number of movies not directed by \" Woody Allen \" per year ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT COUNT(DISTINCT T2.title) FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN movie AS T2 ON T2.mid = T3.msid WHERE T1.name != 'Shahab Hosseini'",
    "question": "What is the number of movies in which \" Shahab Hosseini \" did not act ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT COUNT(DISTINCT T2.title) FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN movie AS T2 ON T2.mid = T3.msid WHERE T1.name != 'Shahab Hosseini'",
    "question": "What is the number of movies not featuring \" Shahab Hosseini \" ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM actor AS T1 WHERE T1.birth_city = 'Los Angeles' OR T1.birth_year > 2000",
    "question": "How many actors were born in \" Los Angeles \" or after 2000 ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT COUNT(DISTINCT T2.title) FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN movie AS T2 ON T2.mid = T3.msid WHERE T1.name = \"Humphrey Bogart\" AND T2.release_year > 1942",
    "question": "How many movies did \" Humphrey Bogart \" act after 1942 ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT COUNT(DISTINCT T2.title), T2.release_year FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN movie AS T2 ON T2.mid = T3.msid WHERE T1.name != \"Brad Pitt\" GROUP BY T2.release_year",
    "question": "What is the number of movies that \" Brad Pitt \" does not act in per year ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT COUNT(DISTINCT T3.title) FROM tags AS T2 JOIN keyword AS T1 ON T2.kid = T1.id JOIN movie AS T3 ON T2.msid = T3.mid WHERE T1.keyword = 'Iraq war' OR T3.release_year = 2015",
    "question": "How many movies about Iraq war were produced or after 2015 produced?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT COUNT(DISTINCT T3.title) FROM director AS T2 JOIN directed_by AS T1 ON T2.did = T1.did JOIN movie AS T3 ON T3.mid = T1.msid WHERE T2.name = 'Quentin Tarantino' AND T3.release_year < 2010",
    "question": "How many movies did \" Quentin Tarantino \" direct before 2010 ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM actor AS T1 WHERE T1.birth_city = 'New York City' OR T1.birth_year > 1980 AND T1.gender = 'female'",
    "question": "How many female actors were born in \" New York City \" or after 1980 ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT DISTINCT COUNT(DISTINCT  T1.name) FROM actor AS T1 JOIN cast AS T3 ON T1.aid = T3.aid JOIN copyright AS T4 ON T3.msid = T4.msid JOIN directed_by AS T5 ON T4.msid = T5.msid JOIN director AS T2 ON T5.did = T2.did WHERE T1.nationality = 'Iran' OR T2.name = 'Jim Jarmusch'",
    "question": "find the number of actors from Iran or who played in \" Jim Jarmusch \" movies"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T4.title FROM cast AS T5 JOIN actor AS T1 ON T5.aid = T1.aid JOIN movie AS T4 ON T4.mid = T5.msid JOIN cast AS T3 ON T4.mid = T3.msid JOIN actor AS T2 ON T3.aid = T2.aid WHERE T1.name  =  'Woody Strode' OR T2.name  =  'Jason Robards'",
    "question": "Find all movies that star either \" Woody Strode \" or \" Jason Robards \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T4.title FROM cast AS T5 JOIN actor AS T1 ON T5.aid = T1.aid JOIN movie AS T4 ON T4.mid = T5.msid JOIN cast AS T3 ON T4.mid = T3.msid JOIN actor AS T2 ON T3.aid = T2.aid WHERE T1.name  =  'Woody Strode' OR T2.name  =  'Jason Robards'",
    "question": "Find all movies featuring \" Woody Strode \" or \" Jason Robards \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T4.title FROM cast AS T5 JOIN actor AS T1 ON T5.aid = T1.aid JOIN movie AS T4 ON T4.mid = T5.msid JOIN cast AS T3 ON T4.mid = T3.msid JOIN actor AS T2 ON T3.aid = T2.aid WHERE T1.name  =  'Woody Strode' OR T2.name  =  'Jason Robards'",
    "question": "Find all movies featuring either \" Woody Strode \" or \" Jason Robards \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T4.title FROM cast AS T5 JOIN actor AS T1 ON T5.aid = T1.aid JOIN movie AS T4 ON T4.mid = T5.msid JOIN cast AS T3 ON T4.mid = T3.msid JOIN actor AS T2 ON T3.aid = T2.aid WHERE T1.name  =  'Woody Strode' OR T2.name  =  'Jason Robards'",
    "question": "Find all movies featuring \" Woody Strode \" or \" Jason Robards \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 WHERE T1.name != 'Tom Hanks'",
    "question": "Find all actors who did not act in the same movie as \" Tom Hanks \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T2.title FROM cast AS T3 JOIN actor AS T1 ON T3.aid = T1.aid JOIN movie AS T2 ON T2.mid = T3.msid WHERE T1.nationality != 'China' GROUP BY T2.title ORDER BY COUNT(DISTINCT t1.name) DESC LIMIT 1",
    "question": "which movie has the most number of actors not from China ?"
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM actor AS T1 JOIN cast AS T4 ON T1.aid = T4.aid JOIN copyright AS T5 ON T4.msid = T5.msid JOIN directed_by AS T6 ON T5.msid = T6.msid JOIN director AS T3 ON T6.did = T3.did JOIN movie AS T2 WHERE T3.name != 'Quentin Tarantino'   ORDER BY T2.release_year DESC LIMIT 1",
    "question": "Find the actors who didn't play in the latest movie by \" Quentin Tarantino \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T3.budget, T3.title FROM director AS T2 JOIN directed_by AS T1 ON T2.did = T1.did JOIN movie AS T3 ON T3.mid = T1.msid WHERE T2.name != 'Quentin Tarantino' ORDER BY T3.release_year DESC LIMIT 1",
    "question": "Find the name and budget of the latest movie by all directors except \" Quentin Tarantino \""
  },
  {
    "db_id": "imdb",
    "query": "SELECT T1.name FROM cast AS T2 JOIN actor AS T1 ON T2.aid = T1.aid JOIN movie AS T3 ON T3.mid = T2.msid WHERE T1.name != 'Gabriele Ferzetti' ORDER BY T3.release_year DESC LIMIT 1",
    "question": "Find the latest movie which \" Gabriele Ferzetti \" did not act in"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT COUNT(*) FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN LOCATION AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T2.CITY_NAME = 'san francisco' OR T1.NAME = 'buttercup kitchen'",
    "question": "how many restaurants are there in san francisco or buttercup kitchen ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT COUNT(*) FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T2 ON T1.CITY_NAME = T2.CITY_NAME WHERE T2.REGION = 'bay area' OR T1.FOOD_TYPE = 'chinese'",
    "question": "how many restaurants are there in the bay area or serving chinese food ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT COUNT(*) FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T2 ON T1.CITY_NAME = T2.CITY_NAME WHERE T2.REGION = 'bay area' OR T1.FOOD_TYPE = 'chinese'",
    "question": "how many places for chinese food or any food are there in the bay area ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT COUNT(*) FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T2 ON T1.CITY_NAME = T2.CITY_NAME WHERE T2.REGION = 'bay area' OR T1.FOOD_TYPE = 'chinese'",
    "question": "how many chinese places are there in the bay area or in the east bay ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT COUNT(*) FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T2 ON T1.CITY_NAME = T2.CITY_NAME WHERE T2.REGION = 'bay area' OR T1.FOOD_TYPE = 'chinese'",
    "question": "how many places for chinese or chinese are there in the bay area ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT COUNT(*) FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T2 ON T1.CITY_NAME = T2.CITY_NAME WHERE T2.COUNTY = 'santa cruz county' OR T1.NAME = 'jamerican cuisine'",
    "question": "how many restaurants are there in santa cruz county or jamerican cuisine ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T2.NAME != 'jamerican cuisine'",
    "question": "where is not jamerican cuisine ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME != 'alameda'",
    "question": "where can we find a restaurant in all cities except alameda ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME != 'alameda'",
    "question": "give me a restaurant not in alameda ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME != 'alameda'",
    "question": "where is a restaurant not in alameda ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME != 'alameda'",
    "question": "give me some restaurants not in alameda ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT COUNT(*) FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN LOCATION AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T2.CITY_NAME = 'palo alto' OR T1.FOOD_TYPE = 'french'",
    "question": "how many places for french food or palo alto are there ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT COUNT(*) FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN LOCATION AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T2.CITY_NAME = 'palo alto' OR T1.FOOD_TYPE = 'french'",
    "question": "how many restaurant are there in palo alto or serve french food ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT COUNT(*) FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN LOCATION AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T2.CITY_NAME = 'palo alto' OR T1.FOOD_TYPE = 'french'",
    "question": "how many places for french or palo alto are there ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT COUNT(*) FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T2 ON T1.CITY_NAME = T2.CITY_NAME WHERE T2.COUNTY = 'yolo county' OR T1.FOOD_TYPE = 'italian'",
    "question": "how many restaurants are in the yolo county or italian ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "what are some good places for arabic on buchanan or san francisco ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "give me some restaurants good for arabic food on buchanan or san francisco ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "give me a good place in san francisco or buchanan for arabic food ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "give me some good places on buchanan or san francisco for arabic food ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "give me a good restaurant on buchanan or san francisco for arabic food ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "where is a restaurant on buchanan or san francisco that serves good arabic food ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "give me some good restaurants on buchanan or san francisco for arabic food ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "give me some good places for arabic on buchanan or san francisco ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "where can i eat some good arabic food on buchanan or san francisco ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "where are some restaurants good for arabic food on buchanan or san francisco ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'san francisco' OR T1.STREET_NAME = 'buchanan' AND T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "give me a good arabic restaurant on buchanan or san francisco ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'bethel island' OR T1.STREET_NAME = 'bethel island rd'",
    "question": "give me some restaurants on bethel island rd or bethel island ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'bethel island' OR T1.STREET_NAME = 'bethel island rd'",
    "question": "give me a restaurant on bethel island rd or in bethel island ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'bethel island' OR T1.STREET_NAME = 'bethel island rd'",
    "question": "where can we find some restaurants on bethel island rd or in bethel island ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T3.REGION = 'bay area' OR T2.FOOD_TYPE = 'american' AND T2.RATING = (SELECT MAX( T24.RATING) FROM RESTAURANT AS T24 JOIN GEOGRAPHIC AS T25 ON T24.CITY_NAME = T25.CITY_NAME WHERE T25.REGION = 'bay area' AND T24.FOOD_TYPE = 'american')",
    "question": "give me the best american in the bay area or the bay area ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T3.REGION = 'yosemite AND mono lake area' OR T2.FOOD_TYPE = 'french' AND T2.RATING > 2.5",
    "question": "give me some restaurants good for french food in the yosemite or mono lake area ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T3.REGION = 'yosemite AND mono lake area' OR T2.FOOD_TYPE = 'french' AND T2.RATING > 2.5",
    "question": "where is a good french restaurant in the yosemite or mono lake area ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'mountain view' OR T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "what are some good places in mountain view or arabic food ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T1.CITY_NAME = 'mountain view' OR T2.FOOD_TYPE = 'arabic' AND T2.RATING > 2.5",
    "question": "what are some good restaurants in mountain view or for arabic food ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T2.CITY_NAME NOT IN (SELECT T23.CITY_NAME FROM GEOGRAPHIC AS T23 WHERE T23.REGION = 'bay area')",
    "question": "where can we find some restaurants that are not in the bay area ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T2.CITY_NAME NOT IN (SELECT T23.CITY_NAME FROM GEOGRAPHIC AS T23 WHERE T23.REGION = 'bay area')",
    "question": "give me some restaurants not in the bay area ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T2.CITY_NAME NOT IN (SELECT T23.CITY_NAME FROM GEOGRAPHIC AS T23 WHERE T23.REGION = 'bay area')",
    "question": "give me a restaurant not in the bay area ?"
  },
  {
    "db_id": "restaurants",
    "query": "SELECT T1.HOUSE_NUMBER, T2.NAME FROM LOCATION AS T1 JOIN GEOGRAPHIC AS T3 ON T1.CITY_NAME = T3.CITY_NAME JOIN RESTAURANT AS T2 ON T3.CITY_NAME = T2.CITY_NAME WHERE T2.CITY_NAME NOT IN (SELECT T23.CITY_NAME FROM GEOGRAPHIC AS T23 WHERE T23.REGION = 'bay area')",
    "question": "where can i find a restaurant that is not in the bay area ?"
  }
]