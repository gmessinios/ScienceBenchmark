[
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all information about disease mutations with amino acid residue (ref_aa) equal to E",
    "question_toks": [
      "Show",
      "me",
      "all",
      "information",
      "about",
      "disease",
      "mutations",
      "with",
      "amino",
      "acid",
      "residue",
      "(",
      "ref_aa",
      ")",
      "equal",
      "to",
      "E"
    ],
    "query": "SELECT * FROM disease_mutation WHERE ref_aa = 'E'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              75,
              false
            ],
            null
          ],
          "\"E\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "disease_mutation",
      "where",
      "ref_aa",
      "=",
      "\"E\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all disease mutations with ref_aa E",
    "question_toks": [
      "Show",
      "me",
      "all",
      "disease",
      "mutations",
      "with",
      "ref_aa",
      "E"
    ],
    "query": "SELECT * FROM disease_mutation WHERE ref_aa = 'E'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              75,
              false
            ],
            null
          ],
          "\"E\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "disease_mutation",
      "where",
      "ref_aa",
      "=",
      "\"E\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all information about disease mutations with ref_aa equal to F",
    "question_toks": [
      "Show",
      "me",
      "all",
      "information",
      "about",
      "disease",
      "mutations",
      "with",
      "ref_aa",
      "equal",
      "to",
      "F"
    ],
    "query": "SELECT * FROM disease_mutation WHERE ref_aa = 'F'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              75,
              false
            ],
            null
          ],
          "\"F\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "disease_mutation",
      "where",
      "ref_aa",
      "=",
      "\"F\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "How many FDA tests did manufacturer 23andMe?",
    "question_toks": [
      "How",
      "many",
      "FDA",
      "tests",
      "did",
      "manufacturer",
      "23andMe",
      "?"
    ],
    "query": "SELECT count(*)\nFROM biomarker_fda_test\nWHERE biomarker_fda_test.test_manufacturer = '23andMe'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            8
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"23andMe\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "biomarker_fda_test",
      "where",
      "biomarker_fda_test.test_manufacturer",
      "=",
      "\"23andMe\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "In how many FDA tests was manufacturer 23andMe involved?",
    "question_toks": [
      "In",
      "how",
      "many",
      "FDA",
      "tests",
      "was",
      "manufacturer",
      "23andMe",
      "involved",
      "?"
    ],
    "query": "SELECT count(*)\nFROM biomarker_fda_test\nWHERE biomarker_fda_test.test_manufacturer = '23andMe'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            8
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"23andMe\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "biomarker_fda_test",
      "where",
      "biomarker_fda_test.test_manufacturer",
      "=",
      "\"23andMe\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What is the common name for species 'Mus'?",
    "question_toks": [
      "What",
      "is",
      "the",
      "common",
      "name",
      "for",
      "species",
      "'",
      "Mus",
      "'",
      "?"
    ],
    "query": "SELECT speciescommonname\nFROM species\nWHERE genus = 'Mus'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            15
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                63,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ],
          "\"Mus\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "speciescommonname",
      "from",
      "species",
      "where",
      "genus",
      "=",
      "\"Mus\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What is the common name for species with genus Mus?",
    "question_toks": [
      "What",
      "is",
      "the",
      "common",
      "name",
      "for",
      "species",
      "with",
      "genus",
      "Mus",
      "?"
    ],
    "query": "SELECT speciescommonname\nFROM species\nWHERE genus = 'Mus'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            15
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                63,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ],
          "\"Mus\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "speciescommonname",
      "from",
      "species",
      "where",
      "genus",
      "=",
      "\"Mus\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What are the name of cancer types where the A1BG gene expression is significantly increased (up regulated)",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "of",
      "cancer",
      "types",
      "where",
      "the",
      "A1BG",
      "gene",
      "expression",
      "is",
      "significantly",
      "increased",
      "(",
      "up",
      "regulated",
      ")"
    ],
    "query": "SELECT disease.name\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE differential_expression.gene_symbol = 'A1BG'\n  and differential_expression.expression_change_direction = 'up'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              100,
              false
            ],
            null
          ],
          "\"A1BG\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              106,
              false
            ],
            null
          ],
          "\"up\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "disease.name",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "differential_expression.gene_symbol",
      "=",
      "\"A1BG\"",
      "and",
      "differential_expression.expression_change_direction",
      "=",
      "\"up\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What are the name of diseases where the expression of gene with symbol A1BG is up regulated (expression change direction)",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "of",
      "diseases",
      "where",
      "the",
      "expression",
      "of",
      "gene",
      "with",
      "symbol",
      "A1BG",
      "is",
      "up",
      "regulated",
      "(",
      "expression",
      "change",
      "direction",
      ")"
    ],
    "query": "SELECT disease.name\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE differential_expression.gene_symbol = 'A1BG'\n  and differential_expression.expression_change_direction = 'up'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              100,
              false
            ],
            null
          ],
          "\"A1BG\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              106,
              false
            ],
            null
          ],
          "\"up\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "disease.name",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "differential_expression.gene_symbol",
      "=",
      "\"A1BG\"",
      "and",
      "differential_expression.expression_change_direction",
      "=",
      "\"up\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What species are there?",
    "question_toks": [
      "What",
      "species",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT * FROM species",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            15
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "species"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all information about species",
    "question_toks": [
      "Show",
      "me",
      "all",
      "information",
      "about",
      "species"
    ],
    "query": "SELECT * FROM species",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            15
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "species"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Return the symbol and p-value for the expression of EGFR in lung cancer ",
    "question_toks": [
      "Return",
      "the",
      "symbol",
      "and",
      "p",
      "-",
      "value",
      "for",
      "the",
      "expression",
      "of",
      "EGFR",
      "in",
      "lung",
      "cancer"
    ],
    "query": "SELECT differential_expression.gene_symbol,\n       differential_expression.pvalue\nFROM differential_expression JOIN disease ON differential_expression.doid = disease.id\nWHERE differential_expression.gene_symbol = 'EGFR' AND disease.name = 'lung cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                103,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              100,
              false
            ],
            null
          ],
          "\"EGFR\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"lung cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.gene_symbol",
      ",",
      "differential_expression.pvalue",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "differential_expression.gene_symbol",
      "=",
      "\"EGFR\"",
      "and",
      "disease.name",
      "=",
      "\"lung cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Return gen symbol and pvalue for the expression of gene with symbol 'EGFR' in lung cancer ",
    "question_toks": [
      "Return",
      "gen",
      "symbol",
      "and",
      "pvalue",
      "for",
      "the",
      "expression",
      "of",
      "gene",
      "with",
      "symbol",
      "'",
      "EGFR",
      "'",
      "in",
      "lung",
      "cancer"
    ],
    "query": "SELECT differential_expression.gene_symbol,\n       differential_expression.pvalue\nFROM differential_expression JOIN disease ON differential_expression.doid = disease.id\nWHERE differential_expression.gene_symbol = 'EGFR' AND disease.name = 'lung cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                103,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              100,
              false
            ],
            null
          ],
          "\"EGFR\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"lung cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.gene_symbol",
      ",",
      "differential_expression.pvalue",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "differential_expression.gene_symbol",
      "=",
      "\"EGFR\"",
      "and",
      "disease.name",
      "=",
      "\"lung cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show all information about disease mutations",
    "question_toks": [
      "Show",
      "all",
      "information",
      "about",
      "disease",
      "mutations"
    ],
    "query": "SELECT * FROM disease_mutation",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "disease_mutation"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all disease mutations",
    "question_toks": [
      "Show",
      "me",
      "all",
      "disease",
      "mutations"
    ],
    "query": "SELECT * FROM disease_mutation",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "disease_mutation"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "How many healthy expression are there for 'late adult stage'?",
    "question_toks": [
      "How",
      "many",
      "healthy",
      "expression",
      "are",
      "there",
      "for",
      "'",
      "late",
      "adult",
      "stage",
      "'",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM healthy_expression JOIN stage ON healthy_expression.uberon_developmental_id = stage.id WHERE stage.name = 'late adult stage'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            18
          ],
          [
            "table_unit",
            16
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                82,
                false
              ],
              null
            ],
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              65,
              false
            ],
            null
          ],
          "\"late adult stage\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "healthy_expression",
      "join",
      "stage",
      "on",
      "healthy_expression.uberon_developmental_id",
      "=",
      "stage.id",
      "where",
      "stage.name",
      "=",
      "\"late adult stage\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "How many healthy expression are there for stage name starting with 'late adult'?",
    "question_toks": [
      "How",
      "many",
      "healthy",
      "expression",
      "are",
      "there",
      "for",
      "stage",
      "name",
      "starting",
      "with",
      "'",
      "late",
      "adult",
      "'",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM healthy_expression JOIN stage ON healthy_expression.uberon_developmental_id = stage.id WHERE stage.name LIKE 'late adult%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            18
          ],
          [
            "table_unit",
            16
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                82,
                false
              ],
              null
            ],
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              65,
              false
            ],
            null
          ],
          "\"late adult%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "healthy_expression",
      "join",
      "stage",
      "on",
      "healthy_expression.uberon_developmental_id",
      "=",
      "stage.id",
      "where",
      "stage.name",
      "like",
      "\"late adult%\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show name of diseases where the A1BG gene expression is statistically significant",
    "question_toks": [
      "Show",
      "name",
      "of",
      "diseases",
      "where",
      "the",
      "A1BG",
      "gene",
      "expression",
      "is",
      "statistically",
      "significant"
    ],
    "query": "SELECT disease.name\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE differential_expression.gene_symbol = 'A1BG'\n  and differential_expression.statistical_significance = 'Yes'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              100,
              false
            ],
            null
          ],
          "\"A1BG\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              105,
              false
            ],
            null
          ],
          "\"Yes\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "disease.name",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "differential_expression.gene_symbol",
      "=",
      "\"A1BG\"",
      "and",
      "differential_expression.statistical_significance",
      "=",
      "\"Yes\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show name of diseases where the gene expression with symbol A1BG has a statistical significance of 'Yes'",
    "question_toks": [
      "Show",
      "name",
      "of",
      "diseases",
      "where",
      "the",
      "gene",
      "expression",
      "with",
      "symbol",
      "A1BG",
      "has",
      "a",
      "statistical",
      "significance",
      "of",
      "'",
      "Yes",
      "'"
    ],
    "query": "SELECT disease.name\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE differential_expression.gene_symbol = 'A1BG'\n  and differential_expression.statistical_significance = 'Yes'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              100,
              false
            ],
            null
          ],
          "\"A1BG\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              105,
              false
            ],
            null
          ],
          "\"Yes\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "disease.name",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "differential_expression.gene_symbol",
      "=",
      "\"A1BG\"",
      "and",
      "differential_expression.statistical_significance",
      "=",
      "\"Yes\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me the description of all biomarkers",
    "question_toks": [
      "Show",
      "me",
      "the",
      "description",
      "of",
      "all",
      "biomarkers"
    ],
    "query": "SELECT biomarker_description FROM biomarker",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker_description",
      "from",
      "biomarker"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get a list of all biomarker descriptions",
    "question_toks": [
      "Get",
      "a",
      "list",
      "of",
      "all",
      "biomarker",
      "descriptions"
    ],
    "query": "SELECT biomarker_description FROM biomarker",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker_description",
      "from",
      "biomarker"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show number of fda test trials with test manufacturer 'ABBOTT MOLECULAR INC'",
    "question_toks": [
      "Show",
      "number",
      "of",
      "fda",
      "test",
      "trials",
      "with",
      "test",
      "manufacturer",
      "'",
      "ABBOTT",
      "MOLECULAR",
      "INC",
      "'"
    ],
    "query": "SELECT count(*)\nFROM biomarker_fda_test\n         JOIN biomarker_fda_test_trial\n              ON biomarker_fda_test.test_submission = biomarker_fda_test_trial.test_submission and\n                 biomarker_fda_test.test_trade_name = biomarker_fda_test_trial.test_trade_name\nWHERE test_manufacturer = 'ABBOTT MOLECULAR INC'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ],
            [
              0,
              24,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"ABBOTT MOLECULAR INC\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "biomarker_fda_test",
      "join",
      "biomarker_fda_test_trial",
      "on",
      "biomarker_fda_test.test_submission",
      "=",
      "biomarker_fda_test_trial.test_submission",
      "and",
      "biomarker_fda_test.test_trade_name",
      "=",
      "biomarker_fda_test_trial.test_trade_name",
      "where",
      "test_manufacturer",
      "=",
      "\"ABBOTT MOLECULAR INC\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "In how many fda test trials was test manufacturer 'ABBOTT MOLECULAR INC' involved?",
    "question_toks": [
      "In",
      "how",
      "many",
      "fda",
      "test",
      "trials",
      "was",
      "test",
      "manufacturer",
      "'",
      "ABBOTT",
      "MOLECULAR",
      "INC",
      "'",
      "involved",
      "?"
    ],
    "query": "SELECT count(*)\nFROM biomarker_fda_test\n         JOIN biomarker_fda_test_trial\n              ON biomarker_fda_test.test_submission = biomarker_fda_test_trial.test_submission and\n                 biomarker_fda_test.test_trade_name = biomarker_fda_test_trial.test_trade_name\nWHERE test_manufacturer = 'ABBOTT MOLECULAR INC'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ],
            [
              0,
              24,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"ABBOTT MOLECULAR INC\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "biomarker_fda_test",
      "join",
      "biomarker_fda_test_trial",
      "on",
      "biomarker_fda_test.test_submission",
      "=",
      "biomarker_fda_test_trial.test_submission",
      "and",
      "biomarker_fda_test.test_trade_name",
      "=",
      "biomarker_fda_test_trial.test_trade_name",
      "where",
      "test_manufacturer",
      "=",
      "\"ABBOTT MOLECULAR INC\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show the gene symbol and the description of cancer biomarkers which are not in a panel",
    "question_toks": [
      "Show",
      "the",
      "gene",
      "symbol",
      "and",
      "the",
      "description",
      "of",
      "cancer",
      "biomarkers",
      "which",
      "are",
      "not",
      "in",
      "a",
      "panel"
    ],
    "query": "SELECT biomarker.gene_symbol, biomarker_description FROM biomarker WHERE test_is_a_panel = 'false'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"false\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker.gene_symbol",
      ",",
      "biomarker_description",
      "from",
      "biomarker",
      "where",
      "test_is_a_panel",
      "=",
      "\"false\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show the gene symbol and the description of cancer biomarkers with panel = 'false'",
    "question_toks": [
      "Show",
      "the",
      "gene",
      "symbol",
      "and",
      "the",
      "description",
      "of",
      "cancer",
      "biomarkers",
      "with",
      "panel",
      "=",
      "'",
      "false",
      "'"
    ],
    "query": "SELECT biomarker.gene_symbol, biomarker_description FROM biomarker WHERE test_is_a_panel = 'false'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"false\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker.gene_symbol",
      ",",
      "biomarker_description",
      "from",
      "biomarker",
      "where",
      "test_is_a_panel",
      "=",
      "\"false\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What is the test trade name for FDA tests which are actually used for predisposition?",
    "question_toks": [
      "What",
      "is",
      "the",
      "test",
      "trade",
      "name",
      "for",
      "FDA",
      "tests",
      "which",
      "are",
      "actually",
      "used",
      "for",
      "predisposition",
      "?"
    ],
    "query": "SELECT test_trade_name FROM biomarker_fda_test_use WHERE actual_use = 'predisposition'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"predisposition\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "test_trade_name",
      "from",
      "biomarker_fda_test_use",
      "where",
      "actual_use",
      "=",
      "\"predisposition\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What is the test trade name for FDA tests where actual use is 'predisposition'?",
    "question_toks": [
      "What",
      "is",
      "the",
      "test",
      "trade",
      "name",
      "for",
      "FDA",
      "tests",
      "where",
      "actual",
      "use",
      "is",
      "'",
      "predisposition",
      "'",
      "?"
    ],
    "query": "SELECT test_trade_name FROM biomarker_fda_test_use WHERE actual_use = 'predisposition'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ],
          "\"predisposition\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "test_trade_name",
      "from",
      "biomarker_fda_test_use",
      "where",
      "actual_use",
      "=",
      "\"predisposition\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show all information about diseases which contain cancer in the name",
    "question_toks": [
      "Show",
      "all",
      "information",
      "about",
      "diseases",
      "which",
      "contain",
      "cancer",
      "in",
      "the",
      "name"
    ],
    "query": "SELECT name FROM disease WHERE name like '%cancer%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"%cancer%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "disease",
      "where",
      "name",
      "like",
      "\"%cancer%\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show all information about diseases where the name contains 'cancer'",
    "question_toks": [
      "Show",
      "all",
      "information",
      "about",
      "diseases",
      "where",
      "the",
      "name",
      "contains",
      "'",
      "cancer",
      "'"
    ],
    "query": "SELECT name FROM disease WHERE name like '%cancer%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"%cancer%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "disease",
      "where",
      "name",
      "like",
      "\"%cancer%\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all biomarker titles and QA states for biomarker on EDRN in phase Two",
    "question_toks": [
      "Show",
      "me",
      "all",
      "biomarker",
      "titles",
      "and",
      "QA",
      "states",
      "for",
      "biomarker",
      "on",
      "EDRN",
      "in",
      "phase",
      "Two"
    ],
    "query": "SELECT biomarker_title, qa_state FROM biomarker_edrn WHERE phase = 'Two'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Two\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker_title",
      ",",
      "qa_state",
      "from",
      "biomarker_edrn",
      "where",
      "phase",
      "=",
      "\"Two\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me biomarker titles and qa states for biomarker in phase Two",
    "question_toks": [
      "Show",
      "me",
      "biomarker",
      "titles",
      "and",
      "qa",
      "states",
      "for",
      "biomarker",
      "in",
      "phase",
      "Two"
    ],
    "query": "SELECT biomarker_title, qa_state FROM biomarker_edrn WHERE phase = 'Two'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Two\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker_title",
      ",",
      "qa_state",
      "from",
      "biomarker_edrn",
      "where",
      "phase",
      "=",
      "\"Two\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me the gene symbol of biomarkers",
    "question_toks": [
      "Show",
      "me",
      "the",
      "gene",
      "symbol",
      "of",
      "biomarkers"
    ],
    "query": "SELECT gene_symbol FROM biomarker",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "gene_symbol",
      "from",
      "biomarker"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all gene symbols of biomarkers",
    "question_toks": [
      "Show",
      "me",
      "all",
      "gene",
      "symbols",
      "of",
      "biomarkers"
    ],
    "query": "SELECT gene_symbol FROM biomarker",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "gene_symbol",
      "from",
      "biomarker"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all biomarkers on the EDRN platform with type protein in phase two.",
    "question_toks": [
      "Show",
      "me",
      "all",
      "biomarkers",
      "on",
      "the",
      "EDRN",
      "platform",
      "with",
      "type",
      "protein",
      "in",
      "phase",
      "two",
      "."
    ],
    "query": "SELECT biomarker_title FROM biomarker_edrn WHERE biomarker_type = 'Protein' AND phase = 'Two'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Protein\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Two\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker_title",
      "from",
      "biomarker_edrn",
      "where",
      "biomarker_type",
      "=",
      "\"Protein\"",
      "and",
      "phase",
      "=",
      "\"Two\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me the title of all biomarkers on the EDRN platform with biomarker type Protein in phase Two.",
    "question_toks": [
      "Show",
      "me",
      "the",
      "title",
      "of",
      "all",
      "biomarkers",
      "on",
      "the",
      "EDRN",
      "platform",
      "with",
      "biomarker",
      "type",
      "Protein",
      "in",
      "phase",
      "Two",
      "."
    ],
    "query": "SELECT biomarker_title FROM biomarker_edrn WHERE biomarker_type = 'Protein' AND phase = 'Two'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Protein\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Two\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker_title",
      "from",
      "biomarker_edrn",
      "where",
      "biomarker_type",
      "=",
      "\"Protein\"",
      "and",
      "phase",
      "=",
      "\"Two\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all biomarkers on the EDRN platform which are not of type protein.",
    "question_toks": [
      "Show",
      "me",
      "all",
      "biomarkers",
      "on",
      "the",
      "EDRN",
      "platform",
      "which",
      "are",
      "not",
      "of",
      "type",
      "protein",
      "."
    ],
    "query": "SELECT biomarker_title FROM biomarker_edrn WHERE biomarker_type != 'Protein'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Protein\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker_title",
      "from",
      "biomarker_edrn",
      "where",
      "biomarker_type",
      "!=",
      "\"Protein\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me the title of biomarkers on the EDRN platform with biomarker type different from Protein.",
    "question_toks": [
      "Show",
      "me",
      "the",
      "title",
      "of",
      "biomarkers",
      "on",
      "the",
      "EDRN",
      "platform",
      "with",
      "biomarker",
      "type",
      "different",
      "from",
      "Protein",
      "."
    ],
    "query": "SELECT biomarker_title FROM biomarker_edrn WHERE biomarker_type != 'Protein'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Protein\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker_title",
      "from",
      "biomarker_edrn",
      "where",
      "biomarker_type",
      "!=",
      "\"Protein\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Identify a list of genes expressed in lung cancer",
    "question_toks": [
      "Identify",
      "a",
      "list",
      "of",
      "genes",
      "expressed",
      "in",
      "lung",
      "cancer"
    ],
    "query": "SELECT differential_expression.gene_symbol\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE disease.name = 'lung cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"lung cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.gene_symbol",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"lung cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show all symbols of genes expressed in the disease 'lung cancer'",
    "question_toks": [
      "Show",
      "all",
      "symbols",
      "of",
      "genes",
      "expressed",
      "in",
      "the",
      "disease",
      "'",
      "lung",
      "cancer",
      "'"
    ],
    "query": "SELECT differential_expression.gene_symbol\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE disease.name = 'lung cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"lung cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.gene_symbol",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"lung cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show biomarker gene symbol and description for 'breast cancer'",
    "question_toks": [
      "Show",
      "biomarker",
      "gene",
      "symbol",
      "and",
      "description",
      "for",
      "'",
      "breast",
      "cancer",
      "'"
    ],
    "query": "SELECT biomarker.gene_symbol, biomarker.biomarker_description\nFROM biomarker\n         JOIN biomarker_fda on biomarker.id = biomarker_fda.id\n         JOIN biomarker_fda_test ON biomarker_fda.test_submission = biomarker_fda_test.test_submission and\n                                    biomarker_fda.test_trade_name = biomarker_fda_test.test_trade_name\n         JOIN disease ON disease.id = biomarker_fda_test.doid\nWHERE disease.name = 'breast cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              28,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              26,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                55,
                false
              ],
              null
            ],
            [
              0,
              30,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"breast cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker.gene_symbol",
      ",",
      "biomarker.biomarker_description",
      "from",
      "biomarker",
      "join",
      "biomarker_fda",
      "on",
      "biomarker.id",
      "=",
      "biomarker_fda.id",
      "join",
      "biomarker_fda_test",
      "on",
      "biomarker_fda.test_submission",
      "=",
      "biomarker_fda_test.test_submission",
      "and",
      "biomarker_fda.test_trade_name",
      "=",
      "biomarker_fda_test.test_trade_name",
      "join",
      "disease",
      "on",
      "disease.id",
      "=",
      "biomarker_fda_test.doid",
      "where",
      "disease.name",
      "=",
      "\"breast cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get the biomarker gene symbol and biomarker description for disease with name 'breast cancer'",
    "question_toks": [
      "Get",
      "the",
      "biomarker",
      "gene",
      "symbol",
      "and",
      "biomarker",
      "description",
      "for",
      "disease",
      "with",
      "name",
      "'",
      "breast",
      "cancer",
      "'"
    ],
    "query": "SELECT biomarker.gene_symbol, biomarker.biomarker_description\nFROM biomarker\n         JOIN biomarker_fda on biomarker.id = biomarker_fda.id\n         JOIN biomarker_fda_test ON biomarker_fda.test_submission = biomarker_fda_test.test_submission and\n                                    biomarker_fda.test_trade_name = biomarker_fda_test.test_trade_name\n         JOIN disease ON disease.id = biomarker_fda_test.doid\nWHERE disease.name = 'breast cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              28,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              26,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                55,
                false
              ],
              null
            ],
            [
              0,
              30,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"breast cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker.gene_symbol",
      ",",
      "biomarker.biomarker_description",
      "from",
      "biomarker",
      "join",
      "biomarker_fda",
      "on",
      "biomarker.id",
      "=",
      "biomarker_fda.id",
      "join",
      "biomarker_fda_test",
      "on",
      "biomarker_fda.test_submission",
      "=",
      "biomarker_fda_test.test_submission",
      "and",
      "biomarker_fda.test_trade_name",
      "=",
      "biomarker_fda_test.test_trade_name",
      "join",
      "disease",
      "on",
      "disease.id",
      "=",
      "biomarker_fda_test.doid",
      "where",
      "disease.name",
      "=",
      "\"breast cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What are the different biomarker EDRN phases?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "biomarker",
      "EDRN",
      "phases",
      "?"
    ],
    "query": "SELECT DISTINCT phase from biomarker_edrn",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "phase",
      "from",
      "biomarker_edrn"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get all distinct biomarker EDRN phases",
    "question_toks": [
      "Get",
      "all",
      "distinct",
      "biomarker",
      "EDRN",
      "phases"
    ],
    "query": "SELECT DISTINCT phase from biomarker_edrn",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "phase",
      "from",
      "biomarker_edrn"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me the platform method an the study design for FDA tests from manufacturer 'Dako Denmark A/S'",
    "question_toks": [
      "Show",
      "me",
      "the",
      "platform",
      "method",
      "an",
      "the",
      "study",
      "design",
      "for",
      "FDA",
      "tests",
      "from",
      "manufacturer",
      "'",
      "Dako",
      "Denmark",
      "A",
      "/",
      "S",
      "'"
    ],
    "query": "SELECT platform_method, test_study_design\nFROM biomarker_fda_test\nWHERE test_manufacturer = 'Dako Denmark A/S'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            8
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Dako Denmark A/S\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "platform_method",
      ",",
      "test_study_design",
      "from",
      "biomarker_fda_test",
      "where",
      "test_manufacturer",
      "=",
      "\"Dako Denmark A/S\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "List the platform method an the test study design for FDA tests from test manufacturer Dako Denmark A/S",
    "question_toks": [
      "List",
      "the",
      "platform",
      "method",
      "an",
      "the",
      "test",
      "study",
      "design",
      "for",
      "FDA",
      "tests",
      "from",
      "test",
      "manufacturer",
      "Dako",
      "Denmark",
      "A",
      "/",
      "S"
    ],
    "query": "SELECT platform_method, test_study_design\nFROM biomarker_fda_test\nWHERE test_manufacturer = 'Dako Denmark A/S'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            8
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Dako Denmark A/S\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "platform_method",
      ",",
      "test_study_design",
      "from",
      "biomarker_fda_test",
      "where",
      "test_manufacturer",
      "=",
      "\"Dako Denmark A/S\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show the pvalue of differential expression of lung cancer",
    "question_toks": [
      "Show",
      "the",
      "pvalue",
      "of",
      "differential",
      "expression",
      "of",
      "lung",
      "cancer"
    ],
    "query": "SELECT differential_expression.pvalue\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE disease.name = 'lung cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                103,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"lung cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.pvalue",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"lung cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get the p-value of differential expressions for the disease 'lung cancer'",
    "question_toks": [
      "Get",
      "the",
      "p",
      "-",
      "value",
      "of",
      "differential",
      "expressions",
      "for",
      "the",
      "disease",
      "'",
      "lung",
      "cancer",
      "'"
    ],
    "query": "SELECT differential_expression.pvalue\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE disease.name = 'lung cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                103,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"lung cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.pvalue",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"lung cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show disease mutation chromosome positions for skin cancer",
    "question_toks": [
      "Show",
      "disease",
      "mutation",
      "chromosome",
      "positions",
      "for",
      "skin",
      "cancer"
    ],
    "query": "SELECT disease_mutation.chromosome_pos\nFROM disease_mutation\n         JOIN disease ON disease_mutation.doid = disease.id\nWHERE disease.name = 'skin cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                68,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"skin cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "disease_mutation.chromosome_pos",
      "from",
      "disease_mutation",
      "join",
      "disease",
      "on",
      "disease_mutation.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"skin cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "List all disease mutation chromosome positions data for disease skin cancer",
    "question_toks": [
      "List",
      "all",
      "disease",
      "mutation",
      "chromosome",
      "positions",
      "data",
      "for",
      "disease",
      "skin",
      "cancer"
    ],
    "query": "SELECT disease_mutation.chromosome_pos\nFROM disease_mutation\n         JOIN disease ON disease_mutation.doid = disease.id\nWHERE disease.name = 'skin cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                68,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"skin cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "disease_mutation.chromosome_pos",
      "from",
      "disease_mutation",
      "join",
      "disease",
      "on",
      "disease_mutation.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"skin cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "How many genes are there for species Homo?",
    "question_toks": [
      "How",
      "many",
      "genes",
      "are",
      "there",
      "for",
      "species",
      "Homo",
      "?"
    ],
    "query": "SELECT count(*) FROM xref_gene_ensembl JOIN species ON xref_gene_ensembl.speciesid = species.speciesid WHERE species.genus = 'Homo'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ],
          [
            "table_unit",
            15
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ],
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ],
          "\"Homo\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "xref_gene_ensembl",
      "join",
      "species",
      "on",
      "xref_gene_ensembl.speciesid",
      "=",
      "species.speciesid",
      "where",
      "species.genus",
      "=",
      "\"Homo\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "How many genes ensembles are there for species with genus Homo?",
    "question_toks": [
      "How",
      "many",
      "genes",
      "ensembles",
      "are",
      "there",
      "for",
      "species",
      "with",
      "genus",
      "Homo",
      "?"
    ],
    "query": "SELECT count(*) FROM xref_gene_ensembl JOIN species ON xref_gene_ensembl.speciesid = species.speciesid WHERE species.genus = 'Homo'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ],
          [
            "table_unit",
            15
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ],
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ],
          "\"Homo\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "xref_gene_ensembl",
      "join",
      "species",
      "on",
      "xref_gene_ensembl.speciesid",
      "=",
      "species.speciesid",
      "where",
      "species.genus",
      "=",
      "\"Homo\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show tests built by a manufacturer starting with 'Roche' ",
    "question_toks": [
      "Show",
      "tests",
      "built",
      "by",
      "a",
      "manufacturer",
      "starting",
      "with",
      "'",
      "Roche",
      "'"
    ],
    "query": "SELECT *\nFROM biomarker_fda_test\nWHERE test_manufacturer like 'Roche%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            8
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Roche%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "biomarker_fda_test",
      "where",
      "test_manufacturer",
      "like",
      "\"Roche%\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show submissions of biomarker FDA tests from test manufacturer starting with 'Roche' ",
    "question_toks": [
      "Show",
      "submissions",
      "of",
      "biomarker",
      "FDA",
      "tests",
      "from",
      "test",
      "manufacturer",
      "starting",
      "with",
      "'",
      "Roche",
      "'"
    ],
    "query": "SELECT test_submission\nFROM biomarker_fda_test\nWHERE test_manufacturer like 'Roche%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            8
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Roche%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "test_submission",
      "from",
      "biomarker_fda_test",
      "where",
      "test_manufacturer",
      "like",
      "\"Roche%\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show submissions of biomarker FDA tests from test manufacturer 'Roche Molecular Systems Inc.'",
    "question_toks": [
      "Show",
      "submissions",
      "of",
      "biomarker",
      "FDA",
      "tests",
      "from",
      "test",
      "manufacturer",
      "'",
      "Roche",
      "Molecular",
      "Systems",
      "Inc.",
      "'"
    ],
    "query": "SELECT *\nFROM biomarker_fda_test\nWHERE test_manufacturer = 'Roche Molecular Systems Inc.'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            8
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Roche Molecular Systems Inc.\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "biomarker_fda_test",
      "where",
      "test_manufacturer",
      "=",
      "\"Roche Molecular Systems Inc.\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me the description for FDA approved biomarkers with test approval status 'class II'",
    "question_toks": [
      "Show",
      "me",
      "the",
      "description",
      "for",
      "FDA",
      "approved",
      "biomarkers",
      "with",
      "test",
      "approval",
      "status",
      "'",
      "class",
      "II",
      "'"
    ],
    "query": "SELECT biomarker.biomarker_description\nFROM biomarker\n         JOIN biomarker_fda ON biomarker.id = biomarker_fda.id\n         JOIN biomarker_fda_test on biomarker_fda.test_submission = biomarker_fda_test.test_submission\nWHERE biomarker_fda_test.test_approval_status = 'class II'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ],
          "\"class II\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker.biomarker_description",
      "from",
      "biomarker",
      "join",
      "biomarker_fda",
      "on",
      "biomarker.id",
      "=",
      "biomarker_fda.id",
      "join",
      "biomarker_fda_test",
      "on",
      "biomarker_fda.test_submission",
      "=",
      "biomarker_fda_test.test_submission",
      "where",
      "biomarker_fda_test.test_approval_status",
      "=",
      "\"class II\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "List the descriptions of biomarkers for fda tests with approval status 'class II'",
    "question_toks": [
      "List",
      "the",
      "descriptions",
      "of",
      "biomarkers",
      "for",
      "fda",
      "tests",
      "with",
      "approval",
      "status",
      "'",
      "class",
      "II",
      "'"
    ],
    "query": "SELECT biomarker.biomarker_description\nFROM biomarker\n         JOIN biomarker_fda ON biomarker.id = biomarker_fda.id\n         JOIN biomarker_fda_test on biomarker_fda.test_submission = biomarker_fda_test.test_submission\nWHERE biomarker_fda_test.test_approval_status = 'class II'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ],
          "\"class II\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker.biomarker_description",
      "from",
      "biomarker",
      "join",
      "biomarker_fda",
      "on",
      "biomarker.id",
      "=",
      "biomarker_fda.id",
      "join",
      "biomarker_fda_test",
      "on",
      "biomarker_fda.test_submission",
      "=",
      "biomarker_fda_test.test_submission",
      "where",
      "biomarker_fda_test.test_approval_status",
      "=",
      "\"class II\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Which diseases (name) have a mutation with a coding sequence position of 102997?",
    "question_toks": [
      "Which",
      "diseases",
      "(",
      "name",
      ")",
      "have",
      "a",
      "mutation",
      "with",
      "a",
      "coding",
      "sequence",
      "position",
      "of",
      "102997",
      "?"
    ],
    "query": "SELECT disease.name\nFROM disease JOIN disease_mutation ON disease.id = disease_mutation.doid\nWHERE disease_mutation.cds_pos = 102997",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            17
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                55,
                false
              ],
              null
            ],
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              72,
              false
            ],
            null
          ],
          102997.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "disease.name",
      "from",
      "disease",
      "join",
      "disease_mutation",
      "on",
      "disease.id",
      "=",
      "disease_mutation.doid",
      "where",
      "disease_mutation.cds_pos",
      "=",
      "102997"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all diseases having a mutation with a coding sequence position (cds_pos) of 102997?",
    "question_toks": [
      "Show",
      "me",
      "all",
      "diseases",
      "having",
      "a",
      "mutation",
      "with",
      "a",
      "coding",
      "sequence",
      "position",
      "(",
      "cds_pos",
      ")",
      "of",
      "102997",
      "?"
    ],
    "query": "SELECT disease.name\nFROM disease JOIN disease_mutation ON disease.id = disease_mutation.doid\nWHERE disease_mutation.cds_pos = 102997",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ],
          [
            "table_unit",
            17
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                55,
                false
              ],
              null
            ],
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              72,
              false
            ],
            null
          ],
          102997.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "disease.name",
      "from",
      "disease",
      "join",
      "disease_mutation",
      "on",
      "disease.id",
      "=",
      "disease_mutation.doid",
      "where",
      "disease_mutation.cds_pos",
      "=",
      "102997"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show all information in differential expression",
    "question_toks": [
      "Show",
      "all",
      "information",
      "in",
      "differential",
      "expression"
    ],
    "query": "SELECT * FROM differential_expression",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "differential_expression"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get all differential expression",
    "question_toks": [
      "Get",
      "all",
      "differential",
      "expression"
    ],
    "query": "SELECT * FROM differential_expression",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "differential_expression"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Return all information from healthy expressions which have an expression score above the average.",
    "question_toks": [
      "Return",
      "all",
      "information",
      "from",
      "healthy",
      "expressions",
      "which",
      "have",
      "an",
      "expression",
      "score",
      "above",
      "the",
      "average",
      "."
    ],
    "query": "SELECT * FROM healthy_expression WHERE expression_score > (SELECT AVG(expression_score) FROM healthy_expression)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            18
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              87,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  18
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      87,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "healthy_expression",
      "where",
      "expression_score",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "expression_score",
      ")",
      "from",
      "healthy_expression",
      ")"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Return all expressions which have an expression score higher than the average expression score.",
    "question_toks": [
      "Return",
      "all",
      "expressions",
      "which",
      "have",
      "an",
      "expression",
      "score",
      "higher",
      "than",
      "the",
      "average",
      "expression",
      "score",
      "."
    ],
    "query": "SELECT * FROM healthy_expression WHERE expression_score > (SELECT AVG(expression_score) FROM healthy_expression)",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            18
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              87,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  18
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      87,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "healthy_expression",
      "where",
      "expression_score",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "expression_score",
      ")",
      "from",
      "healthy_expression",
      ")"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show all different gene symbols in differential expression",
    "question_toks": [
      "Show",
      "all",
      "different",
      "gene",
      "symbols",
      "in",
      "differential",
      "expression"
    ],
    "query": "SELECT DISTINCT gene_symbol FROM differential_expression",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "gene_symbol",
      "from",
      "differential_expression"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show the distinct gene symbols of differential expression",
    "question_toks": [
      "Show",
      "the",
      "distinct",
      "gene",
      "symbols",
      "of",
      "differential",
      "expression"
    ],
    "query": "SELECT DISTINCT gene_symbol FROM differential_expression",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "gene_symbol",
      "from",
      "differential_expression"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What are the symbols for biomarkers with type genomic for anatomical entity breast?",
    "question_toks": [
      "What",
      "are",
      "the",
      "symbols",
      "for",
      "biomarkers",
      "with",
      "type",
      "genomic",
      "for",
      "anatomical",
      "entity",
      "breast",
      "?"
    ],
    "query": "SELECT gene_symbol\nFROM biomarker\n         JOIN biomarker_edrn ON biomarker.id = biomarker_edrn.id\n         JOIN anatomical_entity ON biomarker_edrn.uberon_anatomical_id = anatomical_entity.id\nWHERE anatomical_entity.name = 'breast'\n  and biomarker_edrn.biomarker_type = 'Genomic'\n",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            19
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              88,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              89,
              false
            ],
            null
          ],
          "\"breast\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Genomic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "gene_symbol",
      "from",
      "biomarker",
      "join",
      "biomarker_edrn",
      "on",
      "biomarker.id",
      "=",
      "biomarker_edrn.id",
      "join",
      "anatomical_entity",
      "on",
      "biomarker_edrn.uberon_anatomical_id",
      "=",
      "anatomical_entity.id",
      "where",
      "anatomical_entity.name",
      "=",
      "\"breast\"",
      "and",
      "biomarker_edrn.biomarker_type",
      "=",
      "\"Genomic\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What are the symbols for biomarkers on the EDRN platform with biomarker type Genomic for anatomical entity 'breast'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "symbols",
      "for",
      "biomarkers",
      "on",
      "the",
      "EDRN",
      "platform",
      "with",
      "biomarker",
      "type",
      "Genomic",
      "for",
      "anatomical",
      "entity",
      "'",
      "breast",
      "'",
      "?"
    ],
    "query": "SELECT gene_symbol\nFROM biomarker\n         JOIN biomarker_edrn ON biomarker.id = biomarker_edrn.id\n         JOIN anatomical_entity ON biomarker_edrn.uberon_anatomical_id = anatomical_entity.id\nWHERE anatomical_entity.name = 'breast'\n  and biomarker_edrn.biomarker_type = 'Genomic'\n",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            19
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              88,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              89,
              false
            ],
            null
          ],
          "\"breast\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Genomic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "gene_symbol",
      "from",
      "biomarker",
      "join",
      "biomarker_edrn",
      "on",
      "biomarker.id",
      "=",
      "biomarker_edrn.id",
      "join",
      "anatomical_entity",
      "on",
      "biomarker_edrn.uberon_anatomical_id",
      "=",
      "anatomical_entity.id",
      "where",
      "anatomical_entity.name",
      "=",
      "\"breast\"",
      "and",
      "biomarker_edrn.biomarker_type",
      "=",
      "\"Genomic\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me all gene symbols expressed with a pvalue between 0.39 and 0.41",
    "question_toks": [
      "Show",
      "me",
      "all",
      "gene",
      "symbols",
      "expressed",
      "with",
      "a",
      "pvalue",
      "between",
      "0.39",
      "and",
      "0.41"
    ],
    "query": "SELECT gene_symbol FROM differential_expression WHERE pvalue > 0.39 AND pvalue < 0.41",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              103,
              false
            ],
            null
          ],
          0.39,
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              103,
              false
            ],
            null
          ],
          0.41,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "gene_symbol",
      "from",
      "differential_expression",
      "where",
      "pvalue",
      ">",
      "0.39",
      "and",
      "pvalue",
      "<",
      "0.41"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get all gene symbols from expressions with a p-value between 0.39 and 0.41",
    "question_toks": [
      "Get",
      "all",
      "gene",
      "symbols",
      "from",
      "expressions",
      "with",
      "a",
      "p",
      "-",
      "value",
      "between",
      "0.39",
      "and",
      "0.41"
    ],
    "query": "SELECT gene_symbol FROM differential_expression WHERE pvalue > 0.39 AND pvalue < 0.41",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              103,
              false
            ],
            null
          ],
          0.39,
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              103,
              false
            ],
            null
          ],
          0.41,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "gene_symbol",
      "from",
      "differential_expression",
      "where",
      "pvalue",
      ">",
      "0.39",
      "and",
      "pvalue",
      "<",
      "0.41"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show the distinct chromosome id's in mutations of breast cancer",
    "question_toks": [
      "Show",
      "the",
      "distinct",
      "chromosome",
      "i",
      "d",
      "'s",
      "in",
      "mutations",
      "of",
      "breast",
      "cancer"
    ],
    "query": "SELECT DISTINCT disease_mutation.chromosome_id\nFROM disease_mutation\n         JOIN disease ON disease_mutation.doid = disease.id\nWHERE disease.name = 'breast cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                67,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"breast cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "disease_mutation.chromosome_id",
      "from",
      "disease_mutation",
      "join",
      "disease",
      "on",
      "disease_mutation.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"breast cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show the different chromosome id's in mutations of disease 'breast cancer'",
    "question_toks": [
      "Show",
      "the",
      "different",
      "chromosome",
      "i",
      "d",
      "'s",
      "in",
      "mutations",
      "of",
      "disease",
      "'",
      "breast",
      "cancer",
      "'"
    ],
    "query": "SELECT DISTINCT disease_mutation.chromosome_id\nFROM disease_mutation\n         JOIN disease ON disease_mutation.doid = disease.id\nWHERE disease.name = 'breast cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                67,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"breast cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "disease_mutation.chromosome_id",
      "from",
      "disease_mutation",
      "join",
      "disease",
      "on",
      "disease_mutation.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"breast cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me the names of all anatomical entities which have a healthy expression with relative gene expression level LOW and a relative anatomical expression level of HIGH",
    "question_toks": [
      "Show",
      "me",
      "the",
      "names",
      "of",
      "all",
      "anatomical",
      "entities",
      "which",
      "have",
      "a",
      "healthy",
      "expression",
      "with",
      "relative",
      "gene",
      "expression",
      "level",
      "LOW",
      "and",
      "a",
      "relative",
      "anatomical",
      "expression",
      "level",
      "of",
      "HIGH"
    ],
    "query": "SELECT anatomical_entity.name\nFROM anatomical_entity\n         JOIN healthy_expression ON anatomical_entity.id = healthy_expression.uberon_anatomical_id\nWHERE expression_level_gene_relative = 'LOW'\n  AND expression_level_anatomical_relative = 'HIGH'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ],
          [
            "table_unit",
            18
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                88,
                false
              ],
              null
            ],
            [
              0,
              81,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                89,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              83,
              false
            ],
            null
          ],
          "\"LOW\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              84,
              false
            ],
            null
          ],
          "\"HIGH\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "anatomical_entity.name",
      "from",
      "anatomical_entity",
      "join",
      "healthy_expression",
      "on",
      "anatomical_entity.id",
      "=",
      "healthy_expression.uberon_anatomical_id",
      "where",
      "expression_level_gene_relative",
      "=",
      "\"LOW\"",
      "and",
      "expression_level_anatomical_relative",
      "=",
      "\"HIGH\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "List the names of anatomical entities having an expression with relative gene expression level LOW and a relative anatomical expression level of HIGH",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "anatomical",
      "entities",
      "having",
      "an",
      "expression",
      "with",
      "relative",
      "gene",
      "expression",
      "level",
      "LOW",
      "and",
      "a",
      "relative",
      "anatomical",
      "expression",
      "level",
      "of",
      "HIGH"
    ],
    "query": "SELECT anatomical_entity.name\nFROM anatomical_entity\n         JOIN healthy_expression ON anatomical_entity.id = healthy_expression.uberon_anatomical_id\nWHERE expression_level_gene_relative = 'LOW'\n  AND expression_level_anatomical_relative = 'HIGH'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ],
          [
            "table_unit",
            18
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                88,
                false
              ],
              null
            ],
            [
              0,
              81,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                89,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              83,
              false
            ],
            null
          ],
          "\"LOW\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              84,
              false
            ],
            null
          ],
          "\"HIGH\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "anatomical_entity.name",
      "from",
      "anatomical_entity",
      "join",
      "healthy_expression",
      "on",
      "anatomical_entity.id",
      "=",
      "healthy_expression.uberon_anatomical_id",
      "where",
      "expression_level_gene_relative",
      "=",
      "\"LOW\"",
      "and",
      "expression_level_anatomical_relative",
      "=",
      "\"HIGH\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me the name of anatomical entities",
    "question_toks": [
      "Show",
      "me",
      "the",
      "name",
      "of",
      "anatomical",
      "entities"
    ],
    "query": "SELECT name FROM anatomical_entity",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                89,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "anatomical_entity"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get the name of all anatomical entities starting with 'bone'",
    "question_toks": [
      "Get",
      "the",
      "name",
      "of",
      "all",
      "anatomical",
      "entities",
      "starting",
      "with",
      "'",
      "bone",
      "'"
    ],
    "query": "SELECT name FROM anatomical_entity WHERE name LIKE 'bone%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                89,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              89,
              false
            ],
            null
          ],
          "\"bone%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "anatomical_entity",
      "where",
      "name",
      "like",
      "\"bone%\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get all anatomical entities where the name starts 'bone'",
    "question_toks": [
      "Get",
      "all",
      "anatomical",
      "entities",
      "where",
      "the",
      "name",
      "starts",
      "'",
      "bone",
      "'"
    ],
    "query": "SELECT name FROM anatomical_entity WHERE name LIKE 'bone%'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                89,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              89,
              false
            ],
            null
          ],
          "\"bone%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "anatomical_entity",
      "where",
      "name",
      "like",
      "\"bone%\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show me the name and description of all anatomical entities.",
    "question_toks": [
      "Show",
      "me",
      "the",
      "name",
      "and",
      "description",
      "of",
      "all",
      "anatomical",
      "entities",
      "."
    ],
    "query": "SELECT name, description\nFROM anatomical_entity",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                89,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                90,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "description",
      "from",
      "anatomical_entity"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get name and description of anatomical entities.",
    "question_toks": [
      "Get",
      "name",
      "and",
      "description",
      "of",
      "anatomical",
      "entities",
      "."
    ],
    "query": "SELECT name, description\nFROM anatomical_entity",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                89,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                90,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      ",",
      "description",
      "from",
      "anatomical_entity"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What disease can occur in the liver?",
    "question_toks": [
      "What",
      "disease",
      "can",
      "occur",
      "in",
      "the",
      "liver",
      "?"
    ],
    "query": "SELECT disease.name\nFROM anatomical_entity\n         JOIN cancer_tissue ON anatomical_entity.id = cancer_tissue.uberon_anatomical_id\n         JOIN disease ON cancer_tissue.doid = disease.id\nWHERE anatomical_entity.name = 'liver'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ],
          [
            "table_unit",
            23
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                88,
                false
              ],
              null
            ],
            [
              0,
              99,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                98,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              89,
              false
            ],
            null
          ],
          "\"liver\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "disease.name",
      "from",
      "anatomical_entity",
      "join",
      "cancer_tissue",
      "on",
      "anatomical_entity.id",
      "=",
      "cancer_tissue.uberon_anatomical_id",
      "join",
      "disease",
      "on",
      "cancer_tissue.doid",
      "=",
      "disease.id",
      "where",
      "anatomical_entity.name",
      "=",
      "\"liver\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "List the name of diseases that can occur in the anatomical entity 'liver'",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "diseases",
      "that",
      "can",
      "occur",
      "in",
      "the",
      "anatomical",
      "entity",
      "'",
      "liver",
      "'"
    ],
    "query": "SELECT disease.name\nFROM anatomical_entity\n         JOIN cancer_tissue ON anatomical_entity.id = cancer_tissue.uberon_anatomical_id\n         JOIN disease ON cancer_tissue.doid = disease.id\nWHERE anatomical_entity.name = 'liver'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ],
          [
            "table_unit",
            23
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                88,
                false
              ],
              null
            ],
            [
              0,
              99,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                98,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              89,
              false
            ],
            null
          ],
          "\"liver\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "disease.name",
      "from",
      "anatomical_entity",
      "join",
      "cancer_tissue",
      "on",
      "anatomical_entity.id",
      "=",
      "cancer_tissue.uberon_anatomical_id",
      "join",
      "disease",
      "on",
      "cancer_tissue.doid",
      "=",
      "disease.id",
      "where",
      "anatomical_entity.name",
      "=",
      "\"liver\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show all different anatomical entities with a healthy expression score of more than 99.9",
    "question_toks": [
      "Show",
      "all",
      "different",
      "anatomical",
      "entities",
      "with",
      "a",
      "healthy",
      "expression",
      "score",
      "of",
      "more",
      "than",
      "99.9"
    ],
    "query": "SELECT DISTINCT anatomical_entity.name\nFROM anatomical_entity\n         JOIN healthy_expression ON anatomical_entity.id = healthy_expression.uberon_anatomical_id\nWHERE healthy_expression.expression_score > 99.0",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ],
          [
            "table_unit",
            18
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                88,
                false
              ],
              null
            ],
            [
              0,
              81,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                89,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              87,
              false
            ],
            null
          ],
          99.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "anatomical_entity.name",
      "from",
      "anatomical_entity",
      "join",
      "healthy_expression",
      "on",
      "anatomical_entity.id",
      "=",
      "healthy_expression.uberon_anatomical_id",
      "where",
      "healthy_expression.expression_score",
      ">",
      "99.0"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Return the name of anatomical entities with a healthy expression score higher than 99.9",
    "question_toks": [
      "Return",
      "the",
      "name",
      "of",
      "anatomical",
      "entities",
      "with",
      "a",
      "healthy",
      "expression",
      "score",
      "higher",
      "than",
      "99.9"
    ],
    "query": "SELECT anatomical_entity.name\nFROM anatomical_entity\n         JOIN healthy_expression ON anatomical_entity.id = healthy_expression.uberon_anatomical_id\nWHERE healthy_expression.expression_score > 99.0",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            19
          ],
          [
            "table_unit",
            18
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                88,
                false
              ],
              null
            ],
            [
              0,
              81,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                89,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              87,
              false
            ],
            null
          ],
          99.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "anatomical_entity.name",
      "from",
      "anatomical_entity",
      "join",
      "healthy_expression",
      "on",
      "anatomical_entity.id",
      "=",
      "healthy_expression.uberon_anatomical_id",
      "where",
      "healthy_expression.expression_score",
      ">",
      "99.0"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show distinct manufacturer of tests for gene BRAF ",
    "question_toks": [
      "Show",
      "distinct",
      "manufacturer",
      "of",
      "tests",
      "for",
      "gene",
      "BRAF"
    ],
    "query": "SELECT DISTINCT biomarker_fda_test.test_manufacturer\nFROM biomarker\n         JOIN biomarker_fda on biomarker.id = biomarker_fda.id\n         JOIN biomarker_fda_test\n              ON biomarker_fda.test_trade_name = biomarker_fda_test.test_trade_name AND biomarker_fda.test_submission = biomarker_fda_test.test_submission\nWHERE biomarker.gene_symbol = 'BRAF'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              26,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"BRAF\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "distinct",
      "biomarker_fda_test.test_manufacturer",
      "from",
      "biomarker",
      "join",
      "biomarker_fda",
      "on",
      "biomarker.id",
      "=",
      "biomarker_fda.id",
      "join",
      "biomarker_fda_test",
      "on",
      "biomarker_fda.test_trade_name",
      "=",
      "biomarker_fda_test.test_trade_name",
      "and",
      "biomarker_fda.test_submission",
      "=",
      "biomarker_fda_test.test_submission",
      "where",
      "biomarker.gene_symbol",
      "=",
      "\"BRAF\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show all FDA test manufacturer for biomarkers of gene BRAF ",
    "question_toks": [
      "Show",
      "all",
      "FDA",
      "test",
      "manufacturer",
      "for",
      "biomarkers",
      "of",
      "gene",
      "BRAF"
    ],
    "query": "SELECT biomarker_fda_test.test_manufacturer\nFROM biomarker\n         JOIN biomarker_fda on biomarker.id = biomarker_fda.id\n         JOIN biomarker_fda_test\n              ON biomarker_fda.test_trade_name = biomarker_fda_test.test_trade_name AND biomarker_fda.test_submission = biomarker_fda_test.test_submission\nWHERE biomarker.gene_symbol = 'BRAF'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              20,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              26,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"BRAF\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "biomarker_fda_test.test_manufacturer",
      "from",
      "biomarker",
      "join",
      "biomarker_fda",
      "on",
      "biomarker.id",
      "=",
      "biomarker_fda.id",
      "join",
      "biomarker_fda_test",
      "on",
      "biomarker_fda.test_trade_name",
      "=",
      "biomarker_fda_test.test_trade_name",
      "and",
      "biomarker_fda.test_submission",
      "=",
      "biomarker_fda_test.test_submission",
      "where",
      "biomarker.gene_symbol",
      "=",
      "\"BRAF\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What is the symbol of genes which are expressed in the disease stomach cancer with an adjusted p-value of more than 0.999?",
    "question_toks": [
      "What",
      "is",
      "the",
      "symbol",
      "of",
      "genes",
      "which",
      "are",
      "expressed",
      "in",
      "the",
      "disease",
      "stomach",
      "cancer",
      "with",
      "an",
      "adjusted",
      "p",
      "-",
      "value",
      "of",
      "more",
      "than",
      "0.999",
      "?"
    ],
    "query": "SELECT differential_expression.gene_symbol\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE differential_expression.adjpvalue > 0.999\nAND disease.name = 'stomach cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              104,
              false
            ],
            null
          ],
          0.999,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"stomach cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.gene_symbol",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "differential_expression.adjpvalue",
      ">",
      "0.999",
      "and",
      "disease.name",
      "=",
      "\"stomach cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What is the symbol of genes which are expressed in 'stomach cancer' with an adjusted p-value (adjpvalue) of more than 0.999?",
    "question_toks": [
      "What",
      "is",
      "the",
      "symbol",
      "of",
      "genes",
      "which",
      "are",
      "expressed",
      "in",
      "'",
      "stomach",
      "cancer",
      "'",
      "with",
      "an",
      "adjusted",
      "p",
      "-",
      "value",
      "(",
      "adjpvalue",
      ")",
      "of",
      "more",
      "than",
      "0.999",
      "?"
    ],
    "query": "SELECT differential_expression.gene_symbol\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE differential_expression.adjpvalue > 0.999\nAND disease.name = 'stomach cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              104,
              false
            ],
            null
          ],
          0.999,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"stomach cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.gene_symbol",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "differential_expression.adjpvalue",
      ">",
      "0.999",
      "and",
      "disease.name",
      "=",
      "\"stomach cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show all diseases which are not undefined",
    "question_toks": [
      "Show",
      "all",
      "diseases",
      "which",
      "are",
      "not",
      "undefined"
    ],
    "query": "SELECT * FROM disease WHERE name != 'undefined'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"undefined\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "disease",
      "where",
      "name",
      "!=",
      "\"undefined\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Which diseases have a name different from 'undefined'",
    "question_toks": [
      "Which",
      "diseases",
      "have",
      "a",
      "name",
      "different",
      "from",
      "'",
      "undefined",
      "'"
    ],
    "query": "SELECT * FROM disease WHERE name != 'undefined'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"undefined\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "disease",
      "where",
      "name",
      "!=",
      "\"undefined\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "List all disease names",
    "question_toks": [
      "List",
      "all",
      "disease",
      "names"
    ],
    "query": "SELECT name FROM disease",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "disease"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get all names from diseases",
    "question_toks": [
      "Get",
      "all",
      "names",
      "from",
      "diseases"
    ],
    "query": "SELECT name FROM disease",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "name",
      "from",
      "disease"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "How many disease mutations have a coding sequence position (cds_pos) of 1850?",
    "question_toks": [
      "How",
      "many",
      "disease",
      "mutations",
      "have",
      "a",
      "coding",
      "sequence",
      "position",
      "(",
      "cds_pos",
      ")",
      "of",
      "1850",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM disease_mutation WHERE cds_pos = 1850",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              72,
              false
            ],
            null
          ],
          1850.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "disease_mutation",
      "where",
      "cds_pos",
      "=",
      "1850"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "How many disease mutations have a coding-sequence position of 1850?",
    "question_toks": [
      "How",
      "many",
      "disease",
      "mutations",
      "have",
      "a",
      "coding",
      "-",
      "sequence",
      "position",
      "of",
      "1850",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM disease_mutation WHERE cds_pos = 1850",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            17
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              72,
              false
            ],
            null
          ],
          1850.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "disease_mutation",
      "where",
      "cds_pos",
      "=",
      "1850"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show all information about healthy expressions",
    "question_toks": [
      "Show",
      "all",
      "information",
      "about",
      "healthy",
      "expressions"
    ],
    "query": "SELECT * FROM healthy_expression",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            18
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "healthy_expression"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get all information about healthy expressions in anatomical entities",
    "question_toks": [
      "Get",
      "all",
      "information",
      "about",
      "healthy",
      "expressions",
      "in",
      "anatomical",
      "entities"
    ],
    "query": "SELECT *\nFROM healthy_expression\n         JOIN anatomical_entity ON healthy_expression.uberon_anatomical_id = anatomical_entity.id",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            18
          ],
          [
            "table_unit",
            19
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                81,
                false
              ],
              null
            ],
            [
              0,
              88,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "*",
      "from",
      "healthy_expression",
      "join",
      "anatomical_entity",
      "on",
      "healthy_expression.uberon_anatomical_id",
      "=",
      "anatomical_entity.id"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show number of test trials of 23andMe",
    "question_toks": [
      "Show",
      "number",
      "of",
      "test",
      "trials",
      "of",
      "23andMe"
    ],
    "query": "SELECT count(*)\nFROM biomarker_fda_test_trial\n         JOIN biomarker_fda_test ON biomarker_fda_test_trial.test_submission = biomarker_fda_test.test_submission and biomarker_fda_test_trial.test_trade_name = biomarker_fda_test.test_trade_name\nWHERE biomarker_fda_test.test_manufacturer = '23andMe'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              28,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"23andMe\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "biomarker_fda_test_trial",
      "join",
      "biomarker_fda_test",
      "on",
      "biomarker_fda_test_trial.test_submission",
      "=",
      "biomarker_fda_test.test_submission",
      "and",
      "biomarker_fda_test_trial.test_trade_name",
      "=",
      "biomarker_fda_test.test_trade_name",
      "where",
      "biomarker_fda_test.test_manufacturer",
      "=",
      "\"23andMe\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show number of test trials of test manufacturer '23andMe'",
    "question_toks": [
      "Show",
      "number",
      "of",
      "test",
      "trials",
      "of",
      "test",
      "manufacturer",
      "'",
      "23andMe",
      "'"
    ],
    "query": "SELECT count(*)\nFROM biomarker_fda_test_trial\n         JOIN biomarker_fda_test ON biomarker_fda_test_trial.test_submission = biomarker_fda_test.test_submission and biomarker_fda_test_trial.test_trade_name = biomarker_fda_test.test_trade_name\nWHERE biomarker_fda_test.test_manufacturer = '23andMe'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            [
              0,
              28,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ],
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"23andMe\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "biomarker_fda_test_trial",
      "join",
      "biomarker_fda_test",
      "on",
      "biomarker_fda_test_trial.test_submission",
      "=",
      "biomarker_fda_test.test_submission",
      "and",
      "biomarker_fda_test_trial.test_trade_name",
      "=",
      "biomarker_fda_test.test_trade_name",
      "where",
      "biomarker_fda_test.test_manufacturer",
      "=",
      "\"23andMe\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "How many stages do exist? ",
    "question_toks": [
      "How",
      "many",
      "stages",
      "do",
      "exist",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM stage",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            16
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "stage"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "How many stages are there?",
    "question_toks": [
      "How",
      "many",
      "stages",
      "are",
      "there",
      "?"
    ],
    "query": "SELECT COUNT(*) FROM stage",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            16
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "stage"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show the gene symbol of differential expression for lung cancer",
    "question_toks": [
      "Show",
      "the",
      "gene",
      "symbol",
      "of",
      "differential",
      "expression",
      "for",
      "lung",
      "cancer"
    ],
    "query": "SELECT differential_expression.gene_symbol\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE disease.name = 'lung cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"lung cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.gene_symbol",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"lung cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Show the gene symbol of differential expression for the disease 'lung cancer'",
    "question_toks": [
      "Show",
      "the",
      "gene",
      "symbol",
      "of",
      "differential",
      "expression",
      "for",
      "the",
      "disease",
      "'",
      "lung",
      "cancer",
      "'"
    ],
    "query": "SELECT differential_expression.gene_symbol\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE disease.name = 'lung cancer'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"lung cancer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.gene_symbol",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"lung cancer\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "What is the average probability for disease mutation impact predictions?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "probability",
      "for",
      "disease",
      "mutation",
      "impact",
      "predictions",
      "?"
    ],
    "query": "SELECT AVG(probability) FROM disease_mutation_impact_prediction",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            11
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "probability",
      ")",
      "from",
      "disease_mutation_impact_prediction"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get the average probability for mutation impact predictions?",
    "question_toks": [
      "Get",
      "the",
      "average",
      "probability",
      "for",
      "mutation",
      "impact",
      "predictions",
      "?"
    ],
    "query": "SELECT AVG(probability) FROM disease_mutation_impact_prediction",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            11
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "avg",
      "(",
      "probability",
      ")",
      "from",
      "disease_mutation_impact_prediction"
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Identify a list of genes expressed in lung cancer that are statistically significant",
    "question_toks": [
      "Identify",
      "a",
      "list",
      "of",
      "genes",
      "expressed",
      "in",
      "lung",
      "cancer",
      "that",
      "are",
      "statistically",
      "significant"
    ],
    "query": "SELECT differential_expression.gene_symbol\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE disease.name = 'lung cancer'\n  and statistical_significance = 'Yes'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"lung cancer\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              105,
              false
            ],
            null
          ],
          "\"Yes\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.gene_symbol",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"lung cancer\"",
      "and",
      "statistical_significance",
      "=",
      "\"Yes\""
    ]
  },
  {
    "db_id": "oncomx_v1_0_25_small",
    "question": "Get the symbol of genes expressed in the disease 'lung cancer' that have statistical significance set to 'Yes'",
    "question_toks": [
      "Get",
      "the",
      "symbol",
      "of",
      "genes",
      "expressed",
      "in",
      "the",
      "disease",
      "'",
      "lung",
      "cancer",
      "'",
      "that",
      "have",
      "statistical",
      "significance",
      "set",
      "to",
      "'",
      "Yes",
      "'"
    ],
    "query": "SELECT differential_expression.gene_symbol\nFROM differential_expression\n         JOIN disease ON differential_expression.doid = disease.id\nWHERE disease.name = 'lung cancer'\n  and statistical_significance = 'Yes'",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            24
          ],
          [
            "table_unit",
            13
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                101,
                false
              ],
              null
            ],
            [
              0,
              55,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                100,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              56,
              false
            ],
            null
          ],
          "\"lung cancer\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              105,
              false
            ],
            null
          ],
          "\"Yes\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "query_toks": [
      "select",
      "differential_expression.gene_symbol",
      "from",
      "differential_expression",
      "join",
      "disease",
      "on",
      "differential_expression.doid",
      "=",
      "disease.id",
      "where",
      "disease.name",
      "=",
      "\"lung cancer\"",
      "and",
      "statistical_significance",
      "=",
      "\"Yes\""
    ]
  }
]